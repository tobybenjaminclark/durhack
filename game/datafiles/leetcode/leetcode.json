[{
    "id": "1",
    "title": "Two Sum",
    "question": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.",
    "examples": [
        "Input: nums = [2,7,11,15], target = 9",
        "Output: [0,1]",
        "Output: Because nums[0] + nums[1] == 9, we return [0, 1].",
        "Input: nums = [3,2,4], target = 6",
        "Output: [1,2]",
        "Input: nums = [3,3], target = 6",
        "Output: [0,1]",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 104-109 <= nums[i] <= 109-109 <= target <= 109Only one valid answer exists."
    ]
},
{
    "id": "7",
    "title": "Reverse Integer",
    "question": "Given a signed 32-bit integer x, return x with its digits reversed.\n If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
    "examples": [
        "Input: x = 123",
        "Output: 321",
        "Input: x = -123",
        "Output: -321",
        "Input: x = 120",
        "Output: 21",
        "Input: x = 0",
        "Output: 0",
        ""
    ],
    "constraints": [
        "-231 <= x <= 231 - 1"
    ]
},
{
    "id": "35",
    "title": "Search Insert Position",
    "question": "Given a sorted array of distinct integers and a target value, return the index if the target is found.\n If not, return the index where it would be if it were inserted in order.\nYou must write an algorithm with O(log n) runtime complexity.",
    "examples": [
        "Input: nums = [1,3,5,6], target = 5",
        "Output: 2",
        "Input: nums = [1,3,5,6], target = 2",
        "Output: 1",
        "Input: nums = [1,3,5,6], target = 7",
        "Output: 4",
        "Input: nums = [1,3,5,6], target = 0",
        "Output: 0",
        "Input: nums = [1], target = 0",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-104 <= nums[i] <= 104nums contains distinct values sorted in ascending order.-104 <= target <= 104"
    ]
},
{
    "id": "485",
    "title": "Max Consecutive Ones",
    "question": "Given a binary array nums, return the maximum number of consecutive 1's in the array.",
    "examples": [
        "Input: nums = [1,1,0,1,1,1]",
        "Output: 3",
        "Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.",
        "Input: nums = [1,0,1,1,0,1]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105nums[i] is either 0 or 1."
    ]
},
{
    "id": "1498",
    "title": "Number of Subsequences That Satisfy the Given Sum Condition",
    "question": "Given an array of integers nums and an integer target.\nReturn the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target.\n Since the answer may be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: nums = [3,5,6,7], target = 9",
        "Output: 4",
        "Explanation: There are 4 subsequences that satisfy the condition.",
        "[3] -> Min value + max value <= target (3 + 3 <= 9)",
        "[3,5] -> (3 + 5 <= 9)",
        "[3,5,6] -> (3 + 6 <= 9)",
        "[3,6] -> (3 + 6 <= 9)",
        "Input: nums = [3,3,6,8], target = 10",
        "Output: 6",
        "Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).",
        "[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]Input: nums = [2,3,3,4,6,7], target = 12",
        "Output: 61",
        "Explanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).",
        "Number of valid subsequences (63 - 2 = 61).",
        "Input: nums = [5,2,4,1,7,6,8], target = 16",
        "Output: 127",
        "Explanation: All non-empty subset satisfy the condition (2^7 - 1) = 127"
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 1061 <= target <= 106"
    ]
},
{
    "id": "1503",
    "title": "Last Moment Before All Ants Fall Out of a Plank",
    "question": "We have a wooden plank of the length n units.\n Some ants are walking on the plank, each ant moves with speed 1 unit per second.\n Some of the ants move to the left, the other move to the right.\nWhen two ants moving in two different directions meet at some point, they change their directions and continue moving again.\n Assume changing directions doesn't take any additional time.\nWhen an ant reaches one end of the plank at a time t, it falls out of the plank imediately.\nGiven an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right.\n Return the moment when the last ant(s) fall out of the plank.",
    "examples": [
        "Input: n = 4, left = [4,3], right = [0,1]",
        "Output: 4",
        "Explanation: In the image above:",
        "-The ant at index 0 is named A and going to the right.",
        "-The ant at index 1 is named B and going to the right.",
        "-The ant at index 3 is named C and going to the left.",
        "-The ant at index 4 is named D and going to the left.",
        "Note that the last moment when an ant was on the plank is t = 4 second, after that it falls imediately out of the plank. (i. e. We can say that at t = 4. 0000000001, there is no ants on the plank).",
        "Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7]",
        "Output: 7",
        "Explanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall.",
        "Input: n = 7, left = [0,1,2,3,4,5,6,7], right = []",
        "Output: 7",
        "Explanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.",
        "Input: n = 9, left = [5], right = [4]",
        "Output: 5",
        "Explanation: At t = 1 second, both ants will be at the same intial position but with different direction.",
        "Input: n = 6, left = [6], right = [0]",
        "Output: 6",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^40 <= left. length <= n + 10 <= left[i] <= n0 <= right. length <= n + 10 <= right[i] <= n1 <= left. length + right. length <= n + 1All values of left and right are unique",
        " and each value can appear only in one of the two arrays."
    ]
},
{
    "id": "1504",
    "title": "Count Submatrices With All Ones",
    "question": "Given a rows * columns matrix mat of ones and zeros, return how many submatrices have all ones.",
    "examples": [
        "Input: mat = [[1,0,1],",
        "              [1,1,0],",
        "              [1,1,0]]",
        "Output: 13",
        "Explanation:",
        "There are 6 rectangles of side 1x1.",
        "There are 2 rectangles of side 1x2.",
        "There are 3 rectangles of side 2x1.",
        "There is 1 rectangle of side 2x2. ",
        "There is 1 rectangle of side 3x1.",
        "Total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.",
        "Input: mat = [[0,1,1,0],",
        "              [0,1,1,1],",
        "              [1,1,1,0]]",
        "Output: 24",
        "Explanation:",
        "There are 8 rectangles of side 1x1.",
        "There are 5 rectangles of side 1x2.",
        "There are 2 rectangles of side 1x3. ",
        "There are 4 rectangles of side 2x1.",
        "There are 2 rectangles of side 2x2. ",
        "There are 2 rectangles of side 3x1. ",
        "There is 1 rectangle of side 3x2. ",
        "Total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.",
        "Input: mat = [[1,1,1,1,1,1]]",
        "Output: 21",
        "Input: mat = [[1,0,1],[0,1,0],[1,0,1]]",
        "Output: 5",
        ""
    ],
    "constraints": [
        "1 <= rows <= 1501 <= columns <= 1500 <= mat[i][j] <= 1"
    ]
},
{
    "id": "1508",
    "title": "Range Sum of Sorted Subarray Sums",
    "question": "You are given the array nums consisting of n positive integers.\n You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.\nReturn the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array.\n Since the answer can be a huge number return it modulo 109 + 7.",
    "examples": [
        "Input: nums = [1,2,3,4], n = 4, left = 1, right = 5",
        "Output: 13 ",
        "Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. ",
        "Input: nums = [1,2,3,4], n = 4, left = 3, right = 4",
        "Output: 6",
        "Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.",
        "Input: nums = [1,2,3,4], n = 4, left = 1, right = 10",
        "Output: 50",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= nums. length <= 10001 <= nums[i] <= 1001 <= left <= right <= n * (n + 1) / 2"
    ]
},
{
    "id": "1509",
    "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
    "question": "Given an array nums, you are allowed to choose one element of nums and change it by any value in one move.\nReturn the minimum difference between the largest and smallest value of nums after perfoming at most 3 moves.",
    "examples": [
        "Input: nums = [5,3,2,4]",
        "Output: 0",
        "Explanation: Change the array [5,3,2,4] to [2,2,2,2].",
        "The difference between the maximum and minimum is 2-2 = 0. Input: nums = [1,5,0,10,14]",
        "Output: 1",
        "Explanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. ",
        "The difference between the maximum and minimum is 1-0 = 1.",
        "Input: nums = [6,6,0,1,1,4,6]",
        "Output: 2",
        "Input: nums = [1,5,6,14,15]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10^5-10^9 <= nums[i] <= 10^9"
    ]
},
{
    "id": "1513",
    "title": "Number of Substrings With Only 1s",
    "question": "Given a binary string s (a string consisting only of '0' and '1's).\nReturn the number of substrings with all characters 1's.\nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
        "Input: s = \"0110111\"",
        "Output: 9",
        "Explanation: There are 9 substring in total with only 1's characters.",
        "\"1\" -> 5 times.",
        "\"11\" -> 3 times.",
        "\"111\" -> 1 time. Input: s = \"101\"",
        "Output: 2",
        "Explanation: Substring \"1\" is shown 2 times in s.",
        "Input: s = \"111111\"",
        "Output: 21",
        "Explanation: Each substring contains only 1's characters.",
        "Input: s = \"000\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "s[i] == '0' or s[i] == '1'1 <= s. length <= 10^5"
    ]
},
{
    "id": "1514",
    "title": "Path with Maximum Probability",
    "question": "You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].\nGiven two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.\nIf there is no path from start to end, return 0.\n Your answer will be accepted if it differs from the correct answer by at most 1e-5.",
    "examples": [
        "Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0. 5,0. 5,0. 2], start = 0, end = 2",
        "Output: 0. 25000",
        "Explanation: There are two paths from start to end, one having a probability of success = 0. 2 and the other has 0. 5 * 0. 5 = 0. 25.",
        "Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0. 5,0. 5,0. 3], start = 0, end = 2",
        "Output: 0. 30000",
        "Input: n = 3, edges = [[0,1]], succProb = [0. 5], start = 0, end = 2",
        "Output: 0. 00000",
        "Explanation: There is no path between 0 and 2.",
        ""
    ],
    "constraints": [
        "2 <= n <= 10^40 <= start",
        " end < nstart != end0 <= a",
        " b < na != b0 <= succProb. length == edges. length <= 2*10^40 <= succProb[i] <= 1There is at most one edge between every two nodes."
    ]
},
{
    "id": "1519",
    "title": "Number of Nodes in the Sub-Tree With the Same Label",
    "question": "Given a tree (i.\ne.\n a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.\n The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.\ne.\n The node with the number i has the label labels[i]).\nThe edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.\nReturn an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.\nA subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.",
    "examples": [
        "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"",
        "Output: [2,1,1,1,1,1,1]",
        "Explanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.",
        "Node 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).",
        "Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"",
        "Output: [4,2,1,1]",
        "Explanation: The sub-tree of node 2 contains only node 2, so the answer is 1.",
        "The sub-tree of node 3 contains only node 3, so the answer is 1.",
        "The sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.",
        "The sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.",
        "Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"",
        "Output: [3,2,1,1,1]",
        "Input: n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = \"cbabaa\"",
        "Output: [1,2,1,1,2,1]",
        "Input: n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = \"aaabaaa\"",
        "Output: [6,5,4,1,3,2,1]",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^5edges. length == n - 1edges[i]. length == 20 <= ai",
        " bi < nai != bilabels. length == nlabels is consisting of only of lower-case English letters."
    ]
},
{
    "id": "1524",
    "title": "Number of Sub-arrays With Odd Sum",
    "question": "Given an array of integers arr, return the number of subarrays with an odd sum.\nSince the answer can be very large, return it modulo 109 + 7.",
    "examples": [
        "Input: arr = [1,3,5]",
        "Output: 4",
        "Explanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]",
        "All sub-arrays sum are [1,4,9,3,8,5].",
        "Odd sums are [1,9,3,5] so the answer is 4.",
        "Input: arr = [2,4,6]",
        "Output: 0",
        "Explanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]",
        "All sub-arrays sum are [2,6,12,4,10,6].",
        "All sub-arrays have even sum and the answer is 0.",
        "Input: arr = [1,2,3,4,5,6,7]",
        "Output: 16",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1051 <= arr[i] <= 100"
    ]
},
{
    "id": "1525",
    "title": "Number of Good Ways to Split a String",
    "question": "You are given a string s, a split is called good if you can split s into 2 non-empty strings p and q where its concatenation is equal to s and the number of distinct letters in p and q are the same.\nReturn the number of good splits you can make in s.",
    "examples": [
        "Input: s = \"aacaba\"",
        "Output: 2",
        "Explanation: There are 5 ways to split \"aacaba\" and 2 of them are good. ",
        "(\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.",
        "(\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.",
        "(\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).",
        "(\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).",
        "(\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively.",
        "Input: s = \"abcd\"",
        "Output: 1",
        "Explanation: Split the string as follows (\"ab\", \"cd\").",
        "Input: s = \"aaaaa\"",
        "Output: 4",
        "Explanation: All possible splits are good. Input: s = \"acbadbaada\"",
        "Output: 2",
        ""
    ],
    "constraints": [
        "s contains only lowercase English letters. 1 <= s. length <= 10^5"
    ]
},
{
    "id": "492",
    "title": "Construct the Rectangle",
    "question": "A web developer needs to know how to design a web page's size.\n So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.",
    "examples": [
        "Input: area = 4",
        "Output: [2,2]",
        "Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. ",
        "But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.",
        "Input: area = 37",
        "Output: [37,1]",
        "Input: area = 122122",
        "Output: [427,286]",
        ""
    ],
    "constraints": [
        "1 <= area <= 107"
    ]
},
{
    "id": "1529",
    "title": "Bulb Switcher IV",
    "question": "There is a room with n bulbs, numbered from 0 to n - 1, arranged in a row from left to right.\n Initially, all the bulbs are turned off.\nYour task is to obtain the configuration represented by target where target[i] is '1' if the ith bulb is turned on and is '0' if it is turned off.\nYou have a switch to flip the state of the bulb, a flip operation is defined as follows:When any bulb is flipped it means that if it is '0' it changes to '1' and if it is '1' it changes to '0'.\nReturn the minimum number of flips required to form target.",
    "examples": [
        "Input: target = \"10111\"",
        "Output: 3",
        "Explanation: Initial configuration \"00000\".",
        "flip from the third bulb:  \"00000\" -> \"00111\"",
        "flip from the first bulb:  \"00111\" -> \"11000\"",
        "flip from the second bulb:  \"11000\" -> \"10111\"",
        "We need at least 3 flip operations to form target. Input: target = \"101\"",
        "Output: 3",
        "Explanation: \"000\" -> \"111\" -> \"100\" -> \"101\".",
        "Input: target = \"00000\"",
        "Output: 0",
        "Input: target = \"001011101\"",
        "Output: 5",
        ""
    ],
    "constraints": [
        "Choose any bulb (index i) of your current configuration. Flip each bulb from index i to index n - 1. 1 <= target. length <= 105target[i] is either '0' or '1'."
    ]
},
{
    "id": "1530",
    "title": "Number of Good Leaf Nodes Pairs",
    "question": "Given the root of a binary tree and an integer distance.\n A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.\nReturn the number of good leaf node pairs in the tree.",
    "examples": [
        "Input: root = [1,2,3,null,4], distance = 3",
        "Output: 1",
        "Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.",
        "Input: root = [1,2,3,4,5,6,7], distance = 3",
        "Output: 2",
        "Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.",
        "Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3",
        "Output: 1",
        "Explanation: The only good pair is [2,5].",
        "Input: root = [100], distance = 1",
        "Output: 0",
        "Input: root = [1,1,1], distance = 2",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 2^10]. Each node's value is between [1",
        " 100]. 1 <= distance <= 10"
    ]
},
{
    "id": "1535",
    "title": "Find the Winner of an Array Game",
    "question": "Given an integer array arr of distinct integers and an integer k.\nA game will be played between the first two elements of the array (i.\ne.\n arr[0] and arr[1]).\n In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0 and the smaller integer moves to the end of the array.\n The game ends when an integer wins k consecutive rounds.\nReturn the integer which will win the game.\nIt is guaranteed that there will be a winner of the game.",
    "examples": [
        "Input: arr = [2,1,3,5,4,6,7], k = 2",
        "Output: 5",
        "Explanation: Let's see the rounds of the game:",
        "Round |       arr       | winner | win_count",
        "  1   | [2,1,3,5,4,6,7] | 2      | 1",
        "  2   | [2,3,5,4,6,7,1] | 3      | 1",
        "  3   | [3,5,4,6,7,1,2] | 5      | 1",
        "  4   | [5,4,6,7,1,2,3] | 5      | 2",
        "So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.",
        "Input: arr = [3,2,1], k = 10",
        "Output: 3",
        "Explanation: 3 will win the first 10 rounds consecutively.",
        "Input: arr = [1,9,8,2,3,7,6,4,5], k = 7",
        "Output: 9",
        "Input: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000",
        "Output: 99",
        ""
    ],
    "constraints": [
        "2 <= arr. length <= 10^51 <= arr[i] <= 10^6arr contains distinct integers. 1 <= k <= 10^9"
    ]
},
{
    "id": "1536",
    "title": "Minimum Swaps to Arrange a Binary Grid",
    "question": "Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.\nA grid is said to be valid if all the cells above the main diagonal are zeros.\nReturn the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.\nThe main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).",
    "examples": [
        "Input: grid = [[0,0,1],[1,1,0],[1,0,0]]",
        "Output: 3",
        "Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]",
        "Output: -1",
        "Explanation: All rows are similar, swaps have no effect on the grid.",
        "Input: grid = [[1,0,0],[1,1,0],[1,1,1]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "n == grid. lengthn == grid[i]. length1 <= n <= 200grid[i][j] is 0 or 1"
    ]
},
{
    "id": "1540",
    "title": "Can Convert String in K Moves",
    "question": "Given two strings s and t, your goal is to convert s into t in k moves or less.\nDuring the ith (1 <= i <= k) move you can:Shifting a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a').\n Shifting a character by i means applying the shift operations i times.\nRemember that any index j can be picked at most once.\nReturn true if it's possible to convert s into t in no more than k moves, otherwise return false.",
    "examples": [
        "Input: s = \"input\", t = \"ouput\", k = 9",
        "Output: true",
        "Explanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.",
        "Input: s = \"abc\", t = \"bcd\", k = 10",
        "Output: false",
        "Explanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.",
        "Input: s = \"aab\", t = \"bbb\", k = 27",
        "Output: true",
        "Explanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.",
        ""
    ],
    "constraints": [
        "Choose any index j (1-indexed) from s",
        " such that 1 <= j <= s. length and j has not been chosen in any previous move",
        " and shift the character at that index i times. Do nothing. 1 <= s. length",
        " t. length <= 10^50 <= k <= 10^9s",
        " t contain only lowercase English letters."
    ]
},
{
    "id": "1541",
    "title": "Minimum Insertions to Balance a Parentheses String",
    "question": "Given a parentheses string s containing only the characters '(' and ')'.\n A parentheses string is balanced if:In other words, we treat '(' as openning parenthesis and '))' as closing parenthesis.\nFor example, \"())\", \"())(())))\" and \"(())())))\" are balanced, \")()\", \"()))\" and \"(()))\" are not balanced.\nYou can insert the characters '(' and ')' at any position of the string to balance it if needed.\nReturn the minimum number of insertions needed to make s balanced.",
    "examples": [
        "Input: s = \"(()))\"",
        "Output: 1",
        "Explanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to to add one more ')' at the end of the string to be \"(())))\" which is balanced.",
        "Input: s = \"())\"",
        "Output: 0",
        "Explanation: The string is already balanced.",
        "Input: s = \"))())(\"",
        "Output: 3",
        "Explanation: Add '(' to match the first '))', Add '))' to match the last '('.",
        "Input: s = \"((((((\"",
        "Output: 12",
        "Explanation: Add 12 ')' to balance the string.",
        "Input: s = \")))))))\"",
        "Output: 5",
        "Explanation: Add 4 '(' at the beginning of the string and one ')' at the end. The string becomes \"(((())))))))\".",
        ""
    ],
    "constraints": [
        "Any left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'. Left parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'. 1 <= s. length <= 10^5s consists of '(' and ')' only."
    ]
},
{
    "id": "1545",
    "title": "Find Kth Bit in Nth Binary String",
    "question": "Given two positive integers n and k, the binary string  Sn is formed as follows:Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).\nFor example, the first 4 strings in the above sequence are:Return the kth bit in Sn.\n It is guaranteed that k is valid for the given n.",
    "examples": [
        "Input: n = 3, k = 1",
        "Output: \"0\"",
        "Explanation: S3 is \"0111001\". The first bit is \"0\".",
        "Input: n = 4, k = 11",
        "Output: \"1\"",
        "Explanation: S4 is \"011100110110001\". The 11th bit is \"1\".",
        "Input: n = 1, k = 1",
        "Output: \"0\"",
        "Input: n = 2, k = 3",
        "Output: \"1\"",
        ""
    ],
    "constraints": [
        "S1 = \"0\"Si = Si-1 + \"1\" + reverse(invert(Si-1)) for i > 1S1 = \"0\"S2 = \"011\"S3 = \"0111001\"S4 = \"011100110110001\"1 <= n <= 201 <= k <= 2n - 1"
    ]
},
{
    "id": "1546",
    "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
    "question": "Given an array nums and an integer target.\nReturn the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.",
    "examples": [
        "Input: nums = [1,1,1,1,1], target = 2",
        "Output: 2",
        "Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).",
        "Input: nums = [-1,3,5,1,4,2,-9], target = 6",
        "Output: 2",
        "Explanation: There are 3 subarrays with sum equal to 6.",
        "([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping. Input: nums = [-2,6,6,3,5,4,1,2,8], target = 10",
        "Output: 3",
        "Input: nums = [0,0,0], target = 0",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10^5-10^4 <= nums[i] <= 10^40 <= target <= 10^6"
    ]
},
{
    "id": "1551",
    "title": "Minimum Operations to Make Array Equal",
    "question": "You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.\ne.\n 0 <= i < n).\nIn one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.\ne.\n perform arr[x] -=1 and arr[y] += 1).\n The goal is to make all the elements of the array equal.\n It is guaranteed that all the elements of the array can be made equal using some operations.\nGiven an integer n, the length of the array.\n Return the minimum number of operations needed to make all the elements of arr equal.",
    "examples": [
        "Input: n = 3",
        "Output: 2",
        "Explanation: arr = [1, 3, 5]",
        "First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]",
        "In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].",
        "Input: n = 6",
        "Output: 9",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^4"
    ]
},
{
    "id": "1552",
    "title": "Magnetic Force Between Two Balls",
    "question": "In universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket.\n Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.\nRick stated that magnetic force between two different balls at positions x and y is |x - y|.\nGiven the integer array position and the integer m.\n Return the required force.",
    "examples": [
        "Input: position = [1,2,3,4,7], m = 3",
        "Output: 3",
        "Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.",
        "Input: position = [5,4,3,2,1,1000000000], m = 2",
        "Output: 999999999",
        "Explanation: We can use baskets 1 and 1000000000.",
        ""
    ],
    "constraints": [
        "n == position. length2 <= n <= 10^51 <= position[i] <= 10^9All integers in position are distinct. 2 <= m <= position. length"
    ]
},
{
    "id": "495",
    "title": "Teemo Attacking",
    "question": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds.\n More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1].\n If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\nYou are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\nReturn the total number of seconds that Ashe is poisoned.",
    "examples": [
        "Input: timeSeries = [1,4], duration = 2",
        "Output: 4",
        "Explanation: Teemo's attacks on Ashe go as follows:",
        "- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.",
        "- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.",
        "Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.",
        "Input: timeSeries = [1,2], duration = 2",
        "Output: 3",
        "Explanation: Teemo's attacks on Ashe go as follows:",
        "- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.",
        "- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.",
        "Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total."
    ],
    "constraints": [
        "1 <= timeSeries. length <= 1040 <= timeSeries[i]",
        " duration <= 107timeSeries is sorted in non-decreasing order."
    ]
},
{
    "id": "1557",
    "title": "Minimum Number of Vertices to Reach All Nodes",
    "question": "Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.\nFind the smallest set of vertices from which all nodes in the graph are reachable.\n It's guaranteed that a unique solution exists.\nNotice that you can return the vertices in any order.",
    "examples": [
        "Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]",
        "Output: [0,3]",
        "Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3]. Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]",
        "Output: [0,2,3]",
        "Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.",
        ""
    ],
    "constraints": [
        "2 <= n <= 10^51 <= edges. length <= min(10^5",
        " n * (n - 1) / 2)edges[i]. length == 20 <= fromi",
        " toi < nAll pairs (fromi",
        " toi) are distinct."
    ]
},
{
    "id": "1558",
    "title": "Minimum Numbers of Function Calls to Make Target Array",
    "question": "Your task is to form an integer array nums from an initial array of zeros arr that is the same size as nums.\nReturn the minimum number of function calls to make nums from arr.\nThe answer is guaranteed to fit in a 32-bit signed integer.",
    "examples": [
        "Input: nums = [1,5]",
        "Output: 5",
        "Explanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).",
        "Double all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).",
        "Increment by 1 (both elements)  [0, 4] -> [1, 4] -> [1, 5] (2 operations).",
        "Total of operations: 1 + 2 + 2 = 5.",
        "Input: nums = [2,2]",
        "Output: 3",
        "Explanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).",
        "Double all the elements: [1, 1] -> [2, 2] (1 operation).",
        "Total of operations: 2 + 1 = 3.",
        "Input: nums = [4,2,5]",
        "Output: 6",
        "Explanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums).",
        "Input: nums = [3,2,2,4]",
        "Output: 7",
        "Input: nums = [2,4,8,16]",
        "Output: 8",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10^50 <= nums[i] <= 10^9"
    ]
},
{
    "id": "1561",
    "title": "Maximum Number of Coins You Can Get",
    "question": "There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:Given an array of integers piles where piles[i] is the number of coins in the ith pile.\nReturn the maximum number of coins which you can have.",
    "examples": [
        "Input: piles = [2,4,1,2,7,8]",
        "Output: 9",
        "Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.",
        "Choose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.",
        "The maximum number of coins which you can have are: 7 + 2 = 9.",
        "On the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.",
        "Input: piles = [2,4,5]",
        "Output: 4",
        "Input: piles = [9,8,7,6,5,1,2,3,4]",
        "Output: 18",
        ""
    ],
    "constraints": [
        "In each step",
        " you will choose any 3 piles of coins (not necessarily consecutive). Of your choice",
        " Alice will pick the pile with the maximum number of coins. You will pick the next pile with maximum number of coins. Your friend Bob will pick the last pile. Repeat until there are no more piles of coins. 3 <= piles. length <= 10^5piles. length % 3 == 01 <= piles[i] <= 10^4"
    ]
},
{
    "id": "1562",
    "title": "Find Latest Group of Size M",
    "question": "Given an array arr that represents a permutation of numbers from 1 to n.\n You have a binary string of size n that initially has all its bits set to zero.\nAt each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.\n You are given an integer m and you need to find the latest step at which there exists a group of ones of length m.\n A group of ones is a contiguous substring of 1s such that it cannot be extended in either direction.\nReturn the latest step at which there exists a group of ones of length exactly m.\n If no such group exists, return -1.",
    "examples": [
        "Input: arr = [3,5,1,2,4], m = 1",
        "Output: 4",
        "Explanation:",
        "Step 1: \"00100\", groups: [\"1\"]",
        "Step 2: \"00101\", groups: [\"1\", \"1\"]",
        "Step 3: \"10101\", groups: [\"1\", \"1\", \"1\"]",
        "Step 4: \"11101\", groups: [\"111\", \"1\"]",
        "Step 5: \"11111\", groups: [\"11111\"]",
        "The latest step at which there exists a group of size 1 is step 4. Input: arr = [3,1,5,4,2], m = 2",
        "Output: -1",
        "Explanation:",
        "Step 1: \"00100\", groups: [\"1\"]",
        "Step 2: \"10100\", groups: [\"1\", \"1\"]",
        "Step 3: \"10101\", groups: [\"1\", \"1\", \"1\"]",
        "Step 4: \"10111\", groups: [\"1\", \"111\"]",
        "Step 5: \"11111\", groups: [\"11111\"]",
        "No group of size 2 exists during any step.",
        "Input: arr = [1], m = 1",
        "Output: 1",
        "Input: arr = [2,1], m = 2",
        "Output: 2",
        ""
    ],
    "constraints": [
        "n == arr. length1 <= n <= 10^51 <= arr[i] <= nAll integers in arr are distinct. 1 <= m <= arr. length"
    ]
},
{
    "id": "1567",
    "title": "Maximum Length of Subarray With Positive Product",
    "question": "Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\nReturn the maximum length of a subarray with positive product.",
    "examples": [
        "Input: nums = [1,-2,-3,4]",
        "Output: 4",
        "Explanation: The array nums already has a positive product of 24.",
        "Input: nums = [0,1,-2,-3,-4]",
        "Output: 3",
        "Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.",
        "Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive. Input: nums = [-1,-2,-3,0,1]",
        "Output: 2",
        "Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].",
        "Input: nums = [-1,2]",
        "Output: 1",
        "Input: nums = [1,2,3,5,-6,4,0,10]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10^5-10^9 <= nums[i] <= 10^9"
    ]
},
{
    "id": "1573",
    "title": "Number of Ways to Split a String",
    "question": "Given a binary string s (a string consisting only of '0's and '1's), we can split s into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).\nReturn the number of ways s can be split such that the number of characters '1' is the same in s1, s2, and s3.\nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
        "Input: s = \"10101\"",
        "Output: 4",
        "Explanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.",
        "\"1|010|1\"",
        "\"1|01|01\"",
        "\"10|10|1\"",
        "\"10|1|01\"",
        "Input: s = \"1001\"",
        "Output: 0",
        "Input: s = \"0000\"",
        "Output: 3",
        "Explanation: There are three ways to split s in 3 parts.",
        "\"0|0|00\"",
        "\"0|00|0\"",
        "\"00|0|0\"",
        "Input: s = \"100100010100110\"",
        "Output: 12",
        ""
    ],
    "constraints": [
        "3 <= s. length <= 10^5s[i] is '0' or '1'."
    ]
},
{
    "id": "1574",
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "question": "Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.\nA subarray is a contiguous subsequence of the array.\nReturn the length of the shortest subarray to remove.",
    "examples": [
        "Input: arr = [1,2,3,10,4,2,3,5]",
        "Output: 3",
        "Explanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.",
        "Another correct solution is to remove the subarray [3,10,4]. Input: arr = [5,4,3,2,1]",
        "Output: 4",
        "Explanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].",
        "Input: arr = [1,2,3]",
        "Output: 0",
        "Explanation: The array is already non-decreasing. We do not need to remove any elements.",
        "Input: arr = [1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 10^50 <= arr[i] <= 10^9"
    ]
},
{
    "id": "1577",
    "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "question": "Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:",
    "examples": [
        "Input: nums1 = [7,4], nums2 = [5,2,8,9]",
        "Output: 1",
        "Explanation: Type 1: (1,1,2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8). ",
        "Input: nums1 = [1,1], nums2 = [1,1,1]",
        "Output: 9",
        "Explanation: All Triplets are valid, because 1^2 = 1 * 1.",
        "Type 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]^2 = nums2[j] * nums2[k].",
        "Type 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k].",
        "Input: nums1 = [7,7,8,3], nums2 = [1,2,9,7]",
        "Output: 2",
        "Explanation: There are 2 valid triplets.",
        "Type 1: (3,0,2).  nums1[3]^2 = nums2[0] * nums2[2].",
        "Type 2: (3,0,1).  nums2[3]^2 = nums1[0] * nums1[1].",
        "Input: nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]",
        "Output: 0",
        "Explanation: There are no valid triplets.",
        ""
    ],
    "constraints": [
        "Type 1: Triplet (i",
        " j",
        " k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1. length and 0 <= j < k < nums2. length. Type 2: Triplet (i",
        " j",
        " k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2. length and 0 <= j < k < nums1. length. 1 <= nums1. length",
        " nums2. length <= 10001 <= nums1[i]",
        " nums2[i] <= 10^5"
    ]
},
{
    "id": "1578",
    "title": "Minimum Deletion Cost to Avoid Repeating Letters",
    "question": "Given a string s and an array of integers cost where cost[i] is the cost of deleting the ith character in s.\nReturn the minimum cost of deletions such that there are no two identical letters next to each other.\nNotice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.",
    "examples": [
        "Input: s = \"abaac\", cost = [1,2,3,4,5]",
        "Output: 3",
        "Explanation: Delete the letter \"a\" with cost 3 to get \"abac\" (String without two identical letters next to each other).",
        "Input: s = \"abc\", cost = [1,2,3]",
        "Output: 0",
        "Explanation: You don't need to delete any character because there are no identical letters next to each other.",
        "Input: s = \"aabaa\", cost = [1,2,3,4,1]",
        "Output: 2",
        "Explanation: Delete the first and the last character, getting the string (\"aba\").",
        ""
    ],
    "constraints": [
        "s. length == cost. length1 <= s. length",
        " cost. length <= 10^51 <= cost[i] <= 10^4s contains only lowercase English letters."
    ]
},
{
    "id": "1583",
    "title": "Count Unhappy Friends",
    "question": "You are given a list of preferences for n friends, where n is always even.\nFor each person i, preferences[i] contains a list of friends sorted in the order of preference.\n In other words, a friend earlier in the list is more preferred than a friend later in the list.\n Friends in each list are denoted by integers from 0 to n-1.\nAll the friends are divided into pairs.\n The pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi.\nHowever, this pairing may cause some of the friends to be unhappy.\n A friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but:Return the number of unhappy friends.",
    "examples": [
        "Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]",
        "Output: 2",
        "Explanation:",
        "Friend 1 is unhappy because:",
        "- 1 is paired with 0 but prefers 3 over 0, and",
        "- 3 prefers 1 over 2.",
        "Friend 3 is unhappy because:",
        "- 3 is paired with 2 but prefers 1 over 2, and",
        "- 1 prefers 3 over 0.",
        "Friends 0 and 2 are happy.",
        "Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]",
        "Output: 0",
        "Explanation: Both friends 0 and 1 are happy.",
        "Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "x prefers u over y",
        " andu prefers x over v. 2 <= n <= 500n is even. preferences. length == npreferences[i]. length == n - 10 <= preferences[i][j] <= n - 1preferences[i] does not contain i. All values in preferences[i] are unique. pairs. length == n/2pairs[i]. length == 2xi != yi0 <= xi",
        " yi <= n - 1Each person is contained in exactly one pair."
    ]
},
{
    "id": "496",
    "title": "Next Greater Element I",
    "question": "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 <= i < nums1.\nlength, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2.\n If there is no next greater element, then the answer for this query is -1.\nReturn an array ans of length nums1.\nlength such that ans[i] is the next greater element as described above.",
    "examples": [
        "Input: nums1 = [4,1,2], nums2 = [1,3,4,2]",
        "Output: [-1,3,-1]",
        "Explanation: The next greater element for each value of nums1 is as follows:",
        "- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.",
        "- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.",
        "- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.",
        "Input: nums1 = [2,4], nums2 = [1,2,3,4]",
        "Output: [3,-1]",
        "Explanation: The next greater element for each value of nums1 is as follows:",
        "- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.",
        "- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.",
        ""
    ],
    "constraints": [
        "1 <= nums1. length <= nums2. length <= 10000 <= nums1[i]",
        " nums2[i] <= 104All integers in nums1 and nums2 are unique. All the integers of nums1 also appear in nums2."
    ]
},
{
    "id": "1584",
    "title": "Min Cost to Connect All Points",
    "question": "You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\nThe cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.\nReturn the minimum cost to make all points connected.\n All points are connected if there is exactly one simple path between any two points.",
    "examples": [
        "Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]",
        "Output: 20",
        "Explanation:",
        "",
        "We can connect the points as shown above to get the minimum cost of 20.",
        "Notice that there is a unique path between every pair of points.",
        "Input: points = [[3,12],[-2,5],[-4,1]]",
        "Output: 18",
        "Input: points = [[0,0],[1,1],[1,0],[-1,1]]",
        "Output: 4",
        "Input: points = [[-1000000,-1000000],[1000000,1000000]]",
        "Output: 4000000",
        "Input: points = [[0,0]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= points. length <= 1000-106 <= xi",
        " yi <= 106All pairs (xi",
        " yi) are distinct."
    ]
},
{
    "id": "1589",
    "title": "Maximum Sum Obtained of Any Permutation",
    "question": "We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi].\n The ith request asks for the sum of nums[starti] + nums[starti + 1] + .\n.\n.\n + nums[endi - 1] + nums[endi].\n Both starti and endi are 0-indexed.\nReturn the maximum total sum of all requests among all permutations of nums.\nSince the answer may be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]",
        "Output: 19",
        "Explanation: One permutation of nums is [2,1,3,4,5] with the following result: ",
        "requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8",
        "requests[1] -> nums[0] + nums[1] = 2 + 1 = 3",
        "Total sum: 8 + 3 = 11.",
        "A permutation with a higher total sum is [3,5,4,2,1] with the following result:",
        "requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11",
        "requests[1] -> nums[0] + nums[1] = 3 + 5  = 8",
        "Total sum: 11 + 8 = 19, which is the best that you can do.",
        "Input: nums = [1,2,3,4,5,6], requests = [[0,1]]",
        "Output: 11",
        "Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]. Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]",
        "Output: 47",
        "Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10]."
    ],
    "constraints": [
        "n == nums. length1 <= n <= 1050 <= nums[i] <= 1051 <= requests. length <= 105requests[i]. length == 20 <= starti <= endi < n"
    ]
},
{
    "id": "1590",
    "title": "Make Sum Divisible by P",
    "question": "Given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p.\n It is not allowed to remove the whole array.\nReturn the length of the smallest subarray that you need to remove, or -1 if it's impossible.\nA subarray is defined as a contiguous block of elements in the array.",
    "examples": [
        "Input: nums = [3,1,4,2], p = 6",
        "Output: 1",
        "Explanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.",
        "Input: nums = [6,3,5,2], p = 9",
        "Output: 2",
        "Explanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.",
        "Input: nums = [1,2,3], p = 3",
        "Output: 0",
        "Explanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.",
        "Input: nums = [1,2,3], p = 7",
        "Output: -1",
        "Explanation: There is no way to remove a subarray in order to get a sum divisible by 7.",
        "Input: nums = [1000000000,1000000000,1000000000], p = 3",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 1091 <= p <= 109"
    ]
},
{
    "id": "1593",
    "title": "Split a String Into the Max Number of Unique Substrings",
    "question": "Given a string s, return the maximum number of unique substrings that the given string can be split into.\nYou can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string.\n However, you must split the substrings such that all of them are unique.\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
        "Input: s = \"ababccc\"",
        "Output: 5",
        "Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.",
        "Input: s = \"aba\"",
        "Output: 2",
        "Explanation: One way to split maximally is ['a', 'ba'].",
        "Input: s = \"aa\"",
        "Output: 1",
        "Explanation: It is impossible to split the string any further.",
        ""
    ],
    "constraints": [
        "\n1 <= s. length <= 16\n\ns contains only lower case English letters.\n"
    ]
},
{
    "id": "1594",
    "title": "Maximum Non Negative Product in a Matrix",
    "question": "You are given a rows x cols matrix grid.\n Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.\nAmong all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (rows - 1, cols - 1), find the path with the maximum non-negative product.\n The product of a path is the product of all integers in the grid cells visited along the path.\nReturn the maximum non-negative product modulo 109 + 7.\n If the maximum product is negative return -1.\nNotice that the modulo is performed after getting the maximum product.",
    "examples": [
        "Input: grid = [[-1,-2,-3],",
        "               [-2,-3,-3],",
        "               [-3,-3,-2]]",
        "Output: -1",
        "Explanation: It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.",
        "Input: grid = [[1,-2,1],",
        "               [1,-2,1],",
        "               [3,-4,1]]",
        "Output: 8",
        "Explanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).",
        "Input: grid = [[1, 3],",
        "               [0,-4]]",
        "Output: 0",
        "Explanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).",
        "Input: grid = [[ 1, 4,4,0],",
        "               [-2, 0,0,1],",
        "               [ 1,-1,1,1]]",
        "Output: 2",
        "Explanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).",
        ""
    ],
    "constraints": [
        "1 <= rows",
        " cols <= 15-4 <= grid[i][j] <= 4"
    ]
},
{
    "id": "1599",
    "title": "Maximum Profit of Operating a Centennial Wheel",
    "question": "You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people.\n You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.\nYou are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed).\n This means you must rotate the wheel i times before the customers[i] customers arrive.\n You cannot make customers wait if there is room in the gondola.\n Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\nYou can stop the wheel at any time, including before serving all customers.\n If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely.\n Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.\nReturn the minimum number of rotations you need to perform to maximize your profit.\n If there is no scenario where the profit is positive, return -1.",
    "examples": [
        "Input: customers = [8,3], boardingCost = 5, runningCost = 6",
        "Output: 3",
        "Explanation: The numbers written on the gondolas are the number of people currently there.",
        "1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.",
        "2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.",
        "3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.",
        "The highest profit was $37 after rotating the wheel 3 times. Input: customers = [10,9,6], boardingCost = 6, runningCost = 4",
        "Output: 7",
        "Explanation:",
        "1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.",
        "2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.",
        "3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.",
        "4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.",
        "5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.",
        "6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.",
        "7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.",
        "The highest profit was $122 after rotating the wheel 7 times.",
        "",
        "Input: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92",
        "Output: -1",
        "Explanation:",
        "1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.",
        "2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.",
        "3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.",
        "4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.",
        "5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.",
        "The profit was never positive, so return -1.",
        "Input: customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8",
        "Output: 9",
        "Explanation:",
        "1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4.",
        "2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. Current profit is 8 * $3 - 2 * $8 = $8.",
        "3. 6 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 12 * $3 - 3 * $8 = $12.",
        "4. 4 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 16 * $3 - 4 * $8 = $16.",
        "5. 7 customers arrive, 4 board and 17 wait, the wheel rotates. Current profit is 20 * $3 - 5 * $8 = $20.",
        "6. 4 board and 13 wait, the wheel rotates. Current profit is 24 * $3 - 6 * $8 = $24.",
        "7. 4 board and 9 wait, the wheel rotates. Current profit is 28 * $3 - 7 * $8 = $28.",
        "8. 4 board and 5 wait, the wheel rotates. Current profit is 32 * $3 - 8 * $8 = $32.",
        "9. 4 board and 1 waits, the wheel rotates. Current profit is 36 * $3 - 9 * $8 = $36.",
        "10. 1 board and 0 wait, the wheel rotates. Current profit is 37 * $3 - 10 * $8 = $31.",
        "The highest profit was $36 after rotating the wheel 9 times.",
        ""
    ],
    "constraints": [
        "n == customers. length1 <= n <= 1050 <= customers[i] <= 501 <= boardingCost",
        " runningCost <= 100"
    ]
},
{
    "id": "1600",
    "title": "Throne Inheritance",
    "question": "A kingdom consists of a king, his children, his grandchildren, and so on.\n Every once in a while, someone in the family dies or a child is born.\nThe kingdom has a well-defined order of inheritance that consists of the king as the first member.\n Let's define the recursive function Successor(x, curOrder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance.\nFor example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.\nUsing the above function, we can always obtain a unique order of inheritance.\nImplement the ThroneInheritance class:",
    "examples": [
        "Successor(x, curOrder):",
        "    if x has no children or all of x's children are in curOrder:",
        "        if x is the king return null",
        "        else return Successor(x's parent, curOrder)",
        "    else return x's oldest child who's not in curOrder",
        "Input",
        "[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]",
        "[[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]",
        "Output",
        "[null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]",
        "",
        "Explanation",
        "ThroneInheritance t= new ThroneInheritance(\"king\"); // order: king",
        "t. birth(\"king\", \"andy\"); // order: king > andy",
        "t. birth(\"king\", \"bob\"); // order: king > andy > bob",
        "t. birth(\"king\", \"catherine\"); // order: king > andy > bob > catherine",
        "t. birth(\"andy\", \"matthew\"); // order: king > andy > matthew > bob > catherine",
        "t. birth(\"bob\", \"alex\"); // order: king > andy > matthew > bob > alex > catherine",
        "t. birth(\"bob\", \"asha\"); // order: king > andy > matthew > bob > alex > asha > catherine",
        "t. getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"]",
        "t. death(\"bob\"); // order: king > andy > matthew > bob > alex > asha > catherine",
        "t. getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]",
        ""
    ],
    "constraints": [
        "ThroneInheritance(string kingName) Initializes an object of the ThroneInheritance class. The name of the king is given as part of the constructor. void birth(string parentName",
        " string childName) Indicates that parentName gave birth to childName. void death(string name) Indicates the death of name. The death of the person doesn't affect the Successor function nor the current inheritance order. You can treat it as just marking the person as dead. string[] getInheritanceOrder() Returns a list representing the current order of inheritance excluding dead people. 1 <= kingName. length",
        " parentName. length",
        " childName. length",
        " name. length <= 15kingName",
        " parentName",
        " childName",
        " and name consist of lowercase English letters only. All arguments childName and kingName are distinct. All name arguments of death will be passed to either the constructor or as childName to birth first. For each call to birth(parentName",
        " childName)",
        " it is guaranteed that parentName is alive. At most 105 calls will be made to birth and death. At most 10 calls will be made to getInheritanceOrder."
    ]
},
{
    "id": "1604",
    "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "question": "LeetCode company workers use key-cards to unlock office doors.\n Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used.\n The system emits an alert if any worker uses the key-card three or more times in a one-hour period.\nYou are given a list of strings keyName and keyTime where [keyName[i], keyTime[i]] corresponds to a person's name and the time when their key-card was used in a single day.\nAccess times are given in the 24-hour time format \"HH:MM\", such as \"23:51\" and \"09:49\".\nReturn a list of unique worker names who received an alert for frequent keycard use.\n Sort the names in ascending order alphabetically.\nNotice that \"10:00\" - \"11:00\" is considered to be within a one-hour period, while \"22:51\" - \"23:52\" is not considered to be within a one-hour period.",
    "examples": [
        "Input: keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]",
        "Output: [\"daniel\"]",
        "Explanation: \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\").",
        "Input: keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]",
        "Output: [\"bob\"]",
        "Explanation: \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\").",
        "Input: keyName = [\"john\",\"john\",\"john\"], keyTime = [\"23:58\",\"23:59\",\"00:01\"]",
        "Output: []",
        "Input: keyName = [\"leslie\",\"leslie\",\"leslie\",\"clare\",\"clare\",\"clare\",\"clare\"], keyTime = [\"13:00\",\"13:20\",\"14:00\",\"18:00\",\"18:51\",\"19:30\",\"19:49\"]",
        "Output: [\"clare\",\"leslie\"]",
        ""
    ],
    "constraints": [
        "1 <= keyName. length",
        " keyTime. length <= 105keyName. length == keyTime. lengthkeyTime[i] is in the format \"HH:MM\".[keyName[i]",
        " keyTime[i]] is unique. 1 <= keyName[i]. length <= 10keyName[i] contains only lowercase English letters."
    ]
},
{
    "id": "1605",
    "title": "Find Valid Matrix Given Row and Column Sums",
    "question": "You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row and colSum[j] is the sum of the elements of the jth column of a 2D matrix.\n In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.\nFind any matrix of non-negative integers of size rowSum.\nlength x colSum.\nlength that satisfies the rowSum and colSum requirements.\nReturn a 2D array representing any matrix that fulfills the requirements.\n It's guaranteed that at least one matrix that fulfills the requirements exists.",
    "examples": [
        "Input: rowSum = [3,8], colSum = [4,7]",
        "Output: [[3,0],",
        "         [1,7]]",
        "Explanation:",
        "0th row: 3 + 0 = 3 == rowSum[0]",
        "1st row: 1 + 7 = 8 == rowSum[1]",
        "0th column: 3 + 1 = 4 == colSum[0]",
        "1st column: 0 + 7 = 7 == colSum[1]",
        "The row and column sums match, and all matrix elements are non-negative.",
        "Another possible matrix is: [[1,2],",
        "                             [3,5]]",
        "Input: rowSum = [5,7,10], colSum = [8,6,8]",
        "Output: [[0,5,0],",
        "         [6,1,0],",
        "         [2,0,8]]",
        "Input: rowSum = [14,9], colSum = [6,9,8]",
        "Output: [[0,9,5],",
        "         [6,0,3]]",
        "Input: rowSum = [1,0], colSum = [1]",
        "Output: [[1],",
        "         [0]]",
        "Input: rowSum = [0], colSum = [0]",
        "Output: [[0]]",
        ""
    ],
    "constraints": [
        "1 <= rowSum. length",
        " colSum. length <= 5000 <= rowSum[i]",
        " colSum[i] <= 108sum(rows) == sum(columns)"
    ]
},
{
    "id": "1609",
    "title": "Even Odd Tree",
    "question": "A binary tree is named Even-Odd if it meets the following conditions:Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.",
    "examples": [
        "Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]",
        "Output: true",
        "Explanation: The node values on each level are:",
        "Level 0: [1]",
        "Level 1: [10,4]",
        "Level 2: [3,7,9]",
        "Level 3: [12,8,6,2]",
        "Since levels 0 and 2 are all odd and increasing, and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.",
        "Input: root = [5,4,2,3,3,7]",
        "Output: false",
        "Explanation: The node values on each level are:",
        "Level 0: [5]",
        "Level 1: [4,2]",
        "Level 2: [3,3,7]",
        "Node values in the level 2 must be in strictly increasing order, so the tree is not Even-Odd.",
        "Input: root = [5,9,1,3,5,7]",
        "Output: false",
        "Explanation: Node values in the level 1 should be even integers.",
        "Input: root = [1]",
        "Output: true",
        "Input: root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]",
        "Output: true",
        ""
    ],
    "constraints": [
        "The root of the binary tree is at level index 0",
        " its children are at level index 1",
        " their children are at level index 2",
        " etc. For every even-indexed level",
        " all nodes at the level have odd integer values in strictly increasing order (from left to right). For every odd-indexed level",
        " all nodes at the level have even integer values in strictly decreasing order (from left to right). The number of nodes in the tree is in the range [1",
        " 105]. 1 <= Node. val <= 106"
    ]
},
{
    "id": "500",
    "title": "Keyboard Row",
    "question": "Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\nIn the American keyboard:",
    "examples": [
        "Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]",
        "Output: [\"Alaska\",\"Dad\"]",
        "Input: words = [\"omk\"]",
        "Output: []",
        "Input: words = [\"adsdf\",\"sfd\"]",
        "Output: [\"adsdf\",\"sfd\"]",
        ""
    ],
    "constraints": [
        "the first row consists of the characters \"qwertyuiop\"",
        "the second row consists of the characters \"asdfghjkl\"",
        " andthe third row consists of the characters \"zxcvbnm\". 1 <= words. length <= 201 <= words[i]. length <= 100words[i] consists of English letters (both lowercase and uppercase). "
    ]
},
{
    "id": "1615",
    "title": "Maximal Network Rank",
    "question": "There is an infrastructure of n cities with some number of roads connecting these cities.\n Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.\nThe network rank of two different cities is defined as the total number of directly connected roads to either city.\n If a road is directly connected to both cities, it is only counted once.\nThe maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.\nGiven the integer n and the array roads, return the maximal network rank of the entire infrastructure.",
    "examples": [
        "Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]",
        "Output: 4",
        "Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.",
        "Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]",
        "Output: 5",
        "Explanation: There are 5 roads that are connected to cities 1 or 2.",
        "Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]",
        "Output: 5",
        "Explanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.",
        ""
    ],
    "constraints": [
        "2 <= n <= 1000 <= roads. length <= n * (n - 1) / 2roads[i]. length == 20 <= ai",
        " bi <= n-1ai != biEach pair of cities has at most one road connecting them."
    ]
},
{
    "id": "1616",
    "title": "Split Two Strings to Make Palindrome",
    "question": "You are given two strings a and b of the same length.\n Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix.\n Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.\nWhen you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty.\n For example, if s = \"abc\", then \"\" + \"abc\", \"a\" + \"bc\", \"ab\" + \"c\" , and \"abc\" + \"\" are valid splits.\nReturn true if it is possible to form a palindrome string, otherwise return false.\nNotice that x + y denotes the concatenation of strings x and y.",
    "examples": [
        "Input: a = \"x\", b = \"y\"",
        "Output: true",
        "Explaination: If either a or b are palindromes the answer is true since you can split in the following way:",
        "aprefix = \"\", asuffix = \"x\"",
        "bprefix = \"\", bsuffix = \"y\"",
        "Then, aprefix + bsuffix = \"\" + \"y\" = \"y\", which is a palindrome.",
        "Input: a = \"abdef\", b = \"fecab\"",
        "Output: true",
        "Input: a = \"ulacfd\", b = \"jizalu\"",
        "Output: true",
        "Explaination: Split them at index 3:",
        "aprefix = \"ula\", asuffix = \"cfd\"",
        "bprefix = \"jiz\", bsuffix = \"alu\"",
        "Then, aprefix + bsuffix = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome.",
        "Input: a = \"xbdef\", b = \"xecab\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= a. length",
        " b. length <= 105a. length == b. lengtha and b consist of lowercase English letters"
    ]
},
{
    "id": "1620",
    "title": "Coordinate With Maximum Network Quality",
    "question": "You are given an array of network towers towers and an integer radius, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi.\n All the coordinates are integral coordinates on the X-Y plane, and the distance between two coordinates is the Euclidean distance.\nThe integer radius denotes the maximum distance in which the tower is reachable.\n The tower is reachable if the distance is less than or equal to radius.\n Outside that distance, the signal becomes garbled, and the tower is not reachable.\nThe signal quality of the ith tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower and the coordinate.\n The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.\nReturn the integral coordinate where the network quality is maximum.\n If there are multiple coordinates with the same network quality, return the lexicographically minimum coordinate.\nNote:",
    "examples": [
        "Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2",
        "Output: [2,1]",
        "Explanation: ",
        "At coordinate (2, 1) the total quality is 13",
        "- Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7",
        "- Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2. 07⌋ = 2",
        "- Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4. 5⌋ = 4",
        "No other coordinate has higher quality. Input: towers = [[23,11,21]], radius = 9",
        "Output: [23,11]",
        "Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2",
        "Output: [1,2]",
        "Input: towers = [[2,1,9],[0,1,9]], radius = 2",
        "Output: [0,1]",
        "Explanation: Both (0, 1) and (2, 1) are optimal in terms of quality but (0, 1) is lexicograpically minimal.",
        ""
    ],
    "constraints": [
        "A coordinate (x1",
        " y1) is lexicographically smaller than (x2",
        " y2) if either x1 < x2 or x1 == x2 and y1 < y2.⌊val⌋ is the greatest integer less than or equal to val (the floor function). 1 <= towers. length <= 50towers[i]. length == 30 <= xi",
        " yi",
        " qi <= 501 <= radius <= 50"
    ]
},
{
    "id": "1621",
    "title": "Number of Sets of K Non-Overlapping Line Segments",
    "question": "Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points.\n The endpoints of each segment must have integral coordinates.\n The k line segments do not have to cover all n points, and they are allowed to share endpoints.\nReturn the number of ways we can draw k non-overlapping line segments.\n Since this number can be huge, return it modulo 109 + 7.",
    "examples": [
        "Input: n = 4, k = 2",
        "Output: 5",
        "Explanation: ",
        "The two line segments are shown in red and blue.",
        "The image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}. Input: n = 3, k = 1",
        "Output: 3",
        "Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.",
        "Input: n = 30, k = 7",
        "Output: 796297179",
        "Explanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.",
        "Input: n = 5, k = 3",
        "Output: 7",
        "Input: n = 3, k = 2",
        "Output: 1"
    ],
    "constraints": [
        "2 <= n <= 10001 <= k <= n-1"
    ]
},
{
    "id": "1625",
    "title": "Lexicographically Smallest String After Applying Operations",
    "question": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:Return the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.",
    "examples": [
        "Input: s = \"5525\", a = 9, b = 2",
        "Output: \"2050\"",
        "Explanation: We can apply the following operations:",
        "Start:  \"5525\"",
        "Rotate: \"2555\"",
        "Add:    \"2454\"",
        "Add:    \"2353\"",
        "Rotate: \"5323\"",
        "Add:    \"5222\"",
        "​​​​​​​Add:    \"5121\"",
        "​​​​​​​Rotate: \"2151\"",
        "​​​​​​​Add:    \"2050\"​​​​​​​​​​​​",
        "There is no way to obtain a string that is lexicographically smaller then \"2050\".",
        "Input: s = \"74\", a = 5, b = 1",
        "Output: \"24\"",
        "Explanation: We can apply the following operations:",
        "Start:  \"74\"",
        "Rotate: \"47\"",
        "​​​​​​​Add:    \"42\"",
        "​​​​​​​Rotate: \"24\"​​​​​​​​​​​​",
        "There is no way to obtain a string that is lexicographically smaller then \"24\".",
        "Input: s = \"0011\", a = 4, b = 2",
        "Output: \"0011\"",
        "Explanation: There are no sequence of operations that will give us a lexicographically smaller string than \"0011\".",
        "Input: s = \"43987654\", a = 7, b = 3",
        "Output: \"00553311\"",
        ""
    ],
    "constraints": [
        "Add a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example",
        " if s = \"3456\" and a = 5",
        " s becomes \"3951\". Rotate s to the right by b positions. For example",
        " if s = \"3456\" and b = 1",
        " s becomes \"6345\". 2 <= s. length <= 100s. length is even. s consists of digits from 0 to 9 only. 1 <= a <= 91 <= b <= s. length - 1"
    ]
},
{
    "id": "1626",
    "title": "Best Team With No Conflicts",
    "question": "You are the manager of a basketball team.\n For the upcoming tournament, you want to choose the team with the highest overall score.\n The score of the team is the sum of scores of all the players in the team.\nHowever, the basketball team is not allowed to have conflicts.\n A conflict exists if a younger player has a strictly higher score than an older player.\n A conflict does not occur between players of the same age.\nGiven two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.",
    "examples": [
        "Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]",
        "Output: 34",
        "Explanation: You can choose all the players.",
        "Input: scores = [4,5,6,5], ages = [2,1,2,1]",
        "Output: 16",
        "Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.",
        "Input: scores = [1,2,3,5], ages = [8,9,10,1]",
        "Output: 6",
        "Explanation: It is best to choose the first 3 players. ",
        ""
    ],
    "constraints": [
        "1 <= scores. length",
        " ages. length <= 1000scores. length == ages. length1 <= scores[i] <= 1061 <= ages[i] <= 1000"
    ]
},
{
    "id": "1630",
    "title": "Arithmetic Subarrays",
    "question": "A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same.\n More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.\nFor example, these are arithmetic sequences:The following sequence is not arithmetic:You are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]].\n All the arrays are 0-indexed.\nReturn a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], .\n.\n.\n , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.",
    "examples": [
        "1, 3, 5, 7, 9",
        "7, 7, 7, 7",
        "3, -1, -5, -91, 1, 2, 5, 7Input: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]",
        "Output: [true,false,true]",
        "Explanation:",
        "In the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.",
        "In the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.",
        "In the 2nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence. Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]",
        "Output: [false,true,false,false,true,true]",
        ""
    ],
    "constraints": [
        "n == nums. lengthm == l. lengthm == r. length2 <= n <= 5001 <= m <= 5000 <= l[i] < r[i] < n-105 <= nums[i] <= 105"
    ]
},
{
    "id": "1631",
    "title": "Path With Minimum Effort",
    "question": "You are a hiker preparing for an upcoming hike.\n You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col).\n You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.\ne.\n, 0-indexed).\n You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\nA route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\nReturn the minimum effort required to travel from the top-left cell to the bottom-right cell.",
    "examples": [
        "Input: heights = [[1,2,2],[3,8,2],[5,3,5]]",
        "Output: 2",
        "Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.",
        "This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.",
        "Input: heights = [[1,2,3],[3,8,4],[5,3,5]]",
        "Output: 1",
        "Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].",
        "Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]",
        "Output: 0",
        "Explanation: This route does not require any effort.",
        ""
    ],
    "constraints": [
        "rows == heights. lengthcolumns == heights[i]. length1 <= rows",
        " columns <= 1001 <= heights[i][j] <= 106"
    ]
},
{
    "id": "1637",
    "title": "Widest Vertical Area Between Two Points Containing No Points",
    "question": "Given n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.\nA vertical area is an area of fixed-width extending infinitely along the y-axis (i.\ne.\n, infinite height).\n The widest vertical area is the one with the maximum width.\nNote that points on the edge of a vertical area are not considered included in the area.",
    "examples": [
        "Input: points = [[8,7],[9,9],[7,4],[9,7]]",
        "Output: 1",
        "Explanation: Both the red and the blue area are optimal.",
        "Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "n == points. length2 <= n <= 105points[i]. length == 20 <= xi",
        " yi <= 109"
    ]
},
{
    "id": "1638",
    "title": "Count Substrings That Differ by One Character",
    "question": "Given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t.\n In other words, find the number of substrings in s that differ from some substring in t by exactly one character.\nFor example, the underlined substrings in \"computer\" and \"computation\" only differ by the 'e'/'a', so this is a valid way.\nReturn the number of substrings that satisfy the condition above.\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
        "Input: s = \"aba\", t = \"baba\"",
        "Output: 6",
        "Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:",
        "(\"aba\", \"baba\")",
        "(\"aba\", \"baba\")",
        "(\"aba\", \"baba\")",
        "(\"aba\", \"baba\")",
        "(\"aba\", \"baba\")",
        "(\"aba\", \"baba\")",
        "The underlined portions are the substrings that are chosen from s and t.",
        "Input: s = \"ab\", t = \"bb\"",
        "Output: 3",
        "Explanation: The following are the pairs of substrings from s and t that differ by 1 character:",
        "(\"ab\", \"bb\")",
        "(\"ab\", \"bb\")",
        "(\"ab\", \"bb\")",
        "​​​​The underlined portions are the substrings that are chosen from s and t.",
        "Input: s = \"a\", t = \"a\"",
        "Output: 0",
        "Input: s = \"abe\", t = \"bbc\"",
        "Output: 10",
        ""
    ],
    "constraints": [
        "1 <= s. length",
        " t. length <= 100s and t consist of lowercase English letters only."
    ]
},
{
    "id": "501",
    "title": "Find Mode in Binary Search Tree",
    "question": "Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.\ne.\n, the most frequently occurred element) in it.\nIf the tree has more than one mode, return them in any order.\nAssume a BST is defined as follows:",
    "examples": [
        "Input: root = [1,null,2,2]",
        "Output: [2]",
        "Input: root = [0]",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "The left subtree of a node contains only nodes with keys less than or equal to the node's key. The right subtree of a node contains only nodes with keys greater than or equal to the node's key. Both the left and right subtrees must also be binary search trees. The number of nodes in the tree is in the range [1",
        " 104].-105 <= Node. val <= 105"
    ]
},
{
    "id": "1641",
    "title": "Count Sorted Vowel Strings",
    "question": "Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.\nA string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.",
    "examples": [
        "Input: n = 1",
        "Output: 5",
        "Explanation: The 5 sorted strings that consist of vowels only are [\"a\",\"e\",\"i\",\"o\",\"u\"].",
        "Input: n = 2",
        "Output: 15",
        "Explanation: The 15 sorted strings that consist of vowels only are",
        "[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].",
        "Note that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet.",
        "Input: n = 33",
        "Output: 66045",
        ""
    ],
    "constraints": [
        "1 <= n <= 50 "
    ]
},
{
    "id": "1642",
    "title": "Furthest Building You Can Reach",
    "question": "You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.\nYou start your journey from building 0 and move to the next building by possibly using bricks or ladders.\nWhile moving from building i to building i+1 (0-indexed),Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.",
    "examples": [
        "Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1",
        "Output: 4",
        "Explanation: Starting at building 0, you can follow these steps:",
        "- Go to building 1 without using ladders nor bricks since 4 >= 2.",
        "- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.",
        "- Go to building 3 without using ladders nor bricks since 7 >= 6.",
        "- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.",
        "It is impossible to go beyond building 4 because you do not have any more bricks or ladders.",
        "Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2",
        "Output: 7",
        "Input: heights = [14,3,19,3], bricks = 17, ladders = 0",
        "Output: 3",
        ""
    ],
    "constraints": [
        "If the current building's height is greater than or equal to the next building's height",
        " you do not need a ladder or bricks. If the current building's height is less than the next building's height",
        " you can either use one ladder or (h[i+1] - h[i]) bricks. 1 <= heights. length <= 1051 <= heights[i] <= 1060 <= bricks <= 1090 <= ladders <= heights. length"
    ]
},
{
    "id": "1647",
    "title": "Minimum Deletions to Make Character Frequencies Unique",
    "question": "A string s is called good if there are no two different characters in s that have the same frequency.\nGiven a string s, return the minimum number of characters you need to delete to make s good.\nThe frequency of a character in a string is the number of times it appears in the string.\n For example, in the string \"aab\", the frequency of 'a' is 2, while the frequency of 'b' is 1.",
    "examples": [
        "Input: s = \"aab\"",
        "Output: 0",
        "Explanation: s is already good.",
        "Input: s = \"aaabbbcc\"",
        "Output: 2",
        "Explanation: You can delete two 'b's resulting in the good string \"aaabcc\".",
        "Another way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\". Input: s = \"ceabaacb\"",
        "Output: 2",
        "Explanation: You can delete both 'c's resulting in the good string \"eabaab\".",
        "Note that we only care about characters that are still in the string at the end (i. e. frequency of 0 is ignored).",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s contains only lowercase English letters."
    ]
},
{
    "id": "1648",
    "title": "Sell Diminishing-Valued Colored Balls",
    "question": "You have an inventory of different colored balls, and there is a customer that wants orders balls of any color.\nThe customer weirdly values the colored balls.\n Each colored ball's value is the number of balls of that color you currently have in your inventory.\n For example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball.\n After the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.\ne.\n, the value of the balls decreases as you sell more to the customer).\nYou are given an integer array, inventory, where inventory[i] represents the number of balls of the ith color that you initially own.\n You are also given an integer orders, which represents the total number of balls that the customer wants.\n You can sell the balls in any order.\nReturn the maximum total value that you can attain after selling orders colored balls.\n As the answer may be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: inventory = [2,5], orders = 4",
        "Output: 14",
        "Explanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).",
        "The maximum total value is 2 + 5 + 4 + 3 = 14.",
        "Input: inventory = [3,5], orders = 6",
        "Output: 19",
        "Explanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).",
        "The maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.",
        "Input: inventory = [2,8,4,10,6], orders = 20",
        "Output: 110",
        "Input: inventory = [1000000000], orders = 1000000000",
        "Output: 21",
        "Explanation: Sell the 1st color 1000000000 times for a total value of 500000000500000000. 500000000500000000 modulo 109 + 7 = 21.",
        ""
    ],
    "constraints": [
        "1 <= inventory. length <= 1051 <= inventory[i] <= 1091 <= orders <= min(sum(inventory[i])",
        " 109)"
    ]
},
{
    "id": "1653",
    "title": "Minimum Deletions to Make String Balanced",
    "question": "You are given a string s consisting only of characters 'a' and 'b'​​​​.\nYou can delete any number of characters in s to make s balanced.\n s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.\nReturn the minimum number of deletions needed to make s balanced.",
    "examples": [
        "Input: s = \"aababbab\"",
        "Output: 2",
        "Explanation: You can either:",
        "Delete the characters at 0-indexed positions 2 and 6 (\"aababbab\" -> \"aaabbb\"), or",
        "Delete the characters at 0-indexed positions 3 and 6 (\"aababbab\" -> \"aabbbb\").",
        "Input: s = \"bbaaaaabb\"",
        "Output: 2",
        "Explanation: The only solution is to delete the first two characters.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s[i] is 'a' or 'b'​​."
    ]
},
{
    "id": "1654",
    "title": "Minimum Jumps to Reach Home",
    "question": "A certain bug's home is on the x-axis at position x.\n Help them get there from position 0.\nThe bug jumps according to the following rules:The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.\nGiven an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home.\n If there is no possible sequence of jumps that lands the bug on position x, return -1.",
    "examples": [
        "Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9",
        "Output: 3",
        "Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.",
        "Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11",
        "Output: -1",
        "Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7",
        "Output: 2",
        "Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.",
        ""
    ],
    "constraints": [
        "It can jump exactly a positions forward (to the right). It can jump exactly b positions backward (to the left). It cannot jump backward twice in a row. It cannot jump to any forbidden positions. 1 <= forbidden. length <= 10001 <= a",
        " b",
        " forbidden[i] <= 20000 <= x <= 2000All the elements in forbidden are distinct. Position x is not forbidden."
    ]
},
{
    "id": "1657",
    "title": "Determine if Two Strings Are Close",
    "question": "Two strings are considered close if you can attain one from the other using the following operations:You can use the operations on either string as many times as necessary.\nGiven two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.",
    "examples": [
        "Input: word1 = \"abc\", word2 = \"bca\"",
        "Output: true",
        "Explanation: You can attain word2 from word1 in 2 operations.",
        "Apply Operation 1: \"abc\" -> \"acb\"",
        "Apply Operation 1: \"acb\" -> \"bca\"",
        "Input: word1 = \"a\", word2 = \"aa\"",
        "Output: false",
        "Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.",
        "Input: word1 = \"cabbba\", word2 = \"abbccc\"",
        "Output: true",
        "Explanation: You can attain word2 from word1 in 3 operations.",
        "Apply Operation 1: \"cabbba\" -> \"caabbb\"",
        "Apply Operation 2: \"caabbb\" -> \"baaccc\"",
        "Apply Operation 2: \"baaccc\" -> \"abbccc\"",
        "Input: word1 = \"cabbba\", word2 = \"aabbss\"",
        "Output: false",
        "Explanation: It is impossible to attain word2 from word1, or vice versa, in any amount of operations.",
        ""
    ],
    "constraints": [
        "Operation 1: Swap any two existing characters.\n\n\t\nFor example",
        " abcde -> aecdb\n\nFor example",
        " abcde -> aecdbOperation 2: Transform every occurrence of one existing character into another existing character",
        " and do the same with the other character.\n\t\nFor example",
        " aacabb -> bbcbaa (all a's turn into b's",
        " and all b's turn into a's)\n\nFor example",
        " aacabb -> bbcbaa (all a's turn into b's",
        " and all b's turn into a's)1 <= word1. length",
        " word2. length <= 105word1 and word2 contain only lowercase English letters."
    ]
},
{
    "id": "1658",
    "title": "Minimum Operations to Reduce X to Zero",
    "question": "You are given an integer array nums and an integer x.\n In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x.\n Note that this modifies the array for future operations.\nReturn the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.",
    "examples": [
        "Input: nums = [1,1,4,2,3], x = 5",
        "Output: 2",
        "Explanation: The optimal solution is to remove the last two elements to reduce x to zero.",
        "Input: nums = [5,6,7,8,9], x = 4",
        "Output: -1",
        "Input: nums = [3,2,20,1,1,3], x = 10",
        "Output: 5",
        "Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 1041 <= x <= 109"
    ]
},
{
    "id": "1663",
    "title": "Smallest String With A Given Numeric Value",
    "question": "The numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.\nThe numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values.\n For example, the numeric value of the string \"abe\" is equal to 1 + 2 + 5 = 8.\nYou are given two integers n and k.\n Return the lexicographically smallest string with length equal to n and numeric value equal to k.\nNote that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.",
    "examples": [
        "Input: n = 3, k = 27",
        "Output: \"aay\"",
        "Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.",
        "Input: n = 5, k = 73",
        "Output: \"aaszz\"",
        ""
    ],
    "constraints": [
        "1 <= n <= 105n <= k <= 26 * n"
    ]
},
{
    "id": "1664",
    "title": "Ways to Make a Fair Array",
    "question": "You are given an integer array nums.\n You can choose exactly one index (0-indexed) and remove the element.\n Notice that the index of the elements may change after the removal.\nFor example, if nums = [6,1,7,4,1]:An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.\nReturn the number of indices that you could choose such that after the removal, nums is fair.",
    "examples": [
        "Input: nums = [2,1,6,4]",
        "Output: 1",
        "Explanation:",
        "Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.",
        "Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.",
        "Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.",
        "Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.",
        "There is 1 index that you can remove to make nums fair.",
        "Input: nums = [1,1,1]",
        "Output: 3",
        "Explanation: You can remove any index and the remaining array is fair.",
        "Input: nums = [1,2,3]",
        "Output: 0",
        "Explanation: You cannot make a fair array after removing any index.",
        ""
    ],
    "constraints": [
        "Choosing to remove index 1 results in nums = [6",
        "7",
        "4",
        "1]. Choosing to remove index 2 results in nums = [6",
        "1",
        "4",
        "1]. Choosing to remove index 4 results in nums = [6",
        "1",
        "7",
        "4]. 1 <= nums. length <= 1051 <= nums[i] <= 104"
    ]
},
{
    "id": "504",
    "title": "Base 7",
    "question": "Given an integer num, return a string of its base 7 representation.",
    "examples": [
        "Input: num = 100",
        "Output: \"202\"",
        "Input: num = -7",
        "Output: \"-10\"",
        ""
    ],
    "constraints": [
        "-107 <= num <= 107"
    ]
},
{
    "id": "1669",
    "title": "Merge In Between Linked Lists",
    "question": "You are given two linked lists: list1 and list2 of sizes n and m respectively.\nRemove list1's nodes from the ath node to the bth node, and put list2 in their place.\nThe blue edges and nodes in the following figure incidate the result:Build the result list and return its head.",
    "examples": [
        "Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]",
        "Output: [0,1,2,1000000,1000001,1000002,5]",
        "Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.",
        "Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]",
        "Output: [0,1,1000000,1000001,1000002,1000003,1000004,6]",
        "Explanation: The blue edges and nodes in the above figure indicate the result.",
        ""
    ],
    "constraints": [
        "3 <= list1. length <= 1041 <= a <= b < list1. length - 11 <= list2. length <= 104"
    ]
},
{
    "id": "1670",
    "title": "Design Front Middle Back Queue",
    "question": "Design a queue that supports push and pop operations in the front, middle, and back.\nImplement the FrontMiddleBack class:Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice.\n For example:",
    "examples": [
        "Input:",
        "[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]",
        "[[], [1], [2], [3], [4], [], [], [], [], []]",
        "Output:",
        "[null, null, null, null, null, 1, 3, 4, 2, -1]",
        "",
        "Explanation:",
        "FrontMiddleBackQueue q = new FrontMiddleBackQueue();",
        "q. pushFront(1);   // [1]",
        "q. pushBack(2);    // [1, 2]",
        "q. pushMiddle(3);  // [1, 3, 2]",
        "q. pushMiddle(4);  // [1, 4, 3, 2]",
        "q. popFront();     // return 1 -> [4, 3, 2]",
        "q. popMiddle();    // return 3 -> [4, 2]",
        "q. popMiddle();    // return 4 -> [2]",
        "q. popBack();      // return 2 -> []",
        "q. popFront();     // return -1 -> [] (The queue is empty)",
        ""
    ],
    "constraints": [
        "FrontMiddleBack() Initializes the queue. void pushFront(int val) Adds val to the front of the queue. void pushMiddle(int val) Adds val to the middle of the queue. void pushBack(int val) Adds val to the back of the queue. int popFront() Removes the front element of the queue and returns it. If the queue is empty",
        " return -1. int popMiddle() Removes the middle element of the queue and returns it. If the queue is empty",
        " return -1. int popBack() Removes the back element of the queue and returns it. If the queue is empty",
        " return -1. Pushing 6 into the middle of [1",
        " 2",
        " 3",
        " 4",
        " 5] results in [1",
        " 2",
        " 6",
        " 3",
        " 4",
        " 5]. Popping the middle from [1",
        " 2",
        " 3",
        " 4",
        " 5",
        " 6] returns 3 and results in [1",
        " 2",
        " 4",
        " 5",
        " 6]. 1 <= val <= 109At most 1000 calls will be made to pushFront",
        " pushMiddle",
        " pushBack",
        " popFront",
        " popMiddle",
        " and popBack."
    ]
},
{
    "id": "1673",
    "title": "Find the Most Competitive Subsequence",
    "question": "Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.\nAn array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.\nWe define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b.\n For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.",
    "examples": [
        "Input: nums = [3,5,2,6], k = 2",
        "Output: [2,6]",
        "Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.",
        "Input: nums = [2,4,3,3,5,4,9,6], k = 4",
        "Output: [2,3,3,4]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1050 <= nums[i] <= 1091 <= k <= nums. length"
    ]
},
{
    "id": "1674",
    "title": "Minimum Moves to Make Array Complementary",
    "question": "You are given an integer array nums of even length n and an integer limit.\n In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.\nThe array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number.\n For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.\nReturn the minimum number of moves required to make nums complementary.",
    "examples": [
        "Input: nums = [1,2,4,3], limit = 4",
        "Output: 1",
        "Explanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).",
        "nums[0] + nums[3] = 1 + 3 = 4.",
        "nums[1] + nums[2] = 2 + 2 = 4.",
        "nums[2] + nums[1] = 2 + 2 = 4.",
        "nums[3] + nums[0] = 3 + 1 = 4.",
        "Therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.",
        "Input: nums = [1,2,2,1], limit = 2",
        "Output: 2",
        "Explanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.",
        "Input: nums = [1,2,1,2], limit = 2",
        "Output: 0",
        "Explanation: nums is already complementary.",
        ""
    ],
    "constraints": [
        "n == nums. length2 <= n <= 1051 <= nums[i] <= limit <= 105n is even."
    ]
},
{
    "id": "1679",
    "title": "Max Number of K-Sum Pairs",
    "question": "You are given an integer array nums and an integer k.\nIn one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.\nReturn the maximum number of operations you can perform on the array.",
    "examples": [
        "Input: nums = [1,2,3,4], k = 5",
        "Output: 2",
        "Explanation: Starting with nums = [1,2,3,4]:",
        "- Remove numbers 1 and 4, then nums = [2,3]",
        "- Remove numbers 2 and 3, then nums = []",
        "There are no more pairs that sum up to 5, hence a total of 2 operations. Input: nums = [3,1,3,4,3], k = 6",
        "Output: 1",
        "Explanation: Starting with nums = [3,1,3,4,3]:",
        "- Remove the first two 3's, then nums = [1,4,3]",
        "There are no more pairs that sum up to 6, hence a total of 1 operation."
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 1091 <= k <= 109"
    ]
},
{
    "id": "1680",
    "title": "Concatenation of Consecutive Binary Numbers",
    "question": "Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.",
    "examples": [
        "Input: n = 1",
        "Output: 1",
        "Explanation: \"1\" in binary corresponds to the decimal value 1. ",
        "Input: n = 3",
        "Output: 27",
        "Explanation: In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".",
        "After concatenating them, we have \"11011\", which corresponds to the decimal value 27.",
        "Input: n = 12",
        "Output: 505379714",
        "Explanation: The concatenation results in \"1101110010111011110001001101010111100\".",
        "The decimal value of that is 118505380540.",
        "After modulo 109 + 7, the result is 505379714.",
        ""
    ],
    "constraints": [
        "1 <= n <= 105"
    ]
},
{
    "id": "1685",
    "title": "Sum of Absolute Differences in a Sorted Array",
    "question": "You are given an integer array nums sorted in non-decreasing order.\nBuild and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array.\nIn other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.\nlength and j != i (0-indexed).",
    "examples": [
        "Input: nums = [2,3,5]",
        "Output: [4,3,5]",
        "Explanation: Assuming the arrays are 0-indexed, then",
        "result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,",
        "result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,",
        "result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.",
        "Input: nums = [1,4,6,8,10]",
        "Output: [24,15,13,15,21]",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 1051 <= nums[i] <= nums[i + 1] <= 104"
    ]
},
{
    "id": "1686",
    "title": "Stone Game VI",
    "question": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones in a pile.\n On each player's turn, they can remove a stone from the pile and receive points based on the stone's value.\n Alice and Bob may value the stones differently.\nYou are given two integer arrays of length n, aliceValues and bobValues.\n Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone.\nThe winner is the person with the most points after all the stones are chosen.\n If both players have the same amount of points, the game results in a draw.\n Both players will play optimally.\n Both players know the other's values.\nDetermine the result of the game, and:",
    "examples": [
        "Input: aliceValues = [1,3], bobValues = [2,1]",
        "Output: 1",
        "Explanation:",
        "If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.",
        "Bob can only choose stone 0, and will only receive 2 points.",
        "Alice wins.",
        "Input: aliceValues = [1,2], bobValues = [3,1]",
        "Output: 0",
        "Explanation:",
        "If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.",
        "Draw.",
        "Input: aliceValues = [2,4,3], bobValues = [1,6,7]",
        "Output: -1",
        "Explanation:",
        "Regardless of how Alice plays, Bob will be able to have more points than Alice.",
        "For example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.",
        "Bob wins.",
        ""
    ],
    "constraints": [
        "If Alice wins",
        " return 1. If Bob wins",
        " return -1. If the game results in a draw",
        " return 0. n == aliceValues. length == bobValues. length1 <= n <= 1051 <= aliceValues[i]",
        " bobValues[i] <= 100"
    ]
},
{
    "id": "1689",
    "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
    "question": "A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros.\n For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.\nGiven a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.",
    "examples": [
        "Input: n = \"32\"",
        "Output: 3",
        "Explanation: 10 + 11 + 11 = 32",
        "Input: n = \"82734\"",
        "Output: 8",
        "Input: n = \"27346209830709182346\"",
        "Output: 9",
        ""
    ],
    "constraints": [
        "1 <= n. length <= 105n consists of only digits. n does not contain any leading zeros and represents a positive integer."
    ]
},
{
    "id": "1690",
    "title": "Stone Game VII",
    "question": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones arranged in a row.\n On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row.\n The winner is the one with the higher score when there are no stones left to remove.\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference.\n Alice's goal is to maximize the difference in the score.\nGiven an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in Alice and Bob's score if they both play optimally.",
    "examples": [
        "Input: stones = [5,3,1,4,2]",
        "Output: 6",
        "Explanation: ",
        "- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].",
        "- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].",
        "- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].",
        "- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].",
        "- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].",
        "The score difference is 18 - 12 = 6.",
        "Input: stones = [7,90,5,1,100,10,10,2]",
        "Output: 122"
    ],
    "constraints": [
        "n == stones. length2 <= n <= 10001 <= stones[i] <= 1000"
    ]
},
{
    "id": "506",
    "title": "Relative Ranks",
    "question": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition.\n All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on.\n The placement of each athlete determines their rank:Return an array answer of size n where answer[i] is the rank of the ith athlete.",
    "examples": [
        "Input: score = [5,4,3,2,1]",
        "Output: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]",
        "Explanation: The placements are [1st, 2nd, 3rd, 4th, 5th]. Input: score = [10,3,8,9,4]",
        "Output: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]",
        "Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th].",
        "",
        ""
    ],
    "constraints": [
        "The 1st place athlete's rank is \"Gold Medal\". The 2nd place athlete's rank is \"Silver Medal\". The 3rd place athlete's rank is \"Bronze Medal\". For the 4th place to the nth place athlete",
        " their rank is their placement number (i. e.",
        " the xth place athlete's rank is \"x\"). n == score. length1 <= n <= 1040 <= score[i] <= 106All the values in score are unique."
    ]
},
{
    "id": "1695",
    "title": "Maximum Erasure Value",
    "question": "You are given an array of positive integers nums and want to erase a subarray containing unique elements.\n The score you get by erasing the subarray is equal to the sum of its elements.\nReturn the maximum score you can get by erasing exactly one subarray.\nAn array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],.\n.\n.\n,a[r] for some (l,r).",
    "examples": [
        "Input: nums = [4,2,4,5,6]",
        "Output: 17",
        "Explanation: The optimal subarray here is [2,4,5,6].",
        "Input: nums = [5,2,1,2,5,2,1,2,5]",
        "Output: 8",
        "Explanation: The optimal subarray here is [5,2,1] or [1,2,5].",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 104"
    ]
},
{
    "id": "1696",
    "title": "Jump Game VI",
    "question": "You are given a 0-indexed integer array nums and an integer k.\nYou are initially standing at index 0.\n In one move, you can jump at most k steps forward without going outside the boundaries of the array.\n That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.\nYou want to reach the last index of the array (index n - 1).\n Your score is the sum of all nums[j] for each index j you visited in the array.\nReturn the maximum score you can get.",
    "examples": [
        "Input: nums = [1,-1,-2,4,-7,3], k = 2",
        "Output: 7",
        "Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.",
        "Input: nums = [10,-5,-2,4,0,3], k = 3",
        "Output: 17",
        "Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.",
        "Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length",
        " k <= 105-104 <= nums[i] <= 104"
    ]
},
{
    "id": "1701",
    "title": "Average Waiting Time",
    "question": "There is a restaurant with a single chef.\n You are given an array customers, where customers[i] = [arrivali, timei]:When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle.\n The customer waits till the chef finishes preparing his order.\n The chef does not prepare food for more than one customer at a time.\n The chef prepares food for customers in the order they were given in the input.\nReturn the average waiting time of all customers.\n Solutions within 10-5 from the actual answer are considered accepted.",
    "examples": [
        "Input: customers = [[1,2],[2,5],[4,3]]",
        "Output: 5. 00000",
        "Explanation:",
        "1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.",
        "2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.",
        "3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.",
        "So the average waiting time = (2 + 6 + 7) / 3 = 5.",
        "Input: customers = [[5,2],[5,4],[10,3],[20,1]]",
        "Output: 3. 25000",
        "Explanation:",
        "1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.",
        "2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.",
        "3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.",
        "4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.",
        "So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3. 25.",
        ""
    ],
    "constraints": [
        "arrivali is the arrival time of the ith customer. The arrival times are sorted in non-decreasing order. timei is the time needed to prepare the order of the ith customer. 1 <= customers. length <= 1051 <= arrivali",
        " timei <= 104arrivali <= arrivali+1"
    ]
},
{
    "id": "1702",
    "title": "Maximum Binary String After Change",
    "question": "You are given a binary string binary consisting of only 0's or 1's.\n You can apply each of the following operations any number of times:Return the maximum binary string you can obtain after any number of operations.\n Binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.",
    "examples": [
        "Input: binary = \"000110\"",
        "Output: \"111011\"",
        "Explanation: A valid transformation sequence can be:",
        "\"000110\" -> \"000101\" ",
        "\"000101\" -> \"100101\" ",
        "\"100101\" -> \"110101\" ",
        "\"110101\" -> \"110011\" ",
        "\"110011\" -> \"111011\"",
        "Input: binary = \"01\"",
        "Output: \"01\"",
        "Explanation: \"01\" cannot be transformed any further.",
        ""
    ],
    "constraints": [
        "Operation 1: If the number contains the substring \"00\"",
        " you can replace it with \"10\".\n\n\t\nFor example",
        " \"00010\" -> \"10010\"\n\nFor example",
        " \"00010\" -> \"10010\"Operation 2: If the number contains the substring \"10\"",
        " you can replace it with \"01\".\n\t\nFor example",
        " \"00010\" -> \"00001\"\n\nFor example",
        " \"00010\" -> \"00001\"1 <= binary. length <= 105binary consist of '0' and '1'."
    ]
},
{
    "id": "1705",
    "title": "Maximum Number of Eaten Apples",
    "question": "There is a special kind of apple tree that grows apples every day for n days.\n On the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten.\n On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.\nYou decided to eat at most one apple a day (to keep the doctors away).\n Note that you can keep eating after the first n days.\nGiven two integer arrays days and apples of length n, return the maximum number of apples you can eat.",
    "examples": [
        "Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]",
        "Output: 7",
        "Explanation: You can eat 7 apples:",
        "- On the first day, you eat an apple that grew on the first day.",
        "- On the second day, you eat an apple that grew on the second day.",
        "- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.",
        "- On the fourth to the seventh days, you eat apples that grew on the fourth day.",
        "Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]",
        "Output: 5",
        "Explanation: You can eat 5 apples:",
        "- On the first to the third day you eat apples that grew on the first day.",
        "- Do nothing on the fouth and fifth days.",
        "- On the sixth and seventh days you eat apples that grew on the sixth day.",
        ""
    ],
    "constraints": [
        "apples. length == ndays. length == n1 <= n <= 2 * 1040 <= apples[i]",
        " days[i] <= 2 * 104days[i] = 0 if and only if apples[i] = 0."
    ]
},
{
    "id": "1706",
    "title": "Where Will the Ball Fall",
    "question": "You have a 2-D grid of size m x n representing a box, and you have n balls.\n The box is open on the top and bottom sides.\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\nWe drop one ball at the top of each column of the box.\n Each ball can get stuck in the box or fall out of the bottom.\n A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box.\nReturn an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.",
    "examples": [
        "Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]",
        "Output: [1,-1,-1,-1,-1]",
        "Explanation: This example is shown in the photo.",
        "Ball b0 is dropped at column 0 and falls out of the box at column 1.",
        "Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.",
        "Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.",
        "Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.",
        "Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.",
        "Input: grid = [[-1]]",
        "Output: [-1]",
        "Explanation: The ball gets stuck against the left wall.",
        "Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]",
        "Output: [0,1,2,3,4,-1]",
        ""
    ],
    "constraints": [
        "A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1. A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1. m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 100grid[i][j] is 1 or -1."
    ]
},
{
    "id": "1711",
    "title": "Count Good Meals",
    "question": "A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.\nYou can pick any two different foods to make a good meal.\nGiven an array of integers deliciousness where deliciousness[i] is the deliciousness of the i​​​​​​th​​​​​​​​ item of food, return the number of different good meals you can make from this list modulo 109 + 7.\nNote that items with different indices are considered different even if they have the same deliciousness value.",
    "examples": [
        "Input: deliciousness = [1,3,5,7,9]",
        "Output: 4",
        "Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).",
        "Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.",
        "Input: deliciousness = [1,1,1,3,3,3,7]",
        "Output: 15",
        "Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways."
    ],
    "constraints": [
        "1 <= deliciousness. length <= 1050 <= deliciousness[i] <= 220"
    ]
},
{
    "id": "1712",
    "title": "Ways to Split Array Into Three Subarrays",
    "question": "A split of an integer array is good if:Given nums, an array of non-negative integers, return the number of good ways to split nums.\n As the number may be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: nums = [1,1,1]",
        "Output: 1",
        "Explanation: The only good way to split nums is [1] [1] [1]. Input: nums = [1,2,2,2,5,0]",
        "Output: 3",
        "Explanation: There are three good ways of splitting nums:",
        "[1] [2] [2,2,5,0]",
        "[1] [2,2] [2,5,0]",
        "[1,2] [2,2] [5,0]",
        "Input: nums = [3,2,1]",
        "Output: 0",
        "Explanation: There is no good way to split nums."
    ],
    "constraints": [
        "The array is split into three non-empty contiguous subarrays - named left",
        " mid",
        " right respectively from left to right. The sum of the elements in left is less than or equal to the sum of the elements in mid",
        " and the sum of the elements in mid is less than or equal to the sum of the elements in right. 3 <= nums. length <= 1050 <= nums[i] <= 104"
    ]
},
{
    "id": "1717",
    "title": "Maximum Score From Removing Substrings",
    "question": "You are given a string s and two integers x and y.\n You can perform two types of operations any number of times.\nReturn the maximum points you can gain after applying the above operations on s.",
    "examples": [
        "Input: s = \"cdbcbbaaabab\", x = 4, y = 5",
        "Output: 19",
        "Explanation:",
        "- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.",
        "- Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score.",
        "- Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score.",
        "- Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score.",
        "Total score = 5 + 4 + 5 + 5 = 19. Input: s = \"aabbaaxybbaabb\", x = 5, y = 4",
        "Output: 20",
        ""
    ],
    "constraints": [
        "Remove substring \"ab\" and gain x points.\n\n\t\nFor example",
        " when removing \"ab\" from \"cabxbae\" it becomes \"cxbae\".\n\nFor example",
        " when removing \"ab\" from \"cabxbae\" it becomes \"cxbae\". Remove substring \"ba\" and gain y points.\n\t\nFor example",
        " when removing \"ba\" from \"cabxbae\" it becomes \"cabxe\".\n\nFor example",
        " when removing \"ba\" from \"cabxbae\" it becomes \"cabxe\". 1 <= s. length <= 1051 <= x",
        " y <= 104s consists of lowercase English letters."
    ]
},
{
    "id": "1718",
    "title": "Construct the Lexicographically Largest Valid Sequence",
    "question": "Given an integer n, find a sequence that satisfies all of the following:The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.\nReturn the lexicographically largest sequence.\n It is guaranteed that under the given constraints, there is always a solution.\n A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b.\n For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.",
    "examples": [
        "Input: n = 3",
        "Output: [3,1,2,3,2]",
        "Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.",
        "Input: n = 5",
        "Output: [5,3,1,4,3,5,2,4,2]",
        ""
    ],
    "constraints": [
        "The integer 1 occurs once in the sequence. Each integer between 2 and n occurs twice in the sequence. For every integer i between 2 and n",
        " the distance between the two occurrences of i is exactly i. 1 <= n <= 20"
    ]
},
{
    "id": "507",
    "title": "Perfect Number",
    "question": "A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself.\n A divisor of an integer x is an integer that can divide x evenly.\nGiven an integer n, return true if n is a perfect number, otherwise return false.",
    "examples": [
        "Input: num = 28",
        "Output: true",
        "Explanation: 28 = 1 + 2 + 4 + 7 + 14",
        "1, 2, 4, 7, and 14 are all divisors of 28.",
        "Input: num = 6",
        "Output: true",
        "Input: num = 496",
        "Output: true",
        "Input: num = 8128",
        "Output: true",
        "Input: num = 2",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= num <= 108"
    ]
},
{
    "id": "1721",
    "title": "Swapping Nodes in a Linked List",
    "question": "You are given the head of a linked list, and an integer k.\nReturn the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).",
    "examples": [
        "Input: head = [1,2,3,4,5], k = 2",
        "Output: [1,4,3,2,5]",
        "Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5",
        "Output: [7,9,6,6,8,7,3,0,9,5]",
        "Input: head = [1], k = 1",
        "Output: [1]",
        "Input: head = [1,2], k = 1",
        "Output: [2,1]",
        "Input: head = [1,2,3], k = 2",
        "Output: [1,2,3]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is n. 1 <= k <= n <= 1050 <= Node. val <= 100"
    ]
},
{
    "id": "1722",
    "title": "Minimize Hamming Distance After Swap Operations",
    "question": "You are given two integer arrays, source and target, both of length n.\n You are also given an array allowedSwaps where each allowedSwaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source.\n Note that you can swap elements at a specific pair of indices multiple times and in any order.\nThe Hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different.\n Formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed).\nReturn the minimum Hamming distance of source and target after performing any amount of swap operations on array source.",
    "examples": [
        "Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]",
        "Output: 1",
        "Explanation: source can be transformed the following way:",
        "- Swap indices 0 and 1: source = [2,1,3,4]",
        "- Swap indices 2 and 3: source = [2,1,4,3]",
        "The Hamming distance of source and target is 1 as they differ in 1 position: index 3.",
        "Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []",
        "Output: 2",
        "Explanation: There are no allowed swaps.",
        "The Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.",
        "Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "n == source. length == target. length1 <= n <= 1051 <= source[i]",
        " target[i] <= 1050 <= allowedSwaps. length <= 105allowedSwaps[i]. length == 20 <= ai",
        " bi <= n - 1ai != bi"
    ]
},
{
    "id": "1726",
    "title": "Tuple with Same Product",
    "question": "Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.",
    "examples": [
        "Input: nums = [2,3,4,6]",
        "Output: 8",
        "Explanation: There are 8 valid tuples:",
        "(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)",
        "(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)",
        "Input: nums = [1,2,4,5,10]",
        "Output: 16",
        "Explanation: There are 16 valids tuples:",
        "(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)",
        "(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)",
        "(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)",
        "(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)",
        "Input: nums = [2,3,4,6,8,12]",
        "Output: 40",
        "Input: nums = [2,3,5,7]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10001 <= nums[i] <= 104All elements in nums are distinct."
    ]
},
{
    "id": "1727",
    "title": "Largest Submatrix With Rearrangements",
    "question": "You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.\nReturn the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.",
    "examples": [
        "Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]",
        "Output: 4",
        "Explanation: You can rearrange the columns as shown above.",
        "The largest submatrix of 1s, in bold, has an area of 4.",
        "Input: matrix = [[1,0,1,0,1]]",
        "Output: 3",
        "Explanation: You can rearrange the columns as shown above.",
        "The largest submatrix of 1s, in bold, has an area of 3.",
        "Input: matrix = [[1,1,0],[1,0,1]]",
        "Output: 2",
        "Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2. Input: matrix = [[0,0],[0,0]]",
        "Output: 0",
        "Explanation: As there are no 1s, no submatrix of 1s can be formed and the area is 0."
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[i]. length1 <= m * n <= 105matrix[i][j] is 0 or 1."
    ]
},
{
    "id": "1733",
    "title": "Minimum Number of People to Teach",
    "question": "On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.\nYou are given an integer n, an array languages, and an array friendships where:You can choose one language and teach it to some users so that all friends can communicate with each other.\n Return the minimum number of users you need to teach.",
    "examples": [
        "Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]",
        "Output: 1",
        "Explanation: You can either teach user 1 the second language or user 2 the first language.",
        "Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]",
        "Output: 2",
        "Explanation: Teach the third language to users 1 and 3, yielding two users to teach.",
        ""
    ],
    "constraints": [
        "There are n languages numbered 1 through n",
        "languages[i] is the set of languages the i​​​​​​th​​​​ user knows",
        " andfriendships[i] = [u​​​​​​i​​​",
        " v​​​​​​i] denotes a friendship between the users u​​​​​​​​​​​i​​​​​ and vi. 2 <= n <= 500languages. length == m1 <= m <= 5001 <= languages[i]. length <= n1 <= languages[i][j] <= n1 <= u​​​​​​i < v​​​​​​i <= languages. length1 <= friendships. length <= 500All tuples (u​​​​​i",
        " v​​​​​​i) are uniquelanguages[i] contains only unique values"
    ]
},
{
    "id": "1734",
    "title": "Decode XORed Permutation",
    "question": "There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1].\n For example, if perm = [1,3,2], then encoded = [2,1].\nGiven the encoded array, return the original array perm.\n It is guaranteed that the answer exists and is unique.",
    "examples": [
        "Input: encoded = [3,1]",
        "Output: [1,2,3]",
        "Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]",
        "Input: encoded = [6,5,4,6]",
        "Output: [2,4,1,5,3]",
        ""
    ],
    "constraints": [
        "3 <= n < 105n is odd. encoded. length == n - 1"
    ]
},
{
    "id": "1737",
    "title": "Change Minimum Characters to Satisfy One of Three Conditions",
    "question": "You are given two strings a and b that consist of lowercase letters.\n In one operation, you can change any character in a or b to any lowercase letter.\nYour goal is to satisfy one of the following three conditions:Return the minimum number of operations needed to achieve your goal.",
    "examples": [
        "Input: a = \"aba\", b = \"caa\"",
        "Output: 2",
        "Explanation: Consider the best way to make each condition true:",
        "1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b.",
        "2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a.",
        "3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter.",
        "The best way was done in 2 operations (either condition 1 or condition 3).",
        "Input: a = \"dabadd\", b = \"cda\"",
        "Output: 3",
        "Explanation: The best way is to make condition 1 true by changing b to \"eee\".",
        ""
    ],
    "constraints": [
        "Every letter in a is strictly less than every letter in b in the alphabet. Every letter in b is strictly less than every letter in a in the alphabet. Both a and b consist of only one distinct letter. 1 <= a. length",
        " b. length <= 105a and b consist only of lowercase letters."
    ]
},
{
    "id": "1738",
    "title": "Find Kth Largest XOR Coordinate Value",
    "question": "You are given a 2D matrix of size m x n, consisting of non-negative integers.\n You are also given an integer k.\nThe value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).\nFind the kth largest value (1-indexed) of all the coordinates of matrix.",
    "examples": [
        "Input: matrix = [[5,2],[1,6]], k = 1",
        "Output: 7",
        "Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value. Input: matrix = [[5,2],[1,6]], k = 2",
        "Output: 5",
        "Explanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value. Input: matrix = [[5,2],[1,6]], k = 3",
        "Output: 4",
        "Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value. Input: matrix = [[5,2],[1,6]], k = 4",
        "Output: 0",
        "Explanation: The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value."
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 10000 <= matrix[i][j] <= 1061 <= k <= m * n"
    ]
},
{
    "id": "1743",
    "title": "Restore the Array From Adjacent Pairs",
    "question": "There is an integer array nums that consists of n unique elements, but you have forgotten it.\n However, you do remember every pair of adjacent elements in nums.\nYou are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.\nIt is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]].\n The pairs can appear in any order.\nReturn the original array nums.\n If there are multiple solutions, return any of them.",
    "examples": [
        "Input: adjacentPairs = [[2,1],[3,4],[3,2]]",
        "Output: [1,2,3,4]",
        "Explanation: This array has all its adjacent pairs in adjacentPairs.",
        "Notice that adjacentPairs[i] may not be in left-to-right order.",
        "Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]",
        "Output: [-2,4,1,-3]",
        "Explanation: There can be negative numbers.",
        "Another solution is [-3,1,4,-2], which would also be accepted.",
        "Input: adjacentPairs = [[100000,-100000]]",
        "Output: [100000,-100000]",
        ""
    ],
    "constraints": [
        "nums. length == nadjacentPairs. length == n - 1adjacentPairs[i]. length == 22 <= n <= 105-105 <= nums[i]",
        " ui",
        " vi <= 105There exists some nums that has adjacentPairs as its pairs."
    ]
},
{
    "id": "1744",
    "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
    "question": "You are given a (0-indexed) array of positive integers candiesCount where candiesCount[i] represents the number of candies of the ith type you have.\n You are also given a 2D array queries where queries[i] = [favoriteTypei, favoriteDayi, dailyCapi].\nYou play a game with the following rules:Construct a boolean array answer such that answer.\nlength == queries.\nlength and answer[i] is true if you can eat a candy of type favoriteTypei on day favoriteDayi without eating more than dailyCapi candies on any day, and false otherwise.\n Note that you can eat different types of candy on the same day, provided that you follow rule 2.\nReturn the constructed array answer.",
    "examples": [
        "Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]",
        "Output: [true,false,true]",
        "Explanation:",
        "1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.",
        "2- You can eat at most 4 candies each day.",
        "   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.",
        "   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.",
        "3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.",
        "Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]",
        "Output: [false,true,true,false,false]",
        ""
    ],
    "constraints": [
        "You start eating candies on day 0. You cannot eat any candy of type i unless you have eaten all candies of type i - 1. You must eat at least one candy per day until you have eaten all the candies. 1 <= candiesCount. length <= 1051 <= candiesCount[i] <= 1051 <= queries. length <= 105queries[i]. length == 30 <= favoriteTypei < candiesCount. length0 <= favoriteDayi <= 1091 <= dailyCapi <= 109"
    ]
},
{
    "id": "509",
    "title": "Fibonacci Number",
    "question": "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1.\n That is,Given n, calculate F(n).",
    "examples": [
        "F(0) = 0, F(1) = 1",
        "F(n) = F(n - 1) + F(n - 2), for n > 1.",
        "Input: n = 2",
        "Output: 1",
        "Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.",
        "Input: n = 3",
        "Output: 2",
        "Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.",
        "Input: n = 4",
        "Output: 3",
        "Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.",
        ""
    ],
    "constraints": [
        "0 <= n <= 30"
    ]
},
{
    "id": "1749",
    "title": "Maximum Absolute Sum of Any Subarray",
    "question": "You are given an integer array nums.\n The absolute sum of a subarray [numsl, numsl+1, .\n.\n.\n, numsr-1, numsr] is abs(numsl + numsl+1 + .\n.\n.\n + numsr-1 + numsr).\nReturn the maximum absolute sum of any (possibly empty) subarray of nums.\nNote that abs(x) is defined as follows:",
    "examples": [
        "Input: nums = [1,-3,2,3,-4]",
        "Output: 5",
        "Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.",
        "Input: nums = [2,-5,1,-4,3,-2]",
        "Output: 8",
        "Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.",
        ""
    ],
    "constraints": [
        "If x is a negative integer",
        " then abs(x) = -x. If x is a non-negative integer",
        " then abs(x) = x. 1 <= nums. length <= 105-104 <= nums[i] <= 104"
    ]
},
{
    "id": "1750",
    "title": "Minimum Length of String After Deleting Similar Ends",
    "question": "Given a string s consisting only of characters 'a', 'b', and 'c'.\n You are asked to apply the following algorithm on the string any number of times:Return the minimum length of s after performing the above operation any number of times (possibly zero times).",
    "examples": [
        "Input: s = \"ca\"",
        "Output: 2",
        "Explanation: You can't remove any characters, so the string stays as is.",
        "Input: s = \"cabaabac\"",
        "Output: 0",
        "Explanation: An optimal sequence of operations is:",
        "- Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".",
        "- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".",
        "- Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".",
        "- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\". Input: s = \"aabccabba\"",
        "Output: 3",
        "Explanation: An optimal sequence of operations is:",
        "- Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".",
        "- Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s only consists of characters 'a'",
        " 'b'",
        " and 'c'."
    ]
},
{
    "id": "1753",
    "title": "Maximum Score From Removing Stones",
    "question": "You are playing a solitaire game with three piles of stones of sizes a​​​​​​, b,​​​​​​ and c​​​​​​ respectively.\n Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score.\n The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).\nGiven three integers a​​​​​, b,​​​​​ and c​​​​​, return the maximum score you can get.",
    "examples": [
        "Input: a = 2, b = 4, c = 6",
        "Output: 6",
        "Explanation: The starting state is (2, 4, 6). One optimal set of moves is:",
        "- Take from 1st and 3rd piles, state is now (1, 4, 5)",
        "- Take from 1st and 3rd piles, state is now (0, 4, 4)",
        "- Take from 2nd and 3rd piles, state is now (0, 3, 3)",
        "- Take from 2nd and 3rd piles, state is now (0, 2, 2)",
        "- Take from 2nd and 3rd piles, state is now (0, 1, 1)",
        "- Take from 2nd and 3rd piles, state is now (0, 0, 0)",
        "There are fewer than two non-empty piles, so the game ends. Total: 6 points.",
        "Input: a = 4, b = 4, c = 6",
        "Output: 7",
        "Explanation: The starting state is (4, 4, 6). One optimal set of moves is:",
        "- Take from 1st and 2nd piles, state is now (3, 3, 6)",
        "- Take from 1st and 3rd piles, state is now (2, 3, 5)",
        "- Take from 1st and 3rd piles, state is now (1, 3, 4)",
        "- Take from 1st and 3rd piles, state is now (0, 3, 3)",
        "- Take from 2nd and 3rd piles, state is now (0, 2, 2)",
        "- Take from 2nd and 3rd piles, state is now (0, 1, 1)",
        "- Take from 2nd and 3rd piles, state is now (0, 0, 0)",
        "There are fewer than two non-empty piles, so the game ends. Total: 7 points.",
        "Input: a = 1, b = 8, c = 8",
        "Output: 8",
        "Explanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.",
        "After that, there are fewer than two non-empty piles, so the game ends.",
        ""
    ],
    "constraints": [
        "1 <= a",
        " b",
        " c <= 105"
    ]
},
{
    "id": "1754",
    "title": "Largest Merge Of Two Strings",
    "question": "You are given two strings word1 and word2.\n You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:Return the lexicographically largest merge you can construct.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b.\n For example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.",
    "examples": [
        "Input: word1 = \"cabaa\", word2 = \"bcaaa\"",
        "Output: \"cbcabaaaaa\"",
        "Explanation: One way to get the lexicographically largest merge is:",
        "- Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"",
        "- Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"",
        "- Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"",
        "- Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"",
        "- Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"",
        "- Append the remaining 5 a's from word1 and word2 at the end of merge.",
        "Input: word1 = \"abcabc\", word2 = \"abdcaba\"",
        "Output: \"abdcabcabcaba\"",
        ""
    ],
    "constraints": [
        "If word1 is non-empty",
        " append the first character in word1 to merge and delete it from word1.\n\n\t\nFor example",
        " if word1 = \"abc\" and merge = \"dv\"",
        " then after choosing this operation",
        " word1 = \"bc\" and merge = \"dva\".\n\nFor example",
        " if word1 = \"abc\" and merge = \"dv\"",
        " then after choosing this operation",
        " word1 = \"bc\" and merge = \"dva\". If word2 is non-empty",
        " append the first character in word2 to merge and delete it from word2.\n\t\nFor example",
        " if word2 = \"abc\" and merge = \"\"",
        " then after choosing this operation",
        " word2 = \"bc\" and merge = \"a\".\n\nFor example",
        " if word2 = \"abc\" and merge = \"\"",
        " then after choosing this operation",
        " word2 = \"bc\" and merge = \"a\". 1 <= word1. length",
        " word2. length <= 3000word1 and word2 consist only of lowercase English letters."
    ]
},
{
    "id": "1759",
    "title": "Count Number of Homogenous Substrings",
    "question": "Given a string s, return the number of homogenous substrings of s.\n Since the answer may be too large, return it modulo 109 + 7.\nA string is homogenous if all the characters of the string are the same.\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
        "Input: s = \"abbcccaa\"",
        "Output: 13",
        "Explanation: The homogenous substrings are listed as below:",
        "\"a\"   appears 3 times.",
        "\"aa\"  appears 1 time.",
        "\"b\"   appears 2 times.",
        "\"bb\"  appears 1 time.",
        "\"c\"   appears 3 times.",
        "\"cc\"  appears 2 times.",
        "\"ccc\" appears 1 time.",
        "3 + 1 + 2 + 1 + 3 + 2 + 1 = 13. Input: s = \"xy\"",
        "Output: 2",
        "Explanation: The homogenous substrings are \"x\" and \"y\". Input: s = \"zzzzz\"",
        "Output: 15",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s consists of lowercase letters."
    ]
},
{
    "id": "1760",
    "title": "Minimum Limit of Balls in a Bag",
    "question": "You are given an integer array nums where the ith bag contains nums[i] balls.\n You are also given an integer maxOperations.\nYou can perform the following operation at most maxOperations times:Your penalty is the maximum number of balls in a bag.\n You want to minimize your penalty after the operations.\nReturn the minimum possible penalty after performing the operations.",
    "examples": [
        "Input: nums = [9], maxOperations = 2",
        "Output: 3",
        "Explanation: ",
        "- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].",
        "- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].",
        "The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.",
        "Input: nums = [2,4,8,2], maxOperations = 4",
        "Output: 2",
        "Explanation:",
        "- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].",
        "- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].",
        "- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].",
        "- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].",
        "The bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.",
        "Input: nums = [7,17], maxOperations = 2",
        "Output: 7",
        ""
    ],
    "constraints": [
        "Take any bag of balls and divide it into two new bags with a positive number of balls.\n\n\t\nFor example",
        " a bag of 5 balls can become two new bags of 1 and 4 balls",
        " or two new bags of 2 and 3 balls.\n\nFor example",
        " a bag of 5 balls can become two new bags of 1 and 4 balls",
        " or two new bags of 2 and 3 balls. 1 <= nums. length <= 1051 <= maxOperations",
        " nums[i] <= 109"
    ]
},
{
    "id": "1764",
    "title": "Form Array by Concatenating Subarrays of Another Array",
    "question": "You are given a 2D integer array groups of length n.\n You are also given an integer array nums.\nYou are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (0-indexed), and if i > 0, the (i-1)th subarray appears before the ith subarray in nums (i.\ne.\n the subarrays must be in the same order as groups).\nReturn true if you can do this task, and false otherwise.\nNote that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray.\n A subarray is a contiguous sequence of elements within an array.",
    "examples": [
        "Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]",
        "Output: true",
        "Explanation: You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,3,-2,0].",
        "These subarrays are disjoint as they share no common nums[k] element.",
        "Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]",
        "Output: false",
        "Explanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.",
        "[10,-2] must come before [1,2,3,4].",
        "Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]",
        "Output: false",
        "Explanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.",
        "They share a common elements nums[4] (0-indexed).",
        ""
    ],
    "constraints": [
        "groups. length == n1 <= n <= 1031 <= groups[i]. length",
        " sum(groups[i]. length) <= 1031 <= nums. length <= 103-107 <= groups[i][j]",
        " nums[k] <= 107"
    ]
},
{
    "id": "1765",
    "title": "Map of Highest Peak",
    "question": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\nYou must assign each cell a height in a way that follows these rules:Find an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height.\n If there are multiple solutions, return any of them.",
    "examples": [
        "Input: isWater = [[0,1],[0,0]]",
        "Output: [[1,0],[2,1]]",
        "Explanation: The image shows the assigned heights of each cell.",
        "The blue cell is the water cell, and the green cells are the land cells.",
        "Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]",
        "Output: [[1,1,0],[0,1,1],[1,2,2]]",
        "Explanation: A height of 2 is the maximum possible height of any assignment.",
        "Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.",
        ""
    ],
    "constraints": [
        "If isWater[i][j] == 0",
        " cell (i",
        " j) is a land cell. If isWater[i][j] == 1",
        " cell (i",
        " j) is a water cell. The height of each cell must be non-negative. If the cell is a water cell",
        " its height must be 0. Any two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north",
        " east",
        " south",
        " or west of the latter (i. e.",
        " their sides are touching). m == isWater. lengthn == isWater[i]. length1 <= m",
        " n <= 1000isWater[i][j] is 0 or 1. There is at least one water cell."
    ]
},
{
    "id": "1769",
    "title": "Minimum Number of Operations to Move All Balls to Each Box",
    "question": "You have n boxes.\n You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.\nIn one operation, you can move one ball from a box to an adjacent box.\n Box i is adjacent to box j if abs(i - j) == 1.\n Note that after doing so, there may be more than one ball in some boxes.\nReturn an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.\nEach answer[i] is calculated considering the initial state of the boxes.",
    "examples": [
        "Input: boxes = \"110\"",
        "Output: [1,1,3]",
        "Explanation: The answer for each box is as follows:",
        "1) First box: you will have to move one ball from the second box to the first box in one operation.",
        "2) Second box: you will have to move one ball from the first box to the second box in one operation.",
        "3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.",
        "Input: boxes = \"001011\"",
        "Output: [11,8,5,4,3,4]"
    ],
    "constraints": [
        "n == boxes. length1 <= n <= 2000boxes[i] is either '0' or '1'."
    ]
},
{
    "id": "1770",
    "title": "Maximum Score from Performing Multiplication Operations",
    "question": "You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m.\n The arrays are 1-indexed.\nYou begin with a score of 0.\n You want to perform exactly m operations.\n On the ith operation (1-indexed), you will:Return the maximum score after performing m operations.",
    "examples": [
        "Input: nums = [1,2,3], multipliers = [3,2,1]",
        "Output: 14",
        "Explanation: An optimal solution is as follows:",
        "- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.",
        "- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.",
        "- Choose from the end, [1], adding 1 * 1 = 1 to the score.",
        "The total score is 9 + 4 + 1 = 14. Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]",
        "Output: 102",
        "Explanation: An optimal solution is as follows:",
        "- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.",
        "- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.",
        "- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.",
        "- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.",
        "- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. ",
        "The total score is 50 + 15 - 9 + 4 + 42 = 102.",
        ""
    ],
    "constraints": [
        "Choose one integer x from either the start or the end of the array nums. Add multipliers[i] * x to your score. Remove x from the array nums. n == nums. lengthm == multipliers. length1 <= m <= 103m <= n <= 105 -1000 <= nums[i]",
        " multipliers[i] <= 1000"
    ]
},
{
    "id": "53",
    "title": "Maximum Subarray",
    "question": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\nA subarray is a contiguous part of an array.\n   Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.",
    "examples": [
        "Input: nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "Output: 6",
        "Explanation: [4,-1,2,1] has the largest sum = 6.",
        "Input: nums = [1]",
        "Output: 1",
        "Input: nums = [5,4,-1,7,8]",
        "Output: 23",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 3 * 104-105 <= nums[i] <= 105"
    ]
},
{
    "id": "520",
    "title": "Detect Capital",
    "question": "We define the usage of capitals in a word to be right when one of the following cases holds:Given a string word, return true if the usage of capitals in it is right.",
    "examples": [
        "Input: word = \"USA\"",
        "Output: true",
        "Input: word = \"FlaG\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "All letters in this word are capitals",
        " like \"USA\". All letters in this word are not capitals",
        " like \"leetcode\". Only the first letter in this word is capital",
        " like \"Google\". 1 <= word. length <= 100word consists of lowercase and uppercase English letters."
    ]
},
{
    "id": "1774",
    "title": "Closest Dessert Cost",
    "question": "You would like to make dessert and are preparing to buy the ingredients.\n You have n ice cream base flavors and m types of toppings to choose from.\n You must follow these rules when making your dessert:You are given three inputs:You want to make a dessert with a total cost as close to target as possible.\nReturn the closest possible cost of the dessert to target.\n If there are multiple, return the lower one.",
    "examples": [
        "Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10",
        "Output: 10",
        "Explanation: Consider the following combination (all 0-indexed):",
        "- Choose base 1: cost 7",
        "- Take 1 of topping 0: cost 1 x 3 = 3",
        "- Take 0 of topping 1: cost 0 x 4 = 0",
        "Total: 7 + 3 + 0 = 10.",
        "Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18",
        "Output: 17",
        "Explanation: Consider the following combination (all 0-indexed):",
        "- Choose base 1: cost 3",
        "- Take 1 of topping 0: cost 1 x 4 = 4",
        "- Take 2 of topping 1: cost 2 x 5 = 10",
        "- Take 0 of topping 2: cost 0 x 100 = 0",
        "Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.",
        "Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9",
        "Output: 8",
        "Explanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.",
        "Input: baseCosts = [10], toppingCosts = [1], target = 1",
        "Output: 10",
        "Explanation: Notice that you don't have to have any toppings, but you must have exactly one base."
    ],
    "constraints": [
        "There must be exactly one ice cream base. You can add one or more types of topping or have no toppings at all. There are at most two of each type of topping. baseCosts",
        " an integer array of length n",
        " where each baseCosts[i] represents the price of the ith ice cream base flavor. toppingCosts",
        " an integer array of length m",
        " where each toppingCosts[i] is the price of one of the ith topping. target",
        " an integer representing your target price for dessert. n == baseCosts. lengthm == toppingCosts. length1 <= n",
        " m <= 101 <= baseCosts[i]",
        " toppingCosts[i] <= 1041 <= target <= 104"
    ]
},
{
    "id": "1775",
    "title": "Equal Sum Arrays With Minimum Number of Operations",
    "question": "You are given two arrays of integers nums1 and nums2, possibly of different lengths.\n The values in the arrays are between 1 and 6, inclusive.\nIn one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.\nReturn the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2.\n Return -1​​​​​ if it is not possible to make the sum of the two arrays equal.",
    "examples": [
        "Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]",
        "Output: 3",
        "Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.",
        "- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].",
        "- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].",
        "- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].",
        "Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]",
        "Output: -1",
        "Explanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.",
        "Input: nums1 = [6,6], nums2 = [1]",
        "Output: 3",
        "Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. ",
        "- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].",
        "- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].",
        "- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].",
        ""
    ],
    "constraints": [
        "1 <= nums1. length",
        " nums2. length <= 1051 <= nums1[i]",
        " nums2[i] <= 6"
    ]
},
{
    "id": "1780",
    "title": "Check if Number is a Sum of Powers of Three",
    "question": "Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three.\n Otherwise, return false.\nAn integer y is a power of three if there exists an integer x such that y == 3x.",
    "examples": [
        "Input: n = 12",
        "Output: true",
        "Explanation: 12 = 31 + 32",
        "Input: n = 91",
        "Output: true",
        "Explanation: 91 = 30 + 32 + 34",
        "Input: n = 21",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= n <= 107"
    ]
},
{
    "id": "1781",
    "title": "Sum of Beauty of All Substrings",
    "question": "The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.\nGiven a string s, return the sum of beauty of all of its substrings.",
    "examples": [
        "Input: s = \"aabcb\"",
        "Output: 5",
        "Explanation: The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1. Input: s = \"aabcbaa\"",
        "Output: 17",
        ""
    ],
    "constraints": [
        "For example",
        " the beauty of \"abaacc\" is 3 - 1 = 2. 1 <= s. length <= 500s consists of only lowercase English letters."
    ]
},
{
    "id": "1785",
    "title": "Minimum Elements to Add to Form a Given Sum",
    "question": "You are given an integer array nums and two integers limit and goal.\n The array nums has an interesting property that abs(nums[i]) <= limit.\nReturn the minimum number of elements you need to add to make the sum of the array equal to goal.\n The array must maintain its property that abs(nums[i]) <= limit.\nNote that abs(x) equals x if x >= 0, and -x otherwise.",
    "examples": [
        "Input: nums = [1,-1,1], limit = 3, goal = -4",
        "Output: 2",
        "Explanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.",
        "Input: nums = [1,-10,9,1], limit = 100, goal = 0",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= limit <= 106-limit <= nums[i] <= limit-109 <= goal <= 109"
    ]
},
{
    "id": "1786",
    "title": "Number of Restricted Paths From First to Last Node",
    "question": "There is an undirected weighted connected graph.\n You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.\nA path from node start to node end is a sequence of nodes [z0, z1, z2, .\n.\n.\n, zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1.\nThe distance of a path is the sum of the weights on the edges of the path.\n Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x.\n A restricted path is a path that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) where 0 <= i <= k-1.\nReturn the number of restricted paths from node 1 to node n.\n Since that number may be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]",
        "Output: 3",
        "Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:",
        "1) 1 --> 2 --> 5",
        "2) 1 --> 2 --> 3 --> 5",
        "3) 1 --> 3 --> 5",
        "Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]",
        "Output: 1",
        "Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7.",
        ""
    ],
    "constraints": [
        "1 <= n <= 2 * 104n - 1 <= edges. length <= 4 * 104edges[i]. length == 31 <= ui",
        " vi <= nui != vi1 <= weighti <= 105There is at most one edge between any two nodes. There is at least one path between any two nodes."
    ]
},
{
    "id": "1792",
    "title": "Maximum Average Pass Ratio",
    "question": "There is a school that has classes of students and each class will be having a final exam.\n You are given a 2D integer array classes, where classes[i] = [passi, totali].\n You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.\nYou are also given an integer extraStudents.\n There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to.\n You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.\nThe pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class.\n The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.\nReturn the maximum possible average pass ratio after assigning the extraStudents students.\n Answers within 10-5 of the actual answer will be accepted.",
    "examples": [
        "Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2",
        "Output: 0. 78333",
        "Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0. 78333.",
        "Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4",
        "Output: 0. 53485",
        ""
    ],
    "constraints": [
        "1 <= classes. length <= 105classes[i]. length == 21 <= passi <= totali <= 1051 <= extraStudents <= 105"
    ]
},
{
    "id": "1797",
    "title": "Design Authentication Manager",
    "question": "There is an authentication system that works with authentication tokens.\n For each session, the user will receive a new authentication token that will expire timeToLive seconds after the currentTime.\n If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime.\nImplement the AuthenticationManager class:Note that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.",
    "examples": [
        "Input",
        "[\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]",
        "[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]",
        "Output",
        "[null, null, null, 1, null, null, null, 0]",
        "",
        "Explanation",
        "AuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.",
        "authenticationManager. renew(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.",
        "authenticationManager. generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.",
        "authenticationManager. countUnexpiredTokens(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.",
        "authenticationManager. generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.",
        "authenticationManager. renew(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.",
        "authenticationManager. renew(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.",
        "authenticationManager. countUnexpiredTokens(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0.",
        ""
    ],
    "constraints": [
        "AuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive. generate(string tokenId",
        " int currentTime) generates a new token with the given tokenId at the given currentTime in seconds. renew(string tokenId",
        " int currentTime) renews the unexpired token with the given tokenId at the given currentTime in seconds. If there are no unexpired tokens with the given tokenId",
        " the request is ignored",
        " and nothing happens. countUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime. 1 <= timeToLive <= 1081 <= currentTime <= 1081 <= tokenId. length <= 5tokenId consists only of lowercase letters. All calls to generate will contain unique values of tokenId. The values of currentTime across all the function calls will be strictly increasing. At most 2000 calls will be made to all functions combined."
    ]
},
{
    "id": "1798",
    "title": "Maximum Number of Consecutive Values You Can Make",
    "question": "You are given an integer array coins of length n which represents the n coins that you own.\n The value of the ith coin is coins[i].\n You can make some value x if you can choose some of your n coins such that their values sum up to x.\nReturn the maximum number of consecutive integer values that you can make with your coins starting from and including 0.\nNote that you may have multiple coins of the same value.",
    "examples": [
        "Input: coins = [1,3]",
        "Output: 2",
        "Explanation: You can make the following values:",
        "- 0: take []",
        "- 1: take [1]",
        "You can make 2 consecutive integer values starting from 0. Input: coins = [1,1,1,4]",
        "Output: 8",
        "Explanation: You can make the following values:",
        "- 0: take []",
        "- 1: take [1]",
        "- 2: take [1,1]",
        "- 3: take [1,1,1]",
        "- 4: take [4]",
        "- 5: take [4,1]",
        "- 6: take [4,1,1]",
        "- 7: take [4,1,1,1]",
        "You can make 8 consecutive integer values starting from 0. Input: nums = [1,4,10,3,1]",
        "Output: 20"
    ],
    "constraints": [
        "coins. length == n1 <= n <= 4 * 1041 <= coins[i] <= 4 * 104"
    ]
},
{
    "id": "1801",
    "title": "Number of Orders in the Backlog",
    "question": "You are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei.\n The orderTypei is:Note that orders[i] represents a batch of amounti independent orders with the same price and order type.\n All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.\nThere is a backlog that consists of orders that have not been executed.\n The backlog is initially empty.\n When an order is placed, the following happens:Return the total amount of orders in the backlog after placing all the orders from the input.\n Since this number can be large, return it modulo 109 + 7.",
    "examples": [
        "Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]",
        "Output: 6",
        "Explanation: Here is what happens with the orders:",
        "- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.",
        "- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.",
        "- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.",
        "- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.",
        "Finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.",
        "Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]",
        "Output: 999999984",
        "Explanation: Here is what happens with the orders:",
        "- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.",
        "- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.",
        "- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.",
        "- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.",
        "Finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).",
        ""
    ],
    "constraints": [
        "0 if it is a batch of buy orders",
        " or1 if it is a batch of sell orders. If the order is a buy order",
        " you look at the sell order with the smallest price in the backlog. If that sell order's price is smaller than or equal to the current buy order's price",
        " they will match and be executed",
        " and that sell order will be removed from the backlog. Else",
        " the buy order is added to the backlog. Vice versa",
        " if the order is a sell order",
        " you look at the buy order with the largest price in the backlog. If that buy order's price is larger than or equal to the current sell order's price",
        " they will match and be executed",
        " and that buy order will be removed from the backlog. Else",
        " the sell order is added to the backlog. 1 <= orders. length <= 105orders[i]. length == 31 <= pricei",
        " amounti <= 109orderTypei is either 0 or 1."
    ]
},
{
    "id": "521",
    "title": "Longest Uncommon Subsequence I",
    "question": "Given two strings a and b, return the length of the longest uncommon subsequence between a and b.\n If the longest uncommon subsequence does not exist, return -1.\nAn uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.",
    "examples": [
        "Input: a = \"aba\", b = \"cdc\"",
        "Output: 3",
        "Explanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".",
        "Note that \"cdc\" is also a longest uncommon subsequence.",
        "Input: a = \"aaa\", b = \"bbb\"",
        "Output: 3",
        "Explanation: The longest uncommon subsequences are \"aaa\" and \"bbb\".",
        "Input: a = \"aaa\", b = \"aaa\"",
        "Output: -1",
        "Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.",
        ""
    ],
    "constraints": [
        "For example",
        " \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\"",
        " \"aeb\"",
        " and \"\" (empty string). 1 <= a. length",
        " b. length <= 100a and b consist of lower-case English letters."
    ]
},
{
    "id": "1802",
    "title": "Maximum Value at a Given Index in a Bounded Array",
    "question": "You are given three positive integers: n, index, and maxSum.\n You want to construct an array nums (0-indexed) that satisfies the following conditions:Return nums[index] of the constructed array.\nNote that abs(x) equals x if x >= 0, and -x otherwise.",
    "examples": [
        "Input: n = 4, index = 2,  maxSum = 6",
        "Output: 2",
        "Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.",
        "There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].",
        "Input: n = 6, index = 1,  maxSum = 10",
        "Output: 3",
        ""
    ],
    "constraints": [
        "nums. length == nnums[i] is a positive integer where 0 <= i < n. abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1. The sum of all the elements of nums does not exceed maxSum. nums[index] is maximized. 1 <= n <= maxSum <= 1090 <= index < n"
    ]
},
{
    "id": "1806",
    "title": "Minimum Number of Operations to Reinitialize a Permutation",
    "question": "You are given an even integer n​​​​​​.\n You initially have a permutation perm of size n​​ where perm[i] == i​ (0-indexed)​​​​.\nIn one operation, you will create a new array arr, and for each i:You will then assign arr​​​​ to perm.\nReturn the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.",
    "examples": [
        "Input: n = 2",
        "Output: 1",
        "Explanation: perm = [0,1] initially.",
        "After the 1st operation, perm = [0,1]",
        "So it takes only 1 operation.",
        "Input: n = 4",
        "Output: 2",
        "Explanation: perm = [0,1,2,3] initially.",
        "After the 1st operation, perm = [0,2,1,3]",
        "After the 2nd operation, perm = [0,1,2,3]",
        "So it takes only 2 operations.",
        "Input: n = 6",
        "Output: 4",
        ""
    ],
    "constraints": [
        "If i % 2 == 0",
        " then arr[i] = perm[i / 2]. If i % 2 == 1",
        " then arr[i] = perm[n / 2 + (i - 1) / 2]. 2 <= n <= 1000n​​​​​​ is even."
    ]
},
{
    "id": "1807",
    "title": "Evaluate the Bracket Pairs of a String",
    "question": "You are given a string s that contains some bracket pairs, with each pair containing a non-empty key.\nYou know the values of a wide range of keys.\n This is represented by a 2D string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei.\nYou are tasked to evaluate all of the bracket pairs.\n When you evaluate a bracket pair that contains some key keyi, you will:Each key will appear at most once in your knowledge.\n There will not be any nested brackets in s.\nReturn the resulting string after evaluating all of the bracket pairs.",
    "examples": [
        "Input: s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]",
        "Output: \"bobistwoyearsold\"",
        "Explanation:",
        "The key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\".",
        "The key \"age\" has a value of \"two\", so replace \"(age)\" with \"two\".",
        "Input: s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]",
        "Output: \"hi?\"",
        "Explanation: As you do not know the value of the key \"name\", replace \"(name)\" with \"?\".",
        "Input: s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]",
        "Output: \"yesyesyesaaa\"",
        "Explanation: The same key can appear multiple times.",
        "The key \"a\" has a value of \"yes\", so replace all occurrences of \"(a)\" with \"yes\".",
        "Notice that the \"a\"s not in a bracket pair are not evaluated.",
        "Input: s = \"(a)(b)\", knowledge = [[\"a\",\"b\"],[\"b\",\"a\"]]",
        "Output: \"ba\""
    ],
    "constraints": [
        "For example",
        " in the string \"(name)is(age)yearsold\"",
        " there are two bracket pairs that contain the keys \"name\" and \"age\". Replace keyi and the bracket pair with the key's corresponding valuei. If you do not know the value of the key",
        " you will replace keyi and the bracket pair with a question mark \"?\" (without the quotation marks). 1 <= s. length <= 1050 <= knowledge. length <= 105knowledge[i]. length == 21 <= keyi. length",
        " valuei. length <= 10s consists of lowercase English letters and round brackets '(' and ')'. Every open bracket '(' in s will have a corresponding close bracket ')'. The key in each bracket pair of s will be non-empty. There will not be any nested bracket pairs in s. keyi and valuei consist of lowercase English letters. Each keyi in knowledge is unique."
    ]
},
{
    "id": "1813",
    "title": "Sentence Similarity III",
    "question": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces.\n For example, \"Hello World\", \"HELLO\", \"hello world hello world\" are all sentences.\n Words consist of only uppercase and lowercase English letters.\nTwo sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal.\n For example, sentence1 = \"Hello my name is Jane\" and sentence2 = \"Hello Jane\" can be made equal by inserting \"my name is\" between \"Hello\" and \"Jane\" in sentence2.\nGiven two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar.\n Otherwise, return false.",
    "examples": [
        "Input: sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"",
        "Output: true",
        "Explanation: sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\".",
        "Input: sentence1 = \"of\", sentence2 = \"A lot of words\"",
        "Output: false",
        "Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.",
        "Input: sentence1 = \"Eating right now\", sentence2 = \"Eating\"",
        "Output: true",
        "Explanation: sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence.",
        "Input: sentence1 = \"Luky\", sentence2 = \"Lucccky\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= sentence1. length",
        " sentence2. length <= 100sentence1 and sentence2 consist of lowercase and uppercase English letters and spaces. The words in sentence1 and sentence2 are separated by a single space."
    ]
},
{
    "id": "1814",
    "title": "Count Nice Pairs in an Array",
    "question": "You are given an array nums that consists of non-negative integers.\n Let us define rev(x) as the reverse of the non-negative integer x.\n For example, rev(123) = 321, and rev(120) = 21.\n A pair of indices (i, j) is nice if it satisfies all of the following conditions:Return the number of nice pairs of indices.\n Since that number can be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: nums = [42,11,1,97]",
        "Output: 2",
        "Explanation: The two pairs are:",
        " - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.",
        " - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.",
        "Input: nums = [13,10,35,24,76]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "0 <= i < j < nums. lengthnums[i] + rev(nums[j]) == nums[j] + rev(nums[i])1 <= nums. length <= 1050 <= nums[i] <= 109"
    ]
},
{
    "id": "1817",
    "title": "Finding the Users Active Minutes",
    "question": "You are given the logs for users' actions on LeetCode, and an integer k.\n The logs are represented by a 2D integer array logs where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei.\nMultiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.\nThe user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode.\n A minute can only be counted once, even if multiple actions occur during it.\nYou are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose UAM equals j.\nReturn the array answer as described above.",
    "examples": [
        "Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5",
        "Output: [0,2,0,0,0]",
        "Explanation:",
        "The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).",
        "The user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.",
        "Since both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.",
        "Input: logs = [[1,1],[2,2],[2,3]], k = 4",
        "Output: [1,1,0,0]",
        "Explanation:",
        "The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.",
        "The user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.",
        "There is one user with a UAM of 1 and one with a UAM of 2.",
        "Hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.",
        ""
    ],
    "constraints": [
        "1 <= logs. length <= 1040 <= IDi <= 1091 <= timei <= 105k is in the range [The maximum UAM for a user",
        " 105]."
    ]
},
{
    "id": "1818",
    "title": "Minimum Absolute Sum Difference",
    "question": "You are given two positive integer arrays nums1 and nums2, both of length n.\nThe absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed).\nYou can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference.\nReturn the minimum absolute sum difference after replacing at most one element in the array nums1.\n Since the answer may be large, return it modulo 109 + 7.\n|x| is defined as:",
    "examples": [
        "Input: nums1 = [1,7,5], nums2 = [2,3,5]",
        "Output: 3",
        "Explanation: There are two possible optimal solutions:",
        "- Replace the second element with the first: [1,7,5] => [1,1,5], or",
        "- Replace the second element with the third: [1,7,5] => [1,5,5].",
        "Both will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3.",
        "Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]",
        "Output: 0",
        "Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an ",
        "absolute sum difference of 0.",
        "Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]",
        "Output: 20",
        "Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].",
        "This yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20",
        ""
    ],
    "constraints": [
        "x if x >= 0",
        " or-x if x < 0. n == nums1. lengthn == nums2. length1 <= n <= 1051 <= nums1[i]",
        " nums2[i] <= 105"
    ]
},
{
    "id": "1823",
    "title": "Find the Winner of the Circular Game",
    "question": "There are n friends that are playing a game.\n The friends are sitting in a circle and are numbered from 1 to n in clockwise order.\n More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:Given the number of friends, n, and an integer k, return the winner of the game.",
    "examples": [
        "Input: n = 5, k = 2",
        "Output: 3",
        "Explanation: Here are the steps of the game:",
        "1) Start at friend 1.",
        "2) Count 2 friends clockwise, which are friends 1 and 2.",
        "3) Friend 2 leaves the circle. Next start is friend 3.",
        "4) Count 2 friends clockwise, which are friends 3 and 4.",
        "5) Friend 4 leaves the circle. Next start is friend 5.",
        "6) Count 2 friends clockwise, which are friends 5 and 1.",
        "7) Friend 1 leaves the circle. Next start is friend 3.",
        "8) Count 2 friends clockwise, which are friends 3 and 5.",
        "9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner. Input: n = 6, k = 5",
        "Output: 1",
        "Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.",
        ""
    ],
    "constraints": [
        "1 <= k <= n <= 500"
    ]
},
{
    "id": "1824",
    "title": "Minimum Sideway Jumps",
    "question": "There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n.\n A frog starts at point 0 in the second lane and wants to jump to point n.\n However, there could be obstacles along the way.\nYou are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i.\n If obstacles[i] == 0, there are no obstacles at point i.\n There will be at most one obstacle in the 3 lanes at each point.\nThe frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1.\n To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.\nReturn the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.\nNote: There will be no obstacles on points 0 and n.",
    "examples": [
        "Input: obstacles = [0,1,2,3,0]",
        "Output: 2 ",
        "Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).",
        "Note that the frog can jump over obstacles only when making side jumps (as shown at point 2).",
        "Input: obstacles = [0,1,1,3,3,0]",
        "Output: 0",
        "Explanation: There are no obstacles on lane 2. No side jumps are required.",
        "Input: obstacles = [0,2,1,0,3,0]",
        "Output: 2",
        "Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps.",
        ""
    ],
    "constraints": [
        "For example",
        " if obstacles[2] == 1",
        " then there is an obstacle on lane 1 at point 2. For example",
        " the frog can jump from lane 3 at point 3 to lane 1 at point 3. obstacles. length == n + 11 <= n <= 5 * 1050 <= obstacles[i] <= 3obstacles[0] == obstacles[n] == 0"
    ]
},
{
    "id": "1828",
    "title": "Queries on Number of Points Inside a Circle",
    "question": "You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane.\n Multiple points can have the same coordinates.\nYou are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.\nFor each query queries[j], compute the number of points inside the jth circle.\n Points on the border of the circle are considered inside.\nReturn an array answer, where answer[j] is the answer to the jth query.\n   Follow up: Could you find the answer for each query in better complexity than O(n)?",
    "examples": [
        "Input: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]",
        "Output: [3,2,2]",
        "Explanation: The points and circles are shown above.",
        "queries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.",
        "Input: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]",
        "Output: [2,3,2,4]",
        "Explanation: The points and circles are shown above.",
        "queries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.",
        ""
    ],
    "constraints": [
        "1 <= points. length <= 500points[i]. length == 20 <= x​​​​​​i",
        " y​​​​​​i <= 5001 <= queries. length <= 500queries[j]. length == 30 <= xj",
        " yj <= 5001 <= rj <= 500All coordinates are integers."
    ]
},
{
    "id": "530",
    "title": "Minimum Absolute Difference in BST",
    "question": "Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n   Note: This question is the same as 783: https://leetcode.\ncom/problems/minimum-distance-between-bst-nodes/",
    "examples": [
        "Input: root = [4,2,6,1,3]",
        "Output: 1",
        "Input: root = [1,0,48,null,null,12,49]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [2",
        " 104]. 0 <= Node. val <= 105"
    ]
},
{
    "id": "1829",
    "title": "Maximum XOR for Each Query",
    "question": "You are given a sorted array nums of n non-negative integers and an integer maximumBit.\n You want to perform the following query n times:Return an array answer, where answer[i] is the answer to the ith query.",
    "examples": [
        "Input: nums = [0,1,1,3], maximumBit = 2",
        "Output: [0,3,2,3]",
        "Explanation: The queries are answered as follows:",
        "1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.",
        "2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.",
        "3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.",
        "4th query: nums = [0], k = 3 since 0 XOR 3 = 3.",
        "Input: nums = [2,3,4,7], maximumBit = 3",
        "Output: [5,2,6,5]",
        "Explanation: The queries are answered as follows:",
        "1st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.",
        "2nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.",
        "3rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.",
        "4th query: nums = [2], k = 5 since 2 XOR 5 = 7.",
        "Input: nums = [0,1,2,2,5,7], maximumBit = 3",
        "Output: [4,3,6,4,6,7]",
        ""
    ],
    "constraints": [
        "nums. length == n1 <= n <= 1051 <= maximumBit <= 200 <= nums[i] < 2maximumBitnums​​​ is sorted in ascending order."
    ]
},
{
    "id": "1833",
    "title": "Maximum Ice Cream Bars",
    "question": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.\nAt the store, there are n ice cream bars.\n You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins.\n The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.\n Return the maximum number of ice cream bars the boy can buy with coins coins.\nNote: The boy can buy the ice cream bars in any order.",
    "examples": [
        "Input: costs = [1,3,2,4,1], coins = 7",
        "Output: 4",
        "Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.",
        "Input: costs = [10,6,8,7,7,8], coins = 5",
        "Output: 0",
        "Explanation: The boy cannot afford any of the ice cream bars.",
        "Input: costs = [1,6,3,1,2,5], coins = 20",
        "Output: 6",
        "Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.",
        ""
    ],
    "constraints": [
        "costs. length == n1 <= n <= 1051 <= costs[i] <= 1051 <= coins <= 108"
    ]
},
{
    "id": "1834",
    "title": "Single-Threaded CPU",
    "question": "You are given n​​​​​​ tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.\nYou have a single-threaded CPU that can process at most one task at a time and will act in the following way:Return the order in which the CPU will process the tasks.",
    "examples": [
        "Input: tasks = [[1,2],[2,4],[3,2],[4,1]]",
        "Output: [0,2,3,1]",
        "Explanation: The events go as follows: ",
        "- At time = 1, task 0 is available to process. Available tasks = {0}.",
        "- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.",
        "- At time = 2, task 1 is available to process. Available tasks = {1}.",
        "- At time = 3, task 2 is available to process. Available tasks = {1, 2}.",
        "- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.",
        "- At time = 4, task 3 is available to process. Available tasks = {1, 3}.",
        "- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.",
        "- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.",
        "- At time = 10, the CPU finishes task 1 and becomes idle.",
        "Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]",
        "Output: [4,3,2,0,1]",
        "Explanation: The events go as follows:",
        "- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.",
        "- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.",
        "- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.",
        "- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.",
        "- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.",
        "- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.",
        "- At time = 40, the CPU finishes task 1 and becomes idle.",
        ""
    ],
    "constraints": [
        "If the CPU is idle and there are no available tasks to process",
        " the CPU remains idle. If the CPU is idle and there are available tasks",
        " the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time",
        " it will choose the task with the smallest index. Once a task is started",
        " the CPU will process the entire task without stopping. The CPU can finish a task then start a new one instantly. tasks. length == n1 <= n <= 1051 <= enqueueTimei",
        " processingTimei <= 109"
    ]
},
{
    "id": "1838",
    "title": "Frequency of the Most Frequent Element",
    "question": "The frequency of an element is the number of times it occurs in an array.\nYou are given an integer array nums and an integer k.\n In one operation, you can choose an index of nums and increment the element at that index by 1.\nReturn the maximum possible frequency of an element after performing at most k operations.",
    "examples": [
        "Input: nums = [1,2,4], k = 5",
        "Output: 3",
        "Explanation: Increment the first element three times and the second element two times to make nums = [4,4,4].",
        "4 has a frequency of 3. Input: nums = [1,4,8,13], k = 5",
        "Output: 2",
        "Explanation: There are multiple optimal solutions:",
        "- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.",
        "- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.",
        "- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.",
        "Input: nums = [3,9,6], k = 2",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 1051 <= k <= 105"
    ]
},
{
    "id": "1839",
    "title": "Longest Substring Of All Vowels in Order",
    "question": "A string is considered beautiful if it satisfies the following conditions:For example, strings \"aeiou\" and \"aaaaaaeiiiioou\" are considered beautiful, but \"uaeio\", \"aeoiu\", and \"aaaeeeooo\" are not beautiful.\nGiven a string word consisting of English vowels, return the length of the longest beautiful substring of word.\n If no such substring exists, return 0.\nA substring is a contiguous sequence of characters in a string.",
    "examples": [
        "Input: word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\"",
        "Output: 13",
        "Explanation: The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13. Input: word = \"aeeeiiiioooauuuaeiou\"",
        "Output: 5",
        "Explanation: The longest beautiful substring in word is \"aeiou\" of length 5.",
        "Input: word = \"a\"",
        "Output: 0",
        "Explanation: There is no beautiful substring, so return 0.",
        ""
    ],
    "constraints": [
        "Each of the 5 English vowels ('a'",
        " 'e'",
        " 'i'",
        " 'o'",
        " 'u') must appear at least once in it. The letters must be sorted in alphabetical order (i. e. all 'a's before 'e's",
        " all 'e's before 'i's",
        " etc.). 1 <= word. length <= 5 * 105word consists of characters 'a'",
        " 'e'",
        " 'i'",
        " 'o'",
        " and 'u'."
    ]
},
{
    "id": "1845",
    "title": "Seat Reservation Manager",
    "question": "Design a system that manages the reservation state of n seats that are numbered from 1 to n.\nImplement the SeatManager class:",
    "examples": [
        "Input",
        "[\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]",
        "[[5], [], [], [2], [], [], [], [], [5]]",
        "Output",
        "[null, 1, 2, null, 2, 3, 4, 5, null]",
        "",
        "Explanation",
        "SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.",
        "seatManager. reserve();    // All seats are available, so return the lowest numbered seat, which is 1.",
        "seatManager. reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.",
        "seatManager. unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].",
        "seatManager. reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.",
        "seatManager. reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.",
        "seatManager. reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.",
        "seatManager. reserve();    // The only available seat is seat 5, so return 5.",
        "seatManager. unreserve(5); // Unreserve seat 5, so now the available seats are [5].",
        ""
    ],
    "constraints": [
        "SeatManager(int n) Initializes a SeatManager object that will manage n seats numbered from 1 to n. All seats are initially available. int reserve() Fetches the smallest-numbered unreserved seat",
        " reserves it",
        " and returns its number. void unreserve(int seatNumber) Unreserves the seat with the given seatNumber. 1 <= n <= 1051 <= seatNumber <= nFor each call to reserve",
        " it is guaranteed that there will be at least one unreserved seat. For each call to unreserve",
        " it is guaranteed that seatNumber will be reserved. At most 105 calls in total will be made to reserve and unreserve."
    ]
},
{
    "id": "1846",
    "title": "Maximum Element After Decreasing and Rearranging",
    "question": "You are given an array of positive integers arr.\n Perform some operations (possibly none) on arr so that it satisfies these conditions:There are 2 types of operations that you can perform any number of times:Return the maximum possible value of an element in arr after performing the operations to satisfy the conditions.",
    "examples": [
        "Input: arr = [2,2,1,2,1]",
        "Output: 2",
        "Explanation: ",
        "We can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].",
        "The largest element in arr is 2.",
        "Input: arr = [100,1,1000]",
        "Output: 3",
        "Explanation: ",
        "One possible way to satisfy the conditions is by doing the following:",
        "1. Rearrange arr so it becomes [1,100,1000].",
        "2. Decrease the value of the second element to 2.",
        "3. Decrease the value of the third element to 3.",
        "Now arr = [1,2,3], which satisfies the conditions.",
        "The largest element in arr is 3.",
        "Input: arr = [1,2,3,4,5]",
        "Output: 5",
        "Explanation: The array already satisfies the conditions, and the largest element is 5.",
        ""
    ],
    "constraints": [
        "The value of the first element in arr must be 1. The absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words",
        " abs(arr[i] - arr[i - 1]) <= 1 for each i where 1 <= i < arr. length (0-indexed). abs(x) is the absolute value of x. Decrease the value of any element of arr to a smaller positive integer. Rearrange the elements of arr to be in any order. 1 <= arr. length <= 1051 <= arr[i] <= 109"
    ]
},
{
    "id": "1849",
    "title": "Splitting a String Into Descending Consecutive Values",
    "question": "You are given a string s that consists of only digits.\nCheck if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1.\nReturn true if it is possible to split s​​​​​​ as described above, or false otherwise.\nA substring is a contiguous sequence of characters in a string.",
    "examples": [
        "Input: s = \"1234\"",
        "Output: false",
        "Explanation: There is no valid way to split s.",
        "Input: s = \"050043\"",
        "Output: true",
        "Explanation: s can be split into [\"05\", \"004\", \"3\"] with numerical values [5,4,3].",
        "The values are in descending order with adjacent values differing by 1.",
        "Input: s = \"9080701\"",
        "Output: false",
        "Explanation: There is no valid way to split s.",
        "Input: s = \"10009998\"",
        "Output: true",
        "Explanation: s can be split into [\"100\", \"099\", \"98\"] with numerical values [100,99,98].",
        "The values are in descending order with adjacent values differing by 1.",
        ""
    ],
    "constraints": [
        "For example",
        " the string s = \"0090089\" can be split into [\"0090\"",
        " \"089\"] with numerical values [90",
        "89]. The values are in descending order and adjacent values differ by 1",
        " so this way is valid. Another example",
        " the string s = \"001\" can be split into [\"0\"",
        " \"01\"]",
        " [\"00\"",
        " \"1\"]",
        " or [\"0\"",
        " \"0\"",
        " \"1\"]. However all the ways are invalid because they have numerical values [0",
        "1]",
        " [0",
        "1]",
        " and [0",
        "0",
        "1] respectively",
        " all of which are not in descending order. 1 <= s. length <= 20s only consists of digits."
    ]
},
{
    "id": "1850",
    "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
    "question": "You are given a string num, representing a large integer, and an integer k.\nWe call some integer wonderful if it is a permutation of the digits in num and is greater in value than num.\n There can be many wonderful integers.\n However, we only care about the smallest-valued ones.\nReturn the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer.\nThe tests are generated in such a way that kth smallest wonderful integer exists.",
    "examples": [
        "Input: num = \"5489355142\", k = 4",
        "Output: 2",
        "Explanation: The 4th smallest wonderful number is \"5489355421\". To get this number:",
        "- Swap index 7 with index 8: \"5489355142\" -> \"5489355412\"",
        "- Swap index 8 with index 9: \"5489355412\" -> \"5489355421\"",
        "Input: num = \"11112\", k = 4",
        "Output: 4",
        "Explanation: The 4th smallest wonderful number is \"21111\". To get this number:",
        "- Swap index 3 with index 4: \"11112\" -> \"11121\"",
        "- Swap index 2 with index 3: \"11121\" -> \"11211\"",
        "- Swap index 1 with index 2: \"11211\" -> \"12111\"",
        "- Swap index 0 with index 1: \"12111\" -> \"21111\"",
        "Input: num = \"00123\", k = 1",
        "Output: 1",
        "Explanation: The 1st smallest wonderful number is \"00132\". To get this number:",
        "- Swap index 3 with index 4: \"00123\" -> \"00132\"",
        ""
    ],
    "constraints": [
        "For example",
        " when num = \"5489355142\":\n\n\t\nThe 1st smallest wonderful integer is \"5489355214\".\nThe 2nd smallest wonderful integer is \"5489355241\".\nThe 3rd smallest wonderful integer is \"5489355412\".\nThe 4th smallest wonderful integer is \"5489355421\".\n\nThe 1st smallest wonderful integer is \"5489355214\". The 2nd smallest wonderful integer is \"5489355241\". The 3rd smallest wonderful integer is \"5489355412\". The 4th smallest wonderful integer is \"5489355421\". 2 <= num. length <= 10001 <= k <= 1000num only consists of digits."
    ]
},
{
    "id": "1855",
    "title": "Maximum Distance Between a Pair of Values",
    "question": "You are given two non-increasing 0-indexed integer arrays nums1​​​​​​ and nums2​​​​​​.\nA pair of indices (i, j), where 0 <= i < nums1.\nlength and 0 <= j < nums2.\nlength, is valid if both i <= j and nums1[i] <= nums2[j].\n The distance of the pair is j - i​​​​.\nReturn the maximum distance of any valid pair (i, j).\n If there are no valid pairs, return 0.\nAn array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.\nlength.",
    "examples": [
        "Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]",
        "Output: 2",
        "Explanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).",
        "The maximum distance is 2 with pair (2,4).",
        "Input: nums1 = [2,2,2], nums2 = [10,10,1]",
        "Output: 1",
        "Explanation: The valid pairs are (0,0), (0,1), and (1,1).",
        "The maximum distance is 1 with pair (0,1).",
        "Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]",
        "Output: 2",
        "Explanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).",
        "The maximum distance is 2 with pair (2,4).",
        "Input: nums1 = [5,4], nums2 = [3,2]",
        "Output: 0",
        "Explanation: There are no valid pairs, so return 0.",
        ""
    ],
    "constraints": [
        "1 <= nums1. length <= 1051 <= nums2. length <= 1051 <= nums1[i]",
        " nums2[j] <= 105Both nums1 and nums2 are non-increasing."
    ]
},
{
    "id": "541",
    "title": "Reverse String II",
    "question": "Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\nIf there are fewer than k characters left, reverse all of them.\n If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.",
    "examples": [
        "Input: s = \"abcdefg\", k = 2",
        "Output: \"bacdfeg\"",
        "Input: s = \"abcd\", k = 2",
        "Output: \"bacd\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s consists of only lowercase English letters. 1 <= k <= 104"
    ]
},
{
    "id": "1856",
    "title": "Maximum Subarray Min-Product",
    "question": "The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.\nGiven an array of integers nums, return the maximum min-product of any non-empty subarray of nums.\n Since the answer may be large, return it modulo 109 + 7.\nNote that the min-product should be maximized before performing the modulo operation.\n Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.\nA subarray is a contiguous part of an array.",
    "examples": [
        "Input: nums = [1,2,3,2]",
        "Output: 14",
        "Explanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).",
        "2 * (2+3+2) = 2 * 7 = 14.",
        "Input: nums = [2,3,3,1,2]",
        "Output: 18",
        "Explanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).",
        "3 * (3+3) = 3 * 6 = 18.",
        "Input: nums = [3,1,5,6,4,2]",
        "Output: 60",
        "Explanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).",
        "4 * (5+6+4) = 4 * 15 = 60.",
        ""
    ],
    "constraints": [
        "For example",
        " the array [3",
        "2",
        "5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20. 1 <= nums. length <= 1051 <= nums[i] <= 107"
    ]
},
{
    "id": "1860",
    "title": "Incremental Memory Leak",
    "question": "You are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks.\n There is currently a faulty program running that consumes an increasing amount of memory every second.\nAt the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory).\n If neither stick has at least i bits of available memory, the program crashes.\nReturn an array containing [crashTime, memory1crash, memory2crash], where crashTime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.",
    "examples": [
        "Input: memory1 = 2, memory2 = 2",
        "Output: [3,1,0]",
        "Explanation: The memory is allocated as follows:",
        "- At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.",
        "- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.",
        "- At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively.",
        "Input: memory1 = 8, memory2 = 11",
        "Output: [6,0,4]",
        "Explanation: The memory is allocated as follows:",
        "- At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.",
        "- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.",
        "- At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.",
        "- At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.",
        "- At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.",
        "- At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively.",
        ""
    ],
    "constraints": [
        "0 <= memory1",
        " memory2 <= 231 - 1"
    ]
},
{
    "id": "1861",
    "title": "Rotating the Box",
    "question": "You are given an m x n matrix of characters box representing a side-view of a box.\n Each cell of the box is one of the following:The box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity.\n Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box.\n Gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.\nIt is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.\nReturn an n x m matrix representing the box after the rotation described above.",
    "examples": [
        "Input: box = [[\"#\",\".\",\"#\"]]",
        "Output: [[\".\"],",
        "         [\"#\"],",
        "         [\"#\"]]",
        "Input: box = [[\"#\",\".\",\"*\",\".\"],",
        "              [\"#\",\"#\",\"*\",\".\"]]",
        "Output: [[\"#\",\".\"],",
        "         [\"#\",\"#\"],",
        "         [\"*\",\"*\"],",
        "         [\".\",\".\"]]",
        "Input: box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],",
        "              [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],",
        "              [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]",
        "Output: [[\".\",\"#\",\"#\"],",
        "         [\".\",\"#\",\"#\"],",
        "         [\"#\",\"#\",\"*\"],",
        "         [\"#\",\"*\",\".\"],",
        "         [\"#\",\".\",\"*\"],",
        "         [\"#\",\".\",\".\"]]",
        ""
    ],
    "constraints": [
        "A stone '#'A stationary obstacle '*'Empty '.'m == box. lengthn == box[i]. length1 <= m",
        " n <= 500box[i][j] is either '#'",
        " '*'",
        " or '.'."
    ]
},
{
    "id": "1864",
    "title": "Minimum Number of Swaps to Make the Binary String Alternating",
    "question": "Given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.\nThe string is called alternating if no two adjacent characters are equal.\n For example, the strings \"010\" and \"1010\" are alternating, while the string \"0100\" is not.\nAny two characters may be swapped, even if they are not adjacent.",
    "examples": [
        "Input: s = \"111000\"",
        "Output: 1",
        "Explanation: Swap positions 1 and 4: \"111000\" -> \"101010\"",
        "The string is now alternating.",
        "Input: s = \"010\"",
        "Output: 0",
        "Explanation: The string is already alternating, no swaps are needed.",
        "Input: s = \"1110\"",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s[i] is either '0' or '1'."
    ]
},
{
    "id": "1865",
    "title": "Finding Pairs With a Certain Sum",
    "question": "You are given two integer arrays nums1 and nums2.\n You are tasked to implement a data structure that supports queries of two types:Implement the FindSumPairs class:",
    "examples": [
        "Input",
        "[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]",
        "[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]",
        "Output",
        "[null, 8, null, 2, 1, null, null, 11]",
        "",
        "Explanation",
        "FindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);",
        "findSumPairs. count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4",
        "findSumPairs. add(3, 2); // now nums2 = [1,4,5,4,5,4]",
        "findSumPairs. count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5",
        "findSumPairs. count(4);  // return 1; pair (5,0) makes 3 + 1",
        "findSumPairs. add(0, 1); // now nums2 = [2,4,5,4,5,4]",
        "findSumPairs. add(1, 1); // now nums2 = [2,5,5,4,5,4]",
        "findSumPairs. count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4",
        ""
    ],
    "constraints": [
        "FindSumPairs(int[] nums1",
        " int[] nums2) Initializes the FindSumPairs object with two integer arrays nums1 and nums2. void add(int index",
        " int val) Adds val to nums2[index]",
        " i. e.",
        " apply nums2[index] += val. int count(int tot) Returns the number of pairs (i",
        " j) such that nums1[i] + nums2[j] == tot. 1 <= nums1. length <= 10001 <= nums2. length <= 1051 <= nums1[i] <= 1091 <= nums2[i] <= 1050 <= index < nums2. length1 <= val <= 1051 <= tot <= 109At most 1000 calls are made to add and count each."
    ]
},
{
    "id": "1870",
    "title": "Minimum Speed to Arrive on Time",
    "question": "You are given a floating-point number hour, representing the amount of time you have to reach the office.\n To commute to the office, you must take n trains in sequential order.\n You are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the ith train ride.\nEach train can only depart at an integer hour, so you may need to wait in between each train ride.\nReturn the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time.\nTests are generated such that the answer will not exceed 107 and hour will have at most two digits after the decimal point.",
    "examples": [
        "Input: dist = [1,3,2], hour = 6",
        "Output: 1",
        "Explanation: At speed 1:",
        "- The first train ride takes 1/1 = 1 hour.",
        "- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.",
        "- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.",
        "- You will arrive at exactly the 6 hour mark.",
        "Input: dist = [1,3,2], hour = 2. 7",
        "Output: 3",
        "Explanation: At speed 3:",
        "- The first train ride takes 1/3 = 0. 33333 hours.",
        "- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.",
        "- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0. 66667 hours.",
        "- You will arrive at the 2. 66667 hour mark.",
        "Input: dist = [1,3,2], hour = 1. 9",
        "Output: -1",
        "Explanation: It is impossible because the earliest the third train can depart is at the 2 hour mark.",
        ""
    ],
    "constraints": [
        "For example",
        " if the 1st train ride takes 1. 5 hours",
        " you must wait for an additional 0. 5 hours before you can depart on the 2nd train ride at the 2 hour mark. n == dist. length1 <= n <= 1051 <= dist[i] <= 1051 <= hour <= 109There will be at most two digits after the decimal point in hour."
    ]
},
{
    "id": "1871",
    "title": "Jump Game VII",
    "question": "You are given a 0-indexed binary string s and two integers minJump and maxJump.\n In the beginning, you are standing at index 0, which is equal to '0'.\n You can move from index i to index j if the following conditions are fulfilled:Return true if you can reach index s.\nlength - 1 in s, or false otherwise.",
    "examples": [
        "Input: s = \"011010\", minJump = 2, maxJump = 3",
        "Output: true",
        "Explanation:",
        "In the first step, move from index 0 to index 3. ",
        "In the second step, move from index 3 to index 5.",
        "Input: s = \"01101110\", minJump = 2, maxJump = 3",
        "Output: false",
        ""
    ],
    "constraints": [
        "i + minJump <= j <= min(i + maxJump",
        " s. length - 1)",
        " ands[j] == '0'. 2 <= s. length <= 105s[i] is either '0' or '1'. s[0] == '0'1 <= minJump <= maxJump < s. length"
    ]
},
{
    "id": "1877",
    "title": "Minimize Maximum Pair Sum in Array",
    "question": "The pair sum of a pair (a,b) is equal to a + b.\n The maximum pair sum is the largest pair sum in a list of pairs.\nGiven an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:Return the minimized maximum pair sum after optimally pairing up the elements.",
    "examples": [
        "Input: nums = [3,5,2,3]",
        "Output: 7",
        "Explanation: The elements can be paired up into pairs (3,3) and (5,2).",
        "The maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.",
        "Input: nums = [3,5,4,2,4,6]",
        "Output: 8",
        "Explanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2).",
        "The maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.",
        ""
    ],
    "constraints": [
        "For example",
        " if we have pairs (1",
        "5)",
        " (2",
        "3)",
        " and (4",
        "4)",
        " the maximum pair sum would be max(1+5",
        " 2+3",
        " 4+4) = max(6",
        " 5",
        " 8) = 8. Each element of nums is in exactly one pair",
        " andThe maximum pair sum is minimized. n == nums. length2 <= n <= 105n is even. 1 <= nums[i] <= 105"
    ]
},
{
    "id": "1878",
    "title": "Get Biggest Three Rhombus Sums in a Grid",
    "question": "You are given an m x n integer matrix grid​​​.\nA rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid​​​.\n The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell.\n Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:Note that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.\nReturn the biggest three distinct rhombus sums in the grid in descending order.\n If there are less than three distinct values, return all of them.",
    "examples": [
        "Input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]",
        "Output: [228,216,211]",
        "Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.",
        "- Blue: 20 + 3 + 200 + 5 = 228",
        "- Red: 200 + 2 + 10 + 4 = 216",
        "- Green: 5 + 200 + 4 + 2 = 211",
        "Input: grid = [[1,2,3],[4,5,6],[7,8,9]]",
        "Output: [20,9,8]",
        "Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.",
        "- Blue: 4 + 2 + 6 + 8 = 20",
        "- Red: 9 (area 0 rhombus in the bottom right corner)",
        "- Green: 8 (area 0 rhombus in the bottom middle)",
        "Input: grid = [[7,7,7]]",
        "Output: [7]",
        "Explanation: All three possible rhombus sums are the same, so return [7].",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 501 <= grid[i][j] <= 105"
    ]
},
{
    "id": "1881",
    "title": "Maximum Value after Insertion",
    "question": "You are given a very large integer n, represented as a string,​​​​​​ and an integer digit x.\n The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.\nYou want to maximize n's numerical value by inserting x anywhere in the decimal representation of n​​​​​​.\n You cannot insert x to the left of the negative sign.\nReturn a string representing the maximum value of n​​​​​​ after the insertion.",
    "examples": [
        "Input: n = \"99\", x = 9",
        "Output: \"999\"",
        "Explanation: The result is the same regardless of where you insert 9.",
        "Input: n = \"-13\", x = 2",
        "Output: \"-123\"",
        "Explanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.",
        ""
    ],
    "constraints": [
        "For example",
        " if n = 73 and x = 6",
        " it would be best to insert it between 7 and 3",
        " making n = 763. If n = -55 and x = 2",
        " it would be best to insert it before the first 5",
        " making n = -255. 1 <= n. length <= 1051 <= x <= 9The digits in n​​​ are in the range [1",
        " 9]. n is a valid representation of an integer. In the case of a negative n",
        "​​​​​​ it will begin with '-'."
    ]
},
{
    "id": "543",
    "title": "Diameter of Binary Tree",
    "question": "Given the root of a binary tree, return the length of the diameter of the tree.\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree.\n This path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.",
    "examples": [
        "Input: root = [1,2,3,4,5]",
        "Output: 3",
        "Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].",
        "Input: root = [1,2]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104].-100 <= Node. val <= 100"
    ]
},
{
    "id": "1882",
    "title": "Process Tasks Using Servers",
    "question": "You are given two 0-indexed integer arrays servers and tasks of lengths n​​​​​​ and m​​​​​​ respectively.\n servers[i] is the weight of the i​​​​​​th​​​​ server, and tasks[j] is the time needed to process the j​​​​​​th​​​​ task in seconds.\nTasks are assigned to the servers using a task queue.\n Initially, all servers are free, and the queue is empty.\nAt second j, the jth task is inserted into the queue (starting with the 0th task being inserted at second 0).\n As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index.\nIf there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task.\n If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.\nA server that is assigned task j at second t will be free again at second t + tasks[j].\nBuild an array ans​​​​ of length m, where ans[j] is the index of the server the j​​​​​​th task will be assigned to.\nReturn the array ans​​​​.",
    "examples": [
        "Input: servers = [3,3,2], tasks = [1,2,3,2,1,2]",
        "Output: [2,2,0,2,1,2]",
        "Explanation: Events in chronological order go as follows:",
        "- At second 0, task 0 is added and processed using server 2 until second 1.",
        "- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.",
        "- At second 2, task 2 is added and processed using server 0 until second 5.",
        "- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.",
        "- At second 4, task 4 is added and processed using server 1 until second 5.",
        "- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7. Input: servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]",
        "Output: [1,4,1,4,1,3,2]",
        "Explanation: Events in chronological order go as follows: ",
        "- At second 0, task 0 is added and processed using server 1 until second 2.",
        "- At second 1, task 1 is added and processed using server 4 until second 2.",
        "- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. ",
        "- At second 3, task 3 is added and processed using server 4 until second 7.",
        "- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. ",
        "- At second 5, task 5 is added and processed using server 3 until second 7.",
        "- At second 6, task 6 is added and processed using server 2 until second 7.",
        ""
    ],
    "constraints": [
        "servers. length == ntasks. length == m1 <= n",
        " m <= 2 * 1051 <= servers[i]",
        " tasks[j] <= 2 * 105"
    ]
},
{
    "id": "1884",
    "title": "Egg Drop With 2 Eggs and N Floors",
    "question": "You are given two identical eggs and you have access to a building with n floors labeled from 1 to n.\nYou know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\nIn each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n).\n If the egg breaks, you can no longer use it.\n However, if the egg does not break, you may reuse it in future moves.\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.",
    "examples": [
        "Input: n = 2",
        "Output: 2",
        "Explanation: We can drop the first egg from floor 1 and the second egg from floor 2.",
        "If the first egg breaks, we know that f = 0.",
        "If the second egg breaks but the first egg didn't, we know that f = 1.",
        "Otherwise, if both eggs survive, we know that f = 2.",
        "Input: n = 100",
        "Output: 14",
        "Explanation: One optimal strategy is:",
        "- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting",
        "  from floor 1 and going up one at a time to find f within 7 more drops. Total drops is 1 + 7 = 8.",
        "- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9",
        "  and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more",
        "  drops. Total drops is 2 + 12 = 14.",
        "- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45,",
        "  55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.",
        "Regardless of the outcome, it takes at most 14 drops to determine f.",
        ""
    ],
    "constraints": [
        "1 <= n <= 1000"
    ]
},
{
    "id": "1887",
    "title": "Reduction Operations to Make the Array Elements Equal",
    "question": "Given an integer array nums, your goal is to make all elements in nums equal.\n To complete one operation, follow these steps:Return the number of operations to make all elements in nums equal.",
    "examples": [
        "Input: nums = [5,1,3]",
        "Output: 3",
        "Explanation: It takes 3 operations to make all elements in nums equal:",
        "1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].",
        "2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].",
        "3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1].",
        "Input: nums = [1,1,1]",
        "Output: 0",
        "Explanation: All elements in nums are already equal.",
        "Input: nums = [1,1,2,2,3]",
        "Output: 4",
        "Explanation: It takes 4 operations to make all elements in nums equal:",
        "1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].",
        "2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].",
        "3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].",
        "4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1].",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5 * 1041 <= nums[i] <= 5 * 104"
    ]
},
{
    "id": "1888",
    "title": "Minimum Number of Flips to Make the Binary String Alternating",
    "question": "You are given a binary string s.\n You are allowed to perform two types of operations on the string in any sequence:Return the minimum number of type-2 operations you need to perform such that s becomes alternating.\nThe string is called alternating if no two adjacent characters are equal.",
    "examples": [
        "Input: s = \"111000\"",
        "Output: 2",
        "Explanation: Use the first operation two times to make s = \"100011\".",
        "Then, use the second operation on the third and sixth elements to make s = \"101010\".",
        "Input: s = \"010\"",
        "Output: 0",
        "Explanation: The string is already alternating.",
        "Input: s = \"1110\"",
        "Output: 1",
        "Explanation: Use the second operation on the second element to make s = \"1010\".",
        ""
    ],
    "constraints": [
        "Type-1: Remove the character at the start of the string s and append it to the end of the string. Type-2: Pick any character in s and flip its value",
        " i. e.",
        " if its value is '0' it becomes '1' and vice-versa. For example",
        " the strings \"010\" and \"1010\" are alternating",
        " while the string \"0100\" is not. 1 <= s. length <= 105s[i] is either '0' or '1'."
    ]
},
{
    "id": "1894",
    "title": "Find the Student that Will Replace the Chalk",
    "question": "There are n students in a class numbered from 0 to n - 1.\n The teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1.\n After that, the teacher will restart the process, starting with the student number 0 again.\nYou are given a 0-indexed integer array chalk and an integer k.\n There are initially k pieces of chalk.\n When the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem.\n However, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk.\nReturn the index of the student that will replace the chalk.",
    "examples": [
        "Input: chalk = [5,1,5], k = 22",
        "Output: 0",
        "Explanation: The students go in turns as follows:",
        "- Student number 0 uses 5 chalk, so k = 17.",
        "- Student number 1 uses 1 chalk, so k = 16.",
        "- Student number 2 uses 5 chalk, so k = 11.",
        "- Student number 0 uses 5 chalk, so k = 6.",
        "- Student number 1 uses 1 chalk, so k = 5.",
        "- Student number 2 uses 5 chalk, so k = 0.",
        "Student number 0 does not have enough chalk, so they will have to replace it. Input: chalk = [3,4,1,2], k = 25",
        "Output: 1",
        "Explanation: The students go in turns as follows:",
        "- Student number 0 uses 3 chalk so k = 22.",
        "- Student number 1 uses 4 chalk so k = 18.",
        "- Student number 2 uses 1 chalk so k = 17.",
        "- Student number 3 uses 2 chalk so k = 15.",
        "- Student number 0 uses 3 chalk so k = 12.",
        "- Student number 1 uses 4 chalk so k = 8.",
        "- Student number 2 uses 1 chalk so k = 7.",
        "- Student number 3 uses 2 chalk so k = 5.",
        "- Student number 0 uses 3 chalk so k = 2.",
        "Student number 1 does not have enough chalk, so they will have to replace it.",
        ""
    ],
    "constraints": [
        "chalk. length == n1 <= n <= 1051 <= chalk[i] <= 1051 <= k <= 109"
    ]
},
{
    "id": "1895",
    "title": "Largest Magic Square",
    "question": "A k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal.\n The integers in the magic square do not have to be distinct.\n Every 1 x 1 grid is trivially a magic square.\nGiven an m x n integer grid, return the size (i.\ne.\n, the side length k) of the largest magic square that can be found within this grid.",
    "examples": [
        "Input: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]",
        "Output: 3",
        "Explanation: The largest magic square has a size of 3.",
        "Every row sum, column sum, and diagonal sum of this magic square is equal to 12.",
        "- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12",
        "- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12",
        "- Diagonal sums: 5+4+3 = 6+4+2 = 12",
        "Input: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 501 <= grid[i][j] <= 106"
    ]
},
{
    "id": "1898",
    "title": "Maximum Number of Removable Characters",
    "question": "You are given two strings s and p where p is a subsequence of s.\n You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).\nYou want to choose an integer k (0 <= k <= removable.\nlength) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s.\n More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.\nReturn the maximum k you can choose such that p is still a subsequence of s after the removals.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.",
    "examples": [
        "Input: s = \"abcacb\", p = \"ab\", removable = [3,1,0]",
        "Output: 2",
        "Explanation: After removing the characters at indices 3 and 1, \"abcacb\" becomes \"accb\".",
        "\"ab\" is a subsequence of \"accb\".",
        "If we remove the characters at indices 3, 1, and 0, \"abcacb\" becomes \"ccb\", and \"ab\" is no longer a subsequence.",
        "Hence, the maximum k is 2.",
        "Input: s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]",
        "Output: 1",
        "Explanation: After removing the character at index 3, \"abcbddddd\" becomes \"abcddddd\".",
        "\"abcd\" is a subsequence of \"abcddddd\".",
        "Input: s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]",
        "Output: 0",
        "Explanation: If you remove the first index in the array removable, \"abc\" is no longer a subsequence.",
        ""
    ],
    "constraints": [
        "1 <= p. length <= s. length <= 1050 <= removable. length < s. length0 <= removable[i] < s. lengthp is a subsequence of s. s and p both consist of lowercase English letters. The elements in removable are distinct."
    ]
},
{
    "id": "1899",
    "title": "Merge Triplets to Form Target Triplet",
    "question": "A triplet is an array of three integers.\n You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet.\n You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.\nTo obtain target, you may apply the following operation on triplets any number of times (possibly zero):Return true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.",
    "examples": [
        "Input: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]",
        "Output: true",
        "Explanation: Perform the following operations:",
        "- Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]",
        "The target triplet [2,7,5] is now an element of triplets.",
        "Input: triplets = [[1,3,4],[2,5,8]], target = [2,5,8]",
        "Output: true",
        "Explanation: The target triplet [2,5,8] is already an element of triplets.",
        "Input: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]",
        "Output: true",
        "Explanation: Perform the following operations:",
        "- Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].",
        "- Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].",
        "The target triplet [5,5,5] is now an element of triplets.",
        "Input: triplets = [[3,4,5],[4,5,6]], target = [3,2,5]",
        "Output: false",
        "Explanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets.",
        ""
    ],
    "constraints": [
        "Choose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai",
        " aj)",
        " max(bi",
        " bj)",
        " max(ci",
        " cj)].\n\n\t\nFor example",
        " if triplets[i] = [2",
        " 5",
        " 3] and triplets[j] = [1",
        " 7",
        " 5]",
        " triplets[j] will be updated to [max(2",
        " 1)",
        " max(5",
        " 7)",
        " max(3",
        " 5)] = [2",
        " 7",
        " 5].\n\nFor example",
        " if triplets[i] = [2",
        " 5",
        " 3] and triplets[j] = [1",
        " 7",
        " 5]",
        " triplets[j] will be updated to [max(2",
        " 1)",
        " max(5",
        " 7)",
        " max(3",
        " 5)] = [2",
        " 7",
        " 5]. 1 <= triplets. length <= 105triplets[i]. length == target. length == 31 <= ai",
        " bi",
        " ci",
        " x",
        " y",
        " z <= 1000"
    ]
},
{
    "id": "1901",
    "title": "Find a Peak Element II",
    "question": "A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.\nGiven a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].\nYou may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.\nYou must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.",
    "examples": [
        "Input: mat = [[1,4],[3,2]]",
        "Output: [0,1]",
        "Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.",
        "Input: mat = [[10,20,15],[21,30,14],[7,16,32]]",
        "Output: [1,1]",
        "Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.",
        ""
    ],
    "constraints": [
        "m == mat. lengthn == mat[i]. length1 <= m",
        " n <= 5001 <= mat[i][j] <= 105No two adjacent cells are equal."
    ]
},
{
    "id": "1904",
    "title": "The Number of Full Rounds You Have Played",
    "question": "A new online video game has been released, and in this video game, there are 15-minute rounds scheduled every quarter-hour period.\n This means that at HH:00, HH:15, HH:30 and HH:45, a new round starts, where HH represents an integer number from 00 to 23.\n A 24-hour clock is used, so the earliest time in the day is 00:00 and the latest is 23:59.\nGiven two strings startTime and finishTime in the format \"HH:MM\" representing the exact time you started and finished playing the game, respectively, calculate the number of full rounds that you played during your game session.\nIf finishTime is earlier than startTime, this means you have played overnight (from startTime to the midnight and from midnight to finishTime).\nReturn the number of full rounds that you have played if you had started playing at startTime and finished at finishTime.",
    "examples": [
        "Input: startTime = \"12:01\", finishTime = \"12:44\"",
        "Output: 1",
        "Explanation: You played one full round from 12:15 to 12:30.",
        "You did not play the full round from 12:00 to 12:15 because you started playing at 12:01 after it began.",
        "You did not play the full round from 12:30 to 12:45 because you stopped playing at 12:44 before it ended.",
        "Input: startTime = \"20:00\", finishTime = \"06:00\"",
        "Output: 40",
        "Explanation: You played 16 full rounds from 20:00 to 00:00 and 24 full rounds from 00:00 to 06:00.",
        "16 + 24 = 40.",
        "Input: startTime = \"00:00\", finishTime = \"23:59\"",
        "Output: 95",
        "Explanation: You played 4 full rounds each hour except for the last hour where you played 3 full rounds.",
        ""
    ],
    "constraints": [
        "For example",
        " if startTime = \"05:20\" and finishTime = \"05:59\" this means you played only one full round from 05:30 to 05:45. You did not play the full round from 05:15 to 05:30 because you started after the round began",
        " and you did not play the full round from 05:45 to 06:00 because you stopped before the round ended. startTime and finishTime are in the format HH:MM. 00 <= HH <= 2300 <= MM <= 59startTime and finishTime are not equal."
    ]
},
{
    "id": "551",
    "title": "Student Attendance Record I",
    "question": "You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day.\n The record only contains the following three characters:The student is eligible for an attendance award if they meet both of the following criteria:Return true if the student is eligible for an attendance award, or false otherwise.",
    "examples": [
        "Input: s = \"PPALLP\"",
        "Output: true",
        "Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.",
        "Input: s = \"PPALLL\"",
        "Output: false",
        "Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.",
        ""
    ],
    "constraints": [
        "'A': Absent.'L': Late.'P': Present. The student was absent ('A') for strictly fewer than 2 days total. The student was never late ('L') for 3 or more consecutive days. 1 <= s. length <= 1000s[i] is either 'A'",
        " 'L'",
        " or 'P'."
    ]
},
{
    "id": "1905",
    "title": "Count Sub Islands",
    "question": "You are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land).\n An island is a group of 1's connected 4-directionally (horizontal or vertical).\n Any cells outside of the grid are considered water cells.\nAn island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2.\nReturn the number of islands in grid2 that are considered sub-islands.",
    "examples": [
        "Input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]",
        "Output: 3",
        "Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.",
        "The 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.",
        "Input: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]",
        "Output: 2 ",
        "Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.",
        "The 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.",
        ""
    ],
    "constraints": [
        "m == grid1. length == grid2. lengthn == grid1[i]. length == grid2[i]. length1 <= m",
        " n <= 500grid1[i][j] and grid2[i][j] are either 0 or 1."
    ]
},
{
    "id": "1906",
    "title": "Minimum Absolute Difference Queries",
    "question": "The minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.\nlength and a[i] != a[j].\n If all elements of a are the same, the minimum absolute difference is -1.\nYou are given an integer array nums and the array queries where queries[i] = [li, ri].\n For each query i, compute the minimum absolute difference of the subarray nums[li.\n.\n.\nri] containing the elements of nums between the 0-based indices li and ri (inclusive).\nReturn an array ans where ans[i] is the answer to the ith query.\nA subarray is a contiguous sequence of elements in an array.\nThe value of |x| is defined as:",
    "examples": [
        "Input: nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]",
        "Output: [2,1,4,1]",
        "Explanation: The queries are processed as follows:",
        "- queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2.",
        "- queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1.",
        "- queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4.",
        "- queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1.",
        "Input: nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]",
        "Output: [-1,1,1,3]",
        "Explanation: The queries are processed as follows:",
        "- queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the",
        "  elements are the same.",
        "- queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1.",
        "- queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1.",
        "- queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3.",
        ""
    ],
    "constraints": [
        "For example",
        " the minimum absolute difference of the array [5",
        "2",
        "3",
        "7",
        "2] is |2 - 3| = 1. Note that it is not 0 because a[i] and a[j] must be different. x if x >= 0.-x if x < 0. 2 <= nums. length <= 1051 <= nums[i] <= 1001 <= queries. length <= 2 * 1040 <= li < ri < nums. length"
    ]
},
{
    "id": "1910",
    "title": "Remove All Occurrences of a Substring",
    "question": "Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:Return s after removing all occurrences of part.\nA substring is a contiguous sequence of characters in a string.",
    "examples": [
        "Input: s = \"daabcbaabcbc\", part = \"abc\"",
        "Output: \"dab\"",
        "Explanation: The following operations are done:",
        "- s = \"daabcbaabcbc\", remove \"abc\" starting at index 2, so s = \"dabaabcbc\".",
        "- s = \"dabaabcbc\", remove \"abc\" starting at index 4, so s = \"dababc\".",
        "- s = \"dababc\", remove \"abc\" starting at index 3, so s = \"dab\".",
        "Now s has no occurrences of \"abc\".",
        "Input: s = \"axxxxyyyyb\", part = \"xy\"",
        "Output: \"ab\"",
        "Explanation: The following operations are done:",
        "- s = \"axxxxyyyyb\", remove \"xy\" starting at index 4 so s = \"axxxyyyb\".",
        "- s = \"axxxyyyb\", remove \"xy\" starting at index 3 so s = \"axxyyb\".",
        "- s = \"axxyyb\", remove \"xy\" starting at index 2 so s = \"axyb\".",
        "- s = \"axyb\", remove \"xy\" starting at index 1 so s = \"ab\".",
        "Now s has no occurrences of \"xy\".",
        ""
    ],
    "constraints": [
        "Find the leftmost occurrence of the substring part and remove it from s. 1 <= s. length <= 10001 <= part. length <= 1000s​​​​​​ and part consists of lowercase English letters."
    ]
},
{
    "id": "1911",
    "title": "Maximum Alternating Subsequence Sum",
    "question": "The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.\nGiven an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\n For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.",
    "examples": [
        "Input: nums = [4,2,5,3]",
        "Output: 7",
        "Explanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.",
        "Input: nums = [5,6,7,8]",
        "Output: 8",
        "Explanation: It is optimal to choose the subsequence [8] with alternating sum 8.",
        "Input: nums = [6,2,1,2,4,5]",
        "Output: 10",
        "Explanation: It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10.",
        ""
    ],
    "constraints": [
        "For example",
        " the alternating sum of [4",
        "2",
        "5",
        "3] is (4 + 5) - (2 + 3) = 4. 1 <= nums. length <= 1051 <= nums[i] <= 105"
    ]
},
{
    "id": "1914",
    "title": "Cyclically Rotating a Grid",
    "question": "You are given an m x n integer matrix grid​​​, where m and n are both even integers, and an integer k.\nThe matrix is composed of several layers, which is shown in the below image, where each color is its own layer:A cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix.\n To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction.\n An example rotation is shown below:Return the matrix after applying k cyclic rotations to it.",
    "examples": [
        "Input: grid = [[40,10],[30,20]], k = 1",
        "Output: [[10,20],[40,30]]",
        "Explanation: The figures above represent the grid at every state.",
        "Input: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2",
        "Output: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]",
        "Explanation: The figures above represent the grid at every state.",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length2 <= m",
        " n <= 50Both m and n are even integers. 1 <= grid[i][j] <= 50001 <= k <= 109"
    ]
},
{
    "id": "1915",
    "title": "Number of Wonderful Substrings",
    "question": "A wonderful string is a string where at most one letter appears an odd number of times.\nGiven a string word that consists of the first ten lowercase English letters ('a' through 'j'), return the number of wonderful non-empty substrings in word.\n If the same substring appears multiple times in word, then count each occurrence separately.\nA substring is a contiguous sequence of characters in a string.",
    "examples": [
        "Input: word = \"aba\"",
        "Output: 4",
        "Explanation: The four wonderful substrings are underlined below:",
        "- \"aba\" -> \"a\"",
        "- \"aba\" -> \"b\"",
        "- \"aba\" -> \"a\"",
        "- \"aba\" -> \"aba\"",
        "Input: word = \"aabb\"",
        "Output: 9",
        "Explanation: The nine wonderful substrings are underlined below:",
        "- \"aabb\" -> \"a\"",
        "- \"aabb\" -> \"aa\"",
        "- \"aabb\" -> \"aab\"",
        "- \"aabb\" -> \"aabb\"",
        "- \"aabb\" -> \"a\"",
        "- \"aabb\" -> \"abb\"",
        "- \"aabb\" -> \"b\"",
        "- \"aabb\" -> \"bb\"",
        "- \"aabb\" -> \"b\"",
        "Input: word = \"he\"",
        "Output: 2",
        "Explanation: The two wonderful substrings are underlined below:",
        "- \"he\" -> \"h\"",
        "- \"he\" -> \"e\"",
        ""
    ],
    "constraints": [
        "For example",
        " \"ccjjc\" and \"abab\" are wonderful",
        " but \"ab\" is not. 1 <= word. length <= 105word consists of lowercase English letters from 'a' to 'j'."
    ]
},
{
    "id": "1921",
    "title": "Eliminate Maximum Number of Monsters",
    "question": "You are playing a video game where you are defending your city from a group of n monsters.\n You are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city.\nThe monsters walk toward the city at a constant speed.\n The speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the ith monster in kilometers per minute.\nYou have a weapon that, once fully charged, can eliminate a single monster.\n However, the weapon takes one minute to charge.\nThe weapon is fully charged at the very start.\nYou lose when any monster reaches your city.\n If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon.\nReturn the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.",
    "examples": [
        "Input: dist = [1,3,4], speed = [1,1,1]",
        "Output: 3",
        "Explanation:",
        "In the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.",
        "After a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.",
        "After a minute, the distances of the monsters are [X,X,2]. You eliminate the thrid monster.",
        "All 3 monsters can be eliminated. Input: dist = [1,1,2,3], speed = [1,1,1,1]",
        "Output: 1",
        "Explanation:",
        "In the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.",
        "After a minute, the distances of the monsters are [X,0,1,2], so you lose.",
        "You can only eliminate 1 monster.",
        "Input: dist = [3,2,4], speed = [5,3,2]",
        "Output: 1",
        "Explanation:",
        "In the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.",
        "After a minute, the distances of the monsters are [X,0,2], so you lose.",
        "You can only eliminate 1 monster.",
        ""
    ],
    "constraints": [
        "n == dist. length == speed. length1 <= n <= 1051 <= dist[i]",
        " speed[i] <= 105"
    ]
},
{
    "id": "1922",
    "title": "Count Good Numbers",
    "question": "A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).\nGiven an integer n, return the total number of good digit strings of length n.\n Since the answer may be large, return it modulo 109 + 7.\nA digit string is a string consisting of digits 0 through 9 that may contain leading zeros.",
    "examples": [
        "Input: n = 1",
        "Output: 5",
        "Explanation: The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\".",
        "Input: n = 4",
        "Output: 400",
        "Input: n = 50",
        "Output: 564908303",
        ""
    ],
    "constraints": [
        "For example",
        " \"2582\" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However",
        " \"3245\" is not good because 3 is at an even index but is not even. 1 <= n <= 1015"
    ]
},
{
    "id": "1926",
    "title": "Nearest Exit from Entrance in Maze",
    "question": "You are given an m x n matrix maze (0-indexed) with empty cells (represented as '.\n') and walls (represented as '+').\n You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.\nIn one step, you can move one cell up, down, left, or right.\n You cannot step into a cell with a wall, and you cannot step outside the maze.\n Your goal is to find the nearest exit from the entrance.\n An exit is defined as an empty cell that is at the border of the maze.\n The entrance does not count as an exit.\nReturn the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.",
    "examples": [
        "Input: maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2]",
        "Output: 1",
        "Explanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3].",
        "Initially, you are at the entrance cell [1,2].",
        "- You can reach [1,0] by moving 2 steps left.",
        "- You can reach [0,2] by moving 1 step up.",
        "It is impossible to reach [2,3] from the entrance.",
        "Thus, the nearest exit is [0,2], which is 1 step away.",
        "Input: maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0]",
        "Output: 2",
        "Explanation: There is 1 exit in this maze at [1,2].",
        "[1,0] does not count as an exit since it is the entrance cell.",
        "Initially, you are at the entrance cell [1,0].",
        "- You can reach [1,2] by moving 2 steps right.",
        "Thus, the nearest exit is [1,2], which is 2 steps away.",
        "Input: maze = [[\".\",\"+\"]], entrance = [0,0]",
        "Output: -1",
        "Explanation: There are no exits in this maze.",
        ""
    ],
    "constraints": [
        "maze. length == mmaze[i]. length == n1 <= m",
        " n <= 100maze[i][j] is either '.' or '+'. entrance. length == 20 <= entrancerow < m0 <= entrancecol < nentrance will always be an empty cell."
    ]
},
{
    "id": "1927",
    "title": "Sum Game",
    "question": "Alice and Bob take turns playing a game, with Alice starting first.\nYou are given a string num of even length consisting of digits and '?' characters.\n On each turn, a player will do the following if there is still at least one '?' in num:The game ends when there are no more '?' characters in num.\nFor Bob to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half.\n For Alice to win, the sums must not be equal.\nAssuming Alice and Bob play optimally, return true if Alice will win and false if Bob will win.",
    "examples": [
        "Input: num = \"5023\"",
        "Output: false",
        "Explanation: There are no moves to be made.",
        "The sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3.",
        "Input: num = \"25??\"",
        "Output: true",
        "Explanation: Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal.",
        "Input: num = \"?3295???\"",
        "Output: false",
        "Explanation: It can be proven that Bob will always win. One possible outcome is:",
        "- Alice replaces the first '?' with '9'. num = \"93295???\".",
        "- Bob replaces one of the '?' in the right half with '9'. num = \"932959??\".",
        "- Alice replaces one of the '?' in the right half with '2'. num = \"9329592?\".",
        "- Bob replaces the last '?' in the right half with '7'. num = \"93295927\".",
        "Bob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.",
        ""
    ],
    "constraints": [
        "For example",
        " if the game ended with num = \"243801\"",
        " then Bob wins because 2+4+3 = 8+0+1. If the game ended with num = \"243803\"",
        " then Alice wins because 2+4+3 != 8+0+3. 2 <= num. length <= 105num. length is even. num consists of only digits and '?'."
    ]
},
{
    "id": "557",
    "title": "Reverse Words in a String III",
    "question": "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.",
    "examples": [
        "Input: s = \"Let's take LeetCode contest\"",
        "Output: \"s'teL ekat edoCteeL tsetnoc\"",
        "Input: s = \"God Ding\"",
        "Output: \"doG gniD\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 5 * 104s contains printable ASCII characters. s does not contain any leading or trailing spaces. There is at least one word in s. All the words in s are separated by a single space."
    ]
},
{
    "id": "1930",
    "title": "Unique Length-3 Palindromic Subsequences",
    "question": "Given a string s, return the number of unique palindromes of length three that are a subsequence of s.\nNote that even if there are multiple ways to obtain the same subsequence, it is still only counted once.\nA palindrome is a string that reads the same forwards and backwards.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.",
    "examples": [
        "Input: s = \"aabca\"",
        "Output: 3",
        "Explanation: The 3 palindromic subsequences of length 3 are:",
        "- \"aba\" (subsequence of \"aabca\")",
        "- \"aaa\" (subsequence of \"aabca\")",
        "- \"aca\" (subsequence of \"aabca\")",
        "Input: s = \"adc\"",
        "Output: 0",
        "Explanation: There are no palindromic subsequences of length 3 in \"adc\".",
        "Input: s = \"bbcbaba\"",
        "Output: 4",
        "Explanation: The 4 palindromic subsequences of length 3 are:",
        "- \"bbb\" (subsequence of \"bbcbaba\")",
        "- \"bcb\" (subsequence of \"bbcbaba\")",
        "- \"bab\" (subsequence of \"bbcbaba\")",
        "- \"aba\" (subsequence of \"bbcbaba\")",
        ""
    ],
    "constraints": [
        "For example",
        " \"ace\" is a subsequence of \"abcde\". 3 <= s. length <= 105s consists of only lowercase English letters."
    ]
},
{
    "id": "1936",
    "title": "Add Minimum Number of Rungs",
    "question": "You are given a strictly increasing integer array rungs that represents the height of rungs on a ladder.\n You are currently on the floor at height 0, and you want to reach the last rung.\nYou are also given an integer dist.\n You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist.\n You are able to insert rungs at any positive integer height if a rung is not already there.\nReturn the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.",
    "examples": [
        "Input: rungs = [1,3,5,10], dist = 2",
        "Output: 2",
        "Explanation:",
        "You currently cannot reach the last rung.",
        "Add rungs at heights 7 and 8 to climb this ladder. ",
        "The ladder will now have rungs at [1,3,5,7,8,10].",
        "Input: rungs = [3,6,8,10], dist = 3",
        "Output: 0",
        "Explanation:",
        "This ladder can be climbed without adding additional rungs.",
        "Input: rungs = [3,4,6,7], dist = 2",
        "Output: 1",
        "Explanation:",
        "You currently cannot reach the first rung from the ground.",
        "Add a rung at height 1 to climb this ladder.",
        "The ladder will now have rungs at [1,3,4,6,7].",
        "Input: rungs = [5], dist = 10",
        "Output: 0",
        "Explanation:",
        "This ladder can be climbed without adding additional rungs.",
        ""
    ],
    "constraints": [
        "1 <= rungs. length <= 1051 <= rungs[i] <= 1091 <= dist <= 109rungs is strictly increasing."
    ]
},
{
    "id": "1937",
    "title": "Maximum Number of Points with Cost",
    "question": "You are given an m x n integer matrix points (0-indexed).\n Starting with 0 points, you want to maximize the number of points you can get from the matrix.\nTo gain points, you must pick one cell in each row.\n Picking the cell at coordinates (r, c) will add points[r][c] to your score.\nHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row.\n For every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score.\nReturn the maximum number of points you can achieve.\nabs(x) is defined as:",
    "examples": [
        "Input: points = [[1,2,3],[1,5,1],[3,1,1]]",
        "Output: 9",
        "Explanation:",
        "The blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).",
        "You add 3 + 5 + 3 = 11 to your score.",
        "However, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.",
        "Your final score is 11 - 2 = 9.",
        "Input: points = [[1,5],[2,3],[4,2]]",
        "Output: 11",
        "Explanation:",
        "The blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).",
        "You add 5 + 3 + 4 = 12 to your score.",
        "However, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.",
        "Your final score is 12 - 1 = 11.",
        ""
    ],
    "constraints": [
        "x for x >= 0.-x for x < 0. m == points. lengthn == points[r]. length1 <= m",
        " n <= 1051 <= m * n <= 1050 <= points[r][c] <= 105"
    ]
},
{
    "id": "1942",
    "title": "The Number of the Smallest Unoccupied Chair",
    "question": "There is a party where n friends numbered from 0 to n - 1 are attending.\n There is an infinite number of chairs in this party that are numbered from 0 to infinity.\n When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.\nWhen a friend leaves the party, their chair becomes unoccupied at the moment they leave.\n If another friend arrives at that same moment, they can sit in that chair.\nYou are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetFriend.\n All arrival times are distinct.\nReturn the chair number that the friend numbered targetFriend will sit on.",
    "examples": [
        "Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1",
        "Output: 1",
        "Explanation: ",
        "- Friend 0 arrives at time 1 and sits on chair 0.",
        "- Friend 1 arrives at time 2 and sits on chair 1.",
        "- Friend 1 leaves at time 3 and chair 1 becomes empty.",
        "- Friend 0 leaves at time 4 and chair 0 becomes empty.",
        "- Friend 2 arrives at time 4 and sits on chair 0.",
        "Since friend 1 sat on chair 1, we return 1.",
        "Input: times = [[3,10],[1,5],[2,6]], targetFriend = 0",
        "Output: 2",
        "Explanation: ",
        "- Friend 1 arrives at time 1 and sits on chair 0.",
        "- Friend 2 arrives at time 2 and sits on chair 1.",
        "- Friend 0 arrives at time 3 and sits on chair 2.",
        "- Friend 1 leaves at time 5 and chair 0 becomes empty.",
        "- Friend 2 leaves at time 6 and chair 1 becomes empty.",
        "- Friend 0 leaves at time 10 and chair 2 becomes empty.",
        "Since friend 0 sat on chair 2, we return 2.",
        ""
    ],
    "constraints": [
        "For example",
        " if chairs 0",
        " 1",
        " and 5 are occupied when a friend comes",
        " they will sit on chair number 2. n == times. length2 <= n <= 104times[i]. length == 21 <= arrivali < leavingi <= 1050 <= targetFriend <= n - 1Each arrivali time is distinct."
    ]
},
{
    "id": "1943",
    "title": "Describe the Painting",
    "question": "There is a long and thin painting that can be represented by a number line.\n The painting was painted with multiple overlapping segments where each segment was painted with a unique color.\n You are given a 2D integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color.\nThe colors in the overlapping segments of the painting were mixed when it was painted.\n When two or more colors mix, they form a new color that can be represented as a set of mixed colors.\nFor the sake of simplicity, you should only output the sum of the elements in the set rather than the full set.\nYou want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors.\n These segments can be represented by the 2D array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj.\nReturn the 2D array painting describing the finished painting (excluding any parts that are not painted).\n You may return the segments in any order.\nA half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.",
    "examples": [
        "Input: segments = [[1,4,5],[4,7,7],[1,7,9]]",
        "Output: [[1,4,14],[4,7,16]]",
        "Explanation: The painting can be described as follows:",
        "- [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.",
        "- [4,7) is colored {7,9} (with a sum of 16) from the second and third segments.",
        "Input: segments = [[1,7,9],[6,8,15],[8,10,7]]",
        "Output: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]",
        "Explanation: The painting can be described as follows:",
        "- [1,6) is colored 9 from the first segment.",
        "- [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.",
        "- [7,8) is colored 15 from the second segment.",
        "- [8,10) is colored 7 from the third segment.",
        "Input: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]",
        "Output: [[1,4,12],[4,7,12]]",
        "Explanation: The painting can be described as follows:",
        "- [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.",
        "- [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.",
        "Note that returning a single segment [1,7) is incorrect because the mixed color sets are different.",
        ""
    ],
    "constraints": [
        "For example",
        " if colors 2",
        " 4",
        " and 6 are mixed",
        " then the resulting mixed color is {2",
        "4",
        "6}. For example",
        " the painting created with segments = [[1",
        "4",
        "5]",
        "[1",
        "7",
        "7]] can be described by painting = [[1",
        "4",
        "12]",
        "[4",
        "7",
        "7]] because:\n\n\t\n[1",
        "4) is colored {5",
        "7} (with a sum of 12) from both the first and second segments.\n[4",
        "7) is colored {7} from only the second segment.\n\n[1",
        "4) is colored {5",
        "7} (with a sum of 12) from both the first and second segments.[4",
        "7) is colored {7} from only the second segment. 1 <= segments. length <= 2 * 104segments[i]. length == 31 <= starti < endi <= 1051 <= colori <= 109Each colori is distinct."
    ]
},
{
    "id": "1946",
    "title": "Largest Number After Mutating Substring",
    "question": "You are given a string num, which represents a large integer.\n You are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit.\n More formally, digit d maps to digit change[d].\nYou may choose to mutate a single substring of num.\n To mutate a substring, replace each digit num[i] with the digit it maps to in change (i.\ne.\n replace num[i] with change[num[i]]).\nReturn a string representing the largest possible integer after mutating (or choosing not to) a single substring of num.\nA substring is a contiguous sequence of characters within the string.",
    "examples": [
        "Input: num = \"132\", change = [9,8,5,0,3,6,4,2,6,8]",
        "Output: \"832\"",
        "Explanation: Replace the substring \"1\":",
        "- 1 maps to change[1] = 8.",
        "Thus, \"132\" becomes \"832\".",
        "\"832\" is the largest number that can be created, so return it.",
        "Input: num = \"021\", change = [9,4,3,5,7,2,1,9,0,6]",
        "Output: \"934\"",
        "Explanation: Replace the substring \"021\":",
        "- 0 maps to change[0] = 9.",
        "- 2 maps to change[2] = 3.",
        "- 1 maps to change[1] = 4.",
        "Thus, \"021\" becomes \"934\".",
        "\"934\" is the largest number that can be created, so return it.",
        "Input: num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]",
        "Output: \"5\"",
        "Explanation: \"5\" is already the largest number that can be created, so return it.",
        ""
    ],
    "constraints": [
        "1 <= num. length <= 105num consists of only digits 0-9. change. length == 100 <= change[d] <= 9"
    ]
},
{
    "id": "1947",
    "title": "Maximum Compatibility Score Sum",
    "question": "There is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes).\nThe survey was given to m students numbered from 0 to m - 1 and m mentors numbered from 0 to m - 1.\n The answers of the students are represented by a 2D integer array students where students[i] is an integer array that contains the answers of the ith student (0-indexed).\n The answers of the mentors are represented by a 2D integer array mentors where mentors[j] is an integer array that contains the answers of the jth mentor (0-indexed).\nEach student will be assigned to one mentor, and each mentor will have one student assigned to them.\n The compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor.\nYou are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores.\nGiven students and mentors, return the maximum compatibility score sum that can be achieved.",
    "examples": [
        "Input: students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]",
        "Output: 8",
        "Explanation: We assign students to mentors in the following way:",
        "- student 0 to mentor 2 with a compatibility score of 3.",
        "- student 1 to mentor 0 with a compatibility score of 2.",
        "- student 2 to mentor 1 with a compatibility score of 3.",
        "The compatibility score sum is 3 + 2 + 3 = 8.",
        "Input: students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]",
        "Output: 0",
        "Explanation: The compatibility score of any student-mentor pair is 0.",
        ""
    ],
    "constraints": [
        "For example",
        " if the student's answers were [1",
        " 0",
        " 1] and the mentor's answers were [0",
        " 0",
        " 1]",
        " then their compatibility score is 2 because only the second and the third answers are the same. m == students. length == mentors. lengthn == students[i]. length == mentors[j]. length1 <= m",
        " n <= 8students[i][k] is either 0 or 1. mentors[j][k] is either 0 or 1."
    ]
},
{
    "id": "1953",
    "title": "Maximum Number of Weeks for Which You Can Work",
    "question": "There are n projects numbered from 0 to n - 1.\n You are given an integer array milestones where each milestones[i] denotes the number of milestones the ith project has.\nYou can work on the projects following these two rules:Once all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working.\n Note that you may not be able to finish every project's milestones due to these constraints.\nReturn the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.",
    "examples": [
        "Input: milestones = [1,2,3]",
        "Output: 6",
        "Explanation: One possible scenario is:",
        "​​​​- During the 1st week, you will work on a milestone of project 0.",
        "- During the 2nd week, you will work on a milestone of project 2.",
        "- During the 3rd week, you will work on a milestone of project 1.",
        "- During the 4th week, you will work on a milestone of project 2.",
        "- During the 5th week, you will work on a milestone of project 1.",
        "- During the 6th week, you will work on a milestone of project 2.",
        "The total number of weeks is 6.",
        "Input: milestones = [5,2,1]",
        "Output: 7",
        "Explanation: One possible scenario is:",
        "- During the 1st week, you will work on a milestone of project 0.",
        "- During the 2nd week, you will work on a milestone of project 1.",
        "- During the 3rd week, you will work on a milestone of project 0.",
        "- During the 4th week, you will work on a milestone of project 1.",
        "- During the 5th week, you will work on a milestone of project 0.",
        "- During the 6th week, you will work on a milestone of project 2.",
        "- During the 7th week, you will work on a milestone of project 0.",
        "The total number of weeks is 7.",
        "Note that you cannot work on the last milestone of project 0 on 8th week because it would violate the rules.",
        "Thus, one milestone in project 0 will remain unfinished.",
        ""
    ],
    "constraints": [
        "Every week",
        " you will finish exactly one milestone of one project. You must work every week. You cannot work on two milestones from the same project for two consecutive weeks. n == milestones. length1 <= n <= 1051 <= milestones[i] <= 109"
    ]
},
{
    "id": "1954",
    "title": "Minimum Garden Perimeter to Collect Enough Apples",
    "question": "In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate.\n The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it.\nYou will buy an axis-aligned square plot of land that is centered at (0, 0).\nGiven an integer neededApples, return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot.\nThe value of |x| is defined as:",
    "examples": [
        "Input: neededApples = 1",
        "Output: 8",
        "Explanation: A square plot of side length 1 does not contain any apples.",
        "However, a square plot of side length 2 has 12 apples inside (as depicted in the image above).",
        "The perimeter is 2 * 4 = 8.",
        "Input: neededApples = 13",
        "Output: 16",
        "Input: neededApples = 1000000000",
        "Output: 5040",
        ""
    ],
    "constraints": [
        "x if x >= 0-x if x < 01 <= neededApples <= 1015"
    ]
},
{
    "id": "1958",
    "title": "Check if Move is Legal",
    "question": "You are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board.\n On the board, free cells are represented by '.\n', white cells are represented by 'W', and black cells are represented by 'B'.\nEach move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black).\n However, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal).\nA good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free).\n You can find examples for good lines in the figure below:Given two integers rMove and cMove and a character color representing the color you are playing as (white or black), return true if changing cell (rMove, cMove) to color color is a legal move, or false if it is not legal.",
    "examples": [
        "Input: board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\"",
        "Output: true",
        "Explanation: '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'.",
        "The two good lines with the chosen cell as an endpoint are annotated above with the red rectangles.",
        "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\"",
        "Output: false",
        "Explanation: While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint.",
        ""
    ],
    "constraints": [
        "board. length == board[r]. length == 80 <= rMove",
        " cMove < 8board[rMove][cMove] == '.'color is either 'B' or 'W'."
    ]
},
{
    "id": "559",
    "title": "Maximum Depth of N-ary Tree",
    "question": "Given a n-ary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).",
    "examples": [
        "Input: root = [1,null,3,2,4,null,5,6]",
        "Output: 3",
        "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "Output: 5",
        ""
    ],
    "constraints": [
        "The total number of nodes is in the range [0",
        " 104]. The depth of the n-ary tree is less than or equal to 1000."
    ]
},
{
    "id": "1959",
    "title": "Minimum Total Space Wasted With K Resizing Operations",
    "question": "You are currently designing a dynamic array.\n You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i.\n In addition, you are given an integer k, the maximum number of times you can resize the array (to any size).\nThe size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements.\n The space wasted at time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.\nlength.\nReturn the minimum total space wasted if you can resize the array at most k times.\nNote: The array can have any size at the start and does not count towards the number of resizing operations.",
    "examples": [
        "Input: nums = [10,20], k = 0",
        "Output: 10",
        "Explanation: size = [20,20].",
        "We can set the initial size to be 20.",
        "The total wasted space is (20 - 10) + (20 - 20) = 10.",
        "Input: nums = [10,20,30], k = 1",
        "Output: 10",
        "Explanation: size = [20,20,30].",
        "We can set the initial size to be 20 and resize to 30 at time 2. ",
        "The total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10.",
        "Input: nums = [10,20,15,30,20], k = 2",
        "Output: 15",
        "Explanation: size = [10,20,20,30,30].",
        "We can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.",
        "The total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2001 <= nums[i] <= 1060 <= k <= nums. length - 1"
    ]
},
{
    "id": "1962",
    "title": "Remove Stones to Minimize the Total",
    "question": "You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k.\n You should apply the following operation exactly k times:Notice that you can apply the operation on the same pile more than once.\nReturn the minimum possible total number of stones remaining after applying the k operations.\nfloor(x) is the greatest integer that is smaller than or equal to x (i.\ne.\n, rounds x down).",
    "examples": [
        "Input: piles = [5,4,9], k = 2",
        "Output: 12",
        "Explanation: Steps of a possible scenario are:",
        "- Apply the operation on pile 2. The resulting piles are [5,4,5].",
        "- Apply the operation on pile 0. The resulting piles are [3,4,5].",
        "The total number of stones in [3,4,5] is 12.",
        "Input: piles = [4,3,6,7], k = 3",
        "Output: 12",
        "Explanation: Steps of a possible scenario are:",
        "- Apply the operation on pile 2. The resulting piles are [4,3,3,7].",
        "- Apply the operation on pile 3. The resulting piles are [4,3,3,4].",
        "- Apply the operation on pile 0. The resulting piles are [2,3,3,4].",
        "The total number of stones in [2,3,3,4] is 12.",
        ""
    ],
    "constraints": [
        "Choose any piles[i] and remove floor(piles[i] / 2) stones from it. 1 <= piles. length <= 1051 <= piles[i] <= 1041 <= k <= 105"
    ]
},
{
    "id": "1963",
    "title": "Minimum Number of Swaps to Make the String Balanced",
    "question": "You are given a 0-indexed string s of even length n.\n The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.\nA string is called balanced if and only if:You may swap the brackets at any two indices any number of times.\nReturn the minimum number of swaps to make s balanced.",
    "examples": [
        "Input: s = \"][][\"",
        "Output: 1",
        "Explanation: You can make the string balanced by swapping index 0 with index 3.",
        "The resulting string is \"[[]]\".",
        "Input: s = \"]]][[[\"",
        "Output: 2",
        "Explanation: You can do the following to make the string balanced:",
        "- Swap index 0 with index 4. s = \"[]][][\".",
        "- Swap index 1 with index 5. s = \"[[][]]\".",
        "The resulting string is \"[[][]]\".",
        "Input: s = \"[]\"",
        "Output: 0",
        "Explanation: The string is already balanced.",
        ""
    ],
    "constraints": [
        "It is the empty string",
        " orIt can be written as AB",
        " where both A and B are balanced strings",
        " orIt can be written as [C]",
        " where C is a balanced string. n == s. length2 <= n <= 106n is even. s[i] is either '[' or ']'. The number of opening brackets '[' equals n / 2",
        " and the number of closing brackets ']' equals n / 2."
    ]
},
{
    "id": "1968",
    "title": "Array With Elements Not Equal to Average of Neighbors",
    "question": "You are given a 0-indexed array nums of distinct integers.\n You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.\nMore formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.\nlength - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i].\nReturn any rearrangement of nums that meets the requirements.",
    "examples": [
        "Input: nums = [1,2,3,4,5]",
        "Output: [1,2,4,5,3]",
        "Explanation:",
        "When i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2. 5.",
        "When i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3. 5.",
        "When i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3. 5.",
        "Input: nums = [6,2,0,9,7]",
        "Output: [9,7,6,2,0]",
        "Explanation:",
        "When i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7. 5.",
        "When i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4. 5.",
        "When i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.",
        ""
    ],
    "constraints": [
        "3 <= nums. length <= 1050 <= nums[i] <= 105"
    ]
},
{
    "id": "1969",
    "title": "Minimum Non-Zero Product of the Array Elements",
    "question": "You are given a positive integer p.\n Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations.\n You are allowed to do the following operation any number of times:For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.\nFind the minimum non-zero product of nums after performing the above operation any number of times.\n Return this product modulo 109 + 7.\nNote: The answer should be the minimum product before the modulo operation is done.",
    "examples": [
        "Input: p = 1",
        "Output: 1",
        "Explanation: nums = [1].",
        "There is only one element, so the product equals that element.",
        "Input: p = 2",
        "Output: 6",
        "Explanation: nums = [01, 10, 11].",
        "Any swap would either make the product 0 or stay the same.",
        "Thus, the array product of 1 * 2 * 3 = 6 is already minimized.",
        "Input: p = 3",
        "Output: 1512",
        "Explanation: nums = [001, 010, 011, 100, 101, 110, 111]",
        "- In the first operation we can swap the leftmost bit of the second and fifth elements.",
        "    - The resulting array is [001, 110, 011, 100, 001, 110, 111].",
        "- In the second operation we can swap the middle bit of the third and fourth elements.",
        "    - The resulting array is [001, 110, 001, 110, 001, 110, 111].",
        "The array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.",
        ""
    ],
    "constraints": [
        "Choose two elements x and y from nums. Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer. 1 <= p <= 60"
    ]
},
{
    "id": "1975",
    "title": "Maximum Matrix Sum",
    "question": "You are given an n x n integer matrix.\n You can do the following operation any number of times:Two elements are considered adjacent if and only if they share a border.\nYour goal is to maximize the summation of the matrix's elements.\n Return the maximum sum of the matrix's elements using the operation mentioned above.",
    "examples": [
        "Input: matrix = [[1,-1],[-1,1]]",
        "Output: 4",
        "Explanation: We can follow the following steps to reach sum equals 4:",
        "- Multiply the 2 elements in the first row by -1.",
        "- Multiply the 2 elements in the first column by -1.",
        "Input: matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]",
        "Output: 16",
        "Explanation: We can follow the following step to reach sum equals 16:",
        "- Multiply the 2 last elements in the second row by -1.",
        ""
    ],
    "constraints": [
        "Choose any two adjacent elements of matrix and multiply each of them by -1. n == matrix. length == matrix[i]. length2 <= n <= 250-105 <= matrix[i][j] <= 105"
    ]
},
{
    "id": "1976",
    "title": "Number of Ways to Arrive at Destination",
    "question": "You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections.\n The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.\nYou are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel.\n You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.\nReturn the number of ways you can arrive at your destination in the shortest amount of time.\n Since the answer may be large, return it modulo 109 + 7.",
    "examples": [
        "Input: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]",
        "Output: 4",
        "Explanation: The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.",
        "The four ways to get there in 7 minutes are:",
        "- 0 ➝ 6",
        "- 0 ➝ 4 ➝ 6",
        "- 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6",
        "- 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6",
        "Input: n = 2, roads = [[1,0,10]]",
        "Output: 1",
        "Explanation: There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.",
        ""
    ],
    "constraints": [
        "1 <= n <= 200n - 1 <= roads. length <= n * (n - 1) / 2roads[i]. length == 30 <= ui",
        " vi <= n - 11 <= timei <= 109ui != viThere is at most one road connecting any two intersections. You can reach any intersection from any other intersection."
    ]
},
{
    "id": "1980",
    "title": "Find Unique Binary String",
    "question": "Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums.\n If there are multiple answers, you may return any of them.",
    "examples": [
        "Input: nums = [\"01\",\"10\"]",
        "Output: \"11\"",
        "Explanation: \"11\" does not appear in nums. \"00\" would also be correct.",
        "Input: nums = [\"00\",\"01\"]",
        "Output: \"11\"",
        "Explanation: \"11\" does not appear in nums. \"10\" would also be correct.",
        "Input: nums = [\"111\",\"011\",\"001\"]",
        "Output: \"101\"",
        "Explanation: \"101\" does not appear in nums. \"000\", \"010\", \"100\", and \"110\" would also be correct.",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 16nums[i]. length == nnums[i] is either '0' or '1'. All the strings of nums are unique."
    ]
},
{
    "id": "1981",
    "title": "Minimize the Difference Between Target and Chosen Elements",
    "question": "You are given an m x n integer matrix mat and an integer target.\nChoose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized.\nReturn the minimum absolute difference.\nThe absolute difference between two numbers a and b is the absolute value of a - b.",
    "examples": [
        "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13",
        "Output: 0",
        "Explanation: One possible choice is to:",
        "- Choose 1 from the first row.",
        "- Choose 5 from the second row.",
        "- Choose 7 from the third row.",
        "The sum of the chosen elements is 13, which equals the target, so the absolute difference is 0.",
        "Input: mat = [[1],[2],[3]], target = 100",
        "Output: 94",
        "Explanation: The best possible choice is to:",
        "- Choose 1 from the first row.",
        "- Choose 2 from the second row.",
        "- Choose 3 from the third row.",
        "The sum of the chosen elements is 6, and the absolute difference is 94.",
        "Input: mat = [[1,2,9,8,7]], target = 6",
        "Output: 1",
        "Explanation: The best choice is to choose 7 from the first row.",
        "The absolute difference is 1.",
        ""
    ],
    "constraints": [
        "m == mat. lengthn == mat[i]. length1 <= m",
        " n <= 701 <= mat[i][j] <= 701 <= target <= 800"
    ]
},
{
    "id": "1985",
    "title": "Find the Kth Largest Integer in the Array",
    "question": "You are given an array of strings nums and an integer k.\n Each string in nums represents an integer without leading zeros.\nReturn the string that represents the kth largest integer in nums.\nNote: Duplicate numbers should be counted distinctly.\n For example, if nums is [\"1\",\"2\",\"2\"], \"2\" is the first largest integer, \"2\" is the second-largest integer, and \"1\" is the third-largest integer.",
    "examples": [
        "Input: nums = [\"3\",\"6\",\"7\",\"10\"], k = 4",
        "Output: \"3\"",
        "Explanation:",
        "The numbers in nums sorted in non-decreasing order are [\"3\",\"6\",\"7\",\"10\"].",
        "The 4th largest integer in nums is \"3\".",
        "Input: nums = [\"2\",\"21\",\"12\",\"1\"], k = 3",
        "Output: \"2\"",
        "Explanation:",
        "The numbers in nums sorted in non-decreasing order are [\"1\",\"2\",\"12\",\"21\"].",
        "The 3rd largest integer in nums is \"2\".",
        "Input: nums = [\"0\",\"0\"], k = 2",
        "Output: \"0\"",
        "Explanation:",
        "The numbers in nums sorted in non-decreasing order are [\"0\",\"0\"].",
        "The 2nd largest integer in nums is \"0\".",
        ""
    ],
    "constraints": [
        "1 <= k <= nums. length <= 1041 <= nums[i]. length <= 100nums[i] consists of only digits. nums[i] will not have any leading zeros."
    ]
},
{
    "id": "561",
    "title": "Array Partition I",
    "question": "Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), .\n.\n.\n, (an, bn) such that the sum of min(ai, bi) for all i is maximized.\n Return the maximized sum.",
    "examples": [
        "Input: nums = [1,4,3,2]",
        "Output: 4",
        "Explanation: All possible pairings (ignoring the ordering of elements) are:",
        "1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3",
        "2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3",
        "3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4",
        "So the maximum possible sum is 4. Input: nums = [6,2,6,5,1,2]",
        "Output: 9",
        "Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.",
        ""
    ],
    "constraints": [
        "1 <= n <= 104nums. length == 2 * n-104 <= nums[i] <= 104"
    ]
},
{
    "id": "1986",
    "title": "Minimum Number of Work Sessions to Finish the Tasks",
    "question": "There are n tasks assigned to you.\n The task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish.\n A work session is when you work for at most sessionTime consecutive hours and then take a break.\nYou should finish the given tasks in a way that satisfies the following conditions:Given tasks and sessionTime, return the minimum number of work sessions needed to finish all the tasks following the conditions above.\nThe tests are generated such that sessionTime is greater than or equal to the maximum element in tasks[i].",
    "examples": [
        "Input: tasks = [1,2,3], sessionTime = 3",
        "Output: 2",
        "Explanation: You can finish the tasks in two work sessions.",
        "- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.",
        "- Second work session: finish the third task in 3 hours.",
        "Input: tasks = [3,1,3,1,1], sessionTime = 8",
        "Output: 2",
        "Explanation: You can finish the tasks in two work sessions.",
        "- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.",
        "- Second work session: finish the last task in 1 hour.",
        "Input: tasks = [1,2,3,4,5], sessionTime = 15",
        "Output: 1",
        "Explanation: You can finish all the tasks in one work session.",
        ""
    ],
    "constraints": [
        "If you start a task in a work session",
        " you must complete it in the same work session. You can start a new task immediately after finishing the previous one. You may complete the tasks in any order. n == tasks. length1 <= n <= 141 <= tasks[i] <= 10max(tasks[i]) <= sessionTime <= 15"
    ]
},
{
    "id": "4",
    "title": "Median of Two Sorted Arrays",
    "question": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).",
    "examples": [
        "Input: nums1 = [1,3], nums2 = [2]",
        "Output: 2. 00000",
        "Explanation: merged array = [1,2,3] and median is 2.",
        "Input: nums1 = [1,2], nums2 = [3,4]",
        "Output: 2. 50000",
        "Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2. 5.",
        "Input: nums1 = [0,0], nums2 = [0,0]",
        "Output: 0. 00000",
        "Input: nums1 = [], nums2 = [1]",
        "Output: 1. 00000",
        "Input: nums1 = [2], nums2 = []",
        "Output: 2. 00000",
        ""
    ],
    "constraints": [
        "nums1. length == mnums2. length == n0 <= m <= 10000 <= n <= 10001 <= m + n <= 2000-106 <= nums1[i]",
        " nums2[i] <= 106"
    ]
},
{
    "id": "10",
    "title": "Regular Expression Matching",
    "question": "Given an input string s and a pattern p, implement regular expression matching with support for '.\n' and '*' where:The matching should cover the entire input string (not partial).",
    "examples": [
        "Input: s = \"aa\", p = \"a\"",
        "Output: false",
        "Explanation: \"a\" does not match the entire string \"aa\".",
        "Input: s = \"aa\", p = \"a*\"",
        "Output: true",
        "Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".",
        "Input: s = \"ab\", p = \".*\"",
        "Output: true",
        "Explanation: \".*\" means \"zero or more (*) of any character (.)\".",
        "Input: s = \"aab\", p = \"c*a*b\"",
        "Output: true",
        "Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches \"aab\".",
        "Input: s = \"mississippi\", p = \"mis*is*p*.\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "'.' Matches any single character.​​​​'*' Matches zero or more of the preceding element. 1 <= s. length <= 201 <= p. length <= 30s contains only lowercase English letters. p contains only lowercase English letters",
        " '.'",
        " and '*'. It is guaranteed for each appearance of the character '*'",
        " there will be a previous valid character to match."
    ]
},
{
    "id": "23",
    "title": "Merge k Sorted Lists",
    "question": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.",
    "examples": [
        "Input: lists = [[1,4,5],[1,3,4],[2,6]]",
        "Output: [1,1,2,3,4,4,5,6]",
        "Explanation: The linked-lists are:",
        "[",
        "  1->4->5,",
        "  1->3->4,",
        "  2->6",
        "]",
        "merging them into one sorted list:",
        "1->1->2->3->4->4->5->6",
        "Input: lists = []",
        "Output: []",
        "Input: lists = [[]]",
        "Output: []",
        ""
    ],
    "constraints": [
        "k == lists. length0 <= k <= 10^40 <= lists[i]. length <= 500-10^4 <= lists[i][j] <= 10^4lists[i] is sorted in ascending order. The sum of lists[i]. length won't exceed 10^4."
    ]
},
{
    "id": "25",
    "title": "Reverse Nodes in k-Group",
    "question": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\nk is a positive integer and is less than or equal to the length of the linked list.\n If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.",
    "examples": [
        "Input: head = [1,2,3,4,5], k = 2",
        "Output: [2,1,4,3,5]",
        "Input: head = [1,2,3,4,5], k = 3",
        "Output: [3,2,1,4,5]",
        "Input: head = [1,2,3,4,5], k = 1",
        "Output: [1,2,3,4,5]",
        "Input: head = [1], k = 1",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range sz. 1 <= sz <= 50000 <= Node. val <= 10001 <= k <= sz"
    ]
},
{
    "id": "30",
    "title": "Substring with Concatenation of All Words",
    "question": "You are given a string s and an array of strings words of the same length.\n Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.\nYou can return the answer in any order.",
    "examples": [
        "Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]",
        "Output: [0,9]",
        "Explanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.",
        "The output order does not matter, returning [9,0] is fine too.",
        "Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]",
        "Output: []",
        "Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]",
        "Output: [6,9,12]",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s consists of lower-case English letters. 1 <= words. length <= 50001 <= words[i]. length <= 30words[i] consists of lower-case English letters."
    ]
},
{
    "id": "32",
    "title": "Longest Valid Parentheses",
    "question": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
    "examples": [
        "Input: s = \"(()\"",
        "Output: 2",
        "Explanation: The longest valid parentheses substring is \"()\".",
        "Input: s = \")()())\"",
        "Output: 4",
        "Explanation: The longest valid parentheses substring is \"()()\".",
        "Input: s = \"\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 <= s. length <= 3 * 104s[i] is '('",
        " or ')'."
    ]
},
{
    "id": "37",
    "title": "Sudoku Solver",
    "question": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:The '.\n' character indicates empty cells.",
    "examples": [
        "Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]",
        "Explanation: The input board is shown above and the only valid solution is shown below:",
        "",
        "",
        ""
    ],
    "constraints": [
        "board. length == 9board[i]. length == 9board[i][j] is a digit or '.'. It is guaranteed that the input board has only one solution."
    ]
},
{
    "id": "41",
    "title": "First Missing Positive",
    "question": "Given an unsorted integer array nums, return the smallest missing positive integer.\nYou must implement an algorithm that runs in O(n) time and uses constant extra space.",
    "examples": [
        "Input: nums = [1,2,0]",
        "Output: 3",
        "Input: nums = [3,4,-1,1]",
        "Output: 2",
        "Input: nums = [7,8,9,11,12]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5 * 105-231 <= nums[i] <= 231 - 1"
    ]
},
{
    "id": "42",
    "title": "Trapping Rain Water",
    "question": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
    "examples": [
        "Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "Output: 6",
        "Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.",
        "Input: height = [4,2,0,3,2,5]",
        "Output: 9",
        ""
    ],
    "constraints": [
        "n == height. length1 <= n <= 2 * 1040 <= height[i] <= 105"
    ]
},
{
    "id": "563",
    "title": "Binary Tree Tilt",
    "question": "Given the root of a binary tree, return the sum of every tree node's tilt.\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values.\n If a node does not have a left child, then the sum of the left subtree node values is treated as 0.\n The rule is similar if there the node does not have a right child.",
    "examples": [
        "Input: root = [1,2,3]",
        "Output: 1",
        "Explanation: ",
        "Tilt of node 2 : |0-0| = 0 (no children)",
        "Tilt of node 3 : |0-0| = 0 (no children)",
        "Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)",
        "Sum of every tilt : 0 + 0 + 1 = 1",
        "Input: root = [4,2,9,3,5,null,7]",
        "Output: 15",
        "Explanation: ",
        "Tilt of node 3 : |0-0| = 0 (no children)",
        "Tilt of node 5 : |0-0| = 0 (no children)",
        "Tilt of node 7 : |0-0| = 0 (no children)",
        "Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)",
        "Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)",
        "Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)",
        "Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15",
        "Input: root = [21,7,14,1,1,2,2,3,3]",
        "Output: 9",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 104].-1000 <= Node. val <= 1000"
    ]
},
{
    "id": "44",
    "title": "Wildcard Matching",
    "question": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:The matching should cover the entire input string (not partial).",
    "examples": [
        "Input: s = \"aa\", p = \"a\"",
        "Output: false",
        "Explanation: \"a\" does not match the entire string \"aa\".",
        "Input: s = \"aa\", p = \"*\"",
        "Output: true",
        "Explanation: '*' matches any sequence.",
        "Input: s = \"cb\", p = \"?a\"",
        "Output: false",
        "Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.",
        "Input: s = \"adceb\", p = \"*a*b\"",
        "Output: true",
        "Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".",
        "Input: s = \"acdcb\", p = \"a*c?b\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "'?' Matches any single character.'*' Matches any sequence of characters (including the empty sequence). 0 <= s. length",
        " p. length <= 2000s contains only lowercase English letters. p contains only lowercase English letters",
        " '?' or '*'."
    ]
},
{
    "id": "51",
    "title": "N-Queens",
    "question": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle.\n You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.\n' both indicate a queen and an empty space, respectively.",
    "examples": [
        "Input: n = 4",
        "Output: [[\". Q..\",\"... Q\",\"Q...\",\".. Q.\"],[\".. Q.\",\"Q...\",\"... Q\",\". Q..\"]]",
        "Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above",
        "Input: n = 1",
        "Output: [[\"Q\"]]",
        ""
    ],
    "constraints": [
        "1 <= n <= 9"
    ]
},
{
    "id": "52",
    "title": "N-Queens II",
    "question": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return the number of distinct solutions to the n-queens puzzle.",
    "examples": [
        "Input: n = 4",
        "Output: 2",
        "Explanation: There are two distinct solutions to the 4-queens puzzle as shown.",
        "Input: n = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= n <= 9"
    ]
},
{
    "id": "60",
    "title": "Permutation Sequence",
    "question": "The set [1, 2, 3, .\n.\n.\n, n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:Given n and k, return the kth permutation sequence.",
    "examples": [
        "Input: n = 3, k = 3",
        "Output: \"213\"",
        "Input: n = 4, k = 9",
        "Output: \"2314\"",
        "Input: n = 3, k = 1",
        "Output: \"123\"",
        ""
    ],
    "constraints": [
        "1 <= n <= 91 <= k <= n!"
    ]
},
{
    "id": "65",
    "title": "Valid Number",
    "question": "A valid number can be split up into these components (in order):A decimal number can be split up into these components (in order):An integer can be split up into these components (in order):For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.\n1\", \"+3.\n14\", \"4.\n\", \"-.\n9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.\n5e93\", \"-123.\n456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.\n5\", \"--6\", \"-+3\", \"95a54e53\"].\nGiven a string s, return true if s is a valid number.",
    "examples": [
        "Input: s = \"0\"",
        "Output: true",
        "Input: s = \"e\"",
        "Output: false",
        "Input: s = \".\"",
        "Output: false",
        "Input: s = \". 1\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 20s consists of only English letters (both uppercase and lowercase)",
        " digits (0-9)",
        " plus '+'",
        " minus '-'",
        " or dot '.'."
    ]
},
{
    "id": "68",
    "title": "Text Justification",
    "question": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line.\n Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\nExtra spaces between words should be distributed as evenly as possible.\n If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\nFor the last line of text, it should be left-justified and no extra space is inserted between words.\nNote:",
    "examples": [
        "Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16",
        "Output:",
        "[",
        "   \"This    is    an\",",
        "   \"example  of text\",",
        "   \"justification.  \"",
        "]Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16",
        "Output:",
        "[",
        "  \"What   must   be\",",
        "  \"acknowledgment  \",",
        "  \"shall be        \"",
        "]",
        "Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.",
        "Note that the second line is also left-justified becase it contains only one word. Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20",
        "Output:",
        "[",
        "  \"Science  is  what we\",",
        "  \"understand      well\",",
        "  \"enough to explain to\",",
        "  \"a  computer.  Art is\",",
        "  \"everything  else  we\",",
        "  \"do                  \"",
        "]"
    ],
    "constraints": [
        "A word is defined as a character sequence consisting of non-space characters only. Each word's length is guaranteed to be greater than 0 and not exceed maxWidth. The input array words contains at least one word. 1 <= words. length <= 3001 <= words[i]. length <= 20words[i] consists of only English letters and symbols. 1 <= maxWidth <= 100words[i]. length <= maxWidth"
    ]
},
{
    "id": "72",
    "title": "Edit Distance",
    "question": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:",
    "examples": [
        "Input: word1 = \"horse\", word2 = \"ros\"",
        "Output: 3",
        "Explanation: ",
        "horse -> rorse (replace 'h' with 'r')",
        "rorse -> rose (remove 'r')",
        "rose -> ros (remove 'e')",
        "Input: word1 = \"intention\", word2 = \"execution\"",
        "Output: 5",
        "Explanation: ",
        "intention -> inention (remove 't')",
        "inention -> enention (replace 'i' with 'e')",
        "enention -> exention (replace 'n' with 'x')",
        "exention -> exection (replace 'n' with 'c')",
        "exection -> execution (insert 'u')",
        ""
    ],
    "constraints": [
        "Insert a characterDelete a characterReplace a character0 <= word1. length",
        " word2. length <= 500word1 and word2 consist of lowercase English letters."
    ]
},
{
    "id": "76",
    "title": "Minimum Window Substring",
    "question": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window.\n If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.\nA substring is a contiguous sequence of characters within the string.",
    "examples": [
        "Input: s = \"ADOBECODEBANC\", t = \"ABC\"",
        "Output: \"BANC\"",
        "Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.",
        "Input: s = \"a\", t = \"a\"",
        "Output: \"a\"",
        "Explanation: The entire string s is the minimum window.",
        "Input: s = \"a\", t = \"aa\"",
        "Output: \"\"",
        "Explanation: Both 'a's from t must be included in the window.",
        "Since the largest window of s only has one 'a', return empty string.",
        ""
    ],
    "constraints": [
        "m == s. lengthn == t. length1 <= m",
        " n <= 105s and t consist of uppercase and lowercase English letters."
    ]
},
{
    "id": "84",
    "title": "Largest Rectangle in Histogram",
    "question": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.",
    "examples": [
        "Input: heights = [2,1,5,6,2,3]",
        "Output: 10",
        "Explanation: The above is a histogram where width of each bar is 1.",
        "The largest rectangle is shown in the red area, which has an area = 10 units.",
        "Input: heights = [2,4]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= heights. length <= 1050 <= heights[i] <= 104"
    ]
},
{
    "id": "85",
    "title": "Maximal Rectangle",
    "question": "Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.",
    "examples": [
        "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "Output: 6",
        "Explanation: The maximal rectangle is shown in the above picture.",
        "Input: matrix = []",
        "Output: 0",
        "Input: matrix = [[\"0\"]]",
        "Output: 0",
        "Input: matrix = [[\"1\"]]",
        "Output: 1",
        "Input: matrix = [[\"0\",\"0\"]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "rows == matrix. lengthcols == matrix[i]. length0 <= row",
        " cols <= 200matrix[i][j] is '0' or '1'."
    ]
},
{
    "id": "58",
    "title": "Length of Last Word",
    "question": "Given a string s consisting of some words separated by some number of spaces, return the length of the last word in the string.\nA word is a maximal substring consisting of non-space characters only.",
    "examples": [
        "Input: s = \"Hello World\"",
        "Output: 5",
        "Explanation: The last word is \"World\" with length 5.",
        "Input: s = \"   fly me   to   the moon  \"",
        "Output: 4",
        "Explanation: The last word is \"moon\" with length 4.",
        "Input: s = \"luffy is still joyboy\"",
        "Output: 6",
        "Explanation: The last word is \"joyboy\" with length 6.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s consists of only English letters and spaces ' '. There will be at least one word in s."
    ]
},
{
    "id": "566",
    "title": "Reshape the Matrix",
    "question": "In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\nYou are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\nIf the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.",
    "examples": [
        "Input: mat = [[1,2],[3,4]], r = 1, c = 4",
        "Output: [[1,2,3,4]]",
        "Input: mat = [[1,2],[3,4]], r = 2, c = 4",
        "Output: [[1,2],[3,4]]",
        ""
    ],
    "constraints": [
        "m == mat. lengthn == mat[i]. length1 <= m",
        " n <= 100-1000 <= mat[i][j] <= 10001 <= r",
        " c <= 300"
    ]
},
{
    "id": "87",
    "title": "Scramble String",
    "question": "We can scramble a string s to get a string t using the following algorithm:Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.",
    "examples": [
        "Input: s1 = \"great\", s2 = \"rgeat\"",
        "Output: true",
        "Explanation: One possible scenario applied on s1 is:",
        "\"great\" --> \"gr/eat\" // divide at random index.",
        "\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.",
        "\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.",
        "\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.",
        "\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".",
        "\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.",
        "The algorithm stops now and the result string is \"rgeat\" which is s2.",
        "As there is one possible scenario that led s1 to be scrambled to s2, we return true.",
        "Input: s1 = \"abcde\", s2 = \"caebd\"",
        "Output: false",
        "Input: s1 = \"a\", s2 = \"a\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "Split the string into two non-empty substrings at a random index",
        " i. e.",
        " if the string is s",
        " divide it to x and y where s = x + y. Randomly decide to swap the two substrings or to keep them in the same order. i. e.",
        " after this step",
        " s may become s = x + y or s = y + x. Apply step 1 recursively on each of the two substrings x and y. s1. length == s2. length1 <= s1. length <= 30s1 and s2 consist of lower-case English letters."
    ]
},
{
    "id": "115",
    "title": "Distinct Subsequences",
    "question": "Given two strings s and t, return the number of distinct subsequences of s which equals t.\nA string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions.\n (i.\ne.\n, \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\nIt is guaranteed the answer fits on a 32-bit signed integer.",
    "examples": [
        "Input: s = \"rabbbit\", t = \"rabbit\"",
        "Output: 3",
        "Explanation:",
        "As shown below, there are 3 ways you can generate \"rabbit\" from S.",
        "rabbbit",
        "rabbbit",
        "rabbbit",
        "Input: s = \"babgbag\", t = \"bag\"",
        "Output: 5",
        "Explanation:",
        "As shown below, there are 5 ways you can generate \"bag\" from S.",
        "babgbag",
        "babgbag",
        "babgbag",
        "babgbag",
        "babgbag"
    ],
    "constraints": [
        "1 <= s. length",
        " t. length <= 1000s and t consist of English letters."
    ]
},
{
    "id": "123",
    "title": "Best Time to Buy and Sell Stock III",
    "question": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve.\n You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.\ne.\n, you must sell the stock before you buy again).",
    "examples": [
        "Input: prices = [3,3,5,0,0,3,1,4]",
        "Output: 6",
        "Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.",
        "Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. Input: prices = [1,2,3,4,5]",
        "Output: 4",
        "Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.",
        "Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.",
        "Input: prices = [7,6,4,3,1]",
        "Output: 0",
        "Explanation: In this case, no transaction is done, i. e. max profit = 0.",
        "Input: prices = [1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= prices. length <= 1050 <= prices[i] <= 105"
    ]
},
{
    "id": "124",
    "title": "Binary Tree Maximum Path Sum",
    "question": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them.\n A node can only appear in the sequence at most once.\n Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any path.",
    "examples": [
        "Input: root = [1,2,3]",
        "Output: 6",
        "Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.",
        "Input: root = [-10,9,20,null,null,15,7]",
        "Output: 42",
        "Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 3 * 104].-1000 <= Node. val <= 1000"
    ]
},
{
    "id": "126",
    "title": "Word Ladder II",
    "question": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> .\n.\n.\n -> sk such that:Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists.\n Each sequence should be returned as a list of the words [beginWord, s1, s2, .\n.\n.\n, sk].",
    "examples": [
        "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
        "Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]",
        "Explanation: There are 2 shortest transformation sequences:",
        "\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"",
        "\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"",
        "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
        "Output: []",
        "Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.",
        ""
    ],
    "constraints": [
        "Every adjacent pair of words differs by a single letter. Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList. sk == endWord1 <= beginWord. length <= 5endWord. length == beginWord. length1 <= wordList. length <= 1000wordList[i]. length == beginWord. lengthbeginWord",
        " endWord",
        " and wordList[i] consist of lowercase English letters. beginWord != endWordAll the words in wordList are unique."
    ]
},
{
    "id": "127",
    "title": "Word Ladder",
    "question": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> .\n.\n.\n -> sk such that:Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.",
    "examples": [
        "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
        "Output: 5",
        "Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.",
        "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
        "Output: 0",
        "Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.",
        ""
    ],
    "constraints": [
        "Every adjacent pair of words differs by a single letter. Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList. sk == endWord1 <= beginWord. length <= 10endWord. length == beginWord. length1 <= wordList. length <= 5000wordList[i]. length == beginWord. lengthbeginWord",
        " endWord",
        " and wordList[i] consist of lowercase English letters. beginWord != endWordAll the words in wordList are unique."
    ]
},
{
    "id": "132",
    "title": "Palindrome Partitioning II",
    "question": "Given a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.",
    "examples": [
        "Input: s = \"aab\"",
        "Output: 1",
        "Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.",
        "Input: s = \"a\"",
        "Output: 0",
        "Input: s = \"ab\"",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 2000s consists of lower-case English letters only."
    ]
},
{
    "id": "135",
    "title": "Candy",
    "question": "There are n children standing in a line.\n Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:Return the minimum number of candies you need to have to distribute the candies to the children.",
    "examples": [
        "Input: ratings = [1,0,2]",
        "Output: 5",
        "Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.",
        "Input: ratings = [1,2,2]",
        "Output: 4",
        "Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.",
        "The third child gets 1 candy because it satisfies the above two conditions.",
        ""
    ],
    "constraints": [
        "Each child must have at least one candy. Children with a higher rating get more candies than their neighbors. n == ratings. length1 <= n <= 2 * 1040 <= ratings[i] <= 2 * 104"
    ]
},
{
    "id": "140",
    "title": "Word Break II",
    "question": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word.\n Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.",
    "examples": [
        "Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
        "Output: [\"cats and dog\",\"cat sand dog\"]",
        "Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]",
        "Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]",
        "Explanation: Note that you are allowed to reuse a dictionary word.",
        "Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
        "Output: []",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 201 <= wordDict. length <= 10001 <= wordDict[i]. length <= 10s and wordDict[i] consist of only lowercase English letters. All the strings of wordDict are unique."
    ]
},
{
    "id": "149",
    "title": "Max Points on a Line",
    "question": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.",
    "examples": [
        "Input: points = [[1,1],[2,2],[3,3]]",
        "Output: 3",
        "Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= points. length <= 300points[i]. length == 2-104 <= xi",
        " yi <= 104All the points are unique."
    ]
},
{
    "id": "572",
    "title": "Subtree of Another Tree",
    "question": "Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants.\n The tree tree could also be considered as a subtree of itself.",
    "examples": [
        "Input: root = [3,4,5,1,2], subRoot = [4,1,2]",
        "Output: true",
        "Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]",
        "Output: false",
        ""
    ],
    "constraints": [
        "The number of nodes in the root tree is in the range [1",
        " 2000]. The number of nodes in the subRoot tree is in the range [1",
        " 1000].-104 <= root. val <= 104-104 <= subRoot. val <= 104"
    ]
},
{
    "id": "154",
    "title": "Find Minimum in Rotated Sorted Array II",
    "question": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times.\n For example, the array nums = [0,1,4,4,5,6,7] might become:Notice that rotating an array [a[0], a[1], a[2], .\n.\n.\n, a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], .\n.\n.\n, a[n-2]].\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\nYou must decrease the overall operation steps as much as possible.\n   Follow up: This problem is similar to Find Minimum in Rotated Sorted Array, but nums may contain duplicates.\n Would this affect the runtime complexity? How and why?",
    "examples": [
        "Input: nums = [1,3,5]",
        "Output: 1",
        "Input: nums = [2,2,2,0,1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "[4",
        "5",
        "6",
        "7",
        "0",
        "1",
        "4] if it was rotated 4 times.[0",
        "1",
        "4",
        "4",
        "5",
        "6",
        "7] if it was rotated 7 times. n == nums. length1 <= n <= 5000-5000 <= nums[i] <= 5000nums is sorted and rotated between 1 and n times."
    ]
},
{
    "id": "164",
    "title": "Maximum Gap",
    "question": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form.\n If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.",
    "examples": [
        "Input: nums = [3,6,9,1]",
        "Output: 3",
        "Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.",
        "Input: nums = [10]",
        "Output: 0",
        "Explanation: The array contains less than 2 elements, therefore return 0.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1050 <= nums[i] <= 109"
    ]
},
{
    "id": "174",
    "title": "Dungeon Game",
    "question": "The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon.\n The dungeon consists of m x n rooms laid out in a 2D grid.\n Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\nThe knight has an initial health point represented by a positive integer.\n If at any point his health point drops to 0 or below, he dies immediately.\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\nReturn the knight's minimum initial health so that he can rescue the princess.\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.",
    "examples": [
        "Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]",
        "Output: 7",
        "Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.",
        "Input: dungeon = [[0]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "m == dungeon. lengthn == dungeon[i]. length1 <= m",
        " n <= 200-1000 <= dungeon[i][j] <= 1000"
    ]
},
{
    "id": "188",
    "title": "Best Time to Buy and Sell Stock IV",
    "question": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\nFind the maximum profit you can achieve.\n You may complete at most k transactions.\nNote: You may not engage in multiple transactions simultaneously (i.\ne.\n, you must sell the stock before you buy again).",
    "examples": [
        "Input: k = 2, prices = [2,4,1]",
        "Output: 2",
        "Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.",
        "Input: k = 2, prices = [3,2,6,5,0,3]",
        "Output: 7",
        "Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.",
        ""
    ],
    "constraints": [
        "0 <= k <= 1000 <= prices. length <= 10000 <= prices[i] <= 1000"
    ]
},
{
    "id": "212",
    "title": "Word Search II",
    "question": "Given an m x n board of characters and a list of strings words, return all words on the board.\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.\n The same letter cell may not be used more than once in a word.",
    "examples": [
        "Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]",
        "Output: [\"eat\",\"oath\"]",
        "Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]",
        "Output: []",
        ""
    ],
    "constraints": [
        "m == board. lengthn == board[i]. length1 <= m",
        " n <= 12board[i][j] is a lowercase English letter. 1 <= words. length <= 3 * 1041 <= words[i]. length <= 10words[i] consists of lowercase English letters. All the strings of words are unique."
    ]
},
{
    "id": "214",
    "title": "Shortest Palindrome",
    "question": "You are given a string s.\n You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.",
    "examples": [
        "Input: s = \"aacecaaa\"",
        "Output: \"aaacecaaa\"",
        "Input: s = \"abcd\"",
        "Output: \"dcbabcd\"",
        ""
    ],
    "constraints": [
        "0 <= s. length <= 5 * 104s consists of lowercase English letters only."
    ]
},
{
    "id": "218",
    "title": "The Skyline Problem",
    "question": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance.\n Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],.\n.\n.\n].\n Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends.\n Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline.\n For instance, [.\n.\n.\n,[2 3],[4 5],[7 5],[11 5],[12 7],.\n.\n.\n] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [.\n.\n.\n,[2 3],[4 5],[12 7],.\n.\n.\n]",
    "examples": [
        "Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
        "Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]",
        "Explanation:",
        "Figure A shows the buildings of the input.",
        "Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.",
        "Input: buildings = [[0,2,3],[2,5,3]]",
        "Output: [[0,3],[5,0]]",
        ""
    ],
    "constraints": [
        "lefti is the x coordinate of the left edge of the ith building. righti is the x coordinate of the right edge of the ith building. heighti is the height of the ith building. 1 <= buildings. length <= 1040 <= lefti < righti <= 231 - 11 <= heighti <= 231 - 1buildings is sorted by lefti in non-decreasing order."
    ]
},
{
    "id": "224",
    "title": "Basic Calculator",
    "question": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().",
    "examples": [
        "Input: s = \"1 + 1\"",
        "Output: 2",
        "Input: s = \" 2-1 + 2 \"",
        "Output: 3",
        "Input: s = \"(1+(4+5+2)-3)+(6+8)\"",
        "Output: 23",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 3 * 105s consists of digits",
        " '+'",
        " '-'",
        " '('",
        " ')'",
        " and ' '. s represents a valid expression.'+' is not used as a unary operation.'-' could be used as a unary operation but it has to be inside parentheses. There will be no two consecutive operators in the input. Every number and running calculation will fit in a signed 32-bit integer."
    ]
},
{
    "id": "233",
    "title": "Number of Digit One",
    "question": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.",
    "examples": [
        "Input: n = 13",
        "Output: 6",
        "Input: n = 0",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 <= n <= 109"
    ]
},
{
    "id": "239",
    "title": "Sliding Window Maximum",
    "question": "You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right.\n You can only see the k numbers in the window.\n Each time the sliding window moves right by one position.\nReturn the max sliding window.",
    "examples": [
        "Input: nums = [1,3,-1,-3,5,3,6,7], k = 3",
        "Output: [3,3,5,5,6,7]",
        "Explanation: ",
        "Window position                Max",
        "---------------               -----",
        "[1  3  -1] -3  5  3  6  7       3",
        " 1 [3  -1  -3] 5  3  6  7       3",
        " 1  3 [-1  -3  5] 3  6  7       5",
        " 1  3  -1 [-3  5  3] 6  7       5",
        " 1  3  -1  -3 [5  3  6] 7       6",
        " 1  3  -1  -3  5 [3  6  7]      7",
        "Input: nums = [1], k = 1",
        "Output: [1]",
        "Input: nums = [1,-1], k = 1",
        "Output: [1,-1]",
        "Input: nums = [9,11], k = 2",
        "Output: [11]",
        "Input: nums = [4,-2], k = 2",
        "Output: [4]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105-104 <= nums[i] <= 1041 <= k <= nums. length"
    ]
},
{
    "id": "575",
    "title": "Distribute Candies",
    "question": "Alice has n candies, where the ith candy is of type candyType[i].\n Alice noticed that she started to gain weight, so she visited a doctor.\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even).\n Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.",
    "examples": [
        "Input: candyType = [1,1,2,2,3,3]",
        "Output: 3",
        "Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.",
        "Input: candyType = [1,1,2,3]",
        "Output: 2",
        "Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.",
        "Input: candyType = [6,6,6,6]",
        "Output: 1",
        "Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.",
        ""
    ],
    "constraints": [
        "n == candyType. length2 <= n <= 104n is even.-105 <= candyType[i] <= 105"
    ]
},
{
    "id": "273",
    "title": "Integer to English Words",
    "question": "Convert a non-negative integer num to its English words representation.",
    "examples": [
        "Input: num = 123",
        "Output: \"One Hundred Twenty Three\"",
        "Input: num = 12345",
        "Output: \"Twelve Thousand Three Hundred Forty Five\"",
        "Input: num = 1234567",
        "Output: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"",
        "Input: num = 1234567891",
        "Output: \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"",
        ""
    ],
    "constraints": [
        "0 <= num <= 231 - 1"
    ]
},
{
    "id": "282",
    "title": "Expression Add Operators",
    "question": "Given a string num that contains only digits and an integer target, return all possibilities to add the binary operators '+', '-', or '*' between the digits of num so that the resultant expression evaluates to the target value.",
    "examples": [
        "Input: num = \"123\", target = 6",
        "Output: [\"1*2*3\",\"1+2+3\"]",
        "Input: num = \"232\", target = 8",
        "Output: [\"2*3+2\",\"2+3*2\"]",
        "Input: num = \"105\", target = 5",
        "Output: [\"1*0+5\",\"10-5\"]",
        "Input: num = \"00\", target = 0",
        "Output: [\"0*0\",\"0+0\",\"0-0\"]",
        "Input: num = \"3456237490\", target = 9191",
        "Output: []",
        ""
    ],
    "constraints": [
        "1 <= num. length <= 10num consists of only digits.-231 <= target <= 231 - 1"
    ]
},
{
    "id": "295",
    "title": "Find Median from Data Stream",
    "question": "The median is the middle value in an ordered integer list.\n If the size of the list is even, there is no middle value and the median is the mean of the two middle values.\nImplement the MedianFinder class:   Follow up:",
    "examples": [
        "Input",
        "[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]",
        "[[], [1], [2], [], [3], []]",
        "Output",
        "[null, null, null, 1. 5, null, 2. 0]",
        "",
        "Explanation",
        "MedianFinder medianFinder = new MedianFinder();",
        "medianFinder. addNum(1);    // arr = [1]",
        "medianFinder. addNum(2);    // arr = [1, 2]",
        "medianFinder. findMedian(); // return 1. 5 (i. e., (1 + 2) / 2)",
        "medianFinder. addNum(3);    // arr[1, 2, 3]",
        "medianFinder. findMedian(); // return 2. 0",
        ""
    ],
    "constraints": [
        "For example",
        " for arr = [2",
        "3",
        "4]",
        " the median is 3. For example",
        " for arr = [2",
        "3]",
        " the median is (2 + 3) / 2 = 2. 5. MedianFinder() initializes the MedianFinder object. void addNum(int num) adds the integer num from the data stream to the data structure. double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.-105 <= num <= 105There will be at least one element in the data structure before calling findMedian. At most 5 * 104 calls will be made to addNum and findMedian. If all integer numbers from the stream are in the range [0",
        " 100]",
        " how would you optimize your solution?If 99% of all integer numbers from the stream are in the range [0",
        " 100]",
        " how would you optimize your solution?"
    ]
},
{
    "id": "297",
    "title": "Serialize and Deserialize Binary Tree",
    "question": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree.\n There is no restriction on how your serialization/deserialization algorithm should work.\n You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as how LeetCode serializes a binary tree.\n You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.",
    "examples": [
        "Input: root = [1,2,3,null,null,4,5]",
        "Output: [1,2,3,null,null,4,5]",
        "Input: root = []",
        "Output: []",
        "Input: root = [1]",
        "Output: [1]",
        "Input: root = [1,2]",
        "Output: [1,2]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 104].-1000 <= Node. val <= 1000"
    ]
},
{
    "id": "301",
    "title": "Remove Invalid Parentheses",
    "question": "Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\nReturn all the possible results.\n You may return the answer in any order.",
    "examples": [
        "Input: s = \"()())()\"",
        "Output: [\"(())()\",\"()()()\"]",
        "Input: s = \"(a)())()\"",
        "Output: [\"(a())()\",\"(a)()()\"]",
        "Input: s = \")(\"",
        "Output: [\"\"]",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 25s consists of lowercase English letters and parentheses '(' and ')'. There will be at most 20 parentheses in s."
    ]
},
{
    "id": "312",
    "title": "Burst Balloons",
    "question": "You are given n balloons, indexed from 0 to n - 1.\n Each balloon is painted with a number on it represented by an array nums.\n You are asked to burst all the balloons.\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins.\n If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.",
    "examples": [
        "Input: nums = [3,1,5,8]",
        "Output: 167",
        "Explanation:",
        "nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []",
        "coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167Input: nums = [1,5]",
        "Output: 10",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 5000 <= nums[i] <= 100"
    ]
},
{
    "id": "315",
    "title": "Count of Smaller Numbers After Self",
    "question": "You are given an integer array nums and you have to return a new counts array.\n The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].",
    "examples": [
        "Input: nums = [5,2,6,1]",
        "Output: [2,1,1,0]",
        "Explanation:",
        "To the right of 5 there are 2 smaller elements (2 and 1).",
        "To the right of 2 there is only 1 smaller element (1).",
        "To the right of 6 there is 1 smaller element (1).",
        "To the right of 1 there is 0 smaller element.",
        "Input: nums = [-1]",
        "Output: [0]",
        "Input: nums = [-1,-1]",
        "Output: [0,0]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105-104 <= nums[i] <= 104"
    ]
},
{
    "id": "321",
    "title": "Create Maximum Number",
    "question": "You are given two integer arrays nums1 and nums2 of lengths m and n respectively.\n nums1 and nums2 represent the digits of two numbers.\n You are also given an integer k.\nCreate the maximum number of length k <= m + n from digits of the two numbers.\n The relative order of the digits from the same array must be preserved.\nReturn an array of the k digits representing the answer.",
    "examples": [
        "Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5",
        "Output: [9,8,6,5,3]",
        "Input: nums1 = [6,7], nums2 = [6,0,4], k = 5",
        "Output: [6,7,6,0,4]",
        "Input: nums1 = [3,9], nums2 = [8,9], k = 3",
        "Output: [9,8,9]",
        ""
    ],
    "constraints": [
        "m == nums1. lengthn == nums2. length1 <= m",
        " n <= 5000 <= nums1[i]",
        " nums2[i] <= 91 <= k <= m + n"
    ]
},
{
    "id": "327",
    "title": "Count of Range Sum",
    "question": "Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.",
    "examples": [
        "Input: nums = [-2,5,-1], lower = -2, upper = 2",
        "Output: 3",
        "Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.",
        "Input: nums = [0], lower = 0, upper = 0",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105-231 <= nums[i] <= 231 - 1-105 <= lower <= upper <= 105The answer is guaranteed to fit in a 32-bit integer."
    ]
},
{
    "id": "329",
    "title": "Longest Increasing Path in a Matrix",
    "question": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.\nFrom each cell, you can either move in four directions: left, right, up, or down.\n You may not move diagonally or move outside the boundary (i.\ne.\n, wrap-around is not allowed).",
    "examples": [
        "Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]",
        "Output: 4",
        "Explanation: The longest increasing path is [1, 2, 6, 9].",
        "Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]",
        "Output: 4",
        "Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.",
        "Input: matrix = [[1]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 2000 <= matrix[i][j] <= 231 - 1"
    ]
},
{
    "id": "589",
    "title": "N-ary Tree Preorder Traversal",
    "question": "Given the root of an n-ary tree, return the preorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal.\n Each group of children is separated by the null value (See examples)   Follow up: Recursive solution is trivial, could you do it iteratively?",
    "examples": [
        "Input: root = [1,null,3,2,4,null,5,6]",
        "Output: [1,3,5,6,2,4]",
        "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 104]. 0 <= Node. val <= 104The height of the n-ary tree is less than or equal to 1000."
    ]
},
{
    "id": "330",
    "title": "Patching Array",
    "question": "Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\nReturn the minimum number of patches required.",
    "examples": [
        "Input: nums = [1,3], n = 6",
        "Output: 1",
        "Explanation:",
        "Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.",
        "Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].",
        "Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].",
        "So we only need 1 patch.",
        "Input: nums = [1,5,10], n = 20",
        "Output: 2",
        "Explanation: The two patches can be [2, 4].",
        "Input: nums = [1,2,2], n = 5",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10001 <= nums[i] <= 104nums is sorted in ascending order. 1 <= n <= 231 - 1"
    ]
},
{
    "id": "335",
    "title": "Self Crossing",
    "question": "You are given an array of integers distance.\nYou start at point (0,0) on an X-Y plane and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on.\n In other words, after each move, your direction changes counter-clockwise.\nReturn true if your path crosses itself, and false if it does not.",
    "examples": [
        "Input: distance = [2,1,1,2]",
        "Output: true",
        "Input: distance = [1,2,3,4]",
        "Output: false",
        "Input: distance = [1,1,1,1]",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= distance. length <= 1051 <= distance[i] <= 105"
    ]
},
{
    "id": "336",
    "title": "Palindrome Pairs",
    "question": "Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of the two words words[i] + words[j] is a palindrome.",
    "examples": [
        "Input: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]",
        "Output: [[0,1],[1,0],[3,2],[2,4]]",
        "Explanation: The palindromes are [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]",
        "Input: words = [\"bat\",\"tab\",\"cat\"]",
        "Output: [[0,1],[1,0]]",
        "Explanation: The palindromes are [\"battab\",\"tabbat\"]",
        "Input: words = [\"a\",\"\"]",
        "Output: [[0,1],[1,0]]",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 50000 <= words[i]. length <= 300words[i] consists of lower-case English letters."
    ]
},
{
    "id": "352",
    "title": "Data Stream as Disjoint Intervals",
    "question": "Given a data stream input of non-negative integers a1, a2, .\n.\n.\n, an, summarize the numbers seen so far as a list of disjoint intervals.\nImplement the SummaryRanges class:   Follow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?",
    "examples": [
        "Input",
        "[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]",
        "[[], [1], [], [3], [], [7], [], [2], [], [6], []]",
        "Output",
        "[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]",
        "",
        "Explanation",
        "SummaryRanges summaryRanges = new SummaryRanges();",
        "summaryRanges. addNum(1);      // arr = [1]",
        "summaryRanges. getIntervals(); // return [[1, 1]]",
        "summaryRanges. addNum(3);      // arr = [1, 3]",
        "summaryRanges. getIntervals(); // return [[1, 1], [3, 3]]",
        "summaryRanges. addNum(7);      // arr = [1, 3, 7]",
        "summaryRanges. getIntervals(); // return [[1, 1], [3, 3], [7, 7]]",
        "summaryRanges. addNum(2);      // arr = [1, 2, 3, 7]",
        "summaryRanges. getIntervals(); // return [[1, 3], [7, 7]]",
        "summaryRanges. addNum(6);      // arr = [1, 2, 3, 6, 7]",
        "summaryRanges. getIntervals(); // return [[1, 3], [6, 7]]",
        ""
    ],
    "constraints": [
        "SummaryRanges() Initializes the object with an empty stream. void addNum(int val) Adds the integer val to the stream. int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti",
        " endi]. 0 <= val <= 104At most 3 * 104 calls will be made to addNum and getIntervals."
    ]
},
{
    "id": "354",
    "title": "Russian Doll Envelopes",
    "question": "You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\nReturn the maximum number of envelopes you can Russian doll (i.\ne.\n, put one inside the other).\nNote: You cannot rotate an envelope.",
    "examples": [
        "Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]",
        "Output: 3",
        "Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).",
        "Input: envelopes = [[1,1],[1,1],[1,1]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= envelopes. length <= 5000envelopes[i]. length == 21 <= wi",
        " hi <= 104"
    ]
},
{
    "id": "363",
    "title": "Max Sum of Rectangle No Larger Than K",
    "question": "Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\nIt is guaranteed that there will be a rectangle with a sum no larger than k.\n   Follow up: What if the number of rows is much larger than the number of columns?",
    "examples": [
        "Input: matrix = [[1,0,1],[0,-2,3]], k = 2",
        "Output: 2",
        "Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).",
        "Input: matrix = [[2,2,-1]], k = 3",
        "Output: 3",
        ""
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 100-100 <= matrix[i][j] <= 100-105 <= k <= 105"
    ]
},
{
    "id": "381",
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "question": "Implement the RandomizedCollection class:You must implement the functions of the class such that each function works in average O(1) time complexity.",
    "examples": [
        "Input",
        "[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]",
        "[[], [1], [1], [2], [], [1], []]",
        "Output",
        "[null, true, false, true, 2, true, 1]",
        "",
        "Explanation",
        "RandomizedCollection randomizedCollection = new RandomizedCollection();",
        "randomizedCollection. insert(1);   // return True. Inserts 1 to the collection. Returns true as the collection did not contain 1.",
        "randomizedCollection. insert(1);   // return False. Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].",
        "randomizedCollection. insert(2);   // return True. Inserts 2 to the collection, returns true. Collection now contains [1,1,2].",
        "randomizedCollection. getRandom(); // getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.",
        "randomizedCollection. remove(1);   // return True. Removes 1 from the collection, returns true. Collection now contains [1,2].",
        "randomizedCollection. getRandom(); // getRandom should return 1 and 2 both equally likely.",
        ""
    ],
    "constraints": [
        "RandomizedCollection() Initializes the RandomizedCollection object. bool insert(int val) Inserts an item val into the multiset if not present. Returns true if the item was not present",
        " false otherwise. bool remove(int val) Removes an item val from the multiset if present. Returns true if the item was present",
        " false otherwise. Note that if val has multiple occurrences in the multiset",
        " we only remove one of them. int getRandom() Returns a random element from the current multiset of elements (it's guaranteed that at least one element exists when this method is called). The probability of each element being returned is linearly related to the number of same values the multiset contains.-231 <= val <= 231 - 1At most 2 * 105  calls will be made to insert",
        " remove",
        " and getRandom. There will be at least one element in the data structure when getRandom is called."
    ]
},
{
    "id": "391",
    "title": "Perfect Rectangle",
    "question": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle.\n The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\nReturn true if all the rectangles together form an exact cover of a rectangular region.",
    "examples": [
        "Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]",
        "Output: true",
        "Explanation: All 5 rectangles together form an exact cover of a rectangular region.",
        "Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]",
        "Output: false",
        "Explanation: Because there is a gap between the two rectangular regions.",
        "Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[3,2,4,4]]",
        "Output: false",
        "Explanation: Because there is a gap in the top center.",
        "Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]",
        "Output: false",
        "Explanation: Because two of the rectangles overlap with each other.",
        ""
    ],
    "constraints": [
        "1 <= rectangles. length <= 2 * 104rectangles[i]. length == 4-105 <= xi",
        " yi",
        " ai",
        " bi <= 105"
    ]
},
{
    "id": "403",
    "title": "Frog Jump",
    "question": "A frog is crossing a river.\n The river is divided into some number of units, and at each unit, there may or may not exist a stone.\n The frog can jump on a stone, but it must not jump into the water.\nGiven a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone.\n Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\nIf the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units.\n The frog can only jump in the forward direction.",
    "examples": [
        "Input: stones = [0,1,3,5,6,8,12,17]",
        "Output: true",
        "Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.",
        "Input: stones = [0,1,2,3,4,8,9,11]",
        "Output: false",
        "Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.",
        ""
    ],
    "constraints": [
        "2 <= stones. length <= 20000 <= stones[i] <= 231 - 1stones[0] == 0stones is sorted in a strictly increasing order."
    ]
},
{
    "id": "407",
    "title": "Trapping Rain Water II",
    "question": "Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.",
    "examples": [
        "Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]",
        "Output: 4",
        "Explanation: After the rain, water is trapped between the blocks.",
        "We have two small pounds 1 and 3 units trapped.",
        "The total volume of water trapped is 4.",
        "Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]",
        "Output: 10",
        ""
    ],
    "constraints": [
        "m == heightMap. lengthn == heightMap[i]. length1 <= m",
        " n <= 2000 <= heightMap[i][j] <= 2 * 104"
    ]
},
{
    "id": "590",
    "title": "N-ary Tree Postorder Traversal",
    "question": "Given the root of an n-ary tree, return the postorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal.\n Each group of children is separated by the null value (See examples)   Follow up: Recursive solution is trivial, could you do it iteratively?",
    "examples": [
        "Input: root = [1,null,3,2,4,null,5,6]",
        "Output: [5,6,3,2,4,1]",
        "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 104]. 0 <= Node. val <= 104The height of the n-ary tree is less than or equal to 1000."
    ]
},
{
    "id": "410",
    "title": "Split Array Largest Sum",
    "question": "Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.\nWrite an algorithm to minimize the largest sum among these m subarrays.",
    "examples": [
        "Input: nums = [7,2,5,10,8], m = 2",
        "Output: 18",
        "Explanation:",
        "There are four ways to split nums into two subarrays.",
        "The best way is to split it into [7,2,5] and [10,8],",
        "where the largest sum among the two subarrays is only 18.",
        "Input: nums = [1,2,3,4,5], m = 2",
        "Output: 9",
        "Input: nums = [1,4,4], m = 3",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10000 <= nums[i] <= 1061 <= m <= min(50",
        " nums. length)"
    ]
},
{
    "id": "420",
    "title": "Strong Password Checker",
    "question": "A password is considered strong if the below conditions are all met:Given a string password, return the minimum number of steps required to make password strong.\n if password is already strong, return 0.\nIn one step, you can:",
    "examples": [
        "Input: password = \"a\"",
        "Output: 5",
        "Input: password = \"aA1\"",
        "Output: 3",
        "Input: password = \"1337C0d3\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "It has at least 6 characters and at most 20 characters. It contains at least one lowercase letter",
        " at least one uppercase letter",
        " and at least one digit. It does not contain three repeating characters in a row (i. e.",
        " \"... aaa...\" is weak",
        " but \"... aa... a...\" is strong",
        " assuming other conditions are met). Insert one character to password",
        "Delete one character from password",
        " orReplace one character of password with another character. 1 <= password. length <= 50password consists of letters",
        " digits",
        " dot '.' or exclamation mark '!'."
    ]
},
{
    "id": "432",
    "title": "All O`one Data Structure",
    "question": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\nImplement the AllOne class:",
    "examples": [
        "Input",
        "[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]",
        "[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]",
        "Output",
        "[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]",
        "",
        "Explanation",
        "AllOne allOne = new AllOne();",
        "allOne. inc(\"hello\");",
        "allOne. inc(\"hello\");",
        "allOne. getMaxKey(); // return \"hello\"",
        "allOne. getMinKey(); // return \"hello\"",
        "allOne. inc(\"leet\");",
        "allOne. getMaxKey(); // return \"hello\"",
        "allOne. getMinKey(); // return \"leet\"",
        ""
    ],
    "constraints": [
        "AllOne() Initializes the object of the data structure. inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure",
        " insert it with count 1. dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement",
        " remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement. getMaxKey() Returns one of the keys with the maximal count. If no element exists",
        " return an empty string \"\". getMinKey() Returns one of the keys with the minimum count. If no element exists",
        " return an empty string \"\". 1 <= key. length <= 10key consists of lowercase English letters. It is guaranteed that for each call to dec",
        " key is existing in the data structure. At most 5 * 104 calls will be made to inc",
        " dec",
        " getMaxKey",
        " and getMinKey."
    ]
},
{
    "id": "440",
    "title": "K-th Smallest in Lexicographical Order",
    "question": "Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].",
    "examples": [
        "Input: n = 13, k = 2",
        "Output: 10",
        "Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.",
        "Input: n = 1, k = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= k <= n <= 109"
    ]
},
{
    "id": "446",
    "title": "Arithmetic Slices II - Subsequence",
    "question": "Given an integer array nums, return the number of all the arithmetic subsequences of nums.\nA sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\nThe test cases are generated so that the answer fits in 32-bit integer.",
    "examples": [
        "Input: nums = [2,4,6,8,10]",
        "Output: 7",
        "Explanation: All arithmetic subsequence slices are:",
        "[2,4,6]",
        "[4,6,8]",
        "[6,8,10]",
        "[2,4,6,8]",
        "[4,6,8,10]",
        "[2,4,6,8,10]",
        "[2,6,10]",
        "Input: nums = [7,7,7,7,7]",
        "Output: 16",
        "Explanation: Any subsequence of this array is arithmetic.",
        ""
    ],
    "constraints": [
        "For example",
        " [1",
        " 3",
        " 5",
        " 7",
        " 9]",
        " [7",
        " 7",
        " 7",
        " 7]",
        " and [3",
        " -1",
        " -5",
        " -9] are arithmetic sequences. For example",
        " [1",
        " 1",
        " 2",
        " 5",
        " 7] is not an arithmetic sequence. For example",
        " [2",
        "5",
        "10] is a subsequence of [1",
        "2",
        "1",
        "2",
        "4",
        "1",
        "5",
        "10]. 1  <= nums. length <= 1000-231 <= nums[i] <= 231 - 1"
    ]
},
{
    "id": "458",
    "title": "Poor Pigs",
    "question": "There are buckets buckets of liquid, where exactly one of the buckets is poisonous.\n To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not.\n Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\nYou can feed the pigs according to these steps:Given buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.",
    "examples": [
        "Input: buckets = 1000, minutesToDie = 15, minutesToTest = 60",
        "Output: 5",
        "Input: buckets = 4, minutesToDie = 15, minutesToTest = 15",
        "Output: 2",
        "Input: buckets = 4, minutesToDie = 15, minutesToTest = 30",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= buckets <= 10001 <= minutesToDie <= minutesToTest <= 100"
    ]
},
{
    "id": "460",
    "title": "LFU Cache",
    "question": "Design and implement a data structure for a Least Frequently Used (LFU) cache.\nImplement the LFUCache class:To determine the least frequently used key, a use counter is maintained for each key in the cache.\n The key with the smallest use counter is the least frequently used key.\nWhen a key is first inserted into the cache, its use counter is set to 1 (due to the put operation).\n The use counter for a key in the cache is incremented either a get or put operation is called on it.\nThe functions get and put must each run in O(1) average time complexity.",
    "examples": [
        "Input",
        "[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]",
        "[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]",
        "Output",
        "[null, null, null, 1, null, -1, 3, null, -1, 3, 4]",
        "",
        "Explanation",
        "// cnt(x) = the use counter for key x",
        "// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)",
        "LFUCache lfu = new LFUCache(2);",
        "lfu. put(1, 1);   // cache=[1,_], cnt(1)=1",
        "lfu. put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1",
        "lfu. get(1);      // return 1",
        "                 // cache=[1,2], cnt(2)=1, cnt(1)=2",
        "lfu. put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.",
        "                 // cache=[3,1], cnt(3)=1, cnt(1)=2",
        "lfu. get(2);      // return -1 (not found)",
        "lfu. get(3);      // return 3",
        "                 // cache=[3,1], cnt(3)=2, cnt(1)=2",
        "lfu. put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.",
        "                 // cache=[4,3], cnt(4)=1, cnt(3)=2",
        "lfu. get(1);      // return -1 (not found)",
        "lfu. get(3);      // return 3",
        "                 // cache=[3,4], cnt(4)=1, cnt(3)=3",
        "lfu. get(4);      // return 4",
        "                 // cache=[3,4], cnt(4)=2, cnt(3)=3",
        ""
    ],
    "constraints": [
        "LFUCache(int capacity) Initializes the object with the capacity of the data structure. int get(int key) Gets the value of the key if the key exists in the cache. Otherwise",
        " returns -1. void put(int key",
        " int value) Update the value of the key if present",
        " or inserts the key if not already present. When the cache reaches its capacity",
        " it should invalidate and remove the least frequently used key before inserting a new item. For this problem",
        " when there is a tie (i. e.",
        " two or more keys with the same frequency)",
        " the least recently used key would be invalidated. 0 <= capacity <= 1040 <= key <= 1050 <= value <= 109At most 2 * 105 calls will be made to get and put."
    ]
},
{
    "id": "466",
    "title": "Count The Repetitions",
    "question": "We define str = [s, n] as the string str which consists of the string s concatenated n times.\nWe define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\nYou are given two strings s1 and s2 and two integers n1 and n2.\n You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\nReturn the maximum integer m such that str = [str2, m] can be obtained from str1.",
    "examples": [
        "Input: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2",
        "Output: 2",
        "Input: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "For example",
        " str == [\"abc\"",
        " 3] ==\"abcabcabc\". For example",
        " s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters. 1 <= s1. length",
        " s2. length <= 100s1 and s2 consist of lowercase English letters. 1 <= n1",
        " n2 <= 106"
    ]
},
{
    "id": "472",
    "title": "Concatenated Words",
    "question": "Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.",
    "examples": [
        "Input: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]",
        "Output: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]",
        "Explanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; ",
        "\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; ",
        "\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\". Input: words = [\"cat\",\"dog\",\"catdog\"]",
        "Output: [\"catdog\"]",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 1040 <= words[i]. length <= 1000words[i] consists of only lowercase English letters. 0 <= sum(words[i]. length) <= 105"
    ]
},
{
    "id": "479",
    "title": "Largest Palindrome Product",
    "question": "Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers.\n Since the answer can be very large, return it modulo 1337.",
    "examples": [
        "Input: n = 2",
        "Output: 987",
        "Explanation: 99 x 91 = 9009, 9009 % 1337 = 987",
        "Input: n = 1",
        "Output: 9",
        ""
    ],
    "constraints": [
        "1 <= n <= 8"
    ]
},
{
    "id": "594",
    "title": "Longest Harmonious Subsequence",
    "question": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\nGiven an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\nA subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
        "Input: nums = [1,3,2,2,5,2,3,7]",
        "Output: 5",
        "Explanation: The longest harmonious subsequence is [3,2,2,2,3].",
        "Input: nums = [1,2,3,4]",
        "Output: 2",
        "Input: nums = [1,1,1,1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2 * 104-109 <= nums[i] <= 109"
    ]
},
{
    "id": "480",
    "title": "Sliding Window Median",
    "question": "The median is the middle value in an ordered integer list.\n If the size of the list is even, there is no middle value.\n So the median is the mean of the two middle values.\nYou are given an integer array nums and an integer k.\n There is a sliding window of size k which is moving from the very left of the array to the very right.\n You can only see the k numbers in the window.\n Each time the sliding window moves right by one position.\nReturn the median array for each window in the original array.\n Answers within 10-5 of the actual value will be accepted.",
    "examples": [
        "Input: nums = [1,3,-1,-3,5,3,6,7], k = 3",
        "Output: [1. 00000,-1. 00000,-1. 00000,3. 00000,5. 00000,6. 00000]",
        "Explanation: ",
        "Window position                Median",
        "---------------                -----",
        "[1  3  -1] -3  5  3  6  7        1",
        " 1 [3  -1  -3] 5  3  6  7       -1",
        " 1  3 [-1  -3  5] 3  6  7       -1",
        " 1  3  -1 [-3  5  3] 6  7        3",
        " 1  3  -1  -3 [5  3  6] 7        5",
        " 1  3  -1  -3  5 [3  6  7]       6",
        "Input: nums = [1,2,3,4,2,3,1,4,2], k = 3",
        "Output: [2. 00000,3. 00000,3. 00000,3. 00000,2. 00000,3. 00000,2. 00000]",
        ""
    ],
    "constraints": [
        "For examples",
        " if arr = [2",
        "3",
        "4]",
        " the median is 3. For examples",
        " if arr = [1",
        "2",
        "3",
        "4]",
        " the median is (2 + 3) / 2 = 2. 5. 1 <= k <= nums. length <= 105231 <= nums[i] <= 231 - 1"
    ]
},
{
    "id": "483",
    "title": "Smallest Good Base",
    "question": "Given an integer n represented as a string, return the smallest good base of n.\nWe call k >= 2 a good base of n, if all digits of n base k are 1's.",
    "examples": [
        "Input: n = \"13\"",
        "Output: \"3\"",
        "Explanation: 13 base 3 is 111.",
        "Input: n = \"4681\"",
        "Output: \"8\"",
        "Explanation: 4681 base 8 is 11111.",
        "Input: n = \"1000000000000000000\"",
        "Output: \"999999999999999999\"",
        "Explanation: 1000000000000000000 base 999999999999999999 is 11.",
        ""
    ],
    "constraints": [
        "n is an integer in the range [3",
        " 1018]. n does not contain any leading zeros."
    ]
},
{
    "id": "488",
    "title": "Zuma Game",
    "question": "You are playing a variation of the game Zuma.\nIn this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'.\n You also have several colored balls in your hand.\nYour goal is to clear all of the balls from the board.\n On each turn:Given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board.\n If you cannot clear all the balls from the board using the balls in your hand, return -1.",
    "examples": [
        "Input: board = \"WRRBBW\", hand = \"RB\"",
        "Output: -1",
        "Explanation: It is impossible to clear all the balls. The best you can do is:",
        "- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.",
        "- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.",
        "There are still balls remaining on the board, and you are out of balls to insert. Input: board = \"WWRRBBWW\", hand = \"WRBRW\"",
        "Output: 2",
        "Explanation: To make the board empty:",
        "- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.",
        "- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.",
        "2 balls from your hand were needed to clear the board.",
        "Input: board = \"G\", hand = \"GGGGG\"",
        "Output: 2",
        "Explanation: To make the board empty:",
        "- Insert 'G' so the board becomes GG.",
        "- Insert 'G' so the board becomes GGG. GGG -> empty.",
        "2 balls from your hand were needed to clear the board.",
        "Input: board = \"RBYYBBRRB\", hand = \"YRBGB\"",
        "Output: 3",
        "Explanation: To make the board empty:",
        "- Insert 'Y' so the board becomes RBYYYBBRRB. RBYYYBBRRB -> RBBBRRB -> RRRB -> B.",
        "- Insert 'B' so the board becomes BB.",
        "- Insert 'B' so the board becomes BBB. BBB -> empty.",
        "3 balls from your hand were needed to clear the board.",
        ""
    ],
    "constraints": [
        "Pick any ball from your hand and insert it in between two balls in the row or on either end of the row. If there is a group of three or more consecutive balls of the same color",
        " remove the group of balls from the board.\n\t\nIf this removal causes more groups of three or more of the same color to form",
        " then continue removing each group until there are none left.\n\nIf this removal causes more groups of three or more of the same color to form",
        " then continue removing each group until there are none left. If there are no more balls on the board",
        " then you win the game. Repeat this process until you either win or do not have any more balls in your hand. 1 <= board. length <= 161 <= hand. length <= 5board and hand consist of the characters 'R'",
        " 'Y'",
        " 'B'",
        " 'G'",
        " and 'W'. The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color."
    ]
},
{
    "id": "493",
    "title": "Reverse Pairs",
    "question": "Given an integer array nums, return the number of reverse pairs in the array.\nA reverse pair is a pair (i, j) where 0 <= i < j < nums.\nlength and nums[i] > 2 * nums[j].",
    "examples": [
        "Input: nums = [1,3,2,3,1]",
        "Output: 2",
        "Input: nums = [2,4,3,5,1]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5 * 104-231 <= nums[i] <= 231 - 1"
    ]
},
{
    "id": "502",
    "title": "IPO",
    "question": "Suppose LeetCode will start its IPO soon.\n In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO.\n Since it has limited resources, it can only finish at most k distinct projects before the IPO.\n Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.\nYou are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.\nInitially, you have w capital.\n When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\nPick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.\nThe answer is guaranteed to fit in a 32-bit signed integer.",
    "examples": [
        "Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]",
        "Output: 4",
        "Explanation: Since your initial capital is 0, you can only start the project indexed 0.",
        "After finishing it you will obtain profit 1 and your capital becomes 1.",
        "With capital 1, you can either start the project indexed 1 or the project indexed 2.",
        "Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.",
        "Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.",
        "Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]",
        "Output: 6",
        ""
    ],
    "constraints": [
        "1 <= k <= 1050 <= w <= 109n == profits. lengthn == capital. length1 <= n <= 1050 <= profits[i] <= 1040 <= capital[i] <= 109"
    ]
},
{
    "id": "514",
    "title": "Freedom Trail",
    "question": "In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.\nGiven a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.\nInitially, the first character of the ring is aligned at the \"12:00\" direction.\n You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the \"12:00\" direction and then by pressing the center button.\nAt the stage of rotating the ring to spell the key character key[i]:",
    "examples": [
        "Input: ring = \"godding\", key = \"gd\"",
        "Output: 4",
        "Explanation:",
        "For the first key character 'g', since it is already in place, we just need 1 step to spell this character. ",
        "For the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".",
        "Also, we need 1 more step for spelling.",
        "So the final output is 4.",
        "Input: ring = \"godding\", key = \"godding\"",
        "Output: 13",
        ""
    ],
    "constraints": [
        "1 <= ring. length",
        " key. length <= 100ring and key consist of only lower case English letters. It is guaranteed that key could always be spelled by rotating ring."
    ]
},
{
    "id": "517",
    "title": "Super Washing Machines",
    "question": "You have n super washing machines on a line.\n Initially, each washing machine has some dresses or is empty.\nFor each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\nGiven an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses.\n If it is not possible to do it, return -1.",
    "examples": [
        "Input: machines = [1,0,5]",
        "Output: 3",
        "Explanation:",
        "1st move:    1     0 <-- 5    =>    1     1     4",
        "2nd move:    1 <-- 1 <-- 4    =>    2     1     3",
        "3rd move:    2     1 <-- 3    =>    2     2     2",
        "Input: machines = [0,3,0]",
        "Output: 2",
        "Explanation:",
        "1st move:    0 <-- 3     0    =>    1     2     0",
        "2nd move:    1     2 --> 0    =>    1     1     1",
        "Input: machines = [0,2,0]",
        "Output: -1",
        "Explanation:",
        "It's impossible to make all three washing machines have the same number of dresses.",
        ""
    ],
    "constraints": [
        "n == machines. length1 <= n <= 1040 <= machines[i] <= 105"
    ]
},
{
    "id": "546",
    "title": "Remove Boxes",
    "question": "You are given several boxes with different colors represented by different positive numbers.\nYou may experience several rounds to remove boxes until there is no box left.\n Each time you can choose some continuous boxes with the same color (i.\ne.\n, composed of k boxes, k >= 1), remove them and get k * k points.\nReturn the maximum points you can get.",
    "examples": [
        "Input: boxes = [1,3,2,2,2,3,4,3,1]",
        "Output: 23",
        "Explanation:",
        "[1, 3, 2, 2, 2, 3, 4, 3, 1] ",
        "----> [1, 3, 3, 4, 3, 1] (3*3=9 points) ",
        "----> [1, 3, 3, 3, 1] (1*1=1 points) ",
        "----> [1, 1] (3*3=9 points) ",
        "----> [] (2*2=4 points)",
        "Input: boxes = [1,1,1]",
        "Output: 9",
        "Input: boxes = [1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= boxes. length <= 1001 <= boxes[i] <= 100"
    ]
},
{
    "id": "552",
    "title": "Student Attendance Record II",
    "question": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day.\n The record only contains the following three characters:Any student is eligible for an attendance award if they meet both of the following criteria:Given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award.\n The answer may be very large, so return it modulo 109 + 7.",
    "examples": [
        "Input: n = 2",
        "Output: 8",
        "Explanation: There are 8 records with length 2 that are eligible for an award:",
        "\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"",
        "Only \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).",
        "Input: n = 1",
        "Output: 3",
        "Input: n = 10101",
        "Output: 183236316",
        ""
    ],
    "constraints": [
        "'A': Absent.'L': Late.'P': Present. The student was absent ('A') for strictly fewer than 2 days total. The student was never late ('L') for 3 or more consecutive days. 1 <= n <= 105"
    ]
},
{
    "id": "564",
    "title": "Find the Closest Palindrome",
    "question": "Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome.\n If there is a tie, return the smaller one.\nThe closest is defined as the absolute difference minimized between two integers.",
    "examples": [
        "Input: n = \"123\"",
        "Output: \"121\"",
        "Input: n = \"1\"",
        "Output: \"0\"",
        "Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.",
        ""
    ],
    "constraints": [
        "1 <= n. length <= 18n consists of only digits. n does not have leading zeros. n is representing an integer in the range [1",
        " 1018 - 1]."
    ]
},
{
    "id": "598",
    "title": "Range Addition II",
    "question": "You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.\nCount and return the number of maximum integers in the matrix after performing all the operations.",
    "examples": [
        "Input: m = 3, n = 3, ops = [[2,2],[3,3]]",
        "Output: 4",
        "Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.",
        "Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]",
        "Output: 4",
        "Input: m = 3, n = 3, ops = []",
        "Output: 9",
        ""
    ],
    "constraints": [
        "1 <= m",
        " n <= 4 * 1040 <= ops. length <= 104ops[i]. length == 21 <= ai <= m1 <= bi <= n"
    ]
},
{
    "id": "587",
    "title": "Erect the Fence",
    "question": "You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.\nYou are asked to fence the entire garden using the minimum length of rope as it is expensive.\n The garden is well fenced only if all the trees are enclosed.\nReturn the coordinates of trees that are exactly located on the fence perimeter.",
    "examples": [
        "Input: points = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]",
        "Output: [[1,1],[2,0],[3,3],[2,4],[4,2]]",
        "Input: points = [[1,2],[2,2],[4,2]]",
        "Output: [[4,2],[2,2],[1,2]]",
        ""
    ],
    "constraints": [
        "1 <= points. length <= 3000points[i]. length == 20 <= xi",
        " yi <= 100All the given points are unique."
    ]
},
{
    "id": "591",
    "title": "Tag Validator",
    "question": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\nA code snippet is valid if all the following rules hold:",
    "examples": [
        "Input: code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"",
        "Output: true",
        "Explanation: ",
        "The code is wrapped in a closed tag : <DIV> and </DIV>. ",
        "The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. ",
        "Although CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.",
        "So TAG_CONTENT is valid, and then the code is valid. Thus return true.",
        "Input: code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"",
        "Output: true",
        "Explanation:",
        "We first separate the code into : start_tag|tag_content|end_tag.",
        "start_tag -> \"<DIV>\"",
        "end_tag -> \"</DIV>\"",
        "tag_content could also be separated into : text1|cdata|text2.",
        "text1 -> \">>  ![cdata[]] \"",
        "cdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"",
        "text2 -> \"]]>>]\"",
        "The reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.",
        "The reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.",
        "Input: code = \"<A>  <B> </A>   </B>\"",
        "Output: false",
        "Explanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.",
        "Input: code = \"<DIV>  div tag is not closed  <DIV>\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= code. length <= 500code consists of English letters",
        " digits",
        " '<'",
        " '>'",
        " '/'",
        " '!'",
        " '['",
        " ']'",
        " '.'",
        " and ' '."
    ]
},
{
    "id": "600",
    "title": "Non-negative Integers without Consecutive Ones",
    "question": "Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.",
    "examples": [
        "Input: n = 5",
        "Output: 5",
        "Explanation:",
        "Here are the non-negative integers <= 5 with their corresponding binary representations:",
        "0 : 0",
        "1 : 1",
        "2 : 10",
        "3 : 11",
        "4 : 100",
        "5 : 101",
        "Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. ",
        "Input: n = 1",
        "Output: 2",
        "Input: n = 2",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= n <= 109"
    ]
},
{
    "id": "629",
    "title": "K Inverse Pairs Array",
    "question": "For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.\nlength and nums[i] > nums[j].\nGiven two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs.\n Since the answer can be huge, return it modulo 109 + 7.",
    "examples": [
        "Input: n = 3, k = 0",
        "Output: 1",
        "Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.",
        "Input: n = 3, k = 1",
        "Output: 2",
        "Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.",
        ""
    ],
    "constraints": [
        "1 <= n <= 10000 <= k <= 1000"
    ]
},
{
    "id": "630",
    "title": "Course Schedule III",
    "question": "There are n different online courses numbered from 1 to n.\n You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi.\nYou will start on the 1st day and you cannot take two or more courses simultaneously.\nReturn the maximum number of courses that you can take.",
    "examples": [
        "Input: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]",
        "Output: 3",
        "Explanation: ",
        "There are totally 4 courses, but you can take 3 courses at most:",
        "First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.",
        "Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. ",
        "Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. ",
        "The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.",
        "Input: courses = [[1,2]]",
        "Output: 1",
        "Input: courses = [[3,2],[4,3]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= courses. length <= 1041 <= durationi",
        " lastDayi <= 104"
    ]
},
{
    "id": "632",
    "title": "Smallest Range Covering Elements from K Lists",
    "question": "You have k lists of sorted integers in non-decreasing order.\n Find the smallest range that includes at least one number from each of the k lists.\nWe define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.",
    "examples": [
        "Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]",
        "Output: [20,24]",
        "Explanation: ",
        "List 1: [4, 10, 15, 24,26], 24 is in range [20,24].",
        "List 2: [0, 9, 12, 20], 20 is in range [20,24].",
        "List 3: [5, 18, 22, 30], 22 is in range [20,24].",
        "Input: nums = [[1,2,3],[1,2,3],[1,2,3]]",
        "Output: [1,1]",
        "Input: nums = [[10,10],[11,11]]",
        "Output: [10,11]",
        "Input: nums = [[10],[11]]",
        "Output: [10,11]",
        "Input: nums = [[1],[2],[3],[4],[5],[6],[7]]",
        "Output: [1,7]",
        ""
    ],
    "constraints": [
        "nums. length == k1 <= k <= 35001 <= nums[i]. length <= 50-105 <= nums[i][j] <= 105nums[i] is sorted in non-decreasing order."
    ]
},
{
    "id": "639",
    "title": "Decode Ways II",
    "question": "A message containing letters from A-Z can be encoded into numbers using the following mapping:To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways).\n For example, \"11106\" can be mapped into:Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\nIn addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded).\n For example, the encoded message \"1*\" may represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\n Decoding \"1*\" is equivalent to decoding any of the encoded messages it can represent.\nGiven a string s consisting of digits and '*' characters, return the number of ways to decode it.\nSince the answer may be very large, return it modulo 109 + 7.",
    "examples": [
        "'A' -> \"1\"",
        "'B' -> \"2\"",
        "...",
        "'Z' -> \"26\"",
        "Input: s = \"*\"",
        "Output: 9",
        "Explanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".",
        "Each of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.",
        "Hence, there are a total of 9 ways to decode \"*\".",
        "Input: s = \"1*\"",
        "Output: 18",
        "Explanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".",
        "Each of these encoded messages have 2 ways to be decoded (e. g. \"11\" can be decoded to \"AA\" or \"K\").",
        "Hence, there are a total of 9 * 2 = 18 ways to decode \"1*\".",
        "Input: s = \"2*\"",
        "Output: 15",
        "Explanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".",
        "\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.",
        "Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".",
        ""
    ],
    "constraints": [
        "\"AAJF\" with the grouping (1 1 10 6)\"KJF\" with the grouping (11 10 6)1 <= s. length <= 105s[i] is a digit or '*'."
    ]
},
{
    "id": "664",
    "title": "Strange Printer",
    "question": "There is a strange printer with the following two special properties:Given a string s, return the minimum number of turns the printer needed to print it.",
    "examples": [
        "Input: s = \"aaabbb\"",
        "Output: 2",
        "Explanation: Print \"aaa\" first and then print \"bbb\".",
        "Input: s = \"aba\"",
        "Output: 2",
        "Explanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.",
        ""
    ],
    "constraints": [
        "The printer can only print a sequence of the same character each time. At each turn",
        " the printer can print new characters starting from and ending at any place and will cover the original existing characters. 1 <= s. length <= 100s consists of lowercase English letters."
    ]
},
{
    "id": "668",
    "title": "Kth Smallest Number in Multiplication Table",
    "question": "Nearly everyone has used the Multiplication Table.\n The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\nGiven three integers m, n, and k, return the kth smallest element in the m x n multiplication table.",
    "examples": [
        "Input: m = 3, n = 3, k = 5",
        "Output: 3",
        "Explanation: The 5th smallest number is 3.",
        "Input: m = 2, n = 3, k = 6",
        "Output: 6",
        "Explanation: The 6th smallest number is 6.",
        ""
    ],
    "constraints": [
        "1 <= m",
        " n <= 3 * 1041 <= k <= m * n"
    ]
},
{
    "id": "675",
    "title": "Cut Off Trees for Golf Event",
    "question": "You are asked to cut off all the trees in a forest for a golf event.\n The forest is represented as an m x n matrix.\n In this matrix:In one step, you can walk in any of the four directions: north, east, south, and west.\n If you are standing in a cell with a tree, you can choose whether to cut it off.\nYou must cut off the trees in order from shortest to tallest.\n When you cut off a tree, the value at its cell becomes 1 (an empty cell).\nStarting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees.\n If you cannot cut off all the trees, return -1.\nYou are guaranteed that no two trees have the same height, and there is at least one tree needs to be cut off.",
    "examples": [
        "Input: forest = [[1,2,3],[0,0,4],[7,6,5]]",
        "Output: 6",
        "Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.",
        "Input: forest = [[1,2,3],[0,0,0],[7,6,5]]",
        "Output: -1",
        "Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.",
        "Input: forest = [[2,3,4],[0,0,5],[8,7,6]]",
        "Output: 6",
        "Explanation: You can follow the same path as Example 1 to cut off all the trees.",
        "Note that you can cut off the first tree at (0, 0) before making any steps.",
        ""
    ],
    "constraints": [
        "0 means the cell cannot be walked through. 1 represents an empty cell that can be walked through. A number greater than 1 represents a tree in a cell that can be walked through",
        " and this number is the tree's height. m == forest. lengthn == forest[i]. length1 <= m",
        " n <= 500 <= forest[i][j] <= 109"
    ]
},
{
    "id": "599",
    "title": "Minimum Index Sum of Two Lists",
    "question": "Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.\nYou need to help them find out their common interest with the least list index sum.\n If there is a choice tie between answers, output all of them with no order requirement.\n You could assume there always exists an answer.",
    "examples": [
        "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]",
        "Output: [\"Shogun\"]",
        "Explanation: The only restaurant they both like is \"Shogun\".",
        "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]",
        "Output: [\"Shogun\"]",
        "Explanation: The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).",
        "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "Output: [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KNN\",\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "Output: [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "Input: list1 = [\"KFC\"], list2 = [\"KFC\"]",
        "Output: [\"KFC\"]",
        ""
    ],
    "constraints": [
        "1 <= list1. length",
        " list2. length <= 10001 <= list1[i]. length",
        " list2[i]. length <= 30list1[i] and list2[i] consist of spaces ' ' and English letters. All the stings of list1 are unique. All the stings of list2 are unique."
    ]
},
{
    "id": "679",
    "title": "24 Game",
    "question": "You are given an integer array cards of length 4.\n You have four cards, each containing a number in the range [1, 9].\n You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.\nYou are restricted with the following rules:Return true if you can get such expression that evaluates to 24, and false otherwise.",
    "examples": [
        "Input: cards = [4,1,8,7]",
        "Output: true",
        "Explanation: (8-4) * (7-1) = 24",
        "Input: cards = [1,2,1,2]",
        "Output: false",
        ""
    ],
    "constraints": [
        "The division operator '/' represents real division",
        " not integer division.\n\n\t\nFor example",
        " 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.\n\nFor example",
        " 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12. Every operation done is between two numbers. In particular",
        " we cannot use '-' as a unary operator.\n\t\nFor example",
        " if cards = [1",
        " 1",
        " 1",
        " 1]",
        " the expression \"-1 - 1 - 1 - 1\" is not allowed.\n\nFor example",
        " if cards = [1",
        " 1",
        " 1",
        " 1]",
        " the expression \"-1 - 1 - 1 - 1\" is not allowed. You cannot concatenate numbers together\n\t\nFor example",
        " if cards = [1",
        " 2",
        " 1",
        " 2]",
        " the expression \"12 + 12\" is not valid.\n\nFor example",
        " if cards = [1",
        " 2",
        " 1",
        " 2]",
        " the expression \"12 + 12\" is not valid. cards. length == 41 <= cards[i] <= 9"
    ]
},
{
    "id": "685",
    "title": "Redundant Connection II",
    "question": "In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\nThe given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added.\n The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.\nThe resulting graph is given as a 2D-array of edges.\n Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.\nReturn an edge that can be removed so that the resulting graph is a rooted tree of n nodes.\n If there are multiple answers, return the answer that occurs last in the given 2D-array.",
    "examples": [
        "Input: edges = [[1,2],[1,3],[2,3]]",
        "Output: [2,3]",
        "Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]",
        "Output: [4,1]",
        ""
    ],
    "constraints": [
        "n == edges. length3 <= n <= 1000edges[i]. length == 21 <= ui",
        " vi <= nui != vi"
    ]
},
{
    "id": "689",
    "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
    "question": "Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.\nReturn the result as a list of indices representing the starting position of each interval (0-indexed).\n If there are multiple answers, return the lexicographically smallest one.",
    "examples": [
        "Input: nums = [1,2,1,2,6,7,5,1], k = 2",
        "Output: [0,3,5]",
        "Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].",
        "We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.",
        "Input: nums = [1,2,1,2,1,2,1,2,1], k = 2",
        "Output: [0,2,4]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2 * 1041 <= nums[i] < 2161 <= k <= floor(nums. length / 3)"
    ]
},
{
    "id": "691",
    "title": "Stickers to Spell Word",
    "question": "We are given n different types of stickers.\n Each sticker has a lowercase English word on it.\nYou would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them.\n You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\nReturn the minimum number of stickers that you need to spell out target.\n If the task is impossible, return -1.\nNote: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.",
    "examples": [
        "Input: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"",
        "Output: 3",
        "Explanation:",
        "We can use 2 \"with\" stickers, and 1 \"example\" sticker.",
        "After cutting and rearrange the letters of those stickers, we can form the target \"thehat\".",
        "Also, this is the minimum number of stickers necessary to form the target string.",
        "Input: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"",
        "Output: -1",
        "Explanation:",
        "We cannot form the target \"basicbasic\" from cutting letters from the given stickers.",
        ""
    ],
    "constraints": [
        "n == stickers. length1 <= n <= 501 <= stickers[i]. length <= 101 <= target <= 15stickers[i] and target consist of lowercase English letters."
    ]
},
{
    "id": "699",
    "title": "Falling Squares",
    "question": "There are several squares being dropped onto the X-axis of a 2D plane.\nYou are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti.\nEach square is dropped one at a time from a height above any landed squares.\n It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis.\n A square brushing the left/right side of another square does not count as landing on it.\n Once it lands, it freezes in place and cannot be moved.\nAfter each square is dropped, you must record the height of the current tallest stack of squares.\nReturn an integer array ans where ans[i] represents the height described above after dropping the ith square.",
    "examples": [
        "Input: positions = [[1,2],[2,3],[6,1]]",
        "Output: [2,5,5]",
        "Explanation:",
        "After the first drop, the tallest stack is square 1 with a height of 2.",
        "After the second drop, the tallest stack is squares 1 and 2 with a height of 5.",
        "After the third drop, the tallest stack is still squares 1 and 2 with a height of 5.",
        "Thus, we return an answer of [2, 5, 5].",
        "Input: positions = [[100,100],[200,100]]",
        "Output: [100,100]",
        "Explanation:",
        "After the first drop, the tallest stack is square 1 with a height of 100.",
        "After the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.",
        "Thus, we return an answer of [100, 100].",
        "Note that square 2 only brushes the right side of square 1, which does not count as landing on it.",
        ""
    ],
    "constraints": [
        "1 <= positions. length <= 10001 <= lefti <= 1081 <= sideLengthi <= 106"
    ]
},
{
    "id": "710",
    "title": "Random Pick with Blacklist",
    "question": "You are given an integer n and an array of unique integers blacklist.\n Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist.\n Any integer that is in the mentioned range and not in blacklist should be equally likely returned.\nOptimize your algorithm such that it minimizes the call to the built-in random function of your language.\nImplement the Solution class:",
    "examples": [
        "Input",
        "[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]",
        "[[7, [2, 3, 5]], [], [], [], [], [], [], []]",
        "Output",
        "[null, 6, 4, 1, 6, 1, 6, 4]",
        "",
        "Explanation",
        "Solution solution = new Solution(7, [2, 3, 5]);",
        "solution. pick(); // return 6, any integer from [1,4,6] should be ok. Note that for every call of pick, 1, 4, and 6 must be equally likely to be returned (i. e., with probability 1/3).",
        "solution. pick(); // return 4",
        "solution. pick(); // return 1",
        "solution. pick(); // return 6",
        "solution. pick(); // return 1",
        "solution. pick(); // return 6",
        "solution. pick(); // return 4",
        ""
    ],
    "constraints": [
        "Solution(int n",
        " int[] blacklist) Initializes the object with the integer n and the blacklisted integers blacklist. int pick() Returns a random integer in the range [0",
        " n - 1] and not in blacklist. All the possible integers should be equally likely returned. 1 <= n <= 1090 <= blacklist. length <- min(105",
        " n - 1)0 <= blacklist[i] < nAll the values of blacklist are unique. At most 2 * 104 calls will be made to pick."
    ]
},
{
    "id": "715",
    "title": "Range Module",
    "question": "A Range Module is a module that tracks ranges of numbers.\n Design a data structure to track the ranges represented as half-open intervals and query about them.\nA half-open interval [left, right) denotes all the real numbers x where left <= x < right.\nImplement the RangeModule class:",
    "examples": [
        "Input",
        "[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]",
        "[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]",
        "Output",
        "[null, null, null, true, false, true]",
        "",
        "Explanation",
        "RangeModule rangeModule = new RangeModule();",
        "rangeModule. addRange(10, 20);",
        "rangeModule. removeRange(14, 16);",
        "rangeModule. queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)",
        "rangeModule. queryRange(13, 15); // return False,(Numbers like 14, 14. 03, 14. 17 in [13, 15) are not being tracked)",
        "rangeModule. queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)",
        ""
    ],
    "constraints": [
        "RangeModule() Initializes the object of the data structure. void addRange(int left",
        " int right) Adds the half-open interval [left",
        " right)",
        " tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left",
        " right) that are not already tracked. boolean queryRange(int left",
        " int right) Returns true if every real number in the interval [left",
        " right) is currently being tracked",
        " and false otherwise. void removeRange(int left",
        " int right) Stops tracking every real number currently being tracked in the half-open interval [left",
        " right). 1 <= left < right <= 109At most 104 calls will be made to addRange",
        " queryRange",
        " and removeRange."
    ]
},
{
    "id": "719",
    "title": "Find K-th Smallest Pair Distance",
    "question": "The distance of a pair of integers a and b is defined as the absolute difference between a and b.\nGiven an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.\nlength.",
    "examples": [
        "Input: nums = [1,3,1], k = 1",
        "Output: 0",
        "Explanation: Here are all the pairs:",
        "(1,3) -> 2",
        "(1,1) -> 0",
        "(3,1) -> 2",
        "Then the 1st smallest distance pair is (1,1), and its distance is 0.",
        "Input: nums = [1,1,1], k = 2",
        "Output: 0",
        "Input: nums = [1,6,1], k = 3",
        "Output: 5",
        ""
    ],
    "constraints": [
        "n == nums. length2 <= n <= 1040 <= nums[i] <= 1061 <= k <= n * (n - 1) / 2"
    ]
},
{
    "id": "726",
    "title": "Number of Atoms",
    "question": "Given a string formula representing a chemical formula, return the count of each atom.\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\nOne or more digits representing that element's count may follow if the count is greater than 1.\n If the count is 1, no digits will follow.\nTwo formulas are concatenated together to produce another formula.\nA formula placed in parentheses, and a count (optionally added) is also a formula.\nReturn the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.",
    "examples": [
        "Input: formula = \"H2O\"",
        "Output: \"H2O\"",
        "Explanation: The count of elements are {'H': 2, 'O': 1}.",
        "Input: formula = \"Mg(OH)2\"",
        "Output: \"H2MgO2\"",
        "Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.",
        "Input: formula = \"K4(ON(SO3)2)2\"",
        "Output: \"K4N2O14S4\"",
        "Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.",
        "Input: formula = \"Be32\"",
        "Output: \"Be32\"",
        ""
    ],
    "constraints": [
        "For example",
        " \"H2O\" and \"H2O2\" are possible",
        " but \"H1O2\" is impossible. For example",
        " \"H2O2He3Mg4\" is also a formula. For example",
        " \"(H2O2)\" and \"(H2O2)3\" are formulas. 1 <= formula. length <= 1000formula consists of English letters",
        " digits",
        " '('",
        " and ')'. formula is always valid. All the values in the output will fit in a 32-bit integer."
    ]
},
{
    "id": "730",
    "title": "Count Different Palindromic Subsequences",
    "question": "Given a string s, return the number of different non-empty palindromic subsequences in s.\n Since the answer may be very large, return it modulo 109 + 7.\nA subsequence of a string is obtained by deleting zero or more characters from the string.\nA sequence is palindromic if it is equal to the sequence reversed.\nTwo sequences a1, a2, .\n.\n.\n and b1, b2, .\n.\n.\n are different if there is some i for which ai != bi.",
    "examples": [
        "Input: s = \"bccb\"",
        "Output: 6",
        "Explanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.",
        "Note that 'bcb' is counted only once, even though it occurs twice.",
        "Input: s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"",
        "Output: 104860361",
        "Explanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s[i] is either 'a'",
        " 'b'",
        " 'c'",
        " or 'd'."
    ]
},
{
    "id": "605",
    "title": "Can Place Flowers",
    "question": "You have a long flowerbed in which some of the plots are planted, and some are not.\n However, flowers cannot be planted in adjacent plots.\nGiven an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.",
    "examples": [
        "Input: flowerbed = [1,0,0,0,1], n = 1",
        "Output: true",
        "Input: flowerbed = [1,0,0,0,1], n = 2",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= flowerbed. length <= 2 * 104flowerbed[i] is 0 or 1. There are no two adjacent flowers in flowerbed. 0 <= n <= flowerbed. length"
    ]
},
{
    "id": "732",
    "title": "My Calendar III",
    "question": "A k-booking happens when k events have some non-empty intersection (i.\ne.\n, there is some time that is common to all k events.\n)You are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.\nImplement the MyCalendarThree class:",
    "examples": [
        "Input",
        "[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]",
        "[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]",
        "Output",
        "[null, 1, 1, 2, 3, 3, 3]",
        "",
        "Explanation",
        "MyCalendarThree myCalendarThree = new MyCalendarThree();",
        "myCalendarThree. book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.",
        "myCalendarThree. book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.",
        "myCalendarThree. book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.",
        "myCalendarThree. book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.",
        "myCalendarThree. book(5, 10); // return 3",
        "myCalendarThree. book(25, 55); // return 3",
        ""
    ],
    "constraints": [
        "MyCalendarThree() Initializes the object. int book(int start",
        " int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar. 0 <= start < end <= 109At most 400 calls will be made to book."
    ]
},
{
    "id": "736",
    "title": "Parse Lisp Expression",
    "question": "You are given a string expression representing a Lisp-like expression to return the integer value of.\nThe syntax for these expressions is given as follows.",
    "examples": [
        "Input: expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"",
        "Output: 14",
        "Explanation: In the expression (add x y), when checking for the value of the variable x,",
        "we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.",
        "Since x = 3 is found first, the value of x is 3.",
        "Input: expression = \"(let x 3 x 2 x)\"",
        "Output: 2",
        "Explanation: Assignment in let statements is processed sequentially.",
        "Input: expression = \"(let x 1 y 2 x (add x y) (add x y))\"",
        "Output: 5",
        "Explanation: The first (add x y) evaluates as 3, and is assigned to x.",
        "The second (add x y) evaluates as 3+2 = 5.",
        "Input: expression = \"(let x 2 (add (let x 3 (let x 4 x)) x))\"",
        "Output: 6",
        "Explanation: Even though (let x 4 x) has a deeper scope, it is outside the context",
        "of the final x in the add-expression.  That final x will equal 2.",
        "Input: expression = \"(let a1 3 b2 (add a1 1) b2)\"",
        "Output: 4",
        "Explanation: Variable names can contain digits after the first character.",
        ""
    ],
    "constraints": [
        "An expression is either an integer",
        " let expression",
        " add expression",
        " mult expression",
        " or an assigned variable. Expressions always evaluate to a single integer.(An integer could be positive or negative.)A let expression takes the form \"(let v1 e1 v2 e2 ... vn en expr)\"",
        " where let is always the string \"let\"",
        " then there are one or more pairs of alternating variables and expressions",
        " meaning that the first variable v1 is assigned the value of the expression e1",
        " the second variable v2 is assigned the value of the expression e2",
        " and so on sequentially; and then the value of this let expression is the value of the expression expr. An add expression takes the form \"(add e1 e2)\" where add is always the string \"add\"",
        " there are always two expressions e1",
        " e2 and the result is the addition of the evaluation of e1 and the evaluation of e2. A mult expression takes the form \"(mult e1 e2)\" where mult is always the string \"mult\"",
        " there are always two expressions e1",
        " e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2. For this question",
        " we will use a smaller subset of variable names. A variable starts with a lowercase letter",
        " then zero or more lowercase letters or digits. Additionally",
        " for your convenience",
        " the names \"add\"",
        " \"let\"",
        " and \"mult\" are protected and will never be used as variable names. Finally",
        " there is the concept of scope. When an expression of a variable name is evaluated",
        " within the context of that evaluation",
        " the innermost scope (in terms of parentheses) is checked first for the value of that variable",
        " and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope. 1 <= expression. length <= 2000There are no leading or trailing spaces in exprssion. All tokens are separated by a single space in expressoin. The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer. The expression is guaranteed to be legal and evaluate to an integer."
    ]
},
{
    "id": "741",
    "title": "Cherry Pickup",
    "question": "You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.\nReturn the maximum number of cherries you can collect by following the rules below:",
    "examples": [
        "Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]",
        "Output: 5",
        "Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).",
        "4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].",
        "Then, the player went left, up, up, left to return home, picking up one more cherry.",
        "The total number of cherries picked up is 5, and this is the maximum possible.",
        "Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 means the cell is empty",
        " so you can pass through",
        "1 means the cell contains a cherry that you can pick up and pass through",
        " or-1 means the cell contains a thorn that blocks your way. Starting at the position (0",
        " 0) and reaching (n - 1",
        " n - 1) by moving right or down through valid path cells (cells with value 0 or 1). After reaching (n - 1",
        " n - 1)",
        " returning to (0",
        " 0) by moving left or up through valid path cells. When passing through a path cell containing a cherry",
        " you pick it up",
        " and the cell becomes an empty cell 0. If there is no valid path between (0",
        " 0) and (n - 1",
        " n - 1)",
        " then no cherries can be collected. n == grid. lengthn == grid[i]. length1 <= n <= 50grid[i][j] is -1",
        " 0",
        " or 1. grid[0][0] != -1grid[n - 1][n - 1] != -1"
    ]
},
{
    "id": "745",
    "title": "Prefix and Suffix Search",
    "question": "Design a special dictionary with some words that searchs the words in it by a prefix and a suffix.\nImplement the WordFilter class:",
    "examples": [
        "Input",
        "[\"WordFilter\", \"f\"]",
        "[[[\"apple\"]], [\"a\", \"e\"]]",
        "Output",
        "[null, 0]",
        "",
        "Explanation",
        "WordFilter wordFilter = new WordFilter([\"apple\"]);",
        "wordFilter. f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = 'e\".",
        ""
    ],
    "constraints": [
        "WordFilter(string[] words) Initializes the object with the words in the dictionary. f(string prefix",
        " string suffix) Returns the index of the word in the dictionary",
        " which has the prefix prefix and the suffix suffix. If there is more than one valid index",
        " return the largest of them. If there is no such word in the dictionary",
        " return -1. 1 <= words. length <= 150001 <= words[i]. length <= 101 <= prefix. length",
        " suffix. length <= 10words[i]",
        " prefix and suffix consist of lower-case English letters only. At most 15000 calls will be made to the function f."
    ]
},
{
    "id": "749",
    "title": "Contain Virus",
    "question": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\nThe world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus.\n A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall.\n Resources are limited.\n Each day, you can install walls around only one region (i.\ne.\n, the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night).\n There will never be a tie.\nReturn the number of walls used to quarantine all the infected regions.\n If the world will become fully infected, return the number of walls used.",
    "examples": [
        "Input: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]",
        "Output: 10",
        "Explanation: There are 2 contaminated regions.",
        "On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:",
        "",
        "On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.",
        "",
        "Input: isInfected = [[1,1,1],[1,0,1],[1,1,1]]",
        "Output: 4",
        "Explanation: Even though there is only one cell saved, there are 4 walls built.",
        "Notice that walls are only built on the shared boundary of two different cells.",
        "Input: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]",
        "Output: 13",
        "Explanation: The region on the left only builds two new walls.",
        ""
    ],
    "constraints": [
        "m == isInfected. lengthn == isInfected[i]. length1 <= m",
        " n <= 50isInfected[i][j] is either 0 or 1. There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round."
    ]
},
{
    "id": "753",
    "title": "Cracking the Safe",
    "question": "There is a safe protected by a password.\n The password is a sequence of n digits where each digit can be in the range [0, k - 1].\nThe safe has a peculiar way of checking the password.\n When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.\nReturn any string of minimum length that will unlock the safe at some point of entering it.",
    "examples": [
        "Input: n = 1, k = 2",
        "Output: \"10\"",
        "Explanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe.",
        "Input: n = 2, k = 2",
        "Output: \"01100\"",
        "Explanation: For each possible password:",
        "- \"00\" is typed in starting from the 4th digit.",
        "- \"01\" is typed in starting from the 1st digit.",
        "- \"10\" is typed in starting from the 3rd digit.",
        "- \"11\" is typed in starting from the 2nd digit.",
        "Thus \"01100\" will unlock the safe. \"01100\", \"10011\", and \"11001\" would also unlock the safe.",
        ""
    ],
    "constraints": [
        "For example",
        " the correct password is \"345\" and you enter in \"012345\":\n\n\t\nAfter typing 0",
        " the most recent 3 digits is \"0\"",
        " which is incorrect.\nAfter typing 1",
        " the most recent 3 digits is \"01\"",
        " which is incorrect.\nAfter typing 2",
        " the most recent 3 digits is \"012\"",
        " which is incorrect.\nAfter typing 3",
        " the most recent 3 digits is \"123\"",
        " which is incorrect.\nAfter typing 4",
        " the most recent 3 digits is \"234\"",
        " which is incorrect.\nAfter typing 5",
        " the most recent 3 digits is \"345\"",
        " which is correct and the safe unlocks.\n\nAfter typing 0",
        " the most recent 3 digits is \"0\"",
        " which is incorrect. After typing 1",
        " the most recent 3 digits is \"01\"",
        " which is incorrect. After typing 2",
        " the most recent 3 digits is \"012\"",
        " which is incorrect. After typing 3",
        " the most recent 3 digits is \"123\"",
        " which is incorrect. After typing 4",
        " the most recent 3 digits is \"234\"",
        " which is incorrect. After typing 5",
        " the most recent 3 digits is \"345\"",
        " which is correct and the safe unlocks. 1 <= n <= 41 <= k <= 101 <= kn <= 4096"
    ]
},
{
    "id": "757",
    "title": "Set Intersection Size At Least Two",
    "question": "An integer interval [a, b] (for integers a < b) is a set of all consecutive integers from a to b, including a and b.\nFind the minimum size of a set S such that for every integer interval A in intervals, the intersection of S with A has a size of at least two.",
    "examples": [
        "Input: intervals = [[1,3],[1,4],[2,5],[3,5]]",
        "Output: 3",
        "Explanation: Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.",
        "Also, there isn't a smaller size set that fulfills the above condition.",
        "Thus, we output the size of this set, which is 3.",
        "Input: intervals = [[1,2],[2,3],[2,4],[4,5]]",
        "Output: 5",
        "Explanation: An example of a minimum sized set is {1, 2, 3, 4, 5}.",
        ""
    ],
    "constraints": [
        "1 <= intervals. length <= 3000intervals[i]. length == 20 <= ai < bi <= 108"
    ]
},
{
    "id": "761",
    "title": "Special Binary String",
    "question": "Special binary strings are binary strings with the following two properties:You are given a special binary string s.\nA move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them.\n Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\nReturn the lexicographically largest resulting string possible after applying the mentioned operations on the string.",
    "examples": [
        "Input: s = \"11011000\"",
        "Output: \"11100100\"",
        "Explanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.",
        "This is the lexicographically largest string possible after some number of swaps.",
        "Input: s = \"10\"",
        "Output: \"10\"",
        ""
    ],
    "constraints": [
        "The number of 0's is equal to the number of 1's. Every prefix of the binary string has at least as many 1's as 0's. 1 <= s. length <= 50s[i] is either '0' or '1'. s is a special binary string."
    ]
},
{
    "id": "765",
    "title": "Couples Holding Hands",
    "question": "There are n couples sitting in 2n seats arranged in a row and want to hold hands.\nThe people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat.\n The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\nReturn the minimum number of swaps so that every couple is sitting side by side.\n A swap consists of choosing any two people, then they stand up and switch seats.",
    "examples": [
        "Input: row = [0,2,1,3]",
        "Output: 1",
        "Explanation: We only need to swap the second (row[1]) and third (row[2]) person.",
        "Input: row = [3,2,0,1]",
        "Output: 0",
        "Explanation: All couples are already seated side by side.",
        ""
    ],
    "constraints": [
        "2n == row. length2 <= n <= 30n is even. 0 <= row[i] < 2nAll the elements of row are unique."
    ]
},
{
    "id": "768",
    "title": "Max Chunks To Make Sorted II",
    "question": "You are given an integer array arr.\nWe split arr into some number of chunks (i.\ne.\n, partitions), and individually sort each chunk.\n After concatenating them, the result should equal the sorted array.\nReturn the largest number of chunks we can make to sort the array.",
    "examples": [
        "Input: arr = [5,4,3,2,1]",
        "Output: 1",
        "Explanation:",
        "Splitting into two or more chunks will not return the required result.",
        "For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.",
        "Input: arr = [2,1,3,4,4]",
        "Output: 4",
        "Explanation:",
        "We can split into two chunks, such as [2, 1], [3, 4, 4].",
        "However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 20000 <= arr[i] <= 108"
    ]
},
{
    "id": "606",
    "title": "Construct String from Binary Tree",
    "question": "Given the root of a binary tree, construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way, and return it.\nOmit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.",
    "examples": [
        "Input: root = [1,2,3,4]",
        "Output: \"1(2(4))(3)\"",
        "Explanation: Originallay it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\"",
        "Input: root = [1,2,3,null,4]",
        "Output: \"1(2()(4))(3)\"",
        "Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104].-1000 <= Node. val <= 1000"
    ]
},
{
    "id": "770",
    "title": "Basic Calculator IV",
    "question": "Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\nThe format of the output is as follows:",
    "examples": [
        "Input: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]",
        "Output: [\"-1*a\",\"14\"]",
        "Input: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]",
        "Output: [\"-1*pressure\",\"5\"]",
        "Input: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []",
        "Output: [\"1*e*e\",\"-64\"]",
        "Input: expression = \"a * b * c + b * a * c * 4\", evalvars = [], evalints = []",
        "Output: [\"5*a*b*c\"]",
        "Input: expression = \"((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))\", evalvars = [], evalints = []",
        "Output: [\"-1*a*a*b*b\",\"2*a*a*b*c\",\"-1*a*a*c*c\",\"1*a*b*b*b\",\"-1*a*b*b*c\",\"-1*a*b*c*c\",\"1*a*c*c*c\",\"-1*b*b*b*c\",\"2*b*b*c*c\",\"-1*b*c*c*c\",\"2*a*a*b\",\"-2*a*a*c\",\"-2*a*b*b\",\"2*a*c*c\",\"1*b*b*b\",\"-1*b*b*c\",\"1*b*c*c\",\"-1*c*c*c\",\"-1*a*a\",\"1*a*b\",\"1*a*c\",\"-1*b*c\"]",
        ""
    ],
    "constraints": [
        "An expression alternates chunks and symbols",
        " with a space separating each chunk and symbol. A chunk is either an expression in parentheses",
        " a variable",
        " or a non-negative integer. A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters",
        " and note that variables never have a leading coefficient or unary operator like \"2x\" or \"-x\". For example",
        " expression = \"1 + 2 * 3\" has an answer of [\"7\"]. For each term of free variables with a non-zero coefficient",
        " we write the free variables within a term in sorted order lexicographically.\n\t\nFor example",
        " we would never write a term like \"b*a*c\"",
        " only \"a*b*c\".\n\nFor example",
        " we would never write a term like \"b*a*c\"",
        " only \"a*b*c\". Terms have degrees equal to the number of free variables being multiplied",
        " counting multiplicity. We write the largest degree terms of our answer first",
        " breaking ties by lexicographic order ignoring the leading coefficient of the term.\n\t\nFor example",
        " \"a*a*b*c\" has degree 4.\n\nFor example",
        " \"a*a*b*c\" has degree 4. The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed. An example of a well-formatted answer is [\"-2*a*a*a\"",
        " \"3*a*a*b\"",
        " \"3*b*b\"",
        " \"4*a\"",
        " \"5*c\"",
        " \"-6\"]. Terms (including constant terms) with coefficient 0 are not included.\n\t\nFor example",
        " an expression of \"0\" has an output of [].\n\nFor example",
        " an expression of \"0\" has an output of []. 1 <= expression. length <= 250expression consists of lowercase English letters",
        " digits",
        " '+'",
        " '-'",
        " '*'",
        " '('",
        " ')'",
        " ' '. expression does not contain any leading or trailing spaces. All the tokens in expression are separated by a single space. 0 <= evalvars. length <= 1001 <= evalvars[i]. length <= 20evalvars[i] consists of lowercase English letters. evalints. length == evalvars. length-100 <= evalints[i] <= 100"
    ]
},
{
    "id": "773",
    "title": "Sliding Puzzle",
    "question": "On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0.\n A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\nThe state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\nGiven the puzzle board board, return the least number of moves required so that the state of the board is solved.\n If it is impossible for the state of the board to be solved, return -1.",
    "examples": [
        "Input: board = [[1,2,3],[4,0,5]]",
        "Output: 1",
        "Explanation: Swap the 0 and the 5 in one move.",
        "Input: board = [[1,2,3],[5,4,0]]",
        "Output: -1",
        "Explanation: No number of moves will make the board solved.",
        "Input: board = [[4,1,2],[5,0,3]]",
        "Output: 5",
        "Explanation: 5 is the smallest number of moves that solves the board.",
        "An example path:",
        "After move 0: [[4,1,2],[5,0,3]]",
        "After move 1: [[4,1,2],[0,5,3]]",
        "After move 2: [[0,1,2],[4,5,3]]",
        "After move 3: [[1,0,2],[4,5,3]]",
        "After move 4: [[1,2,0],[4,5,3]]",
        "After move 5: [[1,2,3],[4,5,0]]",
        "Input: board = [[3,2,4],[1,5,0]]",
        "Output: 14",
        ""
    ],
    "constraints": [
        "board. length == 2board[i]. length == 30 <= board[i][j] <= 5Each value board[i][j] is unique."
    ]
},
{
    "id": "778",
    "title": "Swim in Rising Water",
    "question": "You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\nThe rain starts to fall.\n At time t, the depth of the water everywhere is t.\n You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t.\n You can swim infinite distances in zero time.\n Of course, you must stay within the boundaries of the grid during your swim.\nReturn the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).",
    "examples": [
        "Input: grid = [[0,2],[1,3]]",
        "Output: 3",
        "Explanation:",
        "At time 0, you are in grid location (0, 0).",
        "You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.",
        "You cannot reach point (1, 1) until time 3.",
        "When the depth of water is 3, we can swim anywhere inside the grid.",
        "Input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]",
        "Output: 16",
        "Explanation: The final route is shown.",
        "We need to wait until time 16 so that (0, 0) and (4, 4) are connected.",
        ""
    ],
    "constraints": [
        "n == grid. lengthn == grid[i]. length1 <= n <= 500 <= grid[i][j] < n2Each value grid[i][j] is unique."
    ]
},
{
    "id": "780",
    "title": "Reaching Points",
    "question": "Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.\nThe allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).",
    "examples": [
        "Input: sx = 1, sy = 1, tx = 3, ty = 5",
        "Output: true",
        "Explanation:",
        "One series of moves that transforms the starting point to the target is:",
        "(1, 1) -> (1, 2)",
        "(1, 2) -> (3, 2)",
        "(3, 2) -> (3, 5)",
        "Input: sx = 1, sy = 1, tx = 2, ty = 2",
        "Output: false",
        "Input: sx = 1, sy = 1, tx = 1, ty = 1",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= sx",
        " sy",
        " tx",
        " ty <= 109"
    ]
},
{
    "id": "782",
    "title": "Transform to Chessboard",
    "question": "You are given an n x n binary grid board.\n In each move, you can swap any two rows with each other, or any two columns with each other.\nReturn the minimum number of moves to transform the board into a chessboard board.\n If the task is impossible, return -1.\nA chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.",
    "examples": [
        "Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]",
        "Output: 2",
        "Explanation: One potential sequence of moves is shown.",
        "The first move swaps the first and second column.",
        "The second move swaps the second and third row.",
        "Input: board = [[0,1],[1,0]]",
        "Output: 0",
        "Explanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.",
        "Input: board = [[1,0],[1,0]]",
        "Output: -1",
        "Explanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.",
        ""
    ],
    "constraints": [
        "n == board. lengthn == board[i]. length2 <= n <= 30board[i][j] is either 0 or 1."
    ]
},
{
    "id": "786",
    "title": "K-th Smallest Prime Fraction",
    "question": "You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique.\n You are also given an integer k.\nFor every i and j where 0 <= i < j < arr.\nlength, we consider the fraction arr[i] / arr[j].\nReturn the kth smallest fraction considered.\n Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].",
    "examples": [
        "Input: arr = [1,2,3,5], k = 3",
        "Output: [2,5]",
        "Explanation: The fractions to be considered in sorted order are:",
        "1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.",
        "The third fraction is 2/5.",
        "Input: arr = [1,7], k = 1",
        "Output: [1,7]",
        ""
    ],
    "constraints": [
        "2 <= arr. length <= 10001 <= arr[i] <= 3 * 104arr[0] == 1arr[i] is a prime number for i > 0. All the numbers of arr are unique and sorted in strictly increasing order. 1 <= k <= arr. length * (arr. length - 1) / 2"
    ]
},
{
    "id": "793",
    "title": "Preimage Size of Factorial Zeroes Function",
    "question": "Let f(x) be the number of zeroes at the end of x!.\n Recall that x! = 1 * 2 * 3 * .\n.\n.\n * x and by convention, 0! = 1.\nGiven an integer k, return the number of non-negative integers x have the property that f(x) = k.",
    "examples": [
        "Input: k = 0",
        "Output: 5",
        "Explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.",
        "Input: k = 5",
        "Output: 0",
        "Explanation: There is no x such that x! ends in k = 5 zeroes.",
        "Input: k = 3",
        "Output: 5",
        ""
    ],
    "constraints": [
        "For example",
        " f(3) = 0 because 3! = 6 has no zeroes at the end",
        " while f(11) = 2 because 11! = 39916800 has two zeroes at the end. 0 <= k <= 109"
    ]
},
{
    "id": "798",
    "title": "Smallest Rotation with Highest Score",
    "question": "You are given an array nums.\n You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], .\n.\n.\n nums[nums.\nlength - 1], nums[0], nums[1], .\n.\n.\n, nums[k-1]].\n Afterward, any entries that are less than or equal to their index are worth one point.\nReturn the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it.\n If there are multiple answers, return the smallest such index k.",
    "examples": [
        "Input: nums = [2,3,1,4,0]",
        "Output: 3",
        "Explanation: Scores for each k are listed below: ",
        "k = 0,  nums = [2,3,1,4,0],    score 2",
        "k = 1,  nums = [3,1,4,0,2],    score 3",
        "k = 2,  nums = [1,4,0,2,3],    score 3",
        "k = 3,  nums = [4,0,2,3,1],    score 4",
        "k = 4,  nums = [0,2,3,1,4],    score 3",
        "So we should choose k = 3, which has the highest score.",
        "Input: nums = [1,3,0,2,4]",
        "Output: 0",
        "Explanation: nums will always have 3 points no matter how it shifts.",
        "So we will choose the smallest k, which is 0.",
        ""
    ],
    "constraints": [
        "For example",
        " if we have nums = [2",
        "4",
        "1",
        "3",
        "0]",
        " and we rotate by k = 2",
        " it becomes [1",
        "3",
        "0",
        "2",
        "4]. This is worth 3 points because 1 > 0 [no points]",
        " 3 > 1 [no points]",
        " 0 <= 2 [one point]",
        " 2 <= 3 [one point]",
        " 4 <= 4 [one point]. 1 <= nums. length <= 1050 <= nums[i] < nums. length"
    ]
},
{
    "id": "801",
    "title": "Minimum Swaps To Make Sequences Increasing",
    "question": "You are given two integer arrays of the same length nums1 and nums2.\n In one operation, you are allowed to swap nums1[i] with nums2[i].\nReturn the minimum number of needed operations to make nums1 and nums2 strictly increasing.\n The test cases are generated so that the given input always makes it possible.\nAn array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < .\n.\n.\n < arr[arr.\nlength - 1].",
    "examples": [
        "Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7]",
        "Output: 1",
        "Explanation: ",
        "Swap nums1[3] and nums2[3]. Then the sequences are:",
        "nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]",
        "which are both strictly increasing.",
        "Input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "For example",
        " if nums1 = [1",
        "2",
        "3",
        "8]",
        " and nums2 = [5",
        "6",
        "7",
        "4]",
        " you can swap the element at i = 3 to obtain nums1 = [1",
        "2",
        "3",
        "4] and nums2 = [5",
        "6",
        "7",
        "8]. 2 <= nums1. length <= 105nums2. length == nums1. length0 <= nums1[i]",
        " nums2[i] <= 2 * 105"
    ]
},
{
    "id": "803",
    "title": "Bricks Falling When Hit",
    "question": "You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space.\n A brick is stable if:You are also given an array hits, which is a sequence of erasures we want to apply.\n Each time we want to erase the brick at the location hits[i] = (rowi, coli).\n The brick on that location (if it exists) will disappear.\n Some other bricks may no longer be stable because of that erasure and will fall.\n Once a brick falls, it is immediately erased from the grid (i.\ne.\n, it does not land on other stable bricks).\nReturn an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.\nNote that an erasure may refer to a location with no brick, and if it does, no bricks drop.",
    "examples": [
        "Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]",
        "Output: [2]",
        "Explanation: Starting with the grid:",
        "[[1,0,0,0],",
        " [1,1,1,0]]",
        "We erase the underlined brick at (1,0), resulting in the grid:",
        "[[1,0,0,0],",
        " [0,1,1,0]]",
        "The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:",
        "[[1,0,0,0],",
        " [0,0,0,0]]",
        "Hence the result is [2].",
        "Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]",
        "Output: [0,0]",
        "Explanation: Starting with the grid:",
        "[[1,0,0,0],",
        " [1,1,0,0]]",
        "We erase the underlined brick at (1,1), resulting in the grid:",
        "[[1,0,0,0],",
        " [1,0,0,0]]",
        "All remaining bricks are still stable, so no bricks fall. The grid remains the same:",
        "[[1,0,0,0],",
        " [1,0,0,0]]",
        "Next, we erase the underlined brick at (1,0), resulting in the grid:",
        "[[1,0,0,0],",
        " [0,0,0,0]]",
        "Once again, all remaining bricks are still stable, so no bricks fall.",
        "Hence the result is [0,0].",
        ""
    ],
    "constraints": [
        "It is directly connected to the top of the grid",
        " orAt least one other brick in its four adjacent cells is stable. m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 200grid[i][j] is 0 or 1. 1 <= hits. length <= 4 * 104hits[i]. length == 20 <= xi <= m - 10 <= yi <= n - 1All (xi",
        " yi) are unique."
    ]
},
{
    "id": "66",
    "title": "Plus One",
    "question": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer.\n The digits are ordered from most significant to least significant in left-to-right order.\n The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits.",
    "examples": [
        "Input: digits = [1,2,3]",
        "Output: [1,2,4]",
        "Explanation: The array represents the integer 123.",
        "Incrementing by one gives 123 + 1 = 124.",
        "Thus, the result should be [1,2,4].",
        "Input: digits = [4,3,2,1]",
        "Output: [4,3,2,2]",
        "Explanation: The array represents the integer 4321.",
        "Incrementing by one gives 4321 + 1 = 4322.",
        "Thus, the result should be [4,3,2,2].",
        "Input: digits = [0]",
        "Output: [1]",
        "Explanation: The array represents the integer 0.",
        "Incrementing by one gives 0 + 1 = 1.",
        "Thus, the result should be [1].",
        "Input: digits = [9]",
        "Output: [1,0]",
        "Explanation: The array represents the integer 9.",
        "Incrementing by one gives 9 + 1 = 10.",
        "Thus, the result should be [1,0].",
        ""
    ],
    "constraints": [
        "1 <= digits. length <= 1000 <= digits[i] <= 9digits does not contain any leading 0's."
    ]
},
{
    "id": "617",
    "title": "Merge Two Binary Trees",
    "question": "You are given two binary trees root1 and root2.\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.\n You need to merge the two trees into a new binary tree.\n The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node.\n Otherwise, the NOT null node will be used as the node of the new tree.\nReturn the merged tree.\nNote: The merging process must start from the root nodes of both trees.",
    "examples": [
        "Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]",
        "Output: [3,4,5,5,4,null,7]",
        "Input: root1 = [1], root2 = [1,2]",
        "Output: [2,2]",
        ""
    ],
    "constraints": [
        "The number of nodes in both trees is in the range [0",
        " 2000].-104 <= Node. val <= 104"
    ]
},
{
    "id": "805",
    "title": "Split Array With Same Average",
    "question": "You are given an integer array nums.\nYou should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).\nReturn true if it is possible to achieve that and false otherwise.\nNote that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.",
    "examples": [
        "Input: nums = [1,2,3,4,5,6,7,8]",
        "Output: true",
        "Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4. 5.",
        "Input: nums = [3,1]",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 300 <= nums[i] <= 104"
    ]
},
{
    "id": "810",
    "title": "Chalkboard XOR Game",
    "question": "You are given an array of integers nums represents the numbers written on a chalkboard.\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first.\n If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses.\n The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\nReturn true if and only if Alice wins the game, assuming both players play optimally.",
    "examples": [
        "Input: nums = [1,1,2]",
        "Output: false",
        "Explanation: ",
        "Alice has two choices: erase 1 or erase 2. ",
        "If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. ",
        "If Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.",
        "Input: nums = [0,1]",
        "Output: true",
        "Input: nums = [1,2,3]",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10000 <= nums[i] < 216"
    ]
},
{
    "id": "815",
    "title": "Bus Routes",
    "question": "You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.\nYou will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target.\n You can travel between bus stops by buses only.\nReturn the least number of buses you must take to travel from source to target.\n Return -1 if it is not possible.",
    "examples": [
        "Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6",
        "Output: 2",
        "Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.",
        "Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12",
        "Output: -1",
        ""
    ],
    "constraints": [
        "For example",
        " if routes[0] = [1",
        " 5",
        " 7]",
        " this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever. 1 <= routes. length <= 500. 1 <= routes[i]. length <= 105All the values of routes[i] are unique. sum(routes[i]. length) <= 1050 <= routes[i][j] < 1060 <= source",
        " target < 106"
    ]
},
{
    "id": "818",
    "title": "Race Car",
    "question": "Your car starts at position 0 and speed +1 on an infinite number line.\n Your car can go into negative positions.\n Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):For example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\nGiven a target position target, return the length of the shortest sequence of instructions to get there.",
    "examples": [
        "Input: target = 3",
        "Output: 2",
        "Explanation: ",
        "The shortest instruction sequence is \"AA\".",
        "Your position goes from 0 --> 1 --> 3.",
        "Input: target = 6",
        "Output: 5",
        "Explanation: ",
        "The shortest instruction sequence is \"AAARA\".",
        "Your position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.",
        ""
    ],
    "constraints": [
        "When you get an instruction 'A'",
        " your car does the following:\n\n\t\nposition += speed\nspeed *= 2\n\nposition += speedspeed *= 2When you get an instruction 'R'",
        " your car does the following:\n\t\nIf your speed is positive then speed = -1\notherwise speed = 1\n\n\tYour position stays the same. If your speed is positive then speed = -1otherwise speed = 11 <= target <= 104"
    ]
},
{
    "id": "827",
    "title": "Making A Large Island",
    "question": "You are given an n x n binary matrix grid.\n You are allowed to change at most one 0 to be 1.\nReturn the size of the largest island in grid after applying this operation.\nAn island is a 4-directionally connected group of 1s.",
    "examples": [
        "Input: grid = [[1,0],[0,1]]",
        "Output: 3",
        "Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.",
        "Input: grid = [[1,1],[1,0]]",
        "Output: 4",
        "Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4. Input: grid = [[1,1],[1,1]]",
        "Output: 4",
        "Explanation: Can't change any 0 to 1, only one island with area = 4.",
        ""
    ],
    "constraints": [
        "n == grid. lengthn == grid[i]. length1 <= n <= 500grid[i][j] is either 0 or 1."
    ]
},
{
    "id": "828",
    "title": "Count Unique Characters of All Substrings of a Given String",
    "question": "Let's define a function countUniqueChars(s) that returns the number of unique characters on s.\nGiven a string s, return the sum of countUniqueChars(t) where t is a substring of s.\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.",
    "examples": [
        "Input: s = \"ABC\"",
        "Output: 10",
        "Explanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".",
        "Evey substring is composed with only unique letters.",
        "Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10",
        "Input: s = \"ABA\"",
        "Output: 8",
        "Explanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.",
        "Input: s = \"LEETCODE\"",
        "Output: 92",
        ""
    ],
    "constraints": [
        "For example if s = \"LEETCODE\" then \"L\"",
        " \"T\"",
        " \"C\"",
        " \"O\"",
        " \"D\" are the unique characters since they appear only once in s",
        " therefore countUniqueChars(s) = 5. 1 <= s. length <= 105s consists of uppercase English letters only."
    ]
},
{
    "id": "829",
    "title": "Consecutive Numbers Sum",
    "question": "Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.",
    "examples": [
        "Input: n = 5",
        "Output: 2",
        "Explanation: 5 = 2 + 3",
        "Input: n = 9",
        "Output: 3",
        "Explanation: 9 = 4 + 5 = 2 + 3 + 4",
        "Input: n = 15",
        "Output: 4",
        "Explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5",
        ""
    ],
    "constraints": [
        "1 <= n <= 109"
    ]
},
{
    "id": "834",
    "title": "Sum of Distances in Tree",
    "question": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nReturn an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.",
    "examples": [
        "Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]",
        "Output: [8,12,6,10,10,10]",
        "Explanation: The tree is shown above.",
        "We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)",
        "equals 1 + 1 + 2 + 2 + 2 = 8.",
        "Hence, answer[0] = 8, and so on.",
        "Input: n = 1, edges = []",
        "Output: [0]",
        "Input: n = 2, edges = [[1,0]]",
        "Output: [1,1]",
        ""
    ],
    "constraints": [
        "1 <= n <= 3 * 104edges. length == n - 1edges[i]. length == 20 <= ai",
        " bi < nai != biThe given input represents a valid tree."
    ]
},
{
    "id": "839",
    "title": "Similar String Groups",
    "question": "Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y.\n Also two strings X and Y are similar if they are equal.\nFor example, \"tars\" and \"rats\" are similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\nTogether, these form two connected groups by similarity: {\"tars\", \"rats\", \"arts\"} and {\"star\"}.\n  Notice that \"tars\" and \"arts\" are in the same group even though they are not similar.\n  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\nWe are given a list strs of strings where every string in strs is an anagram of every other string in strs.\n How many groups are there?",
    "examples": [
        "Input: strs = [\"tars\",\"rats\",\"arts\",\"star\"]",
        "Output: 2",
        "Input: strs = [\"omv\",\"ovm\"]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= strs. length <= 3001 <= strs[i]. length <= 300strs[i] consists of lowercase letters only. All words in strs have the same length and are anagrams of each other."
    ]
},
{
    "id": "843",
    "title": "Guess the Word",
    "question": "This is an interactive problem.\nYou are given an array of unique strings wordlist where wordlist[i] is 6 letters long, and one word in this list is chosen as secret.\nYou may call Master.\nguess(word) to guess a word.\n The guessed word should have type string and must be from the original list with 6 lowercase letters.\nThis function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word.\n Also, if your guess is not in the given wordlist, it will return -1 instead.\nFor each test case, you have exactly 10 guesses to guess the word.\n At the end of any number of calls, if you have made 10 or fewer calls to Master.\nguess and at least one of these guesses was secret, then you pass the test case.",
    "examples": [
        "Input: secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], numguesses = 10",
        "Output: You guessed the secret word correctly.",
        "Explanation:",
        "master. guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.",
        "master. guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.",
        "master. guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.",
        "master. guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.",
        "master. guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.",
        "We made 5 calls to master. guess and one of them was the secret, so we pass the test case.",
        "Input: secret = \"hamada\", wordlist = [\"hamada\",\"khaled\"], numguesses = 10",
        "Output: You guessed the secret word correctly.",
        ""
    ],
    "constraints": [
        "1 <= wordlist. length <= 100wordlist[i]. length == 6wordlist[i] consist of lowercase English letters. All the strings of wordlist are unique. secret exists in wordlist. numguesses == 10"
    ]
},
{
    "id": "628",
    "title": "Maximum Product of Three Numbers",
    "question": "Given an integer array nums, find three numbers whose product is maximum and return the maximum product.",
    "examples": [
        "Input: nums = [1,2,3]",
        "Output: 6",
        "Input: nums = [1,2,3,4]",
        "Output: 24",
        "Input: nums = [-1,-2,-3]",
        "Output: -6",
        ""
    ],
    "constraints": [
        "3 <= nums. length <= 104-1000 <= nums[i] <= 1000"
    ]
},
{
    "id": "847",
    "title": "Shortest Path Visiting All Nodes",
    "question": "You have an undirected, connected graph of n nodes labeled from 0 to n - 1.\n You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\nReturn the length of the shortest path that visits every node.\n You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.",
    "examples": [
        "Input: graph = [[1,2,3],[0],[0],[0]]",
        "Output: 4",
        "Explanation: One possible path is [1,0,2,0,3]",
        "Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]",
        "Output: 4",
        "Explanation: One possible path is [0,1,4,2,3]",
        ""
    ],
    "constraints": [
        "n == graph. length1 <= n <= 120 <= graph[i]. length < ngraph[i] does not contain i. If graph[a] contains b",
        " then graph[b] contains a. The input graph is always connected."
    ]
},
{
    "id": "850",
    "title": "Rectangle Area II",
    "question": "We are given a list of (axis-aligned) rectangles.\n Each rectangle[i] = [xi1, yi1, xi2, yi2] , where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner of the ith rectangle.\nFind the total area covered by all rectangles in the plane.\n Since the answer may be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]",
        "Output: 6",
        "Explanation: As illustrated in the picture.",
        "Input: rectangles = [[0,0,1000000000,1000000000]]",
        "Output: 49",
        "Explanation: The answer is 1018 modulo (109 + 7), which is (109)2 = (-7)2 = 49.",
        ""
    ],
    "constraints": [
        "1 <= rectangles. length <= 200rectanges[i]. length = 40 <= rectangles[i][j] <= 109The total area covered by all rectangles will never exceed 263 - 1 and thus will fit in a 64-bit signed integer."
    ]
},
{
    "id": "854",
    "title": "K-Similar Strings",
    "question": "Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.\nGiven two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.",
    "examples": [
        "Input: s1 = \"ab\", s2 = \"ba\"",
        "Output: 1",
        "Input: s1 = \"abc\", s2 = \"bca\"",
        "Output: 2",
        "Input: s1 = \"abac\", s2 = \"baca\"",
        "Output: 2",
        "Input: s1 = \"aabc\", s2 = \"abca\"",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= s1. length <= 20s2. length == s1. lengths1 and s2 contain only lowercase letters from the set {'a'",
        " 'b'",
        " 'c'",
        " 'd'",
        " 'e'",
        " 'f'}. s2 is an anagram of s1."
    ]
},
{
    "id": "857",
    "title": "Minimum Cost to Hire K Workers",
    "question": "There are n workers.\n You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.\nWe want to hire exactly k workers to form a paid group.\n To hire a group of k workers, we must pay them according to the following rules:Given the integer k, return the least amount of money needed to form a paid group satisfying the above conditions.\n Answers within 10-5 of the actual answer will be accepted.",
    "examples": [
        "Input: quality = [10,20,5], wage = [70,50,30], k = 2",
        "Output: 105. 00000",
        "Explanation: We pay 70 to 0th worker and 35 to 2nd worker.",
        "Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3",
        "Output: 30. 66667",
        "Explanation: We pay 4 to 0th worker, 13. 33333 to 2nd and 3rd workers separately.",
        ""
    ],
    "constraints": [
        "n == quality. length == wage. length1 <= k <= n <= 1041 <= quality[i]",
        " wage[i] <= 104"
    ]
},
{
    "id": "862",
    "title": "Shortest Subarray with Sum at Least K",
    "question": "Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k.\n If there is no such subarray, return -1.\nA subarray is a contiguous part of an array.",
    "examples": [
        "Input: nums = [1], k = 1",
        "Output: 1",
        "Input: nums = [1,2], k = 4",
        "Output: -1",
        "Input: nums = [2,-1,2], k = 3",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105-105 <= nums[i] <= 1051 <= k <= 109"
    ]
},
{
    "id": "864",
    "title": "Shortest Path to Get All Keys",
    "question": "You are given an m x n grid grid where:You start at the starting point and one move consists of walking one space in one of the four cardinal directions.\n You cannot walk outside the grid, or walk into a wall.\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid.\n This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\nReturn the lowest number of moves to acquire all keys.\n If it is impossible, return -1.",
    "examples": [
        "Input: grid = [\"@. a.#\",\"###.#\",\"b. A. B\"]",
        "Output: 8",
        "Explanation: Note that the goal is to obtain all the keys not to open all the locks.",
        "Input: grid = [\"@.. aA\",\".. B#.\",\".... b\"]",
        "Output: 6",
        "Input: grid = [\"@Aa\"]",
        "Output: -1",
        ""
    ],
    "constraints": [
        "'.' is an empty cell.'#' is a wall.'@' is the starting point. Lowercase letters represent keys. Uppercase letters represent locks. m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 30grid[i][j] is either an English letter",
        " '.'",
        " '#'",
        " or '@'. The number of keys in the grid is in the range [1",
        " 6]. Each key in the grid is unique. Each key in the grid has a matching lock."
    ]
},
{
    "id": "871",
    "title": "Minimum Number of Refueling Stops",
    "question": "A car travels from a starting position to a destination which is target miles east of the starting position.\nThere are gas stations along the way.\n The gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.\nThe car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it.\n It uses one liter of gas per one mile that it drives.\n When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\nReturn the minimum number of refueling stops the car must make in order to reach its destination.\n If it cannot reach the destination, return -1.\nNote that if the car reaches a gas station with 0 fuel left, the car can still refuel there.\n If the car reaches the destination with 0 fuel left, it is still considered to have arrived.",
    "examples": [
        "Input: target = 1, startFuel = 1, stations = []",
        "Output: 0",
        "Explanation: We can reach the target without refueling.",
        "Input: target = 100, startFuel = 1, stations = [[10,100]]",
        "Output: -1",
        "Explanation: We can not reach the target (or even the first gas station).",
        "Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]",
        "Output: 2",
        "Explanation: We start with 10 liters of fuel.",
        "We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.",
        "Then, we drive from position 10 to position 60 (expending 50 liters of fuel),",
        "and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.",
        "We made 2 refueling stops along the way, so we return 2.",
        ""
    ],
    "constraints": [
        "1 <= target",
        " startFuel <= 1090 <= stations. length <= 5000 <= positioni <= positioni+1 < target1 <= fueli < 109"
    ]
},
{
    "id": "878",
    "title": "Nth Magical Number",
    "question": "A positive integer is magical if it is divisible by either a or b.\nGiven the three integers n, a, and b, return the nth magical number.\n Since the answer may be very large, return it modulo 109 + 7.",
    "examples": [
        "Input: n = 1, a = 2, b = 3",
        "Output: 2",
        "Input: n = 4, a = 2, b = 3",
        "Output: 6",
        "Input: n = 5, a = 2, b = 4",
        "Output: 10",
        "Input: n = 3, a = 6, b = 4",
        "Output: 8",
        ""
    ],
    "constraints": [
        "1 <= n <= 1092 <= a",
        " b <= 4 * 104"
    ]
},
{
    "id": "879",
    "title": "Profitable Schemes",
    "question": "There is a group of n members, and a list of various crimes they could commit.\n The ith crime generates a profit[i] and requires group[i] members to participate in it.\n If a member participates in one crime, that member can't participate in another crime.\nLet's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.\nReturn the number of schemes that can be chosen.\n Since the answer may be very large, return it modulo 109 + 7.",
    "examples": [
        "Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]",
        "Output: 2",
        "Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.",
        "In total, there are 2 schemes. Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]",
        "Output: 7",
        "Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.",
        "There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2)."
    ],
    "constraints": [
        "1 <= n <= 1000 <= minProfit <= 1001 <= group. length <= 1001 <= group[i] <= 100profit. length == group. length0 <= profit[i] <= 100"
    ]
},
{
    "id": "882",
    "title": "Reachable Nodes In Subdivided Graph",
    "question": "You are given an undirected graph (the \"original graph\") with n nodes labeled from 0 to n - 1.\n You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\nThe graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into.\n Note that cnti == 0 means you will not subdivide the edge.\nTo subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes.\n The new nodes are x1, x2, .\n.\n.\n, xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], .\n.\n.\n, [xcnti+1, xcnti], [xcnti, vi].\nIn this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.\nGiven the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.",
    "examples": [
        "Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3",
        "Output: 13",
        "Explanation: The edge subdivisions are shown in the image above.",
        "The nodes that are reachable are highlighted in yellow.",
        "Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4",
        "Output: 23",
        "Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5",
        "Output: 1",
        "Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.",
        ""
    ],
    "constraints": [
        "0 <= edges. length <= min(n * (n - 1) / 2",
        " 104)edges[i]. length == 30 <= ui < vi < nThere are no multiple edges in the graph. 0 <= cnti <= 1040 <= maxMoves <= 1091 <= n <= 3000"
    ]
},
{
    "id": "637",
    "title": "Average of Levels in Binary Tree",
    "question": "",
    "examples": [
        "Input: root = [3,9,20,null,15,7]",
        "Output: [3. 00000,14. 50000,11. 00000]",
        "Explanation: The average value of nodes on level 0 is 3, on level 1 is 14. 5, and on level 2 is 11.",
        "Hence return [3, 14. 5, 11].",
        "Input: root = [3,9,20,15,7]",
        "Output: [3. 00000,14. 50000,11. 00000]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104].-231 <= Node. val <= 231 - 1"
    ]
},
{
    "id": "887",
    "title": "Super Egg Drop",
    "question": "You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.\nYou know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\nEach move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n).\n If the egg breaks, you can no longer use it.\n However, if the egg does not break, you may reuse it in future moves.\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.",
    "examples": [
        "Input: k = 1, n = 2",
        "Output: 2",
        "Explanation: ",
        "Drop the egg from floor 1. If it breaks, we know that f = 0.",
        "Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.",
        "If it does not break, then we know f = 2.",
        "Hence, we need at minimum 2 moves to determine with certainty what the value of f is.",
        "Input: k = 2, n = 6",
        "Output: 3",
        "Input: k = 3, n = 14",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= k <= 1001 <= n <= 104"
    ]
},
{
    "id": "891",
    "title": "Sum of Subsequence Widths",
    "question": "The width of a sequence is the difference between the maximum and minimum elements in the sequence.\nGiven an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums.\n Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.\n For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].",
    "examples": [
        "Input: nums = [2,1,3]",
        "Output: 6",
        "Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].",
        "The corresponding widths are 0, 0, 0, 1, 1, 2, 2.",
        "The sum of these widths is 6.",
        "Input: nums = [2]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 105"
    ]
},
{
    "id": "895",
    "title": "Maximum Frequency Stack",
    "question": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\nImplement the FreqStack class:",
    "examples": [
        "Input",
        "[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]",
        "[[], [5], [7], [5], [7], [4], [5], [], [], [], []]",
        "Output",
        "[null, null, null, null, null, null, null, 5, 7, 5, 4]",
        "",
        "Explanation",
        "FreqStack freqStack = new FreqStack();",
        "freqStack. push(5); // The stack is [5]",
        "freqStack. push(7); // The stack is [5,7]",
        "freqStack. push(5); // The stack is [5,7,5]",
        "freqStack. push(7); // The stack is [5,7,5,7]",
        "freqStack. push(4); // The stack is [5,7,5,7,4]",
        "freqStack. push(5); // The stack is [5,7,5,7,4,5]",
        "freqStack. pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].",
        "freqStack. pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].",
        "freqStack. pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].",
        "freqStack. pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].",
        ""
    ],
    "constraints": [
        "FreqStack() constructs an empty frequency stack. void push(int val) pushes an integer val onto the top of the stack. int pop() removes and returns the most frequent element in the stack.\n\t\nIf there is a tie for the most frequent element",
        " the element closest to the stack's top is removed and returned.\n\nIf there is a tie for the most frequent element",
        " the element closest to the stack's top is removed and returned. 0 <= val <= 109At most 2 * 104 calls will be made to push and pop. It is guaranteed that there will be at least one element in the stack before calling pop."
    ]
},
{
    "id": "899",
    "title": "Orderly Queue",
    "question": "You are given a string s and an integer k.\n You can choose one of the first k letters of s and append it at the end of the string.\n.\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.",
    "examples": [
        "Input: s = \"cba\", k = 1",
        "Output: \"acb\"",
        "Explanation: ",
        "In the first move, we move the 1st character 'c' to the end, obtaining the string \"bac\".",
        "In the second move, we move the 1st character 'b' to the end, obtaining the final result \"acb\".",
        "Input: s = \"baaca\", k = 3",
        "Output: \"aaabc\"",
        "Explanation: ",
        "In the first move, we move the 1st character 'b' to the end, obtaining the string \"aacab\".",
        "In the second move, we move the 3rd character 'c' to the end, obtaining the final result \"aaabc\".",
        ""
    ],
    "constraints": [
        "1 <= k <= s. length <= 1000s consist of lowercase English letters."
    ]
},
{
    "id": "902",
    "title": "Numbers At Most N Given Digit Set",
    "question": "Given an array of digits which is sorted in non-decreasing order.\n You can write numbers using each digits[i] as many times as we want.\n For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.\nReturn the number of positive integers that can be generated that are less than or equal to a given integer n.",
    "examples": [
        "Input: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100",
        "Output: 20",
        "Explanation: ",
        "The 20 numbers that can be written are:",
        "1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.",
        "Input: digits = [\"1\",\"4\",\"9\"], n = 1000000000",
        "Output: 29523",
        "Explanation: ",
        "We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,",
        "81 four digit numbers, 243 five digit numbers, 729 six digit numbers,",
        "2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.",
        "In total, this is 29523 integers that can be written using the digits array.",
        "Input: digits = [\"7\"], n = 8",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= digits. length <= 9digits[i]. length == 1digits[i] is a digit from '1' to '9'. All the values in digits are unique. digits is sorted in non-decreasing order. 1 <= n <= 109"
    ]
},
{
    "id": "903",
    "title": "Valid Permutations for DI Sequence",
    "question": "You are given a string s of length n where s[i] is either:A permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:Return the number of valid permutations perm.\n Since the answer may be large, return it modulo 109 + 7.",
    "examples": [
        "Input: s = \"DID\"",
        "Output: 5",
        "Explanation: The 5 valid permutations of (0, 1, 2, 3) are:",
        "(1, 0, 3, 2)",
        "(2, 0, 3, 1)",
        "(2, 1, 3, 0)",
        "(3, 0, 2, 1)",
        "(3, 1, 2, 0)",
        "Input: s = \"D\"",
        "Output: 1",
        ""
    ],
    "constraints": [
        "'D' means decreasing",
        " or'I' means increasing. If s[i] == 'D'",
        " then perm[i] > perm[i + 1]",
        " andIf s[i] == 'I'",
        " then perm[i] < perm[i + 1]. n == s. length1 <= n <= 200s[i] is either 'I' or 'D'."
    ]
},
{
    "id": "906",
    "title": "Super Palindromes",
    "question": "Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.\nGiven two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].",
    "examples": [
        "Input: left = \"4\", right = \"1000\"",
        "Output: 4",
        "Explanation: 4, 9, 121, and 484 are superpalindromes.",
        "Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.",
        "Input: left = \"1\", right = \"2\"",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= left. length",
        " right. length <= 18left and right consist of only digits. left and right cannot have leading zeros. left and right represent integers in the range [1",
        " 1018 - 1]. left is less than or equal to right."
    ]
},
{
    "id": "913",
    "title": "Cat and Mouse",
    "question": "A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\nThe graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.\nThe mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.\nDuring each player's turn, they must travel along one edge of the graph that meets where they are.\n  For example, if the Mouse is at node 1, it must travel to any node in graph[1].\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0.\n)Then, the game can end in three ways:Given a graph, and assuming both players play optimally, return",
    "examples": [
        "Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]",
        "Output: 0",
        "Input: graph = [[1,3],[0],[3],[0,2]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "If ever the Cat occupies the same node as the Mouse",
        " the Cat wins. If ever the Mouse reaches the Hole",
        " the Mouse wins. If ever a position is repeated (i. e.",
        " the players are in the same position as a previous turn",
        " and it is the same player's turn to move)",
        " the game is a draw. 1 if the mouse wins the game",
        "2 if the cat wins the game",
        " or0 if the game is a draw. 3 <= graph. length <= 501 <= graph[i]. length < graph. length0 <= graph[i][j] < graph. lengthgraph[i][j] != igraph[i] is unique. The mouse and the cat can always move. "
    ]
},
{
    "id": "920",
    "title": "Number of Music Playlists",
    "question": "Your music player contains n different songs.\n You want to listen to goal songs (not necessarily different) during your trip.\n To avoid boredom, you will create a playlist so that:Given n, goal, and k, return the number of possible playlists that you can create.\n Since the answer can be very large, return it modulo 109 + 7.",
    "examples": [
        "Input: n = 3, goal = 3, k = 1",
        "Output: 6",
        "Explanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].",
        "Input: n = 2, goal = 3, k = 0",
        "Output: 6",
        "Explanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].",
        "Input: n = 2, goal = 3, k = 1",
        "Output: 2",
        "Explanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].",
        ""
    ],
    "constraints": [
        "Every song is played at least once. A song can only be played again only if k other songs have been played. 0 <= k < n <= goal <= 100"
    ]
},
{
    "id": "924",
    "title": "Minimize Malware Spread",
    "question": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware.\n Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware.\n This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.\n We will remove exactly one node from initial.\nReturn the node that, if removed, would minimize M(initial).\n If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\nNote that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.",
    "examples": [
        "Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
        "Output: 0",
        "Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]",
        "Output: 0",
        "Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "n == graph. lengthn == graph[i]. length2 <= n <= 300graph[i][j] is 0 or 1. graph[i][j] == graph[j][i]graph[i][i] == 11 <= initial. length <= n0 <= initial[i] <= n - 1All the integers in initial are unique."
    ]
},
{
    "id": "643",
    "title": "Maximum Average Subarray I",
    "question": "You are given an integer array nums consisting of n elements, and an integer k.\nFind a contiguous subarray whose length is equal to k that has the maximum average value and return this value.\n Any answer with a calculation error less than 10-5 will be accepted.",
    "examples": [
        "Input: nums = [1,12,-5,-6,50,3], k = 4",
        "Output: 12. 75000",
        "Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12. 75",
        "Input: nums = [5], k = 1",
        "Output: 5. 00000",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= k <= n <= 105-104 <= nums[i] <= 104"
    ]
},
{
    "id": "927",
    "title": "Three Equal Parts",
    "question": "You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.\nIf it is possible, return any [i, j] with i + 1 < j, such that:If it is not possible, return [-1, -1].\nNote that the entire part is used when considering what binary value it represents.\n For example, [1,1,0] represents 6 in decimal, not 3.\n Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.",
    "examples": [
        "Input: arr = [1,0,1,0,1]",
        "Output: [0,3]",
        "Input: arr = [1,1,0,1,1]",
        "Output: [-1,-1]",
        "Input: arr = [1,1,0,0,1]",
        "Output: [0,2]",
        ""
    ],
    "constraints": [
        "arr[0]",
        " arr[1]",
        " ...",
        " arr[i] is the first part",
        "arr[i + 1]",
        " arr[i + 2]",
        " ...",
        " arr[j - 1] is the second part",
        " andarr[j]",
        " arr[j + 1]",
        " ...",
        " arr[arr. length - 1] is the third part. All three parts have equal binary values. 3 <= arr. length <= 3 * 104arr[i] is 0 or 1"
    ]
},
{
    "id": "928",
    "title": "Minimize Malware Spread II",
    "question": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware.\n Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware.\n This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.\nWe will remove exactly one node from initial, completely removing it and any connections from this node to any other node.\nReturn the node that, if removed, would minimize M(initial).\n If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.",
    "examples": [
        "Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
        "Output: 0",
        "Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]",
        "Output: 1",
        "Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "n == graph. lengthn == graph[i]. length2 <= n <= 300graph[i][j] is 0 or 1. graph[i][j] == graph[j][i]graph[i][i] == 11 <= initial. length < n0 <= initial[i] <= n - 1All the integers in initial are unique."
    ]
},
{
    "id": "936",
    "title": "Stamping The Sequence",
    "question": "You are given two strings stamp and target.\n Initially, there is a string s of length target.\nlength with all s[i] == '?'.\nIn one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.\nWe want to convert s to target using at most 10 * target.\nlength turns.\nReturn an array of the index of the left-most letter being stamped at each turn.\n If we cannot obtain target from s within 10 * target.\nlength turns, return an empty array.",
    "examples": [
        "Input: stamp = \"abc\", target = \"ababc\"",
        "Output: [0,2]",
        "Explanation: Initially s = \"?????\".",
        "- Place stamp at index 0 to get \"abc??\".",
        "- Place stamp at index 2 to get \"ababc\".",
        "[1,0,2] would also be accepted as an answer, as well as some other answers.",
        "Input: stamp = \"abca\", target = \"aabcaca\"",
        "Output: [3,0,1]",
        "Explanation: Initially s = \"???????\".",
        "- Place stamp at index 3 to get \"???abca\".",
        "- Place stamp at index 0 to get \"abcabca\".",
        "- Place stamp at index 1 to get \"aabcaca\".",
        ""
    ],
    "constraints": [
        "For example",
        " if stamp = \"abc\" and target = \"abcba\"",
        " then s is \"?????\" initially. In one turn you can:\n\n\t\nplace stamp at index 0 of s to obtain \"abc??\"",
        "\nplace stamp at index 1 of s to obtain \"?abc?\"",
        " or\nplace stamp at index 2 of s to obtain \"??abc\".\n\n\tNote that stamp must be fully contained in the boundaries of s in order to stamp (i. e.",
        " you cannot place stamp at index 3 of s). place stamp at index 0 of s to obtain \"abc??\"",
        "place stamp at index 1 of s to obtain \"?abc?\"",
        " orplace stamp at index 2 of s to obtain \"??abc\". 1 <= stamp. length <= target. length <= 1000stamp and target consist of lowercase English letters."
    ]
},
{
    "id": "940",
    "title": "Distinct Subsequences II",
    "question": "Given a string s, return the number of distinct non-empty subsequences of s.\n Since the answer may be very large, return it modulo 109 + 7.",
    "examples": [
        "Input: s = \"abc\"",
        "Output: 7",
        "Explanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".",
        "Input: s = \"aba\"",
        "Output: 6",
        "Explanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\".",
        "Input: s = \"aaa\"",
        "Output: 3",
        "Explanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 2000s consists of lowercase English letters."
    ]
},
{
    "id": "943",
    "title": "Find the Shortest Superstring",
    "question": "Given an array of strings words, return the smallest string that contains each string in words as a substring.\n If there are multiple valid strings of the smallest length, return any of them.\nYou may assume that no string in words is a substring of another string in words.",
    "examples": [
        "Input: words = [\"alex\",\"loves\",\"leetcode\"]",
        "Output: \"alexlovesleetcode\"",
        "Explanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.",
        "Input: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]",
        "Output: \"gctaagttcatgcatc\"",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 121 <= words[i]. length <= 20words[i] consists of lowercase English letters. All the strings of words are unique."
    ]
},
{
    "id": "952",
    "title": "Largest Component Size by Common Factor",
    "question": "You are given an integer array of unique positive integers nums.\n Consider the following graph:Return the size of the largest connected component in the graph.",
    "examples": [
        "Input: nums = [4,6,15,35]",
        "Output: 4",
        "Input: nums = [20,50,9,63]",
        "Output: 2",
        "Input: nums = [2,3,6,7,4,12,21,39]",
        "Output: 8",
        ""
    ],
    "constraints": [
        "There are nums. length nodes",
        " labeled nums[0] to nums[nums. length - 1]",
        "There is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1. 1 <= nums. length <= 2 * 1041 <= nums[i] <= 105All the values of nums are unique."
    ]
},
{
    "id": "956",
    "title": "Tallest Billboard",
    "question": "You are installing a billboard and want it to have the largest height.\n The billboard will have two steel supports, one on each side.\n Each steel support must be an equal height.\nYou are given a collection of rods that can be welded together.\n For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\nReturn the largest possible height of your billboard installation.\n If you cannot support the billboard, return 0.",
    "examples": [
        "Input: rods = [1,2,3,6]",
        "Output: 6",
        "Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.",
        "Input: rods = [1,2,3,4,5,6]",
        "Output: 10",
        "Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.",
        "Input: rods = [1,2]",
        "Output: 0",
        "Explanation: The billboard cannot be supported, so we return 0.",
        ""
    ],
    "constraints": [
        "1 <= rods. length <= 201 <= rods[i] <= 1000sum(rods[i]) <= 5000"
    ]
},
{
    "id": "960",
    "title": "Delete Columns to Make Sorted III",
    "question": "You are given an array of n strings strs, all of the same length.\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\nFor example, if we have strs = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\", \"vyz\"].\nSuppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order.\n (i.\ne.\n, (strs[0][0] <= strs[0][1] <= .\n.\n.\n <= strs[0][strs[0].\nlength - 1]), and (strs[1][0] <= strs[1][1] <= .\n.\n.\n <= strs[1][strs[1].\nlength - 1]), and so on).\n Return the minimum possible value of answer.\nlength.",
    "examples": [
        "Input: strs = [\"babca\",\"bbazb\"]",
        "Output: 3",
        "Explanation: After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].",
        "Both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).",
        "Note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order. Input: strs = [\"edcba\"]",
        "Output: 4",
        "Explanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.",
        "Input: strs = [\"ghi\",\"def\",\"abc\"]",
        "Output: 0",
        "Explanation: All rows are already lexicographically sorted.",
        ""
    ],
    "constraints": [
        "n == strs. length1 <= n <= 1001 <= strs[i]. length <= 100strs[i] consists of lowercase English letters. "
    ]
},
{
    "id": "964",
    "title": "Least Operators to Express Number",
    "question": "Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x .\n.\n.\n where each operator op1, op2, etc.\n is either addition, subtraction, multiplication, or division (+, -, *, or /).\n For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.\nWhen writing such an expression, we adhere to the following conventions:We would like to write an expression with the least number of operators such that the expression equals the given target.\n Return the least number of operators used.",
    "examples": [
        "Input: x = 3, target = 19",
        "Output: 5",
        "Explanation: 3 * 3 + 3 * 3 + 3 / 3.",
        "The expression contains 5 operations.",
        "Input: x = 5, target = 501",
        "Output: 8",
        "Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.",
        "The expression contains 8 operations.",
        "Input: x = 100, target = 100000000",
        "Output: 3",
        "Explanation: 100 * 100 * 100 * 100.",
        "The expression contains 3 operations.",
        ""
    ],
    "constraints": [
        "The division operator (/) returns rational numbers. There are no parentheses placed anywhere. We use the usual order of operations: multiplication and division happen before addition and subtraction. It is not allowed to use the unary negation operator (-). For example",
        " \"x - x\" is a valid expression as it only uses subtraction",
        " but \"-x + x\" is not because it uses negation. 2 <= x <= 1001 <= target <= 2 * 108"
    ]
},
{
    "id": "968",
    "title": "Binary Tree Cameras",
    "question": "You are given the root of a binary tree.\n We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.\nReturn the minimum number of cameras needed to monitor all nodes of the tree.",
    "examples": [
        "Input: root = [0,0,null,0,0]",
        "Output: 1",
        "Explanation: One camera is enough to monitor all nodes if placed as shown.",
        "Input: root = [0,0,null,0,null,0,null,null,0]",
        "Output: 2",
        "Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 1000]. Node. val == 0"
    ]
},
{
    "id": "645",
    "title": "Set Mismatch",
    "question": "You have a set of integers s, which originally contains all the numbers from 1 to n.\n Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.\nYou are given an integer array nums representing the data status of this set after the error.\nFind the number that occurs twice and the number that is missing and return them in the form of an array.",
    "examples": [
        "Input: nums = [1,2,2,4]",
        "Output: [2,3]",
        "Input: nums = [1,1]",
        "Output: [1,2]",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 1041 <= nums[i] <= 104"
    ]
},
{
    "id": "972",
    "title": "Equal Rational Numbers",
    "question": "Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number.\n The strings may use parentheses to denote the repeating part of the rational number.\nA rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>.\n The number will be represented in one of the following three ways:The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets.\n For example:",
    "examples": [
        "Input: s = \"0.(52)\", t = \"0. 5(25)\"",
        "Output: true",
        "Explanation: Because \"0.(52)\" represents 0. 52525252..., and \"0. 5(25)\" represents 0. 52525252525..... , the strings represent the same number.",
        "Input: s = \"0. 1666(6)\", t = \"0. 166(66)\"",
        "Output: true",
        "Input: s = \"0. 9(9)\", t = \"1.\"",
        "Output: true",
        "Explanation: \"0. 9(9)\" represents 0. 999999999... repeated forever, which equals 1.  [See this link for an explanation.]",
        "\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".",
        ""
    ],
    "constraints": [
        "<IntegerPart>\n\nFor example",
        " 12",
        " 0",
        " and 123.\n\nFor example",
        " 12",
        " 0",
        " and 123.<IntegerPart><.><NonRepeatingPart>\n\nFor example",
        " 0. 5",
        " 1.",
        " 2. 12",
        " and 123. 0001.\n\nFor example",
        " 0. 5",
        " 1.",
        " 2. 12",
        " and 123. 0001.<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>\n\nFor example",
        " 0. 1(6)",
        " 1.(9)",
        " 123. 00(1212).\n\nFor example",
        " 0. 1(6)",
        " 1.(9)",
        " 123. 00(1212). 1/6 = 0. 16666666... = 0. 1(6) = 0. 1666(6) = 0. 166(66). Each part consists only of digits. The <IntegerPart> does not have leading zeros (except for the zero itself). 1 <= <IntegerPart>. length <= 40 <= <NonRepeatingPart>. length <= 41 <= <RepeatingPart>. length <= 4"
    ]
},
{
    "id": "975",
    "title": "Odd Even Jump",
    "question": "You are given an integer array arr.\n From some starting index, you can make a series of jumps.\n The (1st, 3rd, 5th, .\n.\n.\n) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, .\n.\n.\n) jumps in the series are called even-numbered jumps.\n Note that the jumps are numbered, not the indices.\nYou may jump forward from index i to index j (with i < j) in the following way:A starting index is good if, starting from that index, you can reach the end of the array (index arr.\nlength - 1) by jumping some number of times (possibly 0 or more than once).\nReturn the number of good starting indices.",
    "examples": [
        "Input: arr = [10,13,12,14,15]",
        "Output: 2",
        "Explanation: ",
        "From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.",
        "From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.",
        "From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.",
        "From starting index i = 4, we have reached the end already.",
        "In total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of",
        "jumps.",
        "Input: arr = [2,3,1,1,4]",
        "Output: 3",
        "Explanation: ",
        "From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:",
        "During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].",
        "During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3",
        "During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].",
        "We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.",
        "In a similar manner, we can deduce that:",
        "From starting index i = 1, we jump to i = 4, so we reach the end.",
        "From starting index i = 2, we jump to i = 3, and then we can't jump anymore.",
        "From starting index i = 3, we jump to i = 4, so we reach the end.",
        "From starting index i = 4, we are already at the end.",
        "In total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some",
        "number of jumps.",
        "Input: arr = [5,1,3,4,2]",
        "Output: 3",
        "Explanation: We can reach the end from starting indices 1, 2, and 4.",
        ""
    ],
    "constraints": [
        "During odd-numbered jumps (i. e.",
        " jumps 1",
        " 3",
        " 5",
        " ...)",
        " you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. If there are multiple such indices j",
        " you can only jump to the smallest such index j. During even-numbered jumps (i. e.",
        " jumps 2",
        " 4",
        " 6",
        " ...)",
        " you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. If there are multiple such indices j",
        " you can only jump to the smallest such index j. It may be the case that for some index i",
        " there are no legal jumps. 1 <= arr. length <= 2 * 1040 <= arr[i] < 105"
    ]
},
{
    "id": "980",
    "title": "Unique Paths III",
    "question": "You are given an m x n integer array grid where grid[i][j] could be:Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.",
    "examples": [
        "Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]",
        "Output: 2",
        "Explanation: We have the following two paths: ",
        "1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)",
        "2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)",
        "Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]",
        "Output: 4",
        "Explanation: We have the following four paths: ",
        "1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)",
        "2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)",
        "3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)",
        "4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)",
        "Input: grid = [[0,1],[2,0]]",
        "Output: 0",
        "Explanation: There is no path that walks over every empty square exactly once.",
        "Note that the starting and ending square can be anywhere in the grid.",
        ""
    ],
    "constraints": [
        "1 representing the starting square. There is exactly one starting square. 2 representing the ending square. There is exactly one ending square. 0 representing empty squares we can walk over.-1 representing obstacles that we cannot walk over. m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 201 <= m * n <= 20-1 <= grid[i][j] <= 2There is exactly one starting cell and one ending cell."
    ]
},
{
    "id": "982",
    "title": "Triples with Bitwise AND Equal To Zero",
    "question": "Given an integer array nums, return the number of AND triples.\nAn AND triple is a triple of indices (i, j, k) such that:",
    "examples": [
        "Input: nums = [2,1,3]",
        "Output: 12",
        "Explanation: We could choose the following i, j, k triples:",
        "(i=0, j=0, k=1) : 2 & 2 & 1",
        "(i=0, j=1, k=0) : 2 & 1 & 2",
        "(i=0, j=1, k=1) : 2 & 1 & 1",
        "(i=0, j=1, k=2) : 2 & 1 & 3",
        "(i=0, j=2, k=1) : 2 & 3 & 1",
        "(i=1, j=0, k=0) : 1 & 2 & 2",
        "(i=1, j=0, k=1) : 1 & 2 & 1",
        "(i=1, j=0, k=2) : 1 & 2 & 3",
        "(i=1, j=1, k=0) : 1 & 1 & 2",
        "(i=1, j=2, k=0) : 1 & 3 & 2",
        "(i=2, j=0, k=1) : 3 & 2 & 1",
        "(i=2, j=1, k=0) : 3 & 1 & 2",
        "Input: nums = [0,0,0]",
        "Output: 27",
        ""
    ],
    "constraints": [
        "0 <= i < nums. length0 <= j < nums. length0 <= k < nums. lengthnums[i] & nums[j] & nums[k] == 0",
        " where & represents the bitwise-AND operator. 1 <= nums. length <= 10000 <= nums[i] < 216"
    ]
},
{
    "id": "987",
    "title": "Vertical Order Traversal of a Binary Tree",
    "question": "Given the root of a binary tree, calculate the vertical order traversal of the binary tree.\nFor each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively.\n The root of the tree is at (0, 0).\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column.\n There may be multiple nodes in the same row and same column.\n In such a case, sort these nodes by their values.\nReturn the vertical order traversal of the binary tree.",
    "examples": [
        "Input: root = [3,9,20,null,null,15,7]",
        "Output: [[9],[3,15],[20],[7]]",
        "Explanation:",
        "Column -1: Only node 9 is in this column.",
        "Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.",
        "Column 1: Only node 20 is in this column.",
        "Column 2: Only node 7 is in this column. Input: root = [1,2,3,4,5,6,7]",
        "Output: [[4],[2],[1,5,6],[3],[7]]",
        "Explanation:",
        "Column -2: Only node 4 is in this column.",
        "Column -1: Only node 2 is in this column.",
        "Column 0: Nodes 1, 5, and 6 are in this column.",
        "          1 is at the top, so it comes first.",
        "          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.",
        "Column 1: Only node 3 is in this column.",
        "Column 2: Only node 7 is in this column.",
        "Input: root = [1,2,3,4,6,5,7]",
        "Output: [[4],[2],[1,5,6],[3],[7]]",
        "Explanation:",
        "This case is the exact same as example 2, but with nodes 5 and 6 swapped.",
        "Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 1000]. 0 <= Node. val <= 1000"
    ]
},
{
    "id": "992",
    "title": "Subarrays with K Different Integers",
    "question": "Given an integer array nums and an integer k, return the number of good subarrays of nums.\nA good array is an array where the number of different integers in that array is exactly k.\nA subarray is a contiguous part of an array.",
    "examples": [
        "Input: nums = [1,2,1,2,3], k = 2",
        "Output: 7",
        "Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]",
        "Input: nums = [1,2,1,3,4], k = 3",
        "Output: 3",
        "Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].",
        ""
    ],
    "constraints": [
        "For example",
        " [1",
        "2",
        "3",
        "1",
        "2] has 3 different integers: 1",
        " 2",
        " and 3. 1 <= nums. length <= 2 * 1041 <= nums[i]",
        " k <= nums. length"
    ]
},
{
    "id": "995",
    "title": "Minimum Number of K Consecutive Bit Flips",
    "question": "You are given a binary array nums and an integer k.\nA k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.\nReturn the minimum number of k-bit flips required so that there is no 0 in the array.\n If it is not possible, return -1.\nA subarray is a contiguous part of an array.",
    "examples": [
        "Input: nums = [0,1,0], k = 1",
        "Output: 2",
        "Explanation: Flip nums[0], then flip nums[2].",
        "Input: nums = [1,1,0], k = 2",
        "Output: -1",
        "Explanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].",
        "Input: nums = [0,0,0,1,0,1,1,0], k = 3",
        "Output: 3",
        "Explanation: ",
        "Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]",
        "Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]",
        "Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 3 * 1041 <= k <= nums. length"
    ]
},
{
    "id": "996",
    "title": "Number of Squareful Arrays",
    "question": "An array is squareful if the sum of every pair of adjacent elements is a perfect square.\nGiven an integer array nums, return the number of permutations of nums that are squareful.\nTwo permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].",
    "examples": [
        "Input: nums = [1,17,8]",
        "Output: 2",
        "Explanation: [1,8,17] and [17,8,1] are the valid permutations.",
        "Input: nums = [2,2,2]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 120 <= nums[i] <= 109"
    ]
},
{
    "id": "1000",
    "title": "Minimum Cost to Merge Stones",
    "question": "There are n piles of stones arranged in a row.\n The ith pile has stones[i] stones.\nA move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.\nReturn the minimum cost to merge all piles of stones into one pile.\n If it is impossible, return -1.",
    "examples": [
        "Input: stones = [3,2,4,1], k = 2",
        "Output: 20",
        "Explanation: We start with [3, 2, 4, 1].",
        "We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].",
        "We merge [4, 1] for a cost of 5, and we are left with [5, 5].",
        "We merge [5, 5] for a cost of 10, and we are left with [10].",
        "The total cost was 20, and this is the minimum possible.",
        "Input: stones = [3,2,4,1], k = 3",
        "Output: -1",
        "Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.",
        "Input: stones = [3,5,1,2,6], k = 3",
        "Output: 25",
        "Explanation: We start with [3, 5, 1, 2, 6].",
        "We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].",
        "We merge [3, 8, 6] for a cost of 17, and we are left with [17].",
        "The total cost was 25, and this is the minimum possible.",
        ""
    ],
    "constraints": [
        "n == stones. length1 <= n <= 301 <= stones[i] <= 1002 <= k <= 30"
    ]
},
{
    "id": "1001",
    "title": "Grid Illumination",
    "question": "There is a 2D grid of size n x n where each cell of this grid has a lamp that is initially turned off.\nYou are given a 2D array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on.\n Even if the same lamp is listed more than once, it is turned on.\nWhen a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.\nYou are also given another 2D array queries, where queries[j] = [rowj, colj].\n For the jth query, determine whether grid[rowj][colj] is illuminated or not.\n After answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist.\n A lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj].\nReturn an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.",
    "examples": [
        "Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]",
        "Output: [1,0]",
        "Explanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].",
        "The 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.",
        "",
        "The 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.",
        "",
        "Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]",
        "Output: [1,1]",
        "Input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]",
        "Output: [1,1,0]",
        ""
    ],
    "constraints": [
        "1 <= n <= 1090 <= lamps. length <= 200000 <= queries. length <= 20000lamps[i]. length == 20 <= rowi",
        " coli < nqueries[j]. length == 20 <= rowj",
        " colj < n"
    ]
},
{
    "id": "653",
    "title": "Two Sum IV - Input is a BST",
    "question": "Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.",
    "examples": [
        "Input: root = [5,3,6,2,4,null,7], k = 9",
        "Output: true",
        "Input: root = [5,3,6,2,4,null,7], k = 28",
        "Output: false",
        "Input: root = [2,1,3], k = 4",
        "Output: true",
        "Input: root = [2,1,3], k = 1",
        "Output: false",
        "Input: root = [2,1,3], k = 3",
        "Output: true",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104].-104 <= Node. val <= 104root is guaranteed to be a valid binary search tree.-105 <= k <= 105"
    ]
},
{
    "id": "1012",
    "title": "Numbers With Repeated Digits",
    "question": "Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.",
    "examples": [
        "Input: n = 20",
        "Output: 1",
        "Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11.",
        "Input: n = 100",
        "Output: 10",
        "Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.",
        "Input: n = 1000",
        "Output: 262",
        ""
    ],
    "constraints": [
        "1 <= n <= 109"
    ]
},
{
    "id": "1028",
    "title": "Recover a Tree From Preorder Traversal",
    "question": "We run a preorder depth-first search (DFS) on the root of a binary tree.\nAt each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.\n  If the depth of a node is D, the depth of its immediate child is D + 1.\n  The depth of the root node is 0.\nIf a node has only one child, that child is guaranteed to be the left child.\nGiven the output traversal of this traversal, recover the tree and return its root.",
    "examples": [
        "Input: traversal = \"1-2--3--4-5--6--7\"",
        "Output: [1,2,5,3,4,6,7]",
        "Input: traversal = \"1-2--3---4-5--6---7\"",
        "Output: [1,2,5,3,null,6,null,4,null,7]",
        "Input: traversal = \"1-401--349---90--88\"",
        "Output: [1,401,null,349,88,90]",
        ""
    ],
    "constraints": [
        "The number of nodes in the original tree is in the range [1",
        " 1000]. 1 <= Node. val <= 109"
    ]
},
{
    "id": "1032",
    "title": "Stream of Characters",
    "question": "Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words.\nFor example, if words = [\"abc\", \"xyz\"] and the stream added the four characters (one by one) 'a', 'x', 'y', and 'z', your algorithm should detect that the suffix \"xyz\" of the characters \"axyz\" matches \"xyz\" from words.\nImplement the StreamChecker class:",
    "examples": [
        "Input",
        "[\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"]",
        "[[[\"cd\", \"f\", \"kl\"]], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"], [\"f\"], [\"g\"], [\"h\"], [\"i\"], [\"j\"], [\"k\"], [\"l\"]]",
        "Output",
        "[null, false, false, false, true, false, true, false, false, false, false, false, true]",
        "",
        "Explanation",
        "StreamChecker streamChecker = new StreamChecker([\"cd\", \"f\", \"kl\"]);",
        "streamChecker. query(\"a\"); // return False",
        "streamChecker. query(\"b\"); // return False",
        "streamChecker. query(\"c\"); // return False",
        "streamChecker. query(\"d\"); // return True, because 'cd' is in the wordlist",
        "streamChecker. query(\"e\"); // return False",
        "streamChecker. query(\"f\"); // return True, because 'f' is in the wordlist",
        "streamChecker. query(\"g\"); // return False",
        "streamChecker. query(\"h\"); // return False",
        "streamChecker. query(\"i\"); // return False",
        "streamChecker. query(\"j\"); // return False",
        "streamChecker. query(\"k\"); // return False",
        "streamChecker. query(\"l\"); // return True, because 'kl' is in the wordlist",
        ""
    ],
    "constraints": [
        "StreamChecker(String[] words) Initializes the object with the strings array words. boolean query(char letter) Accepts a new character from the stream and returns true if any non-empty suffix from the stream forms a word that is in words. 1 <= words. length <= 20001 <= words[i]. length <= 2000words[i] consists of lowercase English letters. letter is a lowercase English letter. At most 4 * 104 calls will be made to query."
    ]
},
{
    "id": "1036",
    "title": "Escape a Large Maze",
    "question": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are (x, y).\nWe start at the source = [sx, sy] square and want to reach the target = [tx, ty] square.\n There is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi).\nEach move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares.\n We are also not allowed to walk outside of the grid.\nReturn true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.",
    "examples": [
        "Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]",
        "Output: false",
        "Explanation: The target square is inaccessible starting from the source square because we cannot move.",
        "We cannot move north or east because those squares are blocked.",
        "We cannot move south or west because we cannot go outside of the grid.",
        "Input: blocked = [], source = [0,0], target = [999999,999999]",
        "Output: true",
        "Explanation: Because there are no blocked cells, it is possible to reach the target square.",
        ""
    ],
    "constraints": [
        "0 <= blocked. length <= 200blocked[i]. length == 20 <= xi",
        " yi < 106source. length == target. length == 20 <= sx",
        " sy",
        " tx",
        " ty < 106source != targetIt is guaranteed that source and target are not blocked."
    ]
},
{
    "id": "1044",
    "title": "Longest Duplicate Substring",
    "question": "Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times.\n The occurrences may overlap.\nReturn any duplicated substring that has the longest possible length.\n If s does not have a duplicated substring, the answer is \"\".",
    "examples": [
        "Input: s = \"banana\"",
        "Output: \"ana\"",
        "Input: s = \"abcd\"",
        "Output: \"\"",
        ""
    ],
    "constraints": [
        "2 <= s. length <= 3 * 104s consists of lowercase English letters."
    ]
},
{
    "id": "1074",
    "title": "Number of Submatrices That Sum to Target",
    "question": "Given a matrix and a target, return the number of non-empty submatrices that sum to target.\nA submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.\nTwo submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.",
    "examples": [
        "Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0",
        "Output: 4",
        "Explanation: The four 1x1 submatrices that only contain 0.",
        "Input: matrix = [[1,-1],[-1,1]], target = 0",
        "Output: 5",
        "Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.",
        "Input: matrix = [[904]], target = 0",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= matrix. length <= 1001 <= matrix[0]. length <= 100-1000 <= matrix[i] <= 1000-10^8 <= target <= 10^8"
    ]
},
{
    "id": "1092",
    "title": "Shortest Common Supersequence",
    "question": "Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.\n If there are multiple valid strings, return any of them.\nA string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.",
    "examples": [
        "Input: str1 = \"abac\", str2 = \"cab\"",
        "Output: \"cabac\"",
        "Explanation: ",
        "str1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".",
        "str2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".",
        "The answer provided is the shortest such string that satisfies these properties.",
        "Input: str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"",
        "Output: \"aaaaaaaa\"",
        ""
    ],
    "constraints": [
        "1 <= str1. length",
        " str2. length <= 1000str1 and str2 consist of lowercase English letters."
    ]
},
{
    "id": "1095",
    "title": "Find in Mountain Array",
    "question": "(This problem is an interactive problem.\n)You may recall that an array A is a mountain array if and only if:Given a mountain array mountainArr, return the minimum index such that mountainArr.\nget(index) == target.\n  If such an index doesn't exist, return -1.\nYou can't access the mountain array directly.\n  You may only access the array using a MountainArray interface:Submissions making more than 100 calls to MountainArray.\nget will be judged Wrong Answer.\n  Also, any solutions that attempt to circumvent the judge will result in disqualification.",
    "examples": [
        "Input: array = [1,2,3,4,5,3,1], target = 3",
        "Output: 2",
        "Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2. Input: array = [0,1,2,4,2,1], target = 3",
        "Output: -1",
        "Explanation: 3 does not exist in the array, so we return -1.",
        ""
    ],
    "constraints": [
        "A. length >= 3There exists some i with 0 < i < A. length - 1 such that:\n\t\nA[0] < A[1] < ... A[i-1] < A[i]\nA[i] > A[i+1] > ... > A[A. length - 1]\n\nA[0] < A[1] < ... A[i-1] < A[i]A[i] > A[i+1] > ... > A[A. length - 1]MountainArray. get(k) returns the element of the array at index k (0-indexed). MountainArray. length() returns the length of the array. 3 <= mountain_arr. length() <= 100000 <= target <= 10^90 <= mountain_arr. get(index) <= 10^9"
    ]
},
{
    "id": "1096",
    "title": "Brace Expansion II",
    "question": "Under the grammar given below, strings can represent a set of lowercase words.\n Let's use R(expr) to denote the set of words the expression represents.\nGrammar can best be understood through simple examples:Formally, the three rules for our grammar:Given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.",
    "examples": [
        "Input: expression = \"{a,b}{c,{d,e}}\"",
        "Output: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]",
        "Input: expression = \"{{a,z},a{b,c},{ab,z}}\"",
        "Output: [\"a\",\"ab\",\"ac\",\"z\"]",
        "Explanation: Each distinct word is written only once in the final answer.",
        ""
    ],
    "constraints": [
        "Single letters represent a singleton set containing that word.\n\t\nR(\"a\") = {\"a\"}\nR(\"w\") = {\"w\"}\n\nR(\"a\") = {\"a\"}R(\"w\") = {\"w\"}When we take a comma-delimited list of two or more expressions",
        " we take the union of possibilities.\n\t\nR(\"{a",
        "b",
        "c}\") = {\"a\"",
        "\"b\"",
        "\"c\"}\nR(\"{{a",
        "b}",
        "{b",
        "c}}\") = {\"a\"",
        "\"b\"",
        "\"c\"} (notice the final set only contains each word at most once)\n\nR(\"{a",
        "b",
        "c}\") = {\"a\"",
        "\"b\"",
        "\"c\"}R(\"{{a",
        "b}",
        "{b",
        "c}}\") = {\"a\"",
        "\"b\"",
        "\"c\"} (notice the final set only contains each word at most once)When we concatenate two expressions",
        " we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n\t\nR(\"{a",
        "b}{c",
        "d}\") = {\"ac\"",
        "\"ad\"",
        "\"bc\"",
        "\"bd\"}\nR(\"a{b",
        "c}{d",
        "e}f{g",
        "h}\") = {\"abdfg\"",
        " \"abdfh\"",
        " \"abefg\"",
        " \"abefh\"",
        " \"acdfg\"",
        " \"acdfh\"",
        " \"acefg\"",
        " \"acefh\"}\n\nR(\"{a",
        "b}{c",
        "d}\") = {\"ac\"",
        "\"ad\"",
        "\"bc\"",
        "\"bd\"}R(\"a{b",
        "c}{d",
        "e}f{g",
        "h}\") = {\"abdfg\"",
        " \"abdfh\"",
        " \"abefg\"",
        " \"abefh\"",
        " \"acdfg\"",
        " \"acdfh\"",
        " \"acefg\"",
        " \"acefh\"}For every lowercase letter x",
        " we have R(x) = {x}. For expressions e1",
        " e2",
        " ... ",
        " ek with k >= 2",
        " we have R({e1",
        " e2",
        " ...}) = R(e1) ∪ R(e2) ∪ ... For expressions e1 and e2",
        " we have R(e1 + e2) = {a + b for (a",
        " b) in R(e1) × R(e2)}",
        " where + denotes concatenation",
        " and × denotes the cartesian product. 1 <= expression. length <= 60expression[i] consists of '{'",
        " '}'",
        " '",
        "'or lowercase English letters. The given expression represents a set of words based on the grammar given in the description."
    ]
},
{
    "id": "1106",
    "title": "Parsing A Boolean Expression",
    "question": "Return the result of evaluating a given boolean expression, represented as a string.\nAn expression can either be:",
    "examples": [
        "Input: expression = \"!(f)\"",
        "Output: true",
        "Input: expression = \"|(f,t)\"",
        "Output: true",
        "Input: expression = \"&(t,f)\"",
        "Output: false",
        "Input: expression = \"|(&(t,f,t),!(t))\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "\"t\"",
        " evaluating to True;\"f\"",
        " evaluating to False;\"!(expr)\"",
        " evaluating to the logical NOT of the inner expression expr;\"&(expr1",
        "expr2",
        "...)\"",
        " evaluating to the logical AND of 2 or more inner expressions expr1",
        " expr2",
        " ...;\"|(expr1",
        "expr2",
        "...)\"",
        " evaluating to the logical OR of 2 or more inner expressions expr1",
        " expr2",
        " ... 1 <= expression. length <= 20000expression[i] consists of characters in {'('",
        " ')'",
        " '&'",
        " '|'",
        " '!'",
        " 't'",
        " 'f'",
        " '",
        "'}. expression is a valid expression representing a boolean",
        " as given in the description."
    ]
},
{
    "id": "657",
    "title": "Robot Return to Origin",
    "question": "There is a robot starting at the position (0, 0), the origin, on a 2D plane.\n Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\nYou are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move.\n Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).\nReturn true if the robot returns to the origin after it finishes all of its moves, or false otherwise.\nNote: The way that the robot is \"facing\" is irrelevant.\n 'R' will always make the robot move to the right once, 'L' will always make it move left, etc.\n Also, assume that the magnitude of the robot's movement is the same for each move.",
    "examples": [
        "Input: moves = \"UD\"",
        "Output: true",
        "Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.",
        "Input: moves = \"LL\"",
        "Output: false",
        "Explanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.",
        "Input: moves = \"RRDD\"",
        "Output: false",
        "Input: moves = \"LDRRLRUULR\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= moves. length <= 2 * 104moves only contains the characters 'U'",
        " 'D'",
        " 'L' and 'R'."
    ]
},
{
    "id": "1125",
    "title": "Smallest Sufficient Team",
    "question": "In a project, you have a list of required skills req_skills, and a list of people.\n The ith person people[i] contains a list of skills that the person has.\nConsider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill.\n We can represent these teams by the index of each person.\nReturn any sufficient team of the smallest possible size, represented by the index of each person.\n You may return the answer in any order.\nIt is guaranteed an answer exists.",
    "examples": [
        "Input: req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]",
        "Output: [0,2]",
        "Input: req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]",
        "Output: [1,2]",
        ""
    ],
    "constraints": [
        "For example",
        " team = [0",
        " 1",
        " 3] represents the people with skills people[0]",
        " people[1]",
        " and people[3]. 1 <= req_skills. length <= 161 <= req_skills[i]. length <= 16req_skills[i] consists of lowercase English letters. All the strings of req_skills are unique. 1 <= people. length <= 600 <= people[i]. length <= 161 <= people[i][j]. length <= 16people[i][j] consists of lowercase English letters. All the strings of people[i] are unique. Every skill in people[i] is a skill in req_skills. It is guaranteed a sufficient team exists."
    ]
},
{
    "id": "1147",
    "title": "Longest Chunked Palindrome Decomposition",
    "question": "You are given a string text.\n You should split it to k substrings (subtext1, subtext2, .\n.\n.\n, subtextk) such that:Return the largest possible value of k.",
    "examples": [
        "Input: text = \"ghiabcdefhelloadamhelloabcdefghi\"",
        "Output: 7",
        "Explanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".",
        "Input: text = \"merchant\"",
        "Output: 1",
        "Explanation: We can split the string on \"(merchant)\".",
        "Input: text = \"antaprezatepzapreanta\"",
        "Output: 11",
        "Explanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\".",
        "Input: text = \"aaa\"",
        "Output: 3",
        "Explanation: We can split the string on \"(a)(a)(a)\".",
        ""
    ],
    "constraints": [
        "subtexti is a non-empty string. The concatenation of all the substrings is equal to text (i. e.",
        " subtext1 + subtext2 + ... + subtextk == text). subtexti == subtextk - i + 1 for all valid values of i (i. e.",
        " 1 <= i <= k). 1 <= text. length <= 1000text consists only of lowercase English characters."
    ]
},
{
    "id": "1157",
    "title": "Online Majority Element In Subarray",
    "question": "Design a data structure that efficiently finds the majority element of a given subarray.\nThe majority element of a subarray is an element that occurs threshold times or more in the subarray.\nImplementing the MajorityChecker class:",
    "examples": [
        "Input",
        "[\"MajorityChecker\", \"query\", \"query\", \"query\"]",
        "[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]",
        "Output",
        "[null, 1, -1, 2]",
        "",
        "Explanation",
        "MajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);",
        "majorityChecker. query(0, 5, 4); // return 1",
        "majorityChecker. query(0, 3, 3); // return -1",
        "majorityChecker. query(2, 3, 2); // return 2",
        ""
    ],
    "constraints": [
        "MajorityChecker(int[] arr) Initializes the instance of the class with the given array arr. int query(int left",
        " int right",
        " int threshold) returns the element in the subarray arr[left... right] that occurs at least threshold times",
        " or -1 if no such element exists. 1 <= arr. length <= 2 * 1041 <= arr[i] <= 2 * 1040 <= left <= right < arr. lengththreshold <= right - left + 12 * threshold > right - left + 1At most 104 calls will be made to query."
    ]
},
{
    "id": "1163",
    "title": "Last Substring in Lexicographical Order",
    "question": "Given a string s, return the last substring of s in lexicographical order.",
    "examples": [
        "Input: s = \"abab\"",
        "Output: \"bab\"",
        "Explanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".",
        "Input: s = \"leetcode\"",
        "Output: \"tcode\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 4 * 105s contains only lowercase English letters."
    ]
},
{
    "id": "1172",
    "title": "Dinner Plate Stacks",
    "question": "You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.\nImplement the DinnerPlates class:",
    "examples": [
        "Input",
        "[\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"]",
        "[[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []]",
        "Output",
        "[null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1]",
        "",
        "Explanation: ",
        "DinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2",
        "D. push(1);",
        "D. push(2);",
        "D. push(3);",
        "D. push(4);",
        "D. push(5);         // The stacks are now:  2  4",
        "                                           1  3  5",
        "                                           ﹈ ﹈ ﹈",
        "D. popAtStack(0);   // Returns 2.  The stacks are now:     4",
        "                                                       1  3  5",
        "                                                       ﹈ ﹈ ﹈",
        "D. push(20);        // The stacks are now: 20  4",
        "                                           1  3  5",
        "                                           ﹈ ﹈ ﹈",
        "D. push(21);        // The stacks are now: 20  4 21",
        "                                           1  3  5",
        "                                           ﹈ ﹈ ﹈",
        "D. popAtStack(0);   // Returns 20.  The stacks are now:     4 21",
        "                                                        1  3  5",
        "                                                        ﹈ ﹈ ﹈",
        "D. popAtStack(2);   // Returns 21.  The stacks are now:     4",
        "                                                        1  3  5",
        "                                                        ﹈ ﹈ ﹈ ",
        "D. pop()            // Returns 5.  The stacks are now:      4",
        "                                                        1  3 ",
        "                                                        ﹈ ﹈  ",
        "D. pop()            // Returns 4.  The stacks are now:   1  3 ",
        "                                                        ﹈ ﹈   ",
        "D. pop()            // Returns 3.  The stacks are now:   1 ",
        "                                                        ﹈   ",
        "D. pop()            // Returns 1.  There are no stacks.",
        "D. pop()            // Returns -1.  There are still no stacks.",
        ""
    ],
    "constraints": [
        "DinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks capacity. void push(int val) Pushes the given integer val into the leftmost stack with a size less than capacity. int pop() Returns the value at the top of the rightmost non-empty stack and removes it from that stack",
        " and returns -1 if all the stacks are empty. int popAtStack(int index) Returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty. 1 <= capacity <= 2 * 1041 <= val <= 2 * 1040 <= index <= 105At most 2 * 105 calls will be made to push",
        " pop",
        " and popAtStack."
    ]
},
{
    "id": "1178",
    "title": "Number of Valid Words for Each Puzzle",
    "question": "",
    "examples": [
        "Input: words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]",
        "Output: [1,1,3,2,4,0]",
        "Explanation: ",
        "1 valid word for \"aboveyz\" : \"aaaa\" ",
        "1 valid word for \"abrodyz\" : \"aaaa\"",
        "3 valid words for \"abslute\" : \"aaaa\", \"asas\", \"able\"",
        "2 valid words for \"absoryz\" : \"aaaa\", \"asas\"",
        "4 valid words for \"actresz\" : \"aaaa\", \"asas\", \"actt\", \"access\"",
        "There are no valid words for \"gaswxyz\" cause none of the words in the list contains letter 'g'.",
        "Input: words = [\"apple\",\"pleas\",\"please\"], puzzles = [\"aelwxyz\",\"aelpxyz\",\"aelpsxy\",\"saelpxy\",\"xaelpsy\"]",
        "Output: [0,1,3,2,0]",
        ""
    ],
    "constraints": [
        "word contains the first letter of puzzle. For each letter in word",
        " that letter is in puzzle.\n\t\nFor example",
        " if the puzzle is \"abcdefg\"",
        " then valid words are \"faced\"",
        " \"cabbage\"",
        " and \"baggage\"",
        " while\ninvalid words are \"beefed\" (does not include 'a') and \"based\" (includes 's' which is not in the puzzle).\n\nFor example",
        " if the puzzle is \"abcdefg\"",
        " then valid words are \"faced\"",
        " \"cabbage\"",
        " and \"baggage\"",
        " whileinvalid words are \"beefed\" (does not include 'a') and \"based\" (includes 's' which is not in the puzzle). 1 <= words. length <= 1054 <= words[i]. length <= 501 <= puzzles. length <= 104puzzles[i]. length == 7words[i] and puzzles[i] consist of lowercase English letters. Each puzzles[i] does not contain repeated characters."
    ]
},
{
    "id": "1187",
    "title": "Make Array Strictly Increasing",
    "question": "Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.\nIn one operation, you can choose two indices 0 <= i < arr1.\nlength and 0 <= j < arr2.\nlength and do the assignment arr1[i] = arr2[j].\nIf there is no way to make arr1 strictly increasing, return -1.",
    "examples": [
        "Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]",
        "Output: 1",
        "Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].",
        "Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]",
        "Output: 2",
        "Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].",
        "Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]",
        "Output: -1",
        "Explanation: You can't make arr1 strictly increasing."
    ],
    "constraints": [
        "1 <= arr1. length",
        " arr2. length <= 20000 <= arr1[i]",
        " arr2[i] <= 10^9"
    ]
},
{
    "id": "1192",
    "title": "Critical Connections in a Network",
    "question": "There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi.\n Any server can reach other servers directly or indirectly through the network.\nA critical connection is a connection that, if removed, will make some servers unable to reach some other server.\nReturn all critical connections in the network in any order.",
    "examples": [
        "Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]",
        "Output: [[1,3]]",
        "Explanation: [[3,1]] is also accepted.",
        "Input: n = 2, connections = [[0,1]]",
        "Output: [[0,1]]",
        ""
    ],
    "constraints": [
        "2 <= n <= 105n - 1 <= connections. length <= 1050 <= ai",
        " bi <= n - 1ai != biThere are no repeated connections."
    ]
},
{
    "id": "1203",
    "title": "Sort Items by Groups Respecting Dependencies",
    "question": "There are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group.\n The items and the groups are zero indexed.\n A group can have no item belonging to it.\nReturn a sorted list of the items such that:Return any solution if there is more than one solution and return an empty list if there is no solution.",
    "examples": [
        "Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]",
        "Output: [6,3,4,1,5,2,0,7]",
        "Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]",
        "Output: []",
        "Explanation: This is the same as example 1 except that 4 needs to be before 6 in the sorted list.",
        ""
    ],
    "constraints": [
        "The items that belong to the same group are next to each other in the sorted list. There are some relations between these items where beforeItems[i] is a list containing all the items that should come before the i-th item in the sorted array (to the left of the i-th item). 1 <= m <= n <= 3 * 104group. length == beforeItems. length == n-1 <= group[i] <= m - 10 <= beforeItems[i]. length <= n - 10 <= beforeItems[i][j] <= n - 1i != beforeItems[i][j]beforeItems[i] does not contain duplicates elements."
    ]
},
{
    "id": "1206",
    "title": "Design Skiplist",
    "question": "Design a Skiplist without using any built-in libraries.\nA skiplist is a data structure that takes O(log(n)) time to add, erase and search.\n Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists.\nFor example, we have a Skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it.\n The Skiplist works this way:\nArtyom Kalinin [CC BY-SA 3.\n0], via Wikimedia CommonsYou can see there are many layers in the Skiplist.\n Each layer is a sorted linked list.\n With the help of the top layers, add, erase and search can be faster than O(n).\n It can be proven that the average time complexity for each operation is O(log(n)) and space complexity is O(n).\nSee more about Skiplist: https://en.\nwikipedia.\norg/wiki/Skip_listImplement the Skiplist class:Note that duplicates may exist in the Skiplist, your code needs to handle this situation.",
    "examples": [
        "Input",
        "[\"Skiplist\", \"add\", \"add\", \"add\", \"search\", \"add\", \"search\", \"erase\", \"erase\", \"search\"]",
        "[[], [1], [2], [3], [0], [4], [1], [0], [1], [1]]",
        "Output",
        "[null, null, null, null, false, null, true, false, true, false]",
        "",
        "Explanation",
        "Skiplist skiplist = new Skiplist();",
        "skiplist. add(1);",
        "skiplist. add(2);",
        "skiplist. add(3);",
        "skiplist. search(0); // return False",
        "skiplist. add(4);",
        "skiplist. search(1); // return True",
        "skiplist. erase(0);  // return False, 0 is not in skiplist.",
        "skiplist. erase(1);  // return True",
        "skiplist. search(1); // return False, 1 has already been erased."
    ],
    "constraints": [
        "Skiplist() Initializes the object of the skiplist. bool search(int target) Returns true if the integer target exists in the Skiplist or false otherwise. void add(int num) Inserts the value num into the SkipList. bool erase(int num) Removes the value num from the Skiplist and returns true. If num does not exist in the Skiplist",
        " do nothing and return false. If there exist multiple num values",
        " removing any one of them is fine. 0 <= num",
        " target <= 2 * 104At most 5 * 104 calls will be made to search",
        " add",
        " and erase."
    ]
},
{
    "id": "661",
    "title": "Image Smoother",
    "question": "An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.\ne.\n, the average of the nine cells in the blue smoother).\n If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.\ne.\n, the average of the four cells in the red smoother).\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.",
    "examples": [
        "Input: img = [[1,1,1],[1,0,1],[1,1,1]]",
        "Output: [[0,0,0],[0,0,0],[0,0,0]]",
        "Explanation:",
        "For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0. 75) = 0",
        "For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0. 83333333) = 0",
        "For the point (1,1): floor(8/9) = floor(0. 88888889) = 0",
        "Input: img = [[100,200,100],[200,50,200],[100,200,100]]",
        "Output: [[137,141,137],[141,138,141],[137,141,137]]",
        "Explanation:",
        "For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137. 5) = 137",
        "For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141. 666667) = 141",
        "For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138. 888889) = 138",
        ""
    ],
    "constraints": [
        "m == img. lengthn == img[i]. length1 <= m",
        " n <= 2000 <= img[i][j] <= 255"
    ]
},
{
    "id": "1210",
    "title": "Minimum Moves to Reach Target with Rotations",
    "question": "In an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1).\n The grid has empty cells represented by zeros and blocked cells represented by ones.\n The snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1).\nIn one move the snake can:Return the minimum number of moves to reach the target.\nIf there is no way to reach the target, return -1.",
    "examples": [
        "Input: grid = [[0,0,0,0,0,1],",
        "               [1,1,0,0,1,0],",
        "               [0,0,0,0,1,1],",
        "               [0,0,1,0,1,0],",
        "               [0,1,1,0,0,0],",
        "               [0,1,1,0,0,0]]",
        "Output: 11",
        "Explanation:",
        "One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].",
        "Input: grid = [[0,0,1,1,1,1],",
        "               [0,0,0,0,1,1],",
        "               [1,1,0,0,0,1],",
        "               [1,1,1,0,0,1],",
        "               [1,1,1,0,0,1],",
        "               [1,1,1,0,0,0]]",
        "Output: 9",
        ""
    ],
    "constraints": [
        "Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is. Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is. Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from (r",
        " c) and (r",
        " c+1) to (r",
        " c) and (r+1",
        " c).\nRotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from (r",
        " c) and (r+1",
        " c) to (r",
        " c) and (r",
        " c+1).\n2 <= n <= 1000 <= grid[i][j] <= 1It is guaranteed that the snake starts at empty cells."
    ]
},
{
    "id": "1220",
    "title": "Count Vowels Permutation",
    "question": "Given an integer n, your task is to count how many strings of length n can be formed under the following rules:Since the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
        "Input: n = 1",
        "Output: 5",
        "Explanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".",
        "Input: n = 2",
        "Output: 10",
        "Explanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".",
        "Input: n = 5",
        "Output: 68"
    ],
    "constraints": [
        "Each character is a lower case vowel ('a'",
        " 'e'",
        " 'i'",
        " 'o'",
        " 'u')Each vowel 'a' may only be followed by an 'e'. Each vowel 'e' may only be followed by an 'a' or an 'i'. Each vowel 'i' may not be followed by another 'i'. Each vowel 'o' may only be followed by an 'i' or a 'u'. Each vowel 'u' may only be followed by an 'a'. 1 <= n <= 2 * 10^4"
    ]
},
{
    "id": "1223",
    "title": "Dice Roll Simulation",
    "question": "A die simulator generates a random number from 1 to 6 for each roll.\n You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times.\n Given an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls.\nTwo sequences are considered different if at least one element differs from each other.\n Since the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
        "Input: n = 2, rollMax = [1,1,2,2,2,3]",
        "Output: 34",
        "Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.",
        "Input: n = 2, rollMax = [1,1,1,1,1,1]",
        "Output: 30",
        "Input: n = 3, rollMax = [1,1,1,2,2,3]",
        "Output: 181",
        ""
    ],
    "constraints": [
        "1 <= n <= 5000rollMax. length == 61 <= rollMax[i] <= 15"
    ]
},
{
    "id": "1224",
    "title": "Maximum Equal Frequency",
    "question": "Given an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.\nIf after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).",
    "examples": [
        "Input: nums = [2,2,1,1,5,3,3,5]",
        "Output: 7",
        "Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4]=5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.",
        "Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]",
        "Output: 13",
        "Input: nums = [1,1,1,2,2,2]",
        "Output: 5",
        "Input: nums = [10,2,8,9,3,8,1,5,2,3,7,6]",
        "Output: 8",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 10^51 <= nums[i] <= 10^5"
    ]
},
{
    "id": "1235",
    "title": "Maximum Profit in Job Scheduling",
    "question": "We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\nYou're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\nIf you choose a job that ends at time X you will be able to start another job that starts at time X.",
    "examples": [
        "Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]",
        "Output: 120",
        "Explanation: The subset chosen is the first and fourth job. ",
        "Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.",
        "Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]",
        "Output: 150",
        "Explanation: The subset chosen is the first, fourth and fifth job. ",
        "Profit obtained 150 = 20 + 70 + 60.",
        "Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]",
        "Output: 6",
        ""
    ],
    "constraints": [
        "1 <= startTime. length == endTime. length == profit. length <= 5 * 1041 <= startTime[i] < endTime[i] <= 1091 <= profit[i] <= 104"
    ]
},
{
    "id": "1240",
    "title": "Tiling a Rectangle with the Fewest Squares",
    "question": "Given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.",
    "examples": [
        "Input: n = 2, m = 3",
        "Output: 3",
        "Explanation: 3 squares are necessary to cover the rectangle.",
        "2 (squares of 1x1)",
        "1 (square of 2x2)Input: n = 5, m = 8",
        "Output: 5",
        "Input: n = 11, m = 13",
        "Output: 6",
        ""
    ],
    "constraints": [
        "1 <= n",
        " m <= 13"
    ]
},
{
    "id": "1250",
    "title": "Check If It Is a Good Array",
    "question": "Given an array nums of positive integers.\n Your task is to select some subset of nums, multiply each element by an integer and add all these numbers.\n The array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand.\nReturn True if the array is good otherwise return False.",
    "examples": [
        "Input: nums = [12,5,7,23]",
        "Output: true",
        "Explanation: Pick numbers 5 and 7.",
        "5*3 + 7*(-2) = 1",
        "Input: nums = [29,6,10]",
        "Output: true",
        "Explanation: Pick numbers 29, 6 and 10.",
        "29*1 + 6*(-3) + 10*(-1) = 1",
        "Input: nums = [3,6]",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10^51 <= nums[i] <= 10^9"
    ]
},
{
    "id": "1255",
    "title": "Maximum Score Words Formed by Letters",
    "question": "Given a list of words, list of  single letters (might be repeating) and score of every character.\nReturn the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times).\nIt is not necessary to use all characters in letters and each letter can only be used once.\n Score of letters 'a', 'b', 'c', .\n.\n.\n ,'z' is given by score[0], score[1], .\n.\n.\n , score[25] respectively.",
    "examples": [
        "Input: words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]",
        "Output: 23",
        "Explanation:",
        "Score  a=1, c=9, d=5, g=3, o=2",
        "Given letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.",
        "Words \"dad\" and \"dog\" only get a score of 21. Input: words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]",
        "Output: 27",
        "Explanation:",
        "Score  a=4, b=4, c=4, x=5, z=10",
        "Given letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.",
        "Word \"xxxz\" only get a score of 25. Input: words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]",
        "Output: 0",
        "Explanation:",
        "Letter \"e\" can only be used once."
    ],
    "constraints": [
        "1 <= words. length <= 141 <= words[i]. length <= 151 <= letters. length <= 100letters[i]. length == 1score. length == 260 <= score[i] <= 10words[i]",
        " letters[i] contains only lower case English letters."
    ]
},
{
    "id": "1263",
    "title": "Minimum Moves to Move a Box to Their Target Location",
    "question": "A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.\nThe game is represented by an m x n grid of characters grid where each element is a wall, floor, or box.\nYour task is to move the box 'B' to the target position 'T' under the following rules:Return the minimum number of pushes to move the box to the target.\n If there is no way to reach the target, return -1.",
    "examples": [
        "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],",
        "               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],",
        "               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],",
        "               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],",
        "               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],",
        "               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
        "Output: 3",
        "Explanation: We return only the number of times the box is pushed. Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],",
        "               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],",
        "               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],",
        "               [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],",
        "               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],",
        "               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
        "Output: -1",
        "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],",
        "               [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],",
        "               [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],",
        "               [\"#\",\".\",\".\",\".\",\".\",\"#\"],",
        "               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],",
        "               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
        "Output: 5",
        "Explanation:  push the box down, left, left, up and up.",
        "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],",
        "               [\"#\",\"S\",\"#\",\".\",\"B\",\"T\",\"#\"],",
        "               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
        "Output: -1",
        ""
    ],
    "constraints": [
        "The character 'S' represents the player. The player can move up",
        " down",
        " left",
        " right in grid if it is a floor (empty cell). The character '.' represents the floor which means a free cell to walk. The character '#' represents the wall which means an obstacle (impossible to walk there). There is only one box 'B' and one target cell 'T' in the grid. The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push. The player cannot walk through the box. m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 20grid contains only characters '.'",
        " '#'",
        " 'S'",
        " 'T'",
        " or 'B'. There is only one character 'S'",
        " 'B'",
        " and 'T' in the grid."
    ]
},
{
    "id": "1269",
    "title": "Number of Ways to Stay in the Same Place After Some Steps",
    "question": "You have a pointer at index 0 in an array of size arrLen.\n At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\nGiven two integers steps and arrLen, return the number of ways such that your pointer still at index 0 after exactly steps steps.\n Since the answer may be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: steps = 3, arrLen = 2",
        "Output: 4",
        "Explanation: There are 4 differents ways to stay at index 0 after 3 steps.",
        "Right, Left, Stay",
        "Stay, Right, Left",
        "Right, Stay, Left",
        "Stay, Stay, Stay",
        "Input: steps = 2, arrLen = 4",
        "Output: 2",
        "Explanation: There are 2 differents ways to stay at index 0 after 2 steps",
        "Right, Left",
        "Stay, Stay",
        "Input: steps = 4, arrLen = 2",
        "Output: 8",
        ""
    ],
    "constraints": [
        "1 <= steps <= 5001 <= arrLen <= 106"
    ]
},
{
    "id": "671",
    "title": "Second Minimum Node In a Binary Tree",
    "question": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node.\n If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes.\n More formally, the property root.\nval = min(root.\nleft.\nval, root.\nright.\nval) always holds.\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\nIf no such second minimum value exists, output -1 instead.",
    "examples": [
        "Input: root = [2,2,5,null,null,5,7]",
        "Output: 5",
        "Explanation: The smallest value is 2, the second smallest value is 5.",
        "Input: root = [2,2,2]",
        "Output: -1",
        "Explanation: The smallest value is 2, but there isn't any second smallest value.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 25]. 1 <= Node. val <= 231 - 1root. val == min(root. left. val",
        " root. right. val) for each internal node of the tree."
    ]
},
{
    "id": "1278",
    "title": "Palindrome Partitioning III",
    "question": "You are given a string s containing lowercase letters and an integer k.\n You need to :Return the minimal number of characters that you need to change to divide the string.",
    "examples": [
        "Input: s = \"abc\", k = 2",
        "Output: 1",
        "Explanation: You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.",
        "Input: s = \"aabbc\", k = 3",
        "Output: 0",
        "Explanation: You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome. Input: s = \"leetcode\", k = 8",
        "Output: 0",
        ""
    ],
    "constraints": [
        "First",
        " change some characters of s to other lowercase English letters. Then divide s into k non-empty disjoint substrings such that each substring is a palindrome. 1 <= k <= s. length <= 100. s only contains lowercase English letters."
    ]
},
{
    "id": "1284",
    "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
    "question": "Given a m x n binary matrix mat.\n In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing 1 to 0 and 0 to 1).\n A pair of cells are called neighbors if they share one edge.\nReturn the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.\nA binary matrix is a matrix with all cells equal to 0 or 1 only.\nA zero matrix is a matrix with all cells equal to 0.",
    "examples": [
        "Input: mat = [[0,0],[0,1]]",
        "Output: 3",
        "Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.",
        "Input: mat = [[0]]",
        "Output: 0",
        "Explanation: Given matrix is a zero matrix. We don't need to change it.",
        "Input: mat = [[1,1,1],[1,0,1],[0,0,0]]",
        "Output: 6",
        "Input: mat = [[1,0,0],[1,0,0]]",
        "Output: -1",
        "Explanation: Given matrix can't be a zero matrix",
        ""
    ],
    "constraints": [
        "m == mat. lengthn == mat[i]. length1 <= m",
        " n <= 3mat[i][j] is either 0 or 1."
    ]
},
{
    "id": "1289",
    "title": "Minimum Falling Path Sum II",
    "question": "Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.\nA falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.",
    "examples": [
        "Input: arr = [[1,2,3],[4,5,6],[7,8,9]]",
        "Output: 13",
        "Explanation: ",
        "The possible falling paths are:",
        "[1,5,9], [1,5,7], [1,6,7], [1,6,8],",
        "[2,4,8], [2,4,9], [2,6,7], [2,6,8],",
        "[3,4,8], [3,4,9], [3,5,7], [3,5,9]",
        "The falling path with the smallest sum is [1,5,7], so the answer is 13.",
        "Input: grid = [[7]]",
        "Output: 7",
        ""
    ],
    "constraints": [
        "n == grid. length == grid[i]. length1 <= n <= 200-99 <= grid[i][j] <= 99"
    ]
},
{
    "id": "1293",
    "title": "Shortest Path in a Grid with Obstacles Elimination",
    "question": "You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle).\n You can move up, down, left, or right from and to an empty cell in one step.\nReturn the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles.\n If it is not possible to find such walk return -1.",
    "examples": [
        "Input: ",
        "grid = ",
        "[[0,0,0],",
        " [1,1,0],",
        " [0,0,0],",
        " [0,1,1],",
        " [0,0,0]], ",
        "k = 1",
        "Output: 6",
        "Explanation: ",
        "The shortest path without eliminating any obstacle is 10. ",
        "The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).",
        "Input: ",
        "grid = ",
        "[[0,1,1],",
        " [1,1,1],",
        " [1,0,0]], ",
        "k = 1",
        "Output: -1",
        "Explanation: ",
        "We need to eliminate at least two obstacles to find such a walk.",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 401 <= k <= m * ngrid[i][j] == 0 or 1grid[0][0] == grid[m - 1][n - 1] == 0"
    ]
},
{
    "id": "1298",
    "title": "Maximum Candies You Can Get from Boxes",
    "question": "Given n boxes, each box is given in the format [status, candies, keys, containedBoxes] where:You will start with some boxes given in initialBoxes array.\n You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\nReturn the maximum number of candies you can get following the rules above.",
    "examples": [
        "Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]",
        "Output: 16",
        "Explanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you don't have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.",
        "In box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.",
        "Total number of candies collected = 7 + 4 + 5 = 16 candy.",
        "Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]",
        "Output: 6",
        "Explanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.",
        "Input: status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]",
        "Output: 1",
        "Input: status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []",
        "Output: 0",
        "Input: status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]",
        "Output: 7",
        ""
    ],
    "constraints": [
        "status[i]: an integer which is 1 if box[i] is open and 0 if box[i] is closed. candies[i]: an integer representing the number of candies in box[i]. keys[i]: an array contains the indices of the boxes you can open with the key in box[i]. containedBoxes[i]: an array contains the indices of the boxes found in box[i]. 1 <= status. length <= 1000status. length == candies. length == keys. length == containedBoxes. length == nstatus[i] is 0 or 1. 1 <= candies[i] <= 10000 <= keys[i]. length <= status. length0 <= keys[i][j] < status. lengthAll values in keys[i] are unique. 0 <= containedBoxes[i]. length <= status. length0 <= containedBoxes[i][j] < status. lengthAll values in containedBoxes[i] are unique. Each box is contained in one box at most. 0 <= initialBoxes. length <= status. length0 <= initialBoxes[i] < status. length"
    ]
},
{
    "id": "1301",
    "title": "Number of Paths with Max Score",
    "question": "You are given a square board of characters.\n You can move on the board starting at the bottom right square marked with the character 'S'.\nYou need to reach the top left square marked with the character 'E'.\n The rest of the squares are labeled either with a numeric character 1, 2, .\n.\n.\n, 9 or with an obstacle 'X'.\n In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.\nIn case there is no path, return [0, 0].",
    "examples": [
        "Input: board = [\"E23\",\"2X2\",\"12S\"]",
        "Output: [7,1]",
        "Input: board = [\"E12\",\"1X1\",\"21S\"]",
        "Output: [4,2]",
        "Input: board = [\"E11\",\"XXX\",\"11S\"]",
        "Output: [0,0]",
        ""
    ],
    "constraints": [
        "2 <= board. length == board[i]. length <= 100"
    ]
},
{
    "id": "1307",
    "title": "Verbal Arithmetic Puzzle",
    "question": "Given an equation, represented by words on left side and the result on right side.\nYou need to check if the equation is solvable under the following rules:Return True if the equation is solvable otherwise return False.",
    "examples": [
        "Input: words = [\"SEND\",\"MORE\"], result = \"MONEY\"",
        "Output: true",
        "Explanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'",
        "Such that: \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652Input: words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"",
        "Output: true",
        "Explanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4",
        "Such that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214Input: words = [\"THIS\",\"IS\",\"TOO\"], result = \"FUNNY\"",
        "Output: true",
        "Input: words = [\"LEET\",\"CODE\"], result = \"POINT\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "Each character is decoded as one digit (0 - 9). Every pair of different characters they must map to different digits. Each words[i] and result are decoded as one number without leading zeros. Sum of numbers on left side (words) will equal to the number on right side (result). 2 <= words. length <= 51 <= words[i]. length",
        " result. length <= 7words[i]",
        " result contain only uppercase English letters. The number of different characters used in the expression is at most 10."
    ]
},
{
    "id": "1312",
    "title": "Minimum Insertion Steps to Make a String Palindrome",
    "question": "Given a string s.\n In one step you can insert any character at any index of the string.\nReturn the minimum number of steps to make s palindrome.\nA Palindrome String is one that reads the same backward as well as forward.",
    "examples": [
        "Input: s = \"zzazz\"",
        "Output: 0",
        "Explanation: The string \"zzazz\" is already palindrome we don't need any insertions.",
        "Input: s = \"mbadm\"",
        "Output: 2",
        "Explanation: String can be \"mbdadbm\" or \"mdbabdm\".",
        "Input: s = \"leetcode\"",
        "Output: 5",
        "Explanation: Inserting 5 characters the string becomes \"leetcodocteel\".",
        "Input: s = \"g\"",
        "Output: 0",
        "Input: s = \"no\"",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 500All characters of s are lower case English letters."
    ]
},
{
    "id": "1316",
    "title": "Distinct Echo Substrings",
    "question": "Return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.\ne.\n it can be written as a + a where a is some string).",
    "examples": [
        "Input: text = \"abcabcabc\"",
        "Output: 3",
        "Explanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\".",
        "Input: text = \"leetcodeleetcode\"",
        "Output: 2",
        "Explanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\".",
        ""
    ],
    "constraints": [
        "1 <= text. length <= 2000text has only lowercase English letters."
    ]
},
{
    "id": "1320",
    "title": "Minimum Distance to Type a Word Using Two Fingers",
    "question": "You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate.\nGiven the string word, return the minimum total distance to type such string using only two fingers.\nThe distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|.\nNote that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.",
    "examples": [
        "Input: word = \"CAKE\"",
        "Output: 3",
        "Explanation: ",
        "Using two fingers, one optimal way to type \"CAKE\" is: ",
        "Finger 1 on letter 'C' -> cost = 0 ",
        "Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 ",
        "Finger 2 on letter 'K' -> cost = 0 ",
        "Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 ",
        "Total distance = 3",
        "Input: word = \"HAPPY\"",
        "Output: 6",
        "Explanation: ",
        "Using two fingers, one optimal way to type \"HAPPY\" is:",
        "Finger 1 on letter 'H' -> cost = 0",
        "Finger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2",
        "Finger 2 on letter 'P' -> cost = 0",
        "Finger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0",
        "Finger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4",
        "Total distance = 6",
        "Input: word = \"NEW\"",
        "Output: 3",
        "Input: word = \"YEAR\"",
        "Output: 7",
        ""
    ],
    "constraints": [
        "For example",
        " the letter 'A' is located at coordinate (0",
        " 0)",
        " the letter 'B' is located at coordinate (0",
        " 1)",
        " the letter 'P' is located at coordinate (2",
        " 3) and the letter 'Z' is located at coordinate (4",
        " 1). 2 <= word. length <= 300word consists of uppercase English letters."
    ]
},
{
    "id": "674",
    "title": "Longest Continuous Increasing Subsequence",
    "question": "Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.\ne.\n subarray).\n The subsequence must be strictly increasing.\nA continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], .\n.\n.\n, nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].",
    "examples": [
        "Input: nums = [1,3,5,4,7]",
        "Output: 3",
        "Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.",
        "Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element",
        "4.",
        "Input: nums = [2,2,2,2,2]",
        "Output: 1",
        "Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly",
        "increasing.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-109 <= nums[i] <= 109"
    ]
},
{
    "id": "1326",
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "question": "There is a one-dimensional garden on the x-axis.\n The garden starts at the point 0 and ends at the point n.\n (i.\ne The length of the garden is n).\nThere are n + 1 taps located at points [0, 1, .\n.\n.\n, n] in the garden.\nGiven an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.\nReturn the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.",
    "examples": [
        "Input: n = 5, ranges = [3,4,1,1,0,0]",
        "Output: 1",
        "Explanation: The tap at point 0 can cover the interval [-3,3]",
        "The tap at point 1 can cover the interval [-3,5]",
        "The tap at point 2 can cover the interval [1,3]",
        "The tap at point 3 can cover the interval [2,4]",
        "The tap at point 4 can cover the interval [4,4]",
        "The tap at point 5 can cover the interval [5,5]",
        "Opening Only the second tap will water the whole garden [0,5]",
        "Input: n = 3, ranges = [0,0,0,0]",
        "Output: -1",
        "Explanation: Even if you activate all the four taps you cannot water the whole garden.",
        "Input: n = 7, ranges = [1,2,1,0,2,1,0,1]",
        "Output: 3",
        "Input: n = 8, ranges = [4,0,0,0,0,0,0,0,4]",
        "Output: 2",
        "Input: n = 8, ranges = [4,0,0,0,4,0,0,0,4]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^4ranges. length == n + 10 <= ranges[i] <= 100"
    ]
},
{
    "id": "1330",
    "title": "Reverse Subarray To Maximize Array Value",
    "question": "You are given an integer array nums.\n The value of this array is defined as the sum of |nums[i]-nums[i+1]| for all 0 <= i < nums.\nlength-1.\nYou are allowed to select any subarray of the given array and reverse it.\n You can perform this operation only once.\nFind maximum possible value of the final array.",
    "examples": [
        "Input: nums = [2,3,1,5,4]",
        "Output: 10",
        "Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.",
        "Input: nums = [2,4,9,24,2,1,10]",
        "Output: 68",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 3*10^4-10^5 <= nums[i] <= 10^5"
    ]
},
{
    "id": "1335",
    "title": "Minimum Difficulty of a Job Schedule",
    "question": "You want to schedule a list of jobs in d days.\n Jobs are dependent (i.\ne To work on the i-th job, you have to finish all the jobs j where 0 <= j < i).\nYou have to finish at least one task every day.\n The difficulty of a job schedule is the sum of difficulties of each day of the d days.\n The difficulty of a day is the maximum difficulty of a job done in that day.\nGiven an array of integers jobDifficulty and an integer d.\n The difficulty of the i-th job is jobDifficulty[i].\nReturn the minimum difficulty of a job schedule.\n If you cannot find a schedule for the jobs return -1.",
    "examples": [
        "Input: jobDifficulty = [6,5,4,3,2,1], d = 2",
        "Output: 7",
        "Explanation: First day you can finish the first 5 jobs, total difficulty = 6.",
        "Second day you can finish the last job, total difficulty = 1.",
        "The difficulty of the schedule = 6 + 1 = 7 ",
        "Input: jobDifficulty = [9,9,9], d = 4",
        "Output: -1",
        "Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.",
        "Input: jobDifficulty = [1,1,1], d = 3",
        "Output: 3",
        "Explanation: The schedule is one job per day. total difficulty will be 3.",
        "Input: jobDifficulty = [7,1,7,1,7,1], d = 3",
        "Output: 15",
        "Input: jobDifficulty = [11,111,22,222,33,333,44,444], d = 6",
        "Output: 843",
        ""
    ],
    "constraints": [
        "1 <= jobDifficulty. length <= 3000 <= jobDifficulty[i] <= 10001 <= d <= 10"
    ]
},
{
    "id": "1340",
    "title": "Jump Game V",
    "question": "Given an array of integers arr and an integer d.\n In one step you can jump from index i to index:In addition, you can only jump from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (More formally min(i, j) < k < max(i, j)).\nYou can choose any index of the array and start jumping.\n Return the maximum number of indices you can visit.\nNotice that you can not jump outside of the array at any time.",
    "examples": [
        "Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2",
        "Output: 4",
        "Explanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.",
        "Note that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.",
        "Similarly You cannot jump from index 3 to index 2 or index 1.",
        "Input: arr = [3,3,3,3,3], d = 3",
        "Output: 1",
        "Explanation: You can start at any index. You always cannot jump to any index.",
        "Input: arr = [7,6,5,4,3,2,1], d = 1",
        "Output: 7",
        "Explanation: Start at index 0. You can visit all the indicies. ",
        "Input: arr = [7,1,7,1,7,1], d = 2",
        "Output: 2",
        "Input: arr = [66], d = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "i + x where: i + x < arr. length and  0 < x <= d. i - x where: i - x >= 0 and  0 < x <= d. 1 <= arr. length <= 10001 <= arr[i] <= 10^51 <= d <= arr. length"
    ]
},
{
    "id": "1345",
    "title": "Jump Game IV",
    "question": "Given an array of integers arr, you are initially positioned at the first index of the array.\nIn one step you can jump from index i to index:Return the minimum number of steps to reach the last index of the array.\nNotice that you can not jump outside of the array at any time.",
    "examples": [
        "Input: arr = [100,-23,-23,404,100,23,23,23,3,404]",
        "Output: 3",
        "Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.",
        "Input: arr = [7]",
        "Output: 0",
        "Explanation: Start index is the last index. You don't need to jump.",
        "Input: arr = [7,6,9,6,9,6,9,7]",
        "Output: 1",
        "Explanation: You can jump directly from index 0 to index 7 which is last index of the array.",
        "Input: arr = [6,1,9]",
        "Output: 2",
        "Input: arr = [11,22,7,7,7,7,7,7,7,22,13]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "i + 1 where: i + 1 < arr. length. i - 1 where: i - 1 >= 0. j where: arr[i] == arr[j] and i != j. 1 <= arr. length <= 5 * 104-108 <= arr[i] <= 108"
    ]
},
{
    "id": "1349",
    "title": "Maximum Students Taking Exam",
    "question": "Given a m * n matrix seats  that represent seats distributions in a classroom.\n If a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.\n' character.\nStudents can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him.\n Return the maximum number of students that can take the exam together without any cheating being possible.\n.\nStudents must be placed in seats in good condition.",
    "examples": [
        "Input: seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],",
        "                [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],",
        "                [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]",
        "Output: 4",
        "Explanation: Teacher can place 4 students in available seats so they don't cheat on the exam. ",
        "Input: seats = [[\".\",\"#\"],",
        "                [\"#\",\"#\"],",
        "                [\"#\",\".\"],",
        "                [\"#\",\"#\"],",
        "                [\".\",\"#\"]]",
        "Output: 3",
        "Explanation: Place all students in available seats. ",
        "",
        "Input: seats = [[\"#\",\".\",\".\",\".\",\"#\"],",
        "                [\".\",\"#\",\".\",\"#\",\".\"],",
        "                [\".\",\".\",\"#\",\".\",\".\"],",
        "                [\".\",\"#\",\".\",\"#\",\".\"],",
        "                [\"#\",\".\",\".\",\".\",\"#\"]]",
        "Output: 10",
        "Explanation: Place students in available seats in column 1, 3 and 5.",
        ""
    ],
    "constraints": [
        "seats contains only characters '.' and'#'. m == seats. lengthn == seats[i]. length1 <= m <= 81 <= n <= 8"
    ]
},
{
    "id": "1354",
    "title": "Construct Target Array With Multiple Sums",
    "question": "You are given an array target of n integers.\n From a starting array arr consisting of n 1's, you may perform the following procedure :Return true if it is possible to construct the target array from arr, otherwise, return false.",
    "examples": [
        "Input: target = [9,3,5]",
        "Output: true",
        "Explanation: Start with arr = [1, 1, 1] ",
        "[1, 1, 1], sum = 3 choose index 1",
        "[1, 3, 1], sum = 5 choose index 2",
        "[1, 3, 5], sum = 9 choose index 0",
        "[9, 3, 5] Done",
        "Input: target = [1,1,1,2]",
        "Output: false",
        "Explanation: Impossible to create target array from [1,1,1,1].",
        "Input: target = [8,5]",
        "Output: true",
        ""
    ],
    "constraints": [
        "let x be the sum of all elements currently in your array. choose index i",
        " such that 0 <= i < n and set the value of arr at index i to x. You may repeat this procedure as many times as needed. n == target. length1 <= n <= 5 * 1041 <= target[i] <= 109"
    ]
},
{
    "id": "1359",
    "title": "Count All Valid Pickup and Delivery Options",
    "question": "Given n orders, each order consist in pickup and delivery services.\n Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i).\n Since the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
        "Input: n = 1",
        "Output: 1",
        "Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.",
        "Input: n = 2",
        "Output: 6",
        "Explanation: All possible orders: ",
        "(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).",
        "This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.",
        "Input: n = 3",
        "Output: 90",
        ""
    ],
    "constraints": [
        "1 <= n <= 500"
    ]
},
{
    "id": "1363",
    "title": "Largest Multiple of Three",
    "question": "Given an integer array of digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order.\nSince the answer may not fit in an integer data type, return the answer as a string.\nIf there is no answer return an empty string.",
    "examples": [
        "Input: digits = [8,1,9]",
        "Output: \"981\"",
        "Input: digits = [8,6,7,1,0]",
        "Output: \"8760\"",
        "Input: digits = [1]",
        "Output: \"\"",
        "Input: digits = [0,0,0,0,0,0]",
        "Output: \"0\"",
        ""
    ],
    "constraints": [
        "1 <= digits. length <= 10^40 <= digits[i] <= 9The returning answer must not contain unnecessary leading zeros."
    ]
},
{
    "id": "1368",
    "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
    "question": "Notice that there could be some invalid signs on the cells of the grid which points outside the grid.\nYou will initially start at the upper left cell (0,0).\n A valid path in the grid is a path which starts from the upper left cell (0,0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid.\n The valid path doesn't have to be the shortest.\nYou can modify the sign on a cell with cost = 1.\n You can modify the sign on a cell one time only.\nReturn the minimum cost to make the grid have at least one valid path.",
    "examples": [
        "Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]",
        "Output: 3",
        "Explanation: You will start at point (0, 0).",
        "The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)",
        "The total cost = 3.",
        "Input: grid = [[1,1,3],[3,2,2],[1,1,4]]",
        "Output: 0",
        "Explanation: You can follow the path from (0, 0) to (2, 2).",
        "Input: grid = [[1,2],[4,3]]",
        "Output: 1",
        "Input: grid = [[2,2,2],[2,2,2]]",
        "Output: 3",
        "Input: grid = [[4]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 which means go to the cell to the right. (i. e go from grid[i][j] to grid[i][j + 1])2 which means go to the cell to the left. (i. e go from grid[i][j] to grid[i][j - 1])3 which means go to the lower cell. (i. e go from grid[i][j] to grid[i + 1][j])4 which means go to the upper cell. (i. e go from grid[i][j] to grid[i - 1][j])m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 100"
    ]
},
{
    "id": "67",
    "title": "Add Binary",
    "question": "Given two binary strings a and b, return their sum as a binary string.",
    "examples": [
        "Input: a = \"11\", b = \"1\"",
        "Output: \"100\"",
        "Input: a = \"1010\", b = \"1011\"",
        "Output: \"10101\"",
        ""
    ],
    "constraints": [
        "1 <= a. length",
        " b. length <= 104a and b consist only of '0' or '1' characters. Each string does not contain leading zeros except for the zero itself."
    ]
},
{
    "id": "680",
    "title": "Valid Palindrome II",
    "question": "Given a string s, return true if the s can be palindrome after deleting at most one character from it.",
    "examples": [
        "Input: s = \"aba\"",
        "Output: true",
        "Input: s = \"abca\"",
        "Output: true",
        "Explanation: You could delete the character 'c'.",
        "Input: s = \"abc\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s consists of lowercase English letters."
    ]
},
{
    "id": "1373",
    "title": "Maximum Sum BST in Binary Tree",
    "question": "Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).\nAssume a BST is defined as follows:",
    "examples": [
        "Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]",
        "Output: 20",
        "Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.",
        "Input: root = [4,3,null,1,2]",
        "Output: 2",
        "Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.",
        "Input: root = [-4,-2,-5]",
        "Output: 0",
        "Explanation: All values are negatives. Return an empty BST.",
        "Input: root = [2,1,3]",
        "Output: 6",
        "Input: root = [5,4,8,3,null,6,3]",
        "Output: 7",
        ""
    ],
    "constraints": [
        "The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees. The number of nodes in the tree is in the range [1",
        " 4 * 104].-4 * 104 <= Node. val <= 4 * 104"
    ]
},
{
    "id": "1377",
    "title": "Frog Position After T Seconds",
    "question": "Given an undirected tree consisting of n vertices numbered from 1 to n.\n A frog starts jumping from vertex 1.\n In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected.\n The frog can not jump back to a visited vertex.\n In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability.\n Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.\nReturn the probability that after t seconds the frog is on the vertex target.",
    "examples": [
        "Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4",
        "Output: 0. 16666666666666666 ",
        "Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0. 16666666666666666. ",
        "Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7",
        "Output: 0. 3333333333333333",
        "Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0. 3333333333333333 probability to the vertex 7 after second 1. ",
        "Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6",
        "Output: 0. 16666666666666666",
        ""
    ],
    "constraints": [
        "1 <= n <= 100edges. length == n - 1edges[i]. length == 21 <= ai",
        " bi <= n1 <= t <= 501 <= target <= nAnswers within 10-5 of the actual value will be accepted as correct."
    ]
},
{
    "id": "1383",
    "title": "Maximum Performance of a Team",
    "question": "You are given two integers n and k and two integer arrays speed and efficiency both of length n.\n There are n engineers numbered from 1 to n.\n speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.\nChoose at most k different engineers out of the n engineers to form a team with the maximum performance.\nThe performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.\nReturn the maximum performance of this team.\n Since the answer can be a huge number, return it modulo 109 + 7.",
    "examples": [
        "Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2",
        "Output: 60",
        "Explanation: ",
        "We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.",
        "Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3",
        "Output: 68",
        "Explanation:",
        "This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.",
        "Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4",
        "Output: 72",
        ""
    ],
    "constraints": [
        "1 <= k <= n <= 105speed. length == nefficiency. length == n1 <= speed[i] <= 1051 <= efficiency[i] <= 108"
    ]
},
{
    "id": "1388",
    "title": "Pizza With 3n Slices",
    "question": "There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:Sizes of Pizza slices is represented by circular array slices in clockwise direction.\nReturn the maximum possible sum of slice sizes which you can have.",
    "examples": [
        "Input: slices = [1,2,3,4,5,6]",
        "Output: 10",
        "Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.",
        "Input: slices = [8,9,8,6,1,1]",
        "Output: 16",
        "Output: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.",
        "Input: slices = [4,1,2,5,8,3,1,9,7]",
        "Output: 21",
        "Input: slices = [3,1,2]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "You will pick any pizza slice. Your friend Alice will pick next slice in anti clockwise direction of your pick. Your friend Bob will pick next slice in clockwise direction of your pick. Repeat until there are no more slices of pizzas. 1 <= slices. length <= 500slices. length % 3 == 01 <= slices[i] <= 1000"
    ]
},
{
    "id": "1392",
    "title": "Longest Happy Prefix",
    "question": "A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).\nGiven a string s, return the longest happy prefix of s.\n Return an empty string \"\" if no such prefix exists.",
    "examples": [
        "Input: s = \"level\"",
        "Output: \"l\"",
        "Explanation: s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\".",
        "Input: s = \"ababab\"",
        "Output: \"abab\"",
        "Explanation: \"abab\" is the largest prefix which is also suffix. They can overlap in the original string.",
        "Input: s = \"leetcodeleet\"",
        "Output: \"leet\"",
        "Input: s = \"a\"",
        "Output: \"\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s contains only lowercase English letters."
    ]
},
{
    "id": "1397",
    "title": "Find All Good Strings",
    "question": "Given the strings s1 and s2 of size n and the string evil, return the number of good strings.\nA good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring.\n Since the answer can be a huge number, return this modulo 109 + 7.",
    "examples": [
        "Input: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"",
        "Output: 51 ",
        "Explanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\". ",
        "Input: n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"",
        "Output: 0 ",
        "Explanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string.",
        "Input: n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"",
        "Output: 2",
        ""
    ],
    "constraints": [
        "s1. length == ns2. length == ns1 <= s21 <= n <= 5001 <= evil. length <= 50All strings consist of lowercase English letters."
    ]
},
{
    "id": "1402",
    "title": "Reducing Dishes",
    "question": "A chef has collected data on the satisfaction level of his n dishes.\n Chef can cook any dish in 1 unit of time.\nLike-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level  i.\ne.\n  time[i]*satisfaction[i]Return the maximum sum of Like-time coefficient that the chef can obtain after dishes preparation.\nDishes can be prepared in any order and the chef can discard some dishes to get this maximum value.",
    "examples": [
        "Input: satisfaction = [-1,-8,0,5,-9]",
        "Output: 14",
        "Explanation: After Removing the second and last dish, the maximum total Like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time. Input: satisfaction = [4,3,2]",
        "Output: 20",
        "Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)",
        "Input: satisfaction = [-1,-4,-5]",
        "Output: 0",
        "Explanation: People don't like the dishes. No dish is prepared.",
        "Input: satisfaction = [-2,5,-1,0,3,-3]",
        "Output: 35",
        ""
    ],
    "constraints": [
        "n == satisfaction. length1 <= n <= 500-10^3 <= satisfaction[i] <= 10^3"
    ]
},
{
    "id": "1406",
    "title": "Stone Game III",
    "question": "Alice and Bob continue their games with piles of stones.\n There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nAlice and Bob take turns, with Alice starting first.\n On each player's turn, that player can take 1, 2 or 3 stones from the first remaining stones in the row.\nThe score of each player is the sum of values of the stones taken.\n The score of each player is 0 initially.\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie.\n The game continues until all the stones have been taken.\nAssume Alice and Bob play optimally.\nReturn \"Alice\" if Alice will win, \"Bob\" if Bob will win or \"Tie\" if they end the game with the same score.",
    "examples": [
        "Input: values = [1,2,3,7]",
        "Output: \"Bob\"",
        "Explanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.",
        "Input: values = [1,2,3,-9]",
        "Output: \"Alice\"",
        "Explanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.",
        "If Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. The next move Alice will take the pile with value = -9 and lose.",
        "If Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. The next move Alice will take the pile with value = -9 and also lose.",
        "Remember that both play optimally so here Alice will choose the scenario that makes her win.",
        "Input: values = [1,2,3,6]",
        "Output: \"Tie\"",
        "Explanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.",
        "Input: values = [1,2,3,-1,-2,-3,7]",
        "Output: \"Alice\"",
        "Input: values = [-1,-2,-3]",
        "Output: \"Tie\"",
        ""
    ],
    "constraints": [
        "1 <= values. length <= 50000-1000 <= values[i] <= 1000"
    ]
},
{
    "id": "1411",
    "title": "Number of Ways to Paint N × 3 Grid",
    "question": "You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.\ne.\n, no two cells that share vertical or horizontal sides have the same color).\nGiven n the number of rows of the grid, return the number of ways you can paint this grid.\n As the answer may grow large, the answer must be computed modulo 109 + 7.",
    "examples": [
        "Input: n = 1",
        "Output: 12",
        "Explanation: There are 12 possible way to paint the grid as shown.",
        "Input: n = 2",
        "Output: 54",
        "Input: n = 3",
        "Output: 246",
        "Input: n = 7",
        "Output: 106494",
        "Input: n = 5000",
        "Output: 30228214",
        ""
    ],
    "constraints": [
        "n == grid. lengthgrid[i]. length == 31 <= n <= 5000"
    ]
},
{
    "id": "1416",
    "title": "Restore The Array",
    "question": "A program was supposed to print an array of integers.\n The program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.\nGiven the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program.\n Since the answer may be very large, return it modulo 109 + 7.",
    "examples": [
        "Input: s = \"1000\", k = 10000",
        "Output: 1",
        "Explanation: The only possible array is [1000]",
        "Input: s = \"1000\", k = 10",
        "Output: 0",
        "Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.",
        "Input: s = \"1317\", k = 2000",
        "Output: 8",
        "Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]",
        "Input: s = \"2020\", k = 30",
        "Output: 1",
        "Explanation: The only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is ivalid because 020 contains leading zeros.",
        "Input: s = \"1234567890\", k = 90",
        "Output: 34",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s consists of only digits and does not contain leading zeros. 1 <= k <= 109"
    ]
},
{
    "id": "682",
    "title": "Baseball Game",
    "question": "You are keeping score for a baseball game with strange rules.\n The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.\nAt the beginning of the game, you start with an empty record.\n You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:Return the sum of all the scores on the record.",
    "examples": [
        "Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]",
        "Output: 30",
        "Explanation:",
        "\"5\" - Add 5 to the record, record is now [5].",
        "\"2\" - Add 2 to the record, record is now [5, 2].",
        "\"C\" - Invalidate and remove the previous score, record is now [5].",
        "\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].",
        "\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].",
        "The total sum is 5 + 10 + 15 = 30.",
        "Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]",
        "Output: 27",
        "Explanation:",
        "\"5\" - Add 5 to the record, record is now [5].",
        "\"-2\" - Add -2 to the record, record is now [5, -2].",
        "\"4\" - Add 4 to the record, record is now [5, -2, 4].",
        "\"C\" - Invalidate and remove the previous score, record is now [5, -2].",
        "\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].",
        "\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].",
        "\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].",
        "\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].",
        "The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.",
        "Input: ops = [\"1\"]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= ops. length <= 1000ops[i] is \"C\"",
        " \"D\"",
        " \"+\"",
        " or a string representing an integer in the range [-3 * 104",
        " 3 * 104]. For operation \"+\"",
        " there will always be at least two previous scores on the record. For operations \"C\" and \"D\"",
        " there will always be at least one previous score on the record."
    ]
},
{
    "id": "1420",
    "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "question": "Given three integers n, m and k.\n Consider the following algorithm to find the maximum element of an array of positive integers:You should build the array arr which has the following properties:Return the number of ways to build the array arr under the mentioned conditions.\n As the answer may grow large, the answer must be computed modulo 10^9 + 7.",
    "examples": [
        "Input: n = 2, m = 3, k = 1",
        "Output: 6",
        "Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]",
        "Input: n = 5, m = 2, k = 3",
        "Output: 0",
        "Explanation: There are no possible arrays that satisify the mentioned conditions.",
        "Input: n = 9, m = 1, k = 1",
        "Output: 1",
        "Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "Input: n = 50, m = 100, k = 25",
        "Output: 34549172",
        "Explanation: Don't forget to compute the answer modulo 1000000007",
        "Input: n = 37, m = 17, k = 7",
        "Output: 418930126",
        ""
    ],
    "constraints": [
        "arr has exactly n integers. 1 <= arr[i] <= m where (0 <= i < n). After applying the mentioned algorithm to arr",
        " the value search_cost is equal to k. 1 <= n <= 501 <= m <= 1000 <= k <= n"
    ]
},
{
    "id": "1425",
    "title": "Constrained Subsequence Sum",
    "question": "Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.\nA subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.",
    "examples": [
        "Input: nums = [10,2,-10,5,20], k = 2",
        "Output: 37",
        "Explanation: The subsequence is [10, 2, 5, 20].",
        "Input: nums = [-1,-2,-3], k = 1",
        "Output: -1",
        "Explanation: The subsequence must be non-empty, so we choose the largest number.",
        "Input: nums = [10,-2,-10,-5,20], k = 2",
        "Output: 23",
        "Explanation: The subsequence is [10, -2, -5, 20].",
        ""
    ],
    "constraints": [
        "1 <= k <= nums. length <= 105-104 <= nums[i] <= 104"
    ]
},
{
    "id": "1434",
    "title": "Number of Ways to Wear Different Hats to Each Other",
    "question": "There are n people and 40 types of hats labeled from 1 to 40.\nGiven a list of list of integers hats, where hats[i] is a list of all hats preferred by the i-th person.\nReturn the number of ways that the n people wear different hats to each other.\nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
        "Input: hats = [[3,4],[4,5],[5]]",
        "Output: 1",
        "Explanation: There is only one way to choose hats given the conditions. ",
        "First person choose hat 3, Second person choose hat 4 and last one hat 5. Input: hats = [[3,5,1],[3,5]]",
        "Output: 4",
        "Explanation: There are 4 ways to choose hats",
        "(3,5), (5,3), (1,3) and (1,5)",
        "Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]",
        "Output: 24",
        "Explanation: Each person can choose hats labeled from 1 to 4.",
        "Number of Permutations of (1,2,3,4) = 24.",
        "Input: hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]",
        "Output: 111",
        ""
    ],
    "constraints": [
        "n == hats. length1 <= n <= 101 <= hats[i]. length <= 401 <= hats[i][j] <= 40hats[i] contains a list of unique integers."
    ]
},
{
    "id": "1439",
    "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
    "question": "You are given an m * n matrix, mat, and an integer k, which has its rows sorted in non-decreasing order.\nYou are allowed to choose exactly 1 element from each row to form an array.\n Return the Kth smallest array sum among all possible arrays.",
    "examples": [
        "Input: mat = [[1,3,11],[2,4,6]], k = 5",
        "Output: 7",
        "Explanation: Choosing one element from each row, the first k smallest sum are:",
        "[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.  Input: mat = [[1,3,11],[2,4,6]], k = 9",
        "Output: 17",
        "Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7",
        "Output: 9",
        "Explanation: Choosing one element from each row, the first k smallest sum are:",
        "[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  ",
        "Input: mat = [[1,1,10],[2,2,9]], k = 7",
        "Output: 12",
        ""
    ],
    "constraints": [
        "m == mat. lengthn == mat. length[i]1 <= m",
        " n <= 401 <= k <= min(200",
        " n ^ m)1 <= mat[i][j] <= 5000mat[i] is a non decreasing array."
    ]
},
{
    "id": "1444",
    "title": "Number of Ways of Cutting a Pizza",
    "question": "Given a rectangular pizza represented as a rows x cols matrix containing the following characters: 'A' (an apple) and '.\n' (empty cell) and given the integer k.\n You have to cut the pizza into k pieces using k-1 cuts.\n For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces.\n If you cut the pizza vertically, give the left part of the pizza to a person.\n If you cut the pizza horizontally, give the upper part of the pizza to a person.\n Give the last piece of pizza to the last person.\nReturn the number of ways of cutting the pizza such that each piece contains at least one apple.\n Since the answer can be a huge number, return this modulo 10^9 + 7.",
    "examples": [
        "Input: pizza = [\"A..\",\"AAA\",\"...\"], k = 3",
        "Output: 3 ",
        "Explanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.",
        "Input: pizza = [\"A..\",\"AA.\",\"...\"], k = 3",
        "Output: 1",
        "Input: pizza = [\"A..\",\"A..\",\"...\"], k = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= rows",
        " cols <= 50rows == pizza. lengthcols == pizza[i]. length1 <= k <= 10pizza consists of characters 'A' and '.' only."
    ]
},
{
    "id": "1449",
    "title": "Form Largest Integer With Digits That Add up to Target",
    "question": "Given an array of integers cost and an integer target.\n Return the maximum integer you can paint under the following rules:Since the answer may be too large, return it as string.\nIf there is no way to paint any integer given the condition, return \"0\".",
    "examples": [
        "Input: cost = [4,3,2,5,6,7,2,5,5], target = 9",
        "Output: \"7772\"",
        "Explanation:  The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.",
        "Digit    cost",
        "  1  ->   4",
        "  2  ->   3",
        "  3  ->   2",
        "  4  ->   5",
        "  5  ->   6",
        "  6  ->   7",
        "  7  ->   2",
        "  8  ->   5",
        "  9  ->   5",
        "Input: cost = [7,6,5,5,5,6,8,7,8], target = 12",
        "Output: \"85\"",
        "Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.",
        "Input: cost = [2,4,6,2,4,6,4,4,4], target = 5",
        "Output: \"0\"",
        "Explanation: It's not possible to paint any integer with total cost equal to target.",
        "Input: cost = [6,10,15,40,40,40,40,40,40], target = 47",
        "Output: \"32211\"",
        ""
    ],
    "constraints": [
        "The cost of painting a digit (i+1) is given by cost[i] (0 indexed). The total cost used must be equal to target. Integer does not have digits 0. cost. length == 91 <= cost[i] <= 50001 <= target <= 5000"
    ]
},
{
    "id": "1453",
    "title": "Maximum Number of Darts Inside of a Circular Dartboard",
    "question": "You have a very large square wall and a circular dartboard placed on the wall.\n You have been challenged to throw darts into the board blindfolded.\n Darts thrown at the wall are represented as an array of points on a 2D plane.\n Return the maximum number of points that are within or lie on any circular dartboard of radius r.",
    "examples": [
        "Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2",
        "Output: 4",
        "Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.",
        "Input: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5",
        "Output: 5",
        "Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).",
        "Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1",
        "Output: 1",
        "Input: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= points. length <= 100points[i]. length == 2-10^4 <= points[i][0]",
        " points[i][1] <= 10^41 <= r <= 5000"
    ]
},
{
    "id": "1458",
    "title": "Max Dot Product of Two Subsequences",
    "question": "Given two arrays nums1 and nums2.\nReturn the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters.\n (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).",
    "examples": [
        "Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]",
        "Output: 18",
        "Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.",
        "Their dot product is (2*3 + (-2)*(-6)) = 18. Input: nums1 = [3,-2], nums2 = [2,-6,7]",
        "Output: 21",
        "Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.",
        "Their dot product is (3*7) = 21. Input: nums1 = [-1,-1], nums2 = [1,1]",
        "Output: -1",
        "Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.",
        "Their dot product is -1."
    ],
    "constraints": [
        "1 <= nums1. length",
        " nums2. length <= 500-1000 <= nums1[i]",
        " nums2[i] <= 1000"
    ]
},
{
    "id": "1463",
    "title": "Cherry Pickup II",
    "question": "Given a rows x cols matrix grid representing a field of cherries.\n Each cell in grid represents the number of cherries that you can collect.\nYou have two robots that can collect cherries for you, Robot #1 is located at the top-left corner (0,0) , and Robot #2 is located at the top-right corner (0, cols-1) of the grid.\nReturn the maximum number of cherries collection using both robots  by following the rules below:",
    "examples": [
        "Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]",
        "Output: 24",
        "Explanation: Path of robot #1 and #2 are described in color green and blue respectively.",
        "Cherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.",
        "Cherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.",
        "Total of cherries: 12 + 12 = 24.",
        "Input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]",
        "Output: 28",
        "Explanation: Path of robot #1 and #2 are described in color green and blue respectively.",
        "Cherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.",
        "Cherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.",
        "Total of cherries: 17 + 11 = 28.",
        "Input: grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]]",
        "Output: 22",
        "Input: grid = [[1,1],[1,1]]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "From a cell (i",
        "j)",
        " robots can move to cell (i+1",
        " j-1) ",
        " (i+1",
        " j) or (i+1",
        " j+1). When any robot is passing through a cell",
        " It picks it up all cherries",
        " and the cell becomes an empty cell (0). When both robots stay on the same cell",
        " only one of them takes the cherries. Both robots cannot move outside of the grid at any moment. Both robots should reach the bottom row in the grid. rows == grid. lengthcols == grid[i]. length2 <= rows",
        " cols <= 700 <= grid[i][j] <= 100 "
    ]
},
{
    "id": "1467",
    "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "question": "Given 2n balls of k distinct colors.\n You will be given an integer array balls of size k where balls[i] is the number of balls of color i.\n All the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).\nPlease note that the two boxes are considered different.\n For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).\nWe want to calculate the probability that the two boxes have the same number of distinct balls.",
    "examples": [
        "Input: balls = [1,1]",
        "Output: 1. 00000",
        "Explanation: Only 2 ways to divide the balls equally:",
        "- A ball of color 1 to box 1 and a ball of color 2 to box 2",
        "- A ball of color 2 to box 1 and a ball of color 1 to box 2",
        "In both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1",
        "Input: balls = [2,1,1]",
        "Output: 0. 66667",
        "Explanation: We have the set of balls [1, 1, 2, 3]",
        "This set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equale probability (i. e. 1/12):",
        "[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]",
        "After that we add the first two balls to the first box and the second two balls to the second box.",
        "We can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.",
        "Probability is 8/12 = 0. 66667",
        "Input: balls = [1,2,1,2]",
        "Output: 0. 60000",
        "Explanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.",
        "Probability = 108 / 180 = 0. 6",
        "Input: balls = [3,2,1]",
        "Output: 0. 30000",
        "Explanation: The set of balls is [1, 1, 1, 2, 2, 3]. It is hard to display all the 60 possible random shuffles of this set but it is easy to check that 18 of them will have the same number of distinct colors in each box.",
        "Probability = 18 / 60 = 0. 3",
        "Input: balls = [6,6,6,6,6,6]",
        "Output: 0. 90327",
        ""
    ],
    "constraints": [
        "1 <= balls. length <= 81 <= balls[i] <= 6sum(balls) is even. Answers within 10^-5 of the actual value will be accepted as correct."
    ]
},
{
    "id": "690",
    "title": "Employee Importance",
    "question": "You have a data structure of employee information, which includes the employee's unique id, their importance value, and their direct subordinates' id.\nYou are given an array of employees employees where:Given an integer id that represents the ID of an employee, return the total importance value of this employee and all their subordinates.",
    "examples": [
        "Input: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1",
        "Output: 11",
        "Explanation: Employee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3.",
        "They both have importance value 3.",
        "So the total importance value of employee 1 is 5 + 3 + 3 = 11.",
        "Input: employees = [[1,2,[5]],[5,-3,[]]], id = 5",
        "Output: -3",
        ""
    ],
    "constraints": [
        "employees[i]. id is the ID of the ith employee. employees[i]. importance is the importance value of the ith employee. employees[i]. subordinates is a list of the IDs of the subordinates of the ith employee. 1 <= employees. length <= 20001 <= employees[i]. id <= 2000All employees[i]. id are unique.-100 <= employees[i]. importance <= 100One employee has at most one direct leader and may have several subordinates. id is guaranteed to be a valid employee id."
    ]
},
{
    "id": "1473",
    "title": "Paint House III",
    "question": "There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.\nA neighborhood is a maximal group of continuous houses that are painted with the same color.\nGiven an array houses, an m x n matrix cost and an integer target where:Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods.\n If it is not possible, return -1.",
    "examples": [
        "Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3",
        "Output: 9",
        "Explanation: Paint houses of this way [1,2,2,1,1]",
        "This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].",
        "Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.",
        "Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3",
        "Output: 11",
        "Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]",
        "This array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. ",
        "Cost of paint the first and last house (10 + 1) = 11.",
        "Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5",
        "Output: 5",
        "Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3",
        "Output: -1",
        "Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.",
        ""
    ],
    "constraints": [
        "For example: houses = [1",
        "2",
        "2",
        "3",
        "3",
        "2",
        "1",
        "1] contains 5 neighborhoods [{1}",
        " {2",
        "2}",
        " {3",
        "3}",
        " {2}",
        " {1",
        "1}]. houses[i]: is the color of the house i",
        " and 0 if the house is not painted yet. cost[i][j]: is the cost of paint the house i with the color j + 1. m == houses. length == cost. lengthn == cost[i]. length1 <= m <= 1001 <= n <= 201 <= target <= m0 <= houses[i] <= n1 <= cost[i][j] <= 10^4"
    ]
},
{
    "id": "1478",
    "title": "Allocate Mailboxes",
    "question": "Given the array houses and an integer k.\n where houses[i] is the location of the ith house along a street, your task is to allocate k mailboxes in the street.\nReturn the minimum total distance between each house and its nearest mailbox.\nThe answer is guaranteed to fit in a 32-bit signed integer.",
    "examples": [
        "Input: houses = [1,4,8,10,20], k = 3",
        "Output: 5",
        "Explanation: Allocate mailboxes in position 3, 9 and 20.",
        "Minimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 ",
        "Input: houses = [2,3,5,12,18], k = 2",
        "Output: 9",
        "Explanation: Allocate mailboxes in position 3 and 14.",
        "Minimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.",
        "Input: houses = [7,4,6,1], k = 1",
        "Output: 8",
        "Input: houses = [3,6,14,10], k = 4",
        "Output: 0",
        ""
    ],
    "constraints": [
        "n == houses. length1 <= n <= 1001 <= houses[i] <= 10^41 <= k <= nArray houses contain unique integers."
    ]
},
{
    "id": "1483",
    "title": "Kth Ancestor of a Tree Node",
    "question": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node.\n The root of the tree is node 0.\n Find the kth ancestor of a given node.\nThe kth ancestor of a tree node is the kth node in the path from that node to the root node.\nImplement the TreeAncestor class:",
    "examples": [
        "Input",
        "[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]",
        "[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]",
        "Output",
        "[null, 1, 0, -1]",
        "",
        "Explanation",
        "TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);",
        "treeAncestor. getKthAncestor(3, 1); // returns 1 which is the parent of 3",
        "treeAncestor. getKthAncestor(5, 2); // returns 0 which is the grandparent of 5",
        "treeAncestor. getKthAncestor(6, 3); // returns -1 because there is no such ancestor"
    ],
    "constraints": [
        "TreeAncestor(int n",
        " int[] parent) Initializes the object with the number of nodes in the tree and the parent array. int getKthAncestor(int node",
        " int k) return the kth ancestor of the given node node. If there is no such ancestor",
        " return -1. 1 <= k <= n <= 5 * 104parent. length == nparent[0] == -10 <= parent[i] < n for all 0 < i < n0 <= node < nThere will be at most 5 * 104 queries."
    ]
},
{
    "id": "1489",
    "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "question": "Given a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi.\n A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.\nFind all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST).\n An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge.\n On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.\nNote that you can return the indices of the edges in any order.",
    "examples": [
        "Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]",
        "Output: [[0,1],[2,3,4,5]]",
        "Explanation: The figure above describes the graph.",
        "The following figure shows all the possible MSTs:",
        "",
        "Notice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.",
        "The edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.",
        "Input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]",
        "Output: [[],[0,1,2,3]]",
        "Explanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.",
        ""
    ],
    "constraints": [
        "2 <= n <= 1001 <= edges. length <= min(200",
        " n * (n - 1) / 2)edges[i]. length == 30 <= ai < bi < n1 <= weighti <= 1000All pairs (ai",
        " bi) are distinct."
    ]
},
{
    "id": "1494",
    "title": "Parallel Courses II",
    "question": "You are given an integer n, which indicates that there are n courses labeled from 1 to n.\n You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei.\n Also, you are given the integer k.\nIn one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semester for the courses you are taking.\nReturn the minimum number of semesters needed to take all courses.\n The testcases will be generated such that it is possible to take every course.",
    "examples": [
        "Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2",
        "Output: 3 ",
        "Explanation: The figure above represents the given graph.",
        "In the first semester, you can take courses 2 and 3.",
        "In the second semester, you can take course 1.",
        "In the third semester, you can take course 4.",
        "Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2",
        "Output: 4 ",
        "Explanation: The figure above represents the given graph.",
        "In the first semester, you can take courses 2 and 3 only since you cannot take more than two per semester.",
        "In the second semester, you can take course 4.",
        "In the third semester, you can take course 1.",
        "In the fourth semester, you can take course 5.",
        "Input: n = 11, dependencies = [], k = 2",
        "Output: 6",
        ""
    ],
    "constraints": [
        "1 <= n <= 151 <= k <= n0 <= relations. length <= n * (n-1) / 2relations[i]. length == 21 <= prevCoursei",
        " nextCoursei <= nprevCoursei != nextCourseiAll the pairs [prevCoursei",
        " nextCoursei] are unique. The given graph is a directed acyclic graph."
    ]
},
{
    "id": "1499",
    "title": "Max Value of Equation",
    "question": "You are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.\nlength.\n You are also given an integer k.\nReturn the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.\nlength.\nIt is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.",
    "examples": [
        "Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1",
        "Output: 4",
        "Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.",
        "No other pairs satisfy the condition, so we return the max of 4 and 1.",
        "Input: points = [[0,0],[3,0],[9,2]], k = 3",
        "Output: 3",
        "Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.",
        ""
    ],
    "constraints": [
        "2 <= points. length <= 105points[i]. length == 2-108 <= xi",
        " yi <= 1080 <= k <= 2 * 108xi < xj for all 1 <= i < j <= points. lengthxi form a strictly increasing sequence."
    ]
},
{
    "id": "1505",
    "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
    "question": "Given a string num representing the digits of a very large integer and an integer k.\nYou are allowed to swap any two adjacent digits of the integer at most k times.\nReturn the minimum integer you can obtain also as a string.",
    "examples": [
        "Input: num = \"4321\", k = 4",
        "Output: \"1342\"",
        "Explanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.",
        "Input: num = \"100\", k = 1",
        "Output: \"010\"",
        "Explanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.",
        "Input: num = \"36789\", k = 1000",
        "Output: \"36789\"",
        "Explanation: We can keep the number without any swaps.",
        "Input: num = \"22\", k = 22",
        "Output: \"22\"",
        "Input: num = \"9438957234785635408\", k = 23",
        "Output: \"0345989723478563548\"",
        ""
    ],
    "constraints": [
        "1 <= num. length <= 30000num contains digits only and doesn't have leading zeros. 1 <= k <= 10^9"
    ]
},
{
    "id": "1510",
    "title": "Stone Game IV",
    "question": "Alice and Bob take turns playing a game, with Alice starting first.\nInitially, there are n stones in a pile.\n  On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.\nAlso, if a player cannot make a move, he/she loses the game.\nGiven a positive integer n.\n Return True if and only if Alice wins the game otherwise return False, assuming both players play optimally.",
    "examples": [
        "Input: n = 1",
        "Output: true",
        "Explanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves. Input: n = 2",
        "Output: false",
        "Explanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0). Input: n = 4",
        "Output: true",
        "Explanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).",
        "Input: n = 7",
        "Output: false",
        "Explanation: Alice can't win the game if Bob plays optimally.",
        "If Alice starts removing 4 stones, Bob will remove 1 stone then Alice should remove only 1 stone and finally Bob removes the last one (7 -> 3 -> 2 -> 1 -> 0). ",
        "If Alice starts removing 1 stone, Bob will remove 4 stones then Alice only can remove 1 stone and finally Bob removes the last one (7 -> 6 -> 2 -> 1 -> 0). Input: n = 17",
        "Output: false",
        "Explanation: Alice can't win the game if Bob plays optimally.",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^5"
    ]
},
{
    "id": "1515",
    "title": "Best Position for a Service Centre",
    "question": "A delivery company wants to build a new service centre in a new city.\n The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new centre in a position such that the sum of the euclidean distances to all customers is minimum.\nGiven an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.\nIn other words, you need to choose the position of the service centre [xcentre, ycentre] such that the following formula is minimized:Answers within 10^-5 of the actual value will be accepted.",
    "examples": [
        "Input: positions = [[0,1],[1,0],[1,2],[2,1]]",
        "Output: 4. 00000",
        "Explanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.",
        "Input: positions = [[1,1],[3,3]]",
        "Output: 2. 82843",
        "Explanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2. 82843",
        "Input: positions = [[1,1]]",
        "Output: 0. 00000",
        "Input: positions = [[1,1],[0,0],[2,0]]",
        "Output: 2. 73205",
        "Explanation: At the first glance, you may think that locating the centre at [1, 0] will achieve the minimum sum, but locating it at [1, 0] will make the sum of distances = 3.",
        "Try to locate the centre at [1. 0, 0. 5773502711] you will see that the sum of distances is 2. 73205.",
        "Be careful with the precision!",
        "Input: positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]",
        "Output: 32. 94036",
        "Explanation: You can use [4. 3460852395, 4. 9813795505] as the position of the centre.",
        ""
    ],
    "constraints": [
        "1 <= positions. length <= 50positions[i]. length == 20 <= positions[i][0]",
        " positions[i][1] <= 100"
    ]
},
{
    "id": "1520",
    "title": "Maximum Number of Non-Overlapping Substrings",
    "question": "Given a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions:Find the maximum number of substrings that meet the above conditions.\n If there are multiple solutions with the same number of substrings, return the one with minimum total length.\n It can be shown that there exists a unique solution of minimum total length.\nNotice that you can return the substrings in any order.",
    "examples": [
        "Input: s = \"adefaddaccc\"",
        "Output: [\"e\",\"f\",\"ccc\"]",
        "Explanation: The following are all the possible substrings that meet the conditions:",
        "[",
        "  \"adefaddaccc\"",
        "  \"adefadda\",",
        "  \"ef\",",
        "  \"e\",",
        "  \"f\",",
        "  \"ccc\",",
        "]",
        "If we choose the first string, we cannot choose anything else and we'd get only 1. If we choose \"adefadda\", we are left with \"ccc\" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose \"ef\" since it can be split into two. Therefore, the optimal way is to choose [\"e\",\"f\",\"ccc\"] which gives us 3 substrings. No other solution of the same number of substrings exist.",
        "Input: s = \"abbaccd\"",
        "Output: [\"d\",\"bb\",\"cc\"]",
        "Explanation: Notice that while the set of substrings [\"d\",\"abba\",\"cc\"] also has length 3, it's considered incorrect since it has larger total length.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 10^5s contains only lowercase English letters."
    ]
},
{
    "id": "693",
    "title": "Binary Number with Alternating Bits",
    "question": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.",
    "examples": [
        "Input: n = 5",
        "Output: true",
        "Explanation: The binary representation of 5 is: 101",
        "Input: n = 7",
        "Output: false",
        "Explanation: The binary representation of 7 is: 111. Input: n = 11",
        "Output: false",
        "Explanation: The binary representation of 11 is: 1011. Input: n = 10",
        "Output: true",
        "Explanation: The binary representation of 10 is: 1010. Input: n = 3",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= n <= 231 - 1"
    ]
},
{
    "id": "1521",
    "title": "Find a Value of a Mysterious Function Closest to Target",
    "question": "Winston was given the above mysterious function func.\n He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.\nReturn the minimum possible value of |func(arr, l, r) - target|.\nNotice that func should be called with the values l and r where 0 <= l, r < arr.\nlength.",
    "examples": [
        "Input: arr = [9,12,3,7,15], target = 5",
        "Output: 2",
        "Explanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.",
        "Input: arr = [1000000,1000000,1000000], target = 1",
        "Output: 999999",
        "Explanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.",
        "Input: arr = [1,2,4,8,16], target = 0",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1051 <= arr[i] <= 1060 <= target <= 107"
    ]
},
{
    "id": "1526",
    "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
    "question": "Given an array of positive integers target and an array initial of same size with all zeros.\nReturn the minimum number of operations to form a target array from initial if you are allowed to do the following operation:",
    "examples": [
        "Input: target = [1,2,3,2,1]",
        "Output: 3",
        "Explanation: We need at least 3 operations to form the target array from the initial array.",
        "[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).",
        "[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).",
        "[1,2,2,2,1] increment 1 at index 2.",
        "[1,2,3,2,1] target array is formed.",
        "Input: target = [3,1,1,2]",
        "Output: 4",
        "Explanation: (initial)[0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] (target).",
        "Input: target = [3,1,5,4,2]",
        "Output: 7",
        "Explanation: (initial)[0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] ",
        "                                  -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2] (target).",
        "Input: target = [1,1,1,1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "Choose any subarray from initial and increment each value by one. 1 <= target. length <= 10^51 <= target[i] <= 10^5"
    ]
},
{
    "id": "1531",
    "title": "String Compression II",
    "question": "Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run).\n For example, to compress the string \"aabccc\" we replace \"aa\" by \"a2\" and replace \"ccc\" by \"c3\".\n Thus the compressed string becomes \"a2bc3\".\nNotice that in this problem, we are not adding '1' after single characters.\nGiven a string s and an integer k.\n You need to delete at most k characters from s such that the run-length encoded version of s has minimum length.\nFind the minimum length of the run-length encoded version of s after deleting at most k characters.",
    "examples": [
        "Input: s = \"aaabcccd\", k = 2",
        "Output: 4",
        "Explanation: Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4. Input: s = \"aabbaa\", k = 2",
        "Output: 2",
        "Explanation: If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2.",
        "Input: s = \"aaaaaaaaaaa\", k = 0",
        "Output: 3",
        "Explanation: Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000 <= k <= s. lengths contains only lowercase English letters."
    ]
},
{
    "id": "1537",
    "title": "Get the Maximum Score",
    "question": "You are given two sorted arrays of distinct integers nums1 and nums2.\nA valid path is defined as follows:Score is defined as the sum of uniques values in a valid path.\nReturn the maximum score you can obtain of all possible valid paths.\nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
        "Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]",
        "Output: 30",
        "Explanation: Valid paths:",
        "[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)",
        "[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)",
        "The maximum is obtained with the path in green [2,4,6,8,10].",
        "Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]",
        "Output: 109",
        "Explanation: Maximum sum is obtained with the path [1,3,5,100].",
        "Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]",
        "Output: 40",
        "Explanation: There are no common elements between nums1 and nums2.",
        "Maximum sum is obtained with the path [6,7,8,9,10].",
        "Input: nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]",
        "Output: 61",
        ""
    ],
    "constraints": [
        "Choose array nums1 or nums2 to traverse (from index-0). Traverse the current array from left to right. If you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path). 1 <= nums1. length <= 10^51 <= nums2. length <= 10^51 <= nums1[i]",
        " nums2[i] <= 10^7nums1 and nums2 are strictly increasing."
    ]
},
{
    "id": "1542",
    "title": "Find Longest Awesome Substring",
    "question": "Given a string s.\n An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it palindrome.\nReturn the length of the maximum length awesome substring of s.",
    "examples": [
        "Input: s = \"3242415\"",
        "Output: 5",
        "Explanation: \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps.",
        "Input: s = \"12345678\"",
        "Output: 1",
        "Input: s = \"213123\"",
        "Output: 6",
        "Explanation: \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps.",
        "Input: s = \"00\"",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 10^5s consists only of digits."
    ]
},
{
    "id": "1547",
    "title": "Minimum Cost to Cut a Stick",
    "question": "Given a wooden stick of length n units.\n The stick is labelled from 0 to n.\n For example, a stick of length 6 is labelled as follows:Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts.\n When you cut a stick, it will be split into two smaller sticks (i.\ne.\n the sum of their lengths is the length of the stick before the cut).\n Please refer to the first example for a better explanation.\nReturn the minimum total cost of the cuts.",
    "examples": [
        "Input: n = 7, cuts = [1,3,4,5]",
        "Output: 16",
        "Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:",
        "",
        "The first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i. e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.",
        "Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16). Input: n = 9, cuts = [5,6,1,4,2]",
        "Output: 22",
        "Explanation: If you try the given cuts ordering the cost will be 25.",
        "There are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.",
        ""
    ],
    "constraints": [
        "2 <= n <= 10^61 <= cuts. length <= min(n - 1",
        " 100)1 <= cuts[i] <= n - 1All the integers in cuts array are distinct."
    ]
},
{
    "id": "1553",
    "title": "Minimum Number of Days to Eat N Oranges",
    "question": "There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:You can only choose one of the actions per day.\nReturn the minimum number of days to eat n oranges.",
    "examples": [
        "Input: n = 10",
        "Output: 4",
        "Explanation: You have 10 oranges.",
        "Day 1: Eat 1 orange,  10 - 1 = 9.  ",
        "Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)",
        "Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. ",
        "Day 4: Eat the last orange  1 - 1  = 0.",
        "You need at least 4 days to eat the 10 oranges.",
        "Input: n = 6",
        "Output: 3",
        "Explanation: You have 6 oranges.",
        "Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).",
        "Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)",
        "Day 3: Eat the last orange  1 - 1  = 0.",
        "You need at least 3 days to eat the 6 oranges.",
        "Input: n = 1",
        "Output: 1",
        "Input: n = 56",
        "Output: 6",
        ""
    ],
    "constraints": [
        "Eat one orange. If the number of remaining oranges (n) is divisible by 2 then you can eat  n/2 oranges. If the number of remaining oranges (n) is divisible by 3 then you can eat  2*(n/3) oranges. 1 <= n <= 2*10^9"
    ]
},
{
    "id": "1559",
    "title": "Detect Cycles in 2D Grid",
    "question": "Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.\nA cycle is a path of length 4 or more in the grid that starts and ends at the same cell.\n From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.\nAlso, you cannot move to the cell that you visited in your last move.\n For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.\nReturn true if any cycle of the same value exists in grid, otherwise, return false.",
    "examples": [
        "Input: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]",
        "Output: true",
        "Explanation: There are two valid cycles shown in different colors in the image below:",
        "",
        "Input: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]",
        "Output: true",
        "Explanation: There is only one valid cycle highlighted in the image below:",
        "",
        "Input: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]",
        "Output: false",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m <= 5001 <= n <= 500grid consists only of lowercase English letters."
    ]
},
{
    "id": "1563",
    "title": "Stone Game V",
    "question": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nIn each round of the game, Alice divides the row into two non-empty rows (i.\ne.\n left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row.\n Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row.\n If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away.\n The next round starts with the remaining row.\nThe game ends when there is only one stone remaining.\n Alice's is initially zero.\nReturn the maximum score that Alice can obtain.",
    "examples": [
        "Input: stoneValue = [6,2,3,4,5,5]",
        "Output: 18",
        "Explanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.",
        "In the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).",
        "The last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.",
        "Input: stoneValue = [7,7,7,7,7,7,7]",
        "Output: 28",
        "Input: stoneValue = [4]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= stoneValue. length <= 5001 <= stoneValue[i] <= 10^6"
    ]
},
{
    "id": "1568",
    "title": "Minimum Number of Days to Disconnect Island",
    "question": "Given a 2D grid consisting of 1s (land) and 0s (water).\n  An island is a maximal 4-directionally (horizontal or vertical) connected group of 1s.\nThe grid is said to be connected if we have exactly one island, otherwise is said disconnected.\nIn one day, we are allowed to change any single land cell (1) into a water cell (0).\nReturn the minimum number of days to disconnect the grid.",
    "examples": [
        "Input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]",
        "Output: 2",
        "Explanation: We need at least 2 days to get a disconnected grid.",
        "Change land grid[1][1] and grid[0][2] to water and get 2 disconnected island.",
        "Input: grid = [[1,1]]",
        "Output: 2",
        "Explanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.",
        "Input: grid = [[1,0,1,0]]",
        "Output: 0",
        "Input: grid = [[1,1,0,1,1],",
        "               [1,1,1,1,1],",
        "               [1,1,0,1,1],",
        "               [1,1,0,1,1]]",
        "Output: 1",
        "Input: grid = [[1,1,0,1,1],",
        "               [1,1,1,1,1],",
        "               [1,1,0,1,1],",
        "               [1,1,1,1,1]]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= grid. length",
        " grid[i]. length <= 30grid[i][j] is 0 or 1."
    ]
},
{
    "id": "696",
    "title": "Count Binary Substrings",
    "question": "Give a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.\nSubstrings that occur multiple times are counted the number of times they occur.",
    "examples": [
        "Input: s = \"00110011\"",
        "Output: 6",
        "Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".",
        "Notice that some of these substrings repeat and are counted the number of times they occur.",
        "Also, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.",
        "Input: s = \"10101\"",
        "Output: 4",
        "Explanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s[i] is either '0' or '1'."
    ]
},
{
    "id": "1569",
    "title": "Number of Ways to Reorder Array to Get Same BST",
    "question": "Given an array nums that represents a permutation of integers from 1 to n.\n We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST.\n Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.\nFor example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child.\n The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST.\nReturn the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.\nSince the answer may be very large, return it modulo 10^9 + 7.",
    "examples": [
        "Input: nums = [2,1,3]",
        "Output: 1",
        "Explanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.",
        "Input: nums = [3,4,5,1,2]",
        "Output: 5",
        "Explanation: The following 5 arrays will yield the same BST: ",
        "[3,1,2,4,5]",
        "[3,1,4,2,5]",
        "[3,1,4,5,2]",
        "[3,4,1,2,5]",
        "[3,4,1,5,2]",
        "Input: nums = [1,2,3]",
        "Output: 0",
        "Explanation: There are no other orderings of nums that will yield the same BST.",
        "Input: nums = [3,1,2,5,4,6]",
        "Output: 19",
        "Input: nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]",
        "Output: 216212978",
        "Explanation: The number of ways to reorder nums to get the same BST is 3216212999. Taking this number modulo 10^9 + 7 gives 216212978.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10001 <= nums[i] <= nums. lengthAll integers in nums are distinct."
    ]
},
{
    "id": "1575",
    "title": "Count All Possible Routes",
    "question": "You are given an array of distinct positive integers locations where locations[i] represents the position of city i.\n You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.\nAt each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.\nlength and move to city j.\n Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|.\n Please notice that |x| denotes the absolute value of x.\nNotice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).\nReturn the count of all possible routes from start to finish.\nSince the answer may be too large, return it modulo 10^9 + 7.",
    "examples": [
        "Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5",
        "Output: 4",
        "Explanation: The following are all possible routes, each uses 5 units of fuel:",
        "1 -> 3",
        "1 -> 2 -> 3",
        "1 -> 4 -> 3",
        "1 -> 4 -> 2 -> 3",
        "Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6",
        "Output: 5",
        "Explanation: The following are all possible routes:",
        "1 -> 0, used fuel = 1",
        "1 -> 2 -> 0, used fuel = 5",
        "1 -> 2 -> 1 -> 0, used fuel = 5",
        "1 -> 0 -> 1 -> 0, used fuel = 3",
        "1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5",
        "Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3",
        "Output: 0",
        "Explanation: It's impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel. Input: locations = [2,1,5], start = 0, finish = 0, fuel = 3",
        "Output: 2",
        "Explanation: There are two possible routes, 0 and 0 -> 1 -> 0. Input: locations = [1,2,3], start = 0, finish = 2, fuel = 40",
        "Output: 615088286",
        "Explanation: The total number of possible routes is 2615088300. Taking this number modulo 10^9 + 7 gives us 615088286.",
        ""
    ],
    "constraints": [
        "2 <= locations. length <= 1001 <= locations[i] <= 10^9All integers in locations are distinct. 0 <= start",
        " finish < locations. length1 <= fuel <= 200"
    ]
},
{
    "id": "1579",
    "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
    "question": "Alice and Bob have an undirected graph of n nodes and 3 types of edges:Given an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob.\n The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.\nReturn the maximum number of edges you can remove, or return -1 if it's impossible for the graph to be fully traversed by Alice and Bob.",
    "examples": [
        "Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]",
        "Output: 2",
        "Explanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.",
        "Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]",
        "Output: 0",
        "Explanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.",
        "Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]",
        "Output: -1",
        "Explanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable."
    ],
    "constraints": [
        "Type 1: Can be traversed by Alice only. Type 2: Can be traversed by Bob only. Type 3: Can by traversed by both Alice and Bob. 1 <= n <= 10^51 <= edges. length <= min(10^5",
        " 3 * n * (n-1) / 2)edges[i]. length == 31 <= edges[i][0] <= 31 <= edges[i][1] < edges[i][2] <= nAll tuples (typei",
        " ui",
        " vi) are distinct."
    ]
},
{
    "id": "1585",
    "title": "Check If String Is Transformable With Substring Sort Operations",
    "question": "Given two strings s and t, you want to transform string s into string t using the following operation any number of times:For example, applying the operation on the underlined substring in \"14234\" results in \"12344\".\nReturn true if it is possible to transform string s into string t.\n Otherwise, return false.\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
        "Input: s = \"84532\", t = \"34852\"",
        "Output: true",
        "Explanation: You can transform s into t using the following sort operations:",
        "\"84532\" (from index 2 to 3) -> \"84352\"",
        "\"84352\" (from index 0 to 2) -> \"34852\"",
        "Input: s = \"34521\", t = \"23415\"",
        "Output: true",
        "Explanation: You can transform s into t using the following sort operations:",
        "\"34521\" -> \"23451\"",
        "\"23451\" -> \"23415\"",
        "Input: s = \"12345\", t = \"12435\"",
        "Output: false",
        "Input: s = \"1\", t = \"2\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "Choose a non-empty substring in s and sort it in-place so the characters are in ascending order. s. length == t. length1 <= s. length <= 105s and t only contain digits from '0' to '9'."
    ]
},
{
    "id": "1591",
    "title": "Strange Printer II",
    "question": "There is a strange printer with the following two special requirements:You are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.\nReturn true if it is possible to print the matrix targetGrid, otherwise, return false.",
    "examples": [
        "Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]",
        "Output: true",
        "Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]",
        "Output: true",
        "Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]",
        "Output: false",
        "Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns. Input: targetGrid = [[1,1,1],[3,1,3]]",
        "Output: false",
        ""
    ],
    "constraints": [
        "On each turn",
        " the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle. Once the printer has used a color for the above operation",
        " the same color cannot be used again. m == targetGrid. lengthn == targetGrid[i]. length1 <= m",
        " n <= 601 <= targetGrid[row][col] <= 60"
    ]
},
{
    "id": "1595",
    "title": "Minimum Cost to Connect Two Groups of Points",
    "question": "You are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2.\nThe cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group.\n The groups are connected if each point in both groups is connected to one or more points in the opposite group.\n In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.\nReturn the minimum cost it takes to connect the two groups.",
    "examples": [
        "Input: cost = [[15, 96], [36, 2]]",
        "Output: 17",
        "Explanation: The optimal way of connecting the groups is:",
        "1--A",
        "2--B",
        "This results in a total cost of 17.",
        "Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]",
        "Output: 4",
        "Explanation: The optimal way of connecting the groups is:",
        "1--A",
        "2--B",
        "2--C",
        "3--A",
        "This results in a total cost of 4.",
        "Note that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.",
        "Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]",
        "Output: 10",
        ""
    ],
    "constraints": [
        "size1 == cost. lengthsize2 == cost[i]. length1 <= size1",
        " size2 <= 12size1 >= size20 <= cost[i][j] <= 100"
    ]
},
{
    "id": "1601",
    "title": "Maximum Number of Achievable Transfer Requests",
    "question": "We have n buildings numbered from 0 to n - 1.\n Each building has a number of employees.\n It's transfer season, and some employees want to change the building they reside in.\nYou are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi.\nAll buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero.\n This means the number of employees leaving is equal to the number of employees moving in.\n For example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2.\nReturn the maximum number of achievable requests.",
    "examples": [
        "Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]",
        "Output: 5",
        "Explantion: Let's see the requests:",
        "From building 0 we have employees x and y and both want to move to building 1.",
        "From building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.",
        "From building 2 we have employee z and they want to move to building 0.",
        "From building 3 we have employee c and they want to move to building 4.",
        "From building 4 we don't have any requests.",
        "We can achieve the requests of users x and b by swapping their places.",
        "We can achieve the requests of users y, a and z by swapping the places in the 3 buildings.",
        "Input: n = 3, requests = [[0,0],[1,2],[2,1]]",
        "Output: 3",
        "Explantion: Let's see the requests:",
        "From building 0 we have employee x and they want to stay in the same building 0.",
        "From building 1 we have employee y and they want to move to building 2.",
        "From building 2 we have employee z and they want to move to building 1.",
        "We can achieve all the requests. Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= n <= 201 <= requests. length <= 16requests[i]. length == 20 <= fromi",
        " toi < n"
    ]
},
{
    "id": "1606",
    "title": "Find Servers That Handled Most Number of Requests",
    "question": "You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously.\n Each server has infinite computational capacity but cannot handle more than one request at a time.\n The requests are assigned to servers according to a specific algorithm:You are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete).\n Your goal is to find the busiest server(s).\n A server is considered busiest if it handled the most number of requests successfully among all the servers.\nReturn a list containing the IDs (0-indexed) of the busiest server(s).\n You may return the IDs in any order.",
    "examples": [
        "Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] ",
        "Output: [1] ",
        "Explanation:",
        "All of the servers start out available.",
        "The first 3 requests are handled by the first 3 servers in order.",
        "Request 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.",
        "Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped.",
        "Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.",
        "Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]",
        "Output: [0]",
        "Explanation:",
        "The first 3 requests are handled by first 3 servers.",
        "Request 3 comes in. It is handled by server 0 since the server is available.",
        "Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.",
        "Input: k = 3, arrival = [1,2,3], load = [10,12,11]",
        "Output: [0,1,2]",
        "Explanation: Each server handles a single request, so they are all considered the busiest.",
        "Input: k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]",
        "Output: [1]",
        "Input: k = 1, arrival = [1], load = [1]",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "The ith (0-indexed) request arrives. If all servers are busy",
        " the request is dropped (not handled at all). If the (i % k)th server is available",
        " assign the request to that server. Otherwise",
        " assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example",
        " if the ith server is busy",
        " try to assign the request to the (i+1)th server",
        " then the (i+2)th server",
        " and so on. 1 <= k <= 1051 <= arrival. length",
        " load. length <= 105arrival. length == load. length1 <= arrival[i]",
        " load[i] <= 109arrival is strictly increasing."
    ]
},
{
    "id": "1610",
    "title": "Maximum Number of Visible Points",
    "question": "You are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane.\nInitially, you are facing directly east from your position.\n You cannot move from your position, but you can rotate.\n In other words, posx and posy cannot be changed.\n Your field of view in degrees is represented by angle, determining how wide you can see from any given view direction.\n Let d be the amount in degrees that you rotate counterclockwise.\n Then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].\n\nYour browser does not support the video tag or this video format.\n\nYou can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.\nThere can be multiple points at one coordinate.\n There may be points at your location, and you can always see these points regardless of your rotation.\n Points do not obstruct your vision to other points.\nReturn the maximum number of points you can see.",
    "examples": [
        "Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]",
        "Output: 3",
        "Explanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.",
        "Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]",
        "Output: 4",
        "Explanation: All points can be made visible in your field of view, including the one at your location.",
        "Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]",
        "Output: 1",
        "Explanation: You can only see one of the two points, as shown above.",
        ""
    ],
    "constraints": [
        "1 <= points. length <= 105points[i]. length == 2location. length == 20 <= angle < 3600 <= posx",
        " posy",
        " xi",
        " yi <= 100"
    ]
},
{
    "id": "1611",
    "title": "Minimum One Bit Operations to Make Integers Zero",
    "question": "Given an integer n, you must transform it into 0 using the following operations any number of times:Return the minimum number of operations to transform n into 0.",
    "examples": [
        "Input: n = 0",
        "Output: 0",
        "Input: n = 3",
        "Output: 2",
        "Explanation: The binary representation of 3 is \"11\".",
        "\"11\" -> \"01\" with the 2nd operation since the 0th bit is 1.",
        "\"01\" -> \"00\" with the 1st operation.",
        "Input: n = 6",
        "Output: 4",
        "Explanation: The binary representation of 6 is \"110\".",
        "\"110\" -> \"010\" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.",
        "\"010\" -> \"011\" with the 1st operation.",
        "\"011\" -> \"001\" with the 2nd operation since the 0th bit is 1.",
        "\"001\" -> \"000\" with the 1st operation.",
        "Input: n = 9",
        "Output: 14",
        "Input: n = 333",
        "Output: 393",
        ""
    ],
    "constraints": [
        "Change the rightmost (0th) bit in the binary representation of n. Change the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0. 0 <= n <= 109"
    ]
},
{
    "id": "697",
    "title": "Degree of an Array",
    "question": "Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.",
    "examples": [
        "Input: nums = [1,2,2,3,1]",
        "Output: 2",
        "Explanation: ",
        "The input array has a degree of 2 because both elements 1 and 2 appear twice.",
        "Of the subarrays that have the same degree:",
        "[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]",
        "The shortest length is 2. So return 2.",
        "Input: nums = [1,2,2,3,1,4,2]",
        "Output: 6",
        "Explanation: ",
        "The degree is 3 because the element 2 is repeated 3 times.",
        "So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.",
        ""
    ],
    "constraints": [
        "nums. length will be between 1 and 50",
        "000. nums[i] will be an integer between 0 and 49",
        "999."
    ]
},
{
    "id": "1617",
    "title": "Count Subtrees With Max Distance Between Cities",
    "question": "There are n cities numbered from 1 to n.\n You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi.\n There exists a unique path between each pair of cities.\n In other words, the cities form a tree.\nA subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset.\n Two subtrees are different if there is a city in one subtree that is not present in the other.\nFor each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.\nReturn an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d.\nNotice that the distance between the two cities is the number of edges in the path between them.",
    "examples": [
        "Input: n = 4, edges = [[1,2],[2,3],[2,4]]",
        "Output: [3,4,0]",
        "Explanation:",
        "The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.",
        "The subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.",
        "No subtree has two nodes where the max distance between them is 3.",
        "Input: n = 2, edges = [[1,2]]",
        "Output: [1]",
        "Input: n = 3, edges = [[1,2],[2,3]]",
        "Output: [2,1]",
        ""
    ],
    "constraints": [
        "2 <= n <= 15edges. length == n-1edges[i]. length == 21 <= ui",
        " vi <= nAll pairs (ui",
        " vi) are distinct."
    ]
},
{
    "id": "1622",
    "title": "Fancy Sequence",
    "question": "Write an API that generates fancy sequences using the append, addAll, and multAll operations.\nImplement the Fancy class:",
    "examples": [
        "Input",
        "[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]",
        "[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]",
        "Output",
        "[null, null, null, null, null, 10, null, null, null, 26, 34, 20]",
        "",
        "Explanation",
        "Fancy fancy = new Fancy();",
        "fancy. append(2);   // fancy sequence: [2]",
        "fancy. addAll(3);   // fancy sequence: [2+3] -> [5]",
        "fancy. append(7);   // fancy sequence: [5, 7]",
        "fancy. multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]",
        "fancy. getIndex(0); // return 10",
        "fancy. addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]",
        "fancy. append(10);  // fancy sequence: [13, 17, 10]",
        "fancy. multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]",
        "fancy. getIndex(0); // return 26",
        "fancy. getIndex(1); // return 34",
        "fancy. getIndex(2); // return 20",
        ""
    ],
    "constraints": [
        "Fancy() Initializes the object with an empty sequence. void append(val) Appends an integer val to the end of the sequence. void addAll(inc) Increments all existing values in the sequence by an integer inc. void multAll(m) Multiplies all existing values in the sequence by an integer m. int getIndex(idx) Gets the current value at index idx (0-indexed) of the sequence modulo 109 + 7. If the index is greater or equal than the length of the sequence",
        " return -1. 1 <= val",
        " inc",
        " m <= 1000 <= idx <= 105At most 105 calls total will be made to append",
        " addAll",
        " multAll",
        " and getIndex."
    ]
},
{
    "id": "1627",
    "title": "Graph Connectivity With Threshold",
    "question": "We have n cities labeled from 1 to n.\n Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold.\n More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:Given the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly.\n (i.\ne.\n there is some path between them).\nReturn an array answer, where answer.\nlength == queries.\nlength and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.",
    "examples": [
        "Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]",
        "Output: [false,false,true]",
        "Explanation: The divisors for each number:",
        "1:   1",
        "2:   1, 2",
        "3:   1, 3",
        "4:   1, 2, 4",
        "5:   1, 5",
        "6:   1, 2, 3, 6",
        "Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the",
        "only ones directly connected. The result of each query:",
        "[1,4]   1 is not connected to 4",
        "[2,5]   2 is not connected to 5",
        "[3,6]   3 is connected to 6 through path 3--6",
        "Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]",
        "Output: [true,true,true,true,true]",
        "Explanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,",
        "all divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.",
        "Input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]",
        "Output: [false,false,false,false,false]",
        "Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.",
        "Please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].",
        ""
    ],
    "constraints": [
        "x % z == 0",
        "y % z == 0",
        " andz > threshold. 2 <= n <= 1040 <= threshold <= n1 <= queries. length <= 105queries[i]. length == 21 <= ai",
        " bi <= citiesai != bi"
    ]
},
{
    "id": "1632",
    "title": "Rank Transform of a Matrix",
    "question": "Given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].\nThe rank is an integer that represents how large an element is compared to other elements.\n It is calculated using the following rules:It is guaranteed that answer is unique under the given rules.",
    "examples": [
        "Input: matrix = [[1,2],[3,4]]",
        "Output: [[1,2],[2,3]]",
        "Explanation:",
        "The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.",
        "The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.",
        "The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.",
        "The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.",
        "Input: matrix = [[7,7],[7,7]]",
        "Output: [[1,1],[1,1]]",
        "Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]",
        "Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]",
        "Input: matrix = [[7,3,6],[1,4,5],[9,8,2]]",
        "Output: [[5,1,4],[1,2,3],[6,3,1]]",
        ""
    ],
    "constraints": [
        "The rank is an integer starting from 1. If two elements p and q are in the same row or column",
        " then:\n\t\nIf p < q then rank(p) < rank(q)\nIf p == q then rank(p) == rank(q)\nIf p > q then rank(p) > rank(q)\n\nIf p < q then rank(p) < rank(q)If p == q then rank(p) == rank(q)If p > q then rank(p) > rank(q)The rank should be as small as possible. m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 500-109 <= matrix[row][col] <= 109"
    ]
},
{
    "id": "1639",
    "title": "Number of Ways to Form a Target String Given a Dictionary",
    "question": "You are given a list of strings of the same length words and a string target.\nYour task is to form target using the given words under the following rules:Notice that you can use multiple characters from the same string in words provided the conditions above are met.\nReturn the number of ways to form target from words.\n Since the answer may be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"",
        "Output: 6",
        "Explanation: There are 6 ways to form target.",
        "\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"caca\")",
        "\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"caca\")",
        "\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"acca\")",
        "\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"acca\")",
        "\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"acca\")",
        "\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"caca\")",
        "Input: words = [\"abba\",\"baab\"], target = \"bab\"",
        "Output: 4",
        "Explanation: There are 4 ways to form target.",
        "\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 2 (\"abba\")",
        "\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 3 (\"baab\")",
        "\"bab\" -> index 0 (\"baab\"), index 2 (\"baab\"), index 3 (\"baab\")",
        "\"bab\" -> index 1 (\"abba\"), index 2 (\"baab\"), index 3 (\"baab\")",
        "Input: words = [\"abcd\"], target = \"abcd\"",
        "Output: 1",
        "Input: words = [\"abab\",\"baba\",\"abba\",\"baab\"], target = \"abba\"",
        "Output: 16",
        ""
    ],
    "constraints": [
        "target should be formed from left to right. To form the ith character (0-indexed) of target",
        " you can choose the kth character of the jth string in words if target[i] = words[j][k]. Once you use the kth character of the jth string of words",
        " you can no longer use the xth character of any string in words where x <= k. In other words",
        " all characters to the left of or at index k become unusuable for every string. Repeat the process until you form the string target. 1 <= words. length <= 10001 <= words[i]. length <= 1000All strings in words have the same length. 1 <= target. length <= 1000words[i] and target contain only lowercase English letters."
    ]
},
{
    "id": "1643",
    "title": "Kth Smallest Instructions",
    "question": "Bob is standing at cell (0, 0), and he wants to reach destination: (row, column).\n He can only travel right and down.\n You are going to help Bob by providing instructions for him to reach destination.\nThe instructions are represented as a string, where each character is either:Multiple instructions will lead Bob to destination.\n For example, if destination is (2, 3), both \"HHHVV\" and \"HVHVH\" are valid instructions.\nHowever, Bob is very picky.\n Bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination.\n k is 1-indexed.\nGiven an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take Bob to destination.",
    "examples": [
        "Input: destination = [2,3], k = 1",
        "Output: \"HHHVV\"",
        "Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:",
        "[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"].",
        "Input: destination = [2,3], k = 2",
        "Output: \"HHVHV\"",
        "Input: destination = [2,3], k = 3",
        "Output: \"HHVVH\"",
        ""
    ],
    "constraints": [
        "'H'",
        " meaning move horizontally (go right)",
        " or'V'",
        " meaning move vertically (go down). destination. length == 21 <= row",
        " column <= 151 <= k <= nCr(row + column",
        " row)",
        " where nCr(a",
        " b) denotes a choose b​​​​​."
    ]
},
{
    "id": "1649",
    "title": "Create Sorted Array through Instructions",
    "question": "Given an integer array instructions, you are asked to create a sorted array from the elements in instructions.\n You start with an empty container nums.\n For each element from left to right in instructions, insert it into nums.\n The cost of each insertion is the minimum of the following:For example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5].\nReturn the total cost to insert all elements from instructions into nums.\n Since the answer may be large, return it modulo 109 + 7",
    "examples": [
        "Input: instructions = [1,5,6,2]",
        "Output: 1",
        "Explanation: Begin with nums = [].",
        "Insert 1 with cost min(0, 0) = 0, now nums = [1].",
        "Insert 5 with cost min(1, 0) = 0, now nums = [1,5].",
        "Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6].",
        "Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].",
        "The total cost is 0 + 0 + 0 + 1 = 1. Input: instructions = [1,2,3,6,5,4]",
        "Output: 3",
        "Explanation: Begin with nums = [].",
        "Insert 1 with cost min(0, 0) = 0, now nums = [1].",
        "Insert 2 with cost min(1, 0) = 0, now nums = [1,2].",
        "Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3].",
        "Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].",
        "Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].",
        "Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].",
        "The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.",
        "Input: instructions = [1,3,3,3,2,4,2,1,2]",
        "Output: 4",
        "Explanation: Begin with nums = [].",
        "Insert 1 with cost min(0, 0) = 0, now nums = [1].",
        "Insert 3 with cost min(1, 0) = 0, now nums = [1,3].",
        "Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3].",
        "Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].",
        "Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].",
        "Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].",
        "​​​​​​​Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].",
        "​​​​​​​Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].",
        "​​​​​​​Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].",
        "The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.",
        ""
    ],
    "constraints": [
        "The number of elements currently in nums that are strictly less than instructions[i]. The number of elements currently in nums that are strictly greater than instructions[i]. 1 <= instructions. length <= 1051 <= instructions[i] <= 105"
    ]
},
{
    "id": "1655",
    "title": "Distribute Repeating Integers",
    "question": "You are given an array of n integers, nums, where there are at most 50 unique values in the array.\n You are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered.\n Determine if it is possible to distribute nums such that:Return true if it is possible to distribute nums according to the above conditions.",
    "examples": [
        "Input: nums = [1,2,3,4], quantity = [2]",
        "Output: false",
        "Explanation: The 0th customer cannot be given two different integers.",
        "Input: nums = [1,2,3,3], quantity = [2]",
        "Output: true",
        "Explanation: The 0th customer is given [3,3]. The integers [1,2] are not used.",
        "Input: nums = [1,1,2,2], quantity = [2,2]",
        "Output: true",
        "Explanation: The 0th customer is given [1,1], and the 1st customer is given [2,2].",
        "Input: nums = [1,1,2,3], quantity = [2,2]",
        "Output: false",
        "Explanation: Although the 0th customer could be given [1,1], the 1st customer cannot be satisfied. Input: nums = [1,1,1,1,1], quantity = [2,3]",
        "Output: true",
        "Explanation: The 0th customer is given [1,1], and the 1st customer is given [1,1,1].",
        ""
    ],
    "constraints": [
        "The ith customer gets exactly quantity[i] integers",
        "The integers the ith customer gets are all equal",
        " andEvery customer is satisfied. n == nums. length1 <= n <= 1051 <= nums[i] <= 1000m == quantity. length1 <= m <= 101 <= quantity[i] <= 105There are at most 50 unique values in nums."
    ]
},
{
    "id": "1659",
    "title": "Maximize Grid Happiness",
    "question": "You are given four integers, m, n, introvertsCount, and extrovertsCount.\n You have an m x n grid, and there are two types of people: introverts and extroverts.\n There are introvertsCount introverts and extrovertsCount extroverts.\nYou should decide how many people you want to live in the grid and assign each of them one grid cell.\n Note that you do not have to have all the people living in the grid.\nThe happiness of each person is calculated as follows:Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell.\nThe grid happiness is the sum of each person's happiness.\n Return the maximum possible grid happiness.",
    "examples": [
        "Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2",
        "Output: 240",
        "Explanation: Assume the grid is 1-indexed with coordinates (row, column).",
        "We can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).",
        "- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120",
        "- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60",
        "- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60",
        "The grid happiness is 120 + 60 + 60 = 240.",
        "The above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.",
        "Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1",
        "Output: 260",
        "Explanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).",
        "- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90",
        "- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80",
        "- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90",
        "The grid happiness is 90 + 80 + 90 = 260.",
        "Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0",
        "Output: 240",
        ""
    ],
    "constraints": [
        "Introverts start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert). Extroverts start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert). 1 <= m",
        " n <= 50 <= introvertsCount",
        " extrovertsCount <= min(m * n",
        " 6)"
    ]
},
{
    "id": "1665",
    "title": "Minimum Initial Energy to Finish Tasks",
    "question": "You are given an array tasks where tasks[i] = [actuali, minimumi]:For example, if the task is [10, 12] and your current energy is 11, you cannot start this task.\n However, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.\nYou can finish the tasks in any order you like.\nReturn the minimum initial amount of energy you will need to finish all the tasks.",
    "examples": [
        "Input: tasks = [[1,2],[2,4],[4,8]]",
        "Output: 8",
        "Explanation:",
        "Starting with 8 energy, we finish the tasks in the following order:",
        "    - 3rd task. Now energy = 8 - 4 = 4.",
        "    - 2nd task. Now energy = 4 - 2 = 2.",
        "    - 1st task. Now energy = 2 - 1 = 1.",
        "Notice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task. Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]",
        "Output: 32",
        "Explanation:",
        "Starting with 32 energy, we finish the tasks in the following order:",
        "    - 1st task. Now energy = 32 - 1 = 31.",
        "    - 2nd task. Now energy = 31 - 2 = 29.",
        "    - 3rd task. Now energy = 29 - 10 = 19.",
        "    - 4th task. Now energy = 19 - 10 = 9.",
        "    - 5th task. Now energy = 9 - 8 = 1. Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]",
        "Output: 27",
        "Explanation:",
        "Starting with 27 energy, we finish the tasks in the following order:",
        "    - 5th task. Now energy = 27 - 5 = 22.",
        "    - 2nd task. Now energy = 22 - 2 = 20.",
        "    - 3rd task. Now energy = 20 - 3 = 17.",
        "    - 1st task. Now energy = 17 - 1 = 16.",
        "    - 4th task. Now energy = 16 - 4 = 12.",
        "    - 6th task. Now energy = 12 - 6 = 6.",
        ""
    ],
    "constraints": [
        "actuali is the actual amount of energy you spend to finish the ith task. minimumi is the minimum amount of energy you require to begin the ith task. 1 <= tasks. length <= 1051 <= actual​i <= minimumi <= 104"
    ]
},
{
    "id": "700",
    "title": "Search in a Binary Search Tree",
    "question": "You are given the root of a binary search tree (BST) and an integer val.\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node.\n If such a node does not exist, return null.",
    "examples": [
        "Input: root = [4,2,7,1,3], val = 2",
        "Output: [2,1,3]",
        "Input: root = [4,2,7,1,3], val = 5",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 5000]. 1 <= Node. val <= 107root is a binary search tree. 1 <= val <= 107"
    ]
},
{
    "id": "1671",
    "title": "Minimum Number of Removals to Make Mountain Array",
    "question": "You may recall that an array arr is a mountain array if and only if:Given an integer array nums​​​, return the minimum number of elements to remove to make nums​​​ a mountain array.",
    "examples": [
        "Input: nums = [1,3,1]",
        "Output: 0",
        "Explanation: The array itself is a mountain array so we do not need to remove any elements.",
        "Input: nums = [2,1,1,5,6,2,3,1]",
        "Output: 3",
        "Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].",
        "Input: nums = [4,3,2,1,1,2,3,1]",
        "Output: 4",
        "Input: nums = [1,2,3,4,4,3,2,1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "arr. length >= 3There exists some index i (0-indexed) with 0 < i < arr. length - 1 such that:\n\t\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr. length - 1]\n\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]arr[i] > arr[i + 1] > ... > arr[arr. length - 1]3 <= nums. length <= 10001 <= nums[i] <= 109It is guaranteed that you can make a mountain array out of nums."
    ]
},
{
    "id": "1675",
    "title": "Minimize Deviation in Array",
    "question": "You are given an array nums of n positive integers.\nYou can perform two types of operations on any element of the array any number of times:The deviation of the array is the maximum difference between any two elements in the array.\nReturn the minimum deviation the array can have after performing some number of operations.",
    "examples": [
        "Input: nums = [1,2,3,4]",
        "Output: 1",
        "Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.",
        "Input: nums = [4,1,5,20,3]",
        "Output: 3",
        "Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.",
        "Input: nums = [2,10,8]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "If the element is even",
        " divide it by 2.\n\n\t\nFor example",
        " if the array is [1",
        "2",
        "3",
        "4]",
        " then you can do this operation on the last element",
        " and the array will be [1",
        "2",
        "3",
        "2].\n\nFor example",
        " if the array is [1",
        "2",
        "3",
        "4]",
        " then you can do this operation on the last element",
        " and the array will be [1",
        "2",
        "3",
        "2]. If the element is odd",
        " multiply it by 2.\n\t\nFor example",
        " if the array is [1",
        "2",
        "3",
        "4]",
        " then you can do this operation on the first element",
        " and the array will be [2",
        "2",
        "3",
        "4].\n\nFor example",
        " if the array is [1",
        "2",
        "3",
        "4]",
        " then you can do this operation on the first element",
        " and the array will be [2",
        "2",
        "3",
        "4]. n == nums. length2 <= n <= 1051 <= nums[i] <= 109"
    ]
},
{
    "id": "1681",
    "title": "Minimum Incompatibility",
    "question": "You are given an integer array nums​​​ and an integer k.\n You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.\nA subset's incompatibility is the difference between the maximum and minimum elements in that array.\nReturn the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible.\nA subset is a group integers that appear in the array with no particular order.",
    "examples": [
        "Input: nums = [1,2,1,4], k = 2",
        "Output: 4",
        "Explanation: The optimal distribution of subsets is [1,2] and [1,4].",
        "The incompatibility is (2-1) + (4-1) = 4.",
        "Note that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements. Input: nums = [6,3,8,1,3,1,2,2], k = 4",
        "Output: 6",
        "Explanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].",
        "The incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.",
        "Input: nums = [5,3,3,6,3,3], k = 3",
        "Output: -1",
        "Explanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.",
        ""
    ],
    "constraints": [
        "1 <= k <= nums. length <= 16nums. length is divisible by k1 <= nums[i] <= nums. length"
    ]
},
{
    "id": "1687",
    "title": "Delivering Boxes from Storage to Ports",
    "question": "You have the task of delivering some boxes from storage to their ports using only one ship.\n However, this ship has a limit on the number of boxes and the total weight that it can carry.\nYou are given an array boxes, where boxes[i] = [ports​​i​, weighti], and three integers portsCount, maxBoxes, and maxWeight.\nThe boxes need to be delivered in the order they are given.\n The ship will follow these steps:The ship must end at storage after all the boxes have been delivered.\nReturn the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.",
    "examples": [
        "Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3",
        "Output: 4",
        "Explanation: The optimal strategy is as follows: ",
        "- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.",
        "So the total number of trips is 4.",
        "Note that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i. e. the second box needs to be delivered at port 2 before the third box).",
        "Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6",
        "Output: 6",
        "Explanation: The optimal strategy is as follows: ",
        "- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.",
        "- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.",
        "- The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.",
        "So the total number of trips is 2 + 2 + 2 = 6.",
        "Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7",
        "Output: 6",
        "Explanation: The optimal strategy is as follows:",
        "- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.",
        "- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.",
        "- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.",
        "So the total number of trips is 2 + 2 + 2 = 6.",
        "Input: boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7",
        "Output: 14",
        "Explanation: The optimal strategy is as follows:",
        "- The ship takes the first box, goes to port 2, then storage. 2 trips.",
        "- The ship takes the second box, goes to port 2, then storage. 2 trips.",
        "- The ship takes the third and fourth boxes, goes to port 3, then storage. 2 trips.",
        "- The ship takes the fifth box, goes to port 3, then storage. 2 trips.",
        "- The ship takes the sixth and seventh boxes, goes to port 3, then port 4, then storage. 3 trips. ",
        "- The ship takes the eighth and ninth boxes, goes to port 1, then port 5, then storage. 3 trips.",
        "So the total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14.",
        ""
    ],
    "constraints": [
        "ports​​i is the port where you need to deliver the ith box and weightsi is the weight of the ith box. portsCount is the number of ports. maxBoxes and maxWeight are the respective box and weight limits of the ship. The ship will take some number of boxes from the boxes queue",
        " not violating the maxBoxes and maxWeight constraints. For each loaded box in order",
        " the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port",
        " no trip is needed",
        " and the box can immediately be delivered. The ship then makes a return trip to storage to take more boxes from the queue. 1 <= boxes. length <= 1051 <= portsCount",
        " maxBoxes",
        " maxWeight <= 1051 <= ports​​i <= portsCount1 <= weightsi <= maxWeight"
    ]
},
{
    "id": "1691",
    "title": "Maximum Height by Stacking Cuboids",
    "question": "Given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed).\n Choose a subset of cuboids and place them on each other.\nYou can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj.\n You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.\nReturn the maximum height of the stacked cuboids.",
    "examples": [
        "Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]",
        "Output: 190",
        "Explanation:",
        "Cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.",
        "Cuboid 0 is placed next with the 45x20 side facing down with height 50.",
        "Cuboid 2 is placed next with the 23x12 side facing down with height 45.",
        "The total height is 95 + 50 + 45 = 190.",
        "Input: cuboids = [[38,25,45],[76,35,3]]",
        "Output: 76",
        "Explanation:",
        "You can't place any of the cuboids on the other.",
        "We choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.",
        "Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]",
        "Output: 102",
        "Explanation:",
        "After rearranging the cuboids, you can see that all cuboids have the same dimension.",
        "You can place the 11x7 side down on all cuboids so their heights are 17.",
        "The maximum height of stacked cuboids is 6 * 17 = 102.",
        ""
    ],
    "constraints": [
        "n == cuboids. length1 <= n <= 1001 <= widthi",
        " lengthi",
        " heighti <= 100"
    ]
},
{
    "id": "1697",
    "title": "Checking Existence of Edge Length Limited Paths",
    "question": "An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi.\n Note that there may be multiple edges between two nodes.\nGiven an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .\nReturn a boolean array answer, where answer.\nlength == queries.\nlength and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.",
    "examples": [
        "Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]",
        "Output: [false,true]",
        "Explanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.",
        "For the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.",
        "For the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.",
        "Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]",
        "Output: [true,false]",
        "Exaplanation: The above figure shows the given graph.",
        ""
    ],
    "constraints": [
        "2 <= n <= 1051 <= edgeList. length",
        " queries. length <= 105edgeList[i]. length == 3queries[j]. length == 30 <= ui",
        " vi",
        " pj",
        " qj <= n - 1ui != vipj != qj1 <= disi",
        " limitj <= 109There may be multiple edges between two nodes."
    ]
},
{
    "id": "1703",
    "title": "Minimum Adjacent Swaps for K Consecutive Ones",
    "question": "You are given an integer array, nums, and an integer k.\n nums comprises of only 0's and 1's.\n In one move, you can choose two adjacent indices and swap their values.\nReturn the minimum number of moves required so that nums has k consecutive 1's.",
    "examples": [
        "Input: nums = [1,0,0,1,0,1], k = 2",
        "Output: 1",
        "Explanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.",
        "Input: nums = [1,0,0,0,0,0,1,1], k = 3",
        "Output: 5",
        "Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].",
        "Input: nums = [1,1,0,1], k = 2",
        "Output: 0",
        "Explanation: nums already has 2 consecutive 1's.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105nums[i] is 0 or 1. 1 <= k <= sum(nums)"
    ]
},
{
    "id": "1707",
    "title": "Maximum XOR With an Element From Array",
    "question": "You are given an array nums consisting of non-negative integers.\n You are also given a queries array, where queries[i] = [xi, mi].\nThe answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi.\n In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi.\n If all elements in nums are larger than mi, then the answer is -1.\nReturn an integer array answer where answer.\nlength == queries.\nlength and answer[i] is the answer to the ith query.",
    "examples": [
        "Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]",
        "Output: [3,3,7]",
        "Explanation:",
        "1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.",
        "2) 1 XOR 2 = 3.",
        "3) 5 XOR 2 = 7.",
        "Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]",
        "Output: [15,-1,5]",
        ""
    ],
    "constraints": [
        "1 <= nums. length",
        " queries. length <= 105queries[i]. length == 20 <= nums[j]",
        " xi",
        " mi <= 109"
    ]
},
{
    "id": "1713",
    "title": "Minimum Operations to Make a Subsequence",
    "question": "You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.\nIn one operation, you can insert any integer at any position in arr.\n For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2].\n Note that you can insert the integer at the very beginning or end of the array.\nReturn the minimum number of operations needed to make target a subsequence of arr.\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\n For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.",
    "examples": [
        "Input: target = [5,1,3], arr = [9,4,2,3,4]",
        "Output: 2",
        "Explanation: You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr.",
        "Input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= target. length",
        " arr. length <= 1051 <= target[i]",
        " arr[i] <= 109target contains no duplicates."
    ]
},
{
    "id": "1719",
    "title": "Number Of Ways To Reconstruct A Tree",
    "question": "You are given an array pairs, where pairs[i] = [xi, yi], and:Let ways be the number of rooted trees that satisfy the following conditions:Two ways are considered to be different if there is at least one node that has different parents in both ways.\nReturn:A rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\nAn ancestor of a node is any node on the path from the root to that node (excluding the node itself).\n The root has no ancestors.",
    "examples": [
        "Input: pairs = [[1,2],[2,3]]",
        "Output: 1",
        "Explanation: There is exactly one valid rooted tree, which is shown in the above figure.",
        "Input: pairs = [[1,2],[2,3],[1,3]]",
        "Output: 2",
        "Explanation: There are multiple valid rooted trees. Three of them are shown in the above figures.",
        "Input: pairs = [[1,2],[2,3],[2,4],[1,5]]",
        "Output: 0",
        "Explanation: There are no valid rooted trees."
    ],
    "constraints": [
        "There are no duplicates. xi < yiThe tree consists of nodes whose values appeared in pairs. A pair [xi",
        " yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi. Note: the tree does not have to be a binary tree. 0 if ways == 01 if ways == 12 if ways > 11 <= pairs. length <= 1051 <= xi < yi <= 500The elements in pairs are unique."
    ]
},
{
    "id": "703",
    "title": "Kth Largest Element in a Stream",
    "question": "Design a class to find the kth largest element in a stream.\n Note that it is the kth largest element in the sorted order, not the kth distinct element.\nImplement KthLargest class:",
    "examples": [
        "Input",
        "[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]",
        "[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]",
        "Output",
        "[null, 4, 5, 5, 8, 8]",
        "",
        "Explanation",
        "KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);",
        "kthLargest. add(3);   // return 4",
        "kthLargest. add(5);   // return 5",
        "kthLargest. add(10);  // return 5",
        "kthLargest. add(9);   // return 8",
        "kthLargest. add(4);   // return 8",
        ""
    ],
    "constraints": [
        "KthLargest(int k",
        " int[] nums) Initializes the object with the integer k and the stream of integers nums. int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream. 1 <= k <= 1040 <= nums. length <= 104-104 <= nums[i] <= 104-104 <= val <= 104At most 104 calls will be made to add. It is guaranteed that there will be at least k elements in the array when you search for the kth element."
    ]
},
{
    "id": "1723",
    "title": "Find Minimum Time to Finish All Jobs",
    "question": "You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\nThere are k workers that you can assign jobs to.\n Each job should be assigned to exactly one worker.\n The working time of a worker is the sum of the time it takes to complete all jobs assigned to them.\n Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\nReturn the minimum possible maximum working time of any assignment.",
    "examples": [
        "Input: jobs = [3,2,3], k = 3",
        "Output: 3",
        "Explanation: By assigning each person one job, the maximum time is 3.",
        "Input: jobs = [1,2,4,7,8], k = 2",
        "Output: 11",
        "Explanation: Assign the jobs the following way:",
        "Worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)",
        "Worker 2: 4, 7 (working time = 4 + 7 = 11)",
        "The maximum working time is 11."
    ],
    "constraints": [
        "1 <= k <= jobs. length <= 121 <= jobs[i] <= 107"
    ]
},
{
    "id": "1728",
    "title": "Cat and Mouse II",
    "question": "A game is played by a cat and a mouse named Cat and Mouse.\nThe environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (Cat, Mouse), or food.\nMouse and Cat play according to the following rules:The game can end in 4 ways:Given a rows x cols matrix grid and two integers catJump and mouseJump, return true if Mouse can win the game if both Cat and Mouse play optimally, otherwise return false.",
    "examples": [
        "Input: grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2",
        "Output: true",
        "Explanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.",
        "Input: grid = [\"M. C... F\"], catJump = 1, mouseJump = 4",
        "Output: true",
        "Input: grid = [\"M. C... F\"], catJump = 1, mouseJump = 3",
        "Output: false",
        "Input: grid = [\"C...#\",\"...#F\",\"....#\",\"M....\"], catJump = 2, mouseJump = 5",
        "Output: false",
        "Input: grid = [\". M...\",\"..#..\",\"#..#.\",\"C#.#.\",\"...#F\"], catJump = 3, mouseJump = 1",
        "Output: true",
        ""
    ],
    "constraints": [
        "Players are represented by the characters 'C'(Cat)",
        "'M'(Mouse). Floors are represented by the character '.' and can be walked on. Walls are represented by the character '#' and cannot be walked on. Food is represented by the character 'F' and can be walked on. There is only one of each character 'C'",
        " 'M'",
        " and 'F' in grid. Mouse moves first",
        " then they take turns to move. During each turn",
        " Cat and Mouse can jump in one of the four directions (left",
        " right",
        " up",
        " down). They cannot jump over the wall nor outside of the grid. catJump",
        " mouseJump are the maximum lengths Cat and Mouse can jump at a time",
        " respectively. Cat and Mouse can jump less than the maximum length. Staying in the same position is allowed. Mouse can jump over Cat. If Cat occupies the same position as Mouse",
        " Cat wins. If Cat reaches the food first",
        " Cat wins. If Mouse reaches the food first",
        " Mouse wins. If Mouse cannot get to the food within 1000 turns",
        " Cat wins. rows == grid. lengthcols = grid[i]. length1 <= rows",
        " cols <= 8grid[i][j] consist only of characters 'C'",
        " 'M'",
        " 'F'",
        " '.'",
        " and '#'. There is only one of each character 'C'",
        " 'M'",
        " and 'F' in grid. 1 <= catJump",
        " mouseJump <= 8"
    ]
},
{
    "id": "1735",
    "title": "Count Ways to Make Array With Product",
    "question": "You are given a 2D integer array, queries.\n For each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki.\n As the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7.\nReturn an integer array answer where answer.\nlength == queries.\nlength, and answer[i] is the answer to the ith query.",
    "examples": [
        "Input: queries = [[2,6],[5,1],[73,660]]",
        "Output: [4,1,50734910]",
        "Explanation: Each query is independent.",
        "[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].",
        "[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].",
        "[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910.",
        "Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "Output: [1,2,3,10,5]",
        ""
    ],
    "constraints": [
        "1 <= queries. length <= 104 1 <= ni",
        " ki <= 104"
    ]
},
{
    "id": "1739",
    "title": "Building Boxes",
    "question": "You have a cubic storeroom where the width, length, and height of the room are all equal to n units.\n You are asked to place n boxes in this room where each box is a cube of unit side length.\n There are however some rules to placing the boxes:Given an integer n, return the minimum possible number of boxes touching the floor.",
    "examples": [
        "Input: n = 3",
        "Output: 3",
        "Explanation: The figure above is for the placement of the three boxes.",
        "These boxes are placed in the corner of the room, where the corner is on the left side.",
        "Input: n = 4",
        "Output: 3",
        "Explanation: The figure above is for the placement of the four boxes.",
        "These boxes are placed in the corner of the room, where the corner is on the left side.",
        "Input: n = 10",
        "Output: 6",
        "Explanation: The figure above is for the placement of the ten boxes.",
        "These boxes are placed in the corner of the room, where the corner is on the back side."
    ],
    "constraints": [
        "You can place the boxes anywhere on the floor. If box x is placed on top of the box y",
        " then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall. 1 <= n <= 109"
    ]
},
{
    "id": "1745",
    "title": "Palindrome Partitioning IV",
    "question": "Given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings.\n Otherwise, return false.\n​​​​​A string is said to be palindrome if it the same string when reversed.",
    "examples": [
        "Input: s = \"abcbdd\"",
        "Output: true",
        "Explanation: \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes.",
        "Input: s = \"bcbddxy\"",
        "Output: false",
        "Explanation: s cannot be split into 3 palindromes.",
        ""
    ],
    "constraints": [
        "3 <= s. length <= 2000s​​​​​​ consists only of lowercase English letters."
    ]
},
{
    "id": "1751",
    "title": "Maximum Number of Events That Can Be Attended II",
    "question": "You are given an array of events where events[i] = [startDayi, endDayi, valuei].\n The ith event starts at startDayi and ends at endDayi, and if you attend this event, you will receive a value of valuei.\n You are also given an integer k which represents the maximum number of events you can attend.\nYou can only attend one event at a time.\n If you choose to attend an event, you must attend the entire event.\n Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.\nReturn the maximum sum of values that you can receive by attending events.",
    "examples": [
        "Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2",
        "Output: 7",
        "Explanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7. Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2",
        "Output: 10",
        "Explanation: Choose event 2 for a total value of 10.",
        "Notice that you cannot attend any other event as they overlap, and that you do not have to attend k events. Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3",
        "Output: 9",
        "Explanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three."
    ],
    "constraints": [
        "1 <= k <= events. length1 <= k * events. length <= 1061 <= startDayi <= endDayi <= 1091 <= valuei <= 106"
    ]
},
{
    "id": "1755",
    "title": "Closest Subsequence Sum",
    "question": "You are given an integer array nums and an integer goal.\nYou want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal.\n That is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal).\nReturn the minimum possible value of abs(sum - goal).\nNote that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.",
    "examples": [
        "Input: nums = [5,-7,3,5], goal = 6",
        "Output: 0",
        "Explanation: Choose the whole array as a subsequence, with a sum of 6.",
        "This is equal to the goal, so the absolute difference is 0.",
        "Input: nums = [7,-9,15,-2], goal = -5",
        "Output: 1",
        "Explanation: Choose the subsequence [7,-9,-2], with a sum of -4.",
        "The absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.",
        "Input: nums = [1,2,3], goal = -7",
        "Output: 7",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 40-107 <= nums[i] <= 107-109 <= goal <= 109"
    ]
},
{
    "id": "1761",
    "title": "Minimum Degree of a Connected Trio in a Graph",
    "question": "You are given an undirected graph.\n You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.\nA connected trio is a set of three nodes where there is an edge between every pair of them.\nThe degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.\nReturn the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.",
    "examples": [
        "Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]",
        "Output: 3",
        "Explanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.",
        "Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]",
        "Output: 0",
        "Explanation: There are exactly three trios:",
        "1) [1,4,3] with degree 0.",
        "2) [2,5,6] with degree 2.",
        "3) [5,6,7] with degree 2.",
        ""
    ],
    "constraints": [
        "2 <= n <= 400edges[i]. length == 21 <= edges. length <= n * (n-1) / 21 <= ui",
        " vi <= nui != viThere are no repeated edges."
    ]
},
{
    "id": "1766",
    "title": "Tree of Coprimes",
    "question": "There is a tree (i.\ne.\n, a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.\n Each node has a value associated with it, and the root of the tree is node 0.\nTo represent this tree, you are given an integer array nums and a 2D array edges.\n Each nums[i] represents the ith node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree.\nTwo values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.\nAn ancestor of a node i is any other node on the shortest path from node i to the root.\n A node is not considered an ancestor of itself.\nReturn an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.",
    "examples": [
        "Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]",
        "Output: [-1,0,0,1]",
        "Explanation: In the above figure, each node's value is in parentheses.",
        "- Node 0 has no coprime ancestors.",
        "- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).",
        "- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's",
        "  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.",
        "- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its",
        "  closest valid ancestor.",
        "Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
        "Output: [-1,0,-1,0,0,0,-1]",
        ""
    ],
    "constraints": [
        "nums. length == n1 <= nums[i] <= 501 <= n <= 105edges. length == n - 1edges[j]. length == 20 <= uj",
        " vj < nuj != vj"
    ]
},
{
    "id": "1771",
    "title": "Maximize Palindrome Length From Subsequences",
    "question": "You are given two strings, word1 and word2.\n You want to construct a string in the following manner:Return the length of the longest palindrome that can be constructed in the described manner.\n If no palindromes can be constructed, return 0.\nA subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.\nA palindrome is a string that reads the same forward as well as backward.",
    "examples": [
        "Input: word1 = \"cacb\", word2 = \"cbba\"",
        "Output: 5",
        "Explanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome. Input: word1 = \"ab\", word2 = \"ab\"",
        "Output: 3",
        "Explanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome. Input: word1 = \"aa\", word2 = \"bb\"",
        "Output: 0",
        "Explanation: You cannot construct a palindrome from the described method, so return 0."
    ],
    "constraints": [
        "Choose some non-empty subsequence subsequence1 from word1. Choose some non-empty subsequence subsequence2 from word2. Concatenate the subsequences: subsequence1 + subsequence2",
        " to make the string. 1 <= word1. length",
        " word2. length <= 1000word1 and word2 consist of lowercase English letters."
    ]
},
{
    "id": "704",
    "title": "Binary Search",
    "question": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums.\n If target exists, then return its index.\n Otherwise, return -1.\nYou must write an algorithm with O(log n) runtime complexity.",
    "examples": [
        "Input: nums = [-1,0,3,5,9,12], target = 9",
        "Output: 4",
        "Explanation: 9 exists in nums and its index is 4",
        "Input: nums = [-1,0,3,5,9,12], target = 2",
        "Output: -1",
        "Explanation: 2 does not exist in nums so return -1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-104 < nums[i]",
        " target < 104All the integers in nums are unique. nums is sorted in ascending order."
    ]
},
{
    "id": "1776",
    "title": "Car Fleet II",
    "question": "There are n cars traveling at different speeds in the same direction along a one-lane road.\n You are given an array cars of length n, where cars[i] = [positioni, speedi] represents:For simplicity, cars can be considered as points moving along the number line.\n Two cars collide when they occupy the same position.\n Once a car collides with another car, they unite and form a single car fleet.\n The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.\nReturn an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car.\n Answers within 10-5 of the actual answers are accepted.",
    "examples": [
        "Input: cars = [[1,2],[2,1],[4,3],[7,2]]",
        "Output: [1. 00000,-1. 00000,3. 00000,-1. 00000]",
        "Explanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.",
        "Input: cars = [[3,4],[5,4],[6,3],[9,1]]",
        "Output: [2. 00000,1. 00000,1. 50000,-1. 00000]",
        ""
    ],
    "constraints": [
        "positioni is the distance between the ith car and the beginning of the road in meters. It is guaranteed that positioni < positioni+1. speedi is the initial speed of the ith car in meters per second. 1 <= cars. length <= 1051 <= positioni",
        " speedi <= 106positioni < positioni+1"
    ]
},
{
    "id": "1782",
    "title": "Count Pairs Of Nodes",
    "question": "You are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.\n You are also given an integer array queries.\nLet incident(a, b) be defined as the number of edges that are connected to either node a or b.\nThe answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:Return an array answers such that answers.\nlength == queries.\nlength and answers[j] is the answer of the jth query.\nNote that there can be multiple edges between the same two nodes.",
    "examples": [
        "Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]",
        "Output: [6,5]",
        "Explanation: The calculations for incident(a, b) are shown in the table above.",
        "The answers for each of the queries are as follows:",
        "- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.",
        "- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.",
        "Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]",
        "Output: [10,10,9,8,6]",
        ""
    ],
    "constraints": [
        "a < bincident(a",
        " b) > queries[j]2 <= n <= 2 * 1041 <= edges. length <= 1051 <= ui",
        " vi <= nui != vi1 <= queries. length <= 200 <= queries[j] < edges. length"
    ]
},
{
    "id": "1787",
    "title": "Make the XOR of All Segments Equal to Zero",
    "question": "You are given an array nums​​​ and an integer k​​​​​.\n The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR .\n.\n.\n XOR nums[right].\nReturn the minimum number of elements to change in the array such that the XOR of all segments of size k​​​​​​ is equal to zero.",
    "examples": [
        "Input: nums = [1,2,0,3,0], k = 1",
        "Output: 3",
        "Explanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].",
        "Input: nums = [3,4,5,2,1,7,3,4,7], k = 3",
        "Output: 3",
        "Explanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].",
        "Input: nums = [1,2,4,1,2,5,1,2,6], k = 3",
        "Output: 3",
        "Explanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3]."
    ],
    "constraints": [
        "1 <= k <= nums. length <= 2000​​​​​​0 <= nums[i] < 210"
    ]
},
{
    "id": "1793",
    "title": "Maximum Score of a Good Subarray",
    "question": "You are given an array of integers nums (0-indexed) and an integer k.\nThe score of a subarray (i, j) is defined as min(nums[i], nums[i+1], .\n.\n.\n, nums[j]) * (j - i + 1).\n A good subarray is a subarray where i <= k <= j.\nReturn the maximum possible score of a good subarray.",
    "examples": [
        "Input: nums = [1,4,3,7,4,5], k = 3",
        "Output: 15",
        "Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. ",
        "Input: nums = [5,5,4,5,4,1,1,1], k = 0",
        "Output: 20",
        "Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 2 * 1040 <= k < nums. length"
    ]
},
{
    "id": "1799",
    "title": "Maximize Score After N Operations",
    "question": "You are given nums, an array of positive integers of size 2 * n.\n You must perform n operations on this array.\nIn the ith operation (1-indexed), you will:Return the maximum score you can receive after performing n operations.\nThe function gcd(x, y) is the greatest common divisor of x and y.",
    "examples": [
        "Input: nums = [1,2]",
        "Output: 1",
        "Explanation: The optimal choice of operations is:",
        "(1 * gcd(1, 2)) = 1",
        "Input: nums = [3,4,6,8]",
        "Output: 11",
        "Explanation: The optimal choice of operations is:",
        "(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11",
        "Input: nums = [1,2,3,4,5,6]",
        "Output: 14",
        "Explanation: The optimal choice of operations is:",
        "(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14",
        ""
    ],
    "constraints": [
        "Choose two elements",
        " x and y. Receive a score of i * gcd(x",
        " y). Remove x and y from nums. 1 <= n <= 7nums. length == 2 * n1 <= nums[i] <= 106"
    ]
},
{
    "id": "1803",
    "title": "Count Pairs With XOR in a Range",
    "question": "Given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.\nA nice pair is a pair (i, j) where 0 <= i < j < nums.\nlength and low <= (nums[i] XOR nums[j]) <= high.",
    "examples": [
        "Input: nums = [1,4,2,7], low = 2, high = 6",
        "Output: 6",
        "Explanation: All nice pairs (i, j) are as follows:",
        "    - (0, 1): nums[0] XOR nums[1] = 5 ",
        "    - (0, 2): nums[0] XOR nums[2] = 3",
        "    - (0, 3): nums[0] XOR nums[3] = 6",
        "    - (1, 2): nums[1] XOR nums[2] = 6",
        "    - (1, 3): nums[1] XOR nums[3] = 3",
        "    - (2, 3): nums[2] XOR nums[3] = 5",
        "Input: nums = [9,8,4,2,1], low = 5, high = 14",
        "Output: 8",
        "Explanation: All nice pairs (i, j) are as follows:",
        "​​​​​    - (0, 2): nums[0] XOR nums[2] = 13",
        "    - (0, 3): nums[0] XOR nums[3] = 11",
        "    - (0, 4): nums[0] XOR nums[4] = 8",
        "    - (1, 2): nums[1] XOR nums[2] = 12",
        "    - (1, 3): nums[1] XOR nums[3] = 10",
        "    - (1, 4): nums[1] XOR nums[4] = 9",
        "    - (2, 3): nums[2] XOR nums[3] = 6",
        "    - (2, 4): nums[2] XOR nums[4] = 5"
    ],
    "constraints": [
        "1 <= nums. length <= 2 * 1041 <= nums[i] <= 2 * 1041 <= low <= high <= 2 * 104"
    ]
},
{
    "id": "1808",
    "title": "Maximize Number of Nice Divisors",
    "question": "You are given a positive integer primeFactors.\n You are asked to construct a positive integer n that satisfies the following conditions:Return the number of nice divisors of n.\n Since that number can be too large, return it modulo 109 + 7.\nNote that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n The prime factors of a number n is a list of prime numbers such that their product equals n.",
    "examples": [
        "Input: primeFactors = 5",
        "Output: 6",
        "Explanation: 200 is a valid value of n.",
        "It has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].",
        "There is not other value of n that has at most 5 prime factors and more nice divisors.",
        "Input: primeFactors = 8",
        "Output: 18",
        ""
    ],
    "constraints": [
        "The number of prime factors of n (not necessarily distinct) is at most primeFactors. The number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. For example",
        " if n = 12",
        " then its prime factors are [2",
        "2",
        "3]",
        " then 6 and 12 are nice divisors",
        " while 3 and 4 are not. 1 <= primeFactors <= 109"
    ]
},
{
    "id": "1815",
    "title": "Maximum Number of Groups Getting Fresh Donuts",
    "question": "There is a donuts shop that bakes donuts in batches of batchSize.\n They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch.\n You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop.\n Each customer will get exactly one donut.\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups.\n A group will be happy if they all get fresh donuts.\n That is, the first customer of the group does not receive a donut that was left over from the previous group.\nYou can freely rearrange the ordering of the groups.\n Return the maximum possible number of happy groups after rearranging the groups.",
    "examples": [
        "Input: batchSize = 3, groups = [1,2,3,4,5,6]",
        "Output: 4",
        "Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy.",
        "Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= batchSize <= 91 <= groups. length <= 301 <= groups[i] <= 109"
    ]
},
{
    "id": "1819",
    "title": "Number of Different Subsequences GCDs",
    "question": "You are given an array nums that consists of positive integers.\nThe GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\nReturn the number of different GCDs among all non-empty subsequences of nums.",
    "examples": [
        "Input: nums = [6,10,3]",
        "Output: 5",
        "Explanation: The figure shows all the non-empty subsequences and their GCDs.",
        "The different GCDs are 6, 10, 3, 2, and 1.",
        "Input: nums = [5,15,40,5,6]",
        "Output: 7",
        ""
    ],
    "constraints": [
        "For example",
        " the GCD of the sequence [4",
        "6",
        "16] is 2. For example",
        " [2",
        "5",
        "10] is a subsequence of [1",
        "2",
        "1",
        "2",
        "4",
        "1",
        "5",
        "10]. 1 <= nums. length <= 1051 <= nums[i] <= 2 * 105"
    ]
},
{
    "id": "1825",
    "title": "Finding MK Average",
    "question": "You are given two integers, m and k, and a stream of integers.\n You are tasked to implement a data structure that calculates the MKAverage for the stream.\nThe MKAverage can be calculated using these steps:Implement the MKAverage class:",
    "examples": [
        "Input",
        "[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]",
        "[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]",
        "Output",
        "[null, null, null, -1, null, 3, null, null, null, 5]",
        "",
        "Explanation",
        "MKAverage obj = new MKAverage(3, 1); ",
        "obj. addElement(3);        // current elements are [3]",
        "obj. addElement(1);        // current elements are [3,1]",
        "obj. calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.",
        "obj. addElement(10);       // current elements are [3,1,10]",
        "obj. calculateMKAverage(); // The last 3 elements are [3,1,10].",
        "                          // After removing smallest and largest 1 element the container will be [3].",
        "                          // The average of [3] equals 3/1 = 3, return 3",
        "obj. addElement(5);        // current elements are [3,1,10,5]",
        "obj. addElement(5);        // current elements are [3,1,10,5,5]",
        "obj. addElement(5);        // current elements are [3,1,10,5,5,5]",
        "obj. calculateMKAverage(); // The last 3 elements are [5,5,5].",
        "                          // After removing smallest and largest 1 element the container will be [5].",
        "                          // The average of [5] equals 5/1 = 5, return 5",
        ""
    ],
    "constraints": [
        "MKAverage(int m",
        " int k) Initializes the MKAverage object with an empty stream and the two integers m and k. void addElement(int num) Inserts a new element num into the stream. int calculateMKAverage() Calculates and returns the MKAverage for the current stream rounded down to the nearest integer. 3 <= m <= 1051 <= k*2 < m1 <= num <= 105At most 105 calls will be made to addElement and calculateMKAverage."
    ]
},
{
    "id": "705",
    "title": "Design HashSet",
    "question": "Design a HashSet without using any built-in hash table libraries.\nImplement MyHashSet class:",
    "examples": [
        "Input",
        "[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]",
        "[[], [1], [2], [1], [3], [2], [2], [2], [2]]",
        "Output",
        "[null, null, null, true, false, null, true, null, false]",
        "",
        "Explanation",
        "MyHashSet myHashSet = new MyHashSet();",
        "myHashSet. add(1);      // set = [1]",
        "myHashSet. add(2);      // set = [1, 2]",
        "myHashSet. contains(1); // return True",
        "myHashSet. contains(3); // return False, (not found)",
        "myHashSet. add(2);      // set = [1, 2]",
        "myHashSet. contains(2); // return True",
        "myHashSet. remove(2);   // set = [1]",
        "myHashSet. contains(2); // return False, (already removed)"
    ],
    "constraints": [
        "void add(key) Inserts the value key into the HashSet. bool contains(key) Returns whether the value key exists in the HashSet or not. void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet",
        " do nothing. 0 <= key <= 106At most 104 calls will be made to add",
        " remove",
        " and contains."
    ]
},
{
    "id": "1830",
    "title": "Minimum Number of Operations to Make String Sorted",
    "question": "You are given a string s (0-indexed)​​​​​​.\n You are asked to perform the following operation on s​​​​​​ until you get a sorted string:Return the number of operations needed to make the string sorted.\n Since the answer can be too large, return it modulo 109 + 7.",
    "examples": [
        "Input: s = \"cba\"",
        "Output: 5",
        "Explanation: The simulation goes as follows:",
        "Operation 1: i=2, j=2. Swap s[1] and s[2] to get s=\"cab\", then reverse the suffix starting at 2. Now, s=\"cab\".",
        "Operation 2: i=1, j=2. Swap s[0] and s[2] to get s=\"bac\", then reverse the suffix starting at 1. Now, s=\"bca\".",
        "Operation 3: i=2, j=2. Swap s[1] and s[2] to get s=\"bac\", then reverse the suffix starting at 2. Now, s=\"bac\".",
        "Operation 4: i=1, j=1. Swap s[0] and s[1] to get s=\"abc\", then reverse the suffix starting at 1. Now, s=\"acb\".",
        "Operation 5: i=2, j=2. Swap s[1] and s[2] to get s=\"abc\", then reverse the suffix starting at 2. Now, s=\"abc\".",
        "Input: s = \"aabaa\"",
        "Output: 2",
        "Explanation: The simulation goes as follows:",
        "Operation 1: i=3, j=4. Swap s[2] and s[4] to get s=\"aaaab\", then reverse the substring starting at 3. Now, s=\"aaaba\".",
        "Operation 2: i=4, j=4. Swap s[3] and s[4] to get s=\"aaaab\", then reverse the substring starting at 4. Now, s=\"aaaab\".",
        "Input: s = \"cdbea\"",
        "Output: 63Input: s = \"leetcodeleetcodeleetcode\"",
        "Output: 982157772",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 3000s​​​​​​ consists only of lowercase English letters."
    ]
},
{
    "id": "1835",
    "title": "Find XOR Sum of All Pairs Bitwise AND",
    "question": "The XOR sum of a list is the bitwise XOR of all its elements.\n If the list only contains one element, then its XOR sum will be equal to this element.\nYou are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.\nConsider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 <= i < arr1.\nlength and 0 <= j < arr2.\nlength.\nReturn the XOR sum of the aforementioned list.",
    "examples": [
        "Input: arr1 = [1,2,3], arr2 = [6,5]",
        "Output: 0",
        "Explanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].",
        "The XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.",
        "Input: arr1 = [12], arr2 = [4]",
        "Output: 4",
        "Explanation: The list = [12 AND 4] = [4]. The XOR sum = 4.",
        ""
    ],
    "constraints": [
        "For example",
        " the XOR sum of [1",
        "2",
        "3",
        "4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4",
        " and the XOR sum of [3] is equal to 3. 1 <= arr1. length",
        " arr2. length <= 1050 <= arr1[i]",
        " arr2[j] <= 109"
    ]
},
{
    "id": "1840",
    "title": "Maximum Building Height",
    "question": "You want to build n new buildings in a city.\n The new buildings will be built in a line and are labeled from 1 to n.\nHowever, there are city restrictions on the heights of the new buildings:Additionally, there are city restrictions on the maximum height of specific buildings.\n These restrictions are given as a 2D integer array restrictions where restrictions[i] = [idi, maxHeighti] indicates that building idi must have a height less than or equal to maxHeighti.\nIt is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions.\nReturn the maximum possible height of the tallest building.",
    "examples": [
        "Input: n = 5, restrictions = [[2,1],[4,1]]",
        "Output: 2",
        "Explanation: The green area in the image indicates the maximum allowed height for each building.",
        "We can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2. Input: n = 6, restrictions = []",
        "Output: 5",
        "Explanation: The green area in the image indicates the maximum allowed height for each building.",
        "We can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5.",
        "Input: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]",
        "Output: 5",
        "Explanation: The green area in the image indicates the maximum allowed height for each building.",
        "We can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.",
        ""
    ],
    "constraints": [
        "The height of each building must be a non-negative integer. The height of the first building must be 0. The height difference between any two adjacent buildings cannot exceed 1. 2 <= n <= 1090 <= restrictions. length <= min(n - 1",
        " 105)2 <= idi <= nidi is unique. 0 <= maxHeighti <= 109"
    ]
},
{
    "id": "1847",
    "title": "Closest Room",
    "question": "There is a hotel with n rooms.\n The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei.\n Each roomIdi is guaranteed to be unique.\nYou are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej].\n The answer to the jth query is the room number id of a room such that:If there is a tie in the absolute difference, then use the room with the smallest such id.\n If there is no such room, the answer is -1.\nReturn an array answer of length k where answer[j] contains the answer to the jth query.",
    "examples": [
        "Input: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]",
        "Output: [3,-1,3]",
        "Explanation: The answers to the queries are as follows:",
        "Query = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.",
        "Query = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.",
        "Query = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3. Input: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]",
        "Output: [2,1,3]",
        "Explanation: The answers to the queries are as follows:",
        "Query = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.",
        "Query = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.",
        "Query = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3."
    ],
    "constraints": [
        "The room has a size of at least minSizej",
        " andabs(id - preferredj) is minimized",
        " where abs(x) is the absolute value of x. n == rooms. length1 <= n <= 105k == queries. length1 <= k <= 1041 <= roomIdi",
        " preferredj <= 1071 <= sizei",
        " minSizej <= 107 "
    ]
},
{
    "id": "1851",
    "title": "Minimum Interval to Include Each Query",
    "question": "You are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive).\n The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.\nYou are also given an integer array queries.\n The answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti.\n If no such interval exists, the answer is -1.\nReturn an array containing the answers to the queries.",
    "examples": [
        "Input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]",
        "Output: [3,3,1,4]",
        "Explanation: The queries are processed as follows:",
        "- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.",
        "- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.",
        "- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.",
        "- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.",
        "Input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]",
        "Output: [2,-1,4,6]",
        "Explanation: The queries are processed as follows:",
        "- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.",
        "- Query = 19: None of the intervals contain 19. The answer is -1.",
        "- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.",
        "- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.",
        ""
    ],
    "constraints": [
        "1 <= intervals. length <= 1051 <= queries. length <= 105intervals[i]. length == 21 <= lefti <= righti <= 1071 <= queries[j] <= 107"
    ]
},
{
    "id": "1857",
    "title": "Largest Color Value in a Directed Graph",
    "question": "There is a directed graph of n colored nodes and m edges.\n The nodes are numbered from 0 to n - 1.\nYou are given a string colors where colors[i] is a lowercase English letter representing the color of the ith node in this graph (0-indexed).\n You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.\nA valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> .\n.\n.\n -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k.\n The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.\nReturn the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.",
    "examples": [
        "Input: colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]",
        "Output: 3",
        "Explanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored \"a\" (red in the above image).",
        "Input: colors = \"a\", edges = [[0,0]]",
        "Output: -1",
        "Explanation: There is a cycle from 0 to 0.",
        ""
    ],
    "constraints": [
        "n == colors. lengthm == edges. length1 <= n <= 1050 <= m <= 105colors consists of lowercase English letters. 0 <= aj",
        " bj < n"
    ]
},
{
    "id": "1862",
    "title": "Sum of Floored Pairs",
    "question": "Given an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.\nlength in the array.\n Since the answer may be too large, return it modulo 109 + 7.\nThe floor() function returns the integer part of the division.",
    "examples": [
        "Input: nums = [2,5,9]",
        "Output: 10",
        "Explanation:",
        "floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0",
        "floor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1",
        "floor(5 / 2) = 2",
        "floor(9 / 2) = 4",
        "floor(9 / 5) = 1",
        "We calculate the floor of the division for every pair of indices in the array then sum them up.",
        "Input: nums = [7,7,7,7,7,7,7]",
        "Output: 49",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 105"
    ]
},
{
    "id": "1866",
    "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
    "question": "There are n uniquely-sized sticks whose lengths are integers from 1 to n.\n You want to arrange the sticks such that exactly k sticks are visible from the left.\n A stick is visible from the left if there are no longer sticks to the left of it.\nGiven n and k, return the number of such arrangements.\n Since the answer may be large, return it modulo 109 + 7.",
    "examples": [
        "Input: n = 3, k = 2",
        "Output: 3",
        "Explanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.",
        "The visible sticks are underlined.",
        "Input: n = 5, k = 5",
        "Output: 1",
        "Explanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.",
        "The visible sticks are underlined.",
        "Input: n = 20, k = 11",
        "Output: 647427950",
        "Explanation: There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible.",
        ""
    ],
    "constraints": [
        "For example",
        " if the sticks are arranged [1",
        "3",
        "2",
        "5",
        "4]",
        " then the sticks with lengths 1",
        " 3",
        " and 5 are visible from the left. 1 <= n <= 10001 <= k <= n"
    ]
},
{
    "id": "1872",
    "title": "Stone Game VIII",
    "question": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones arranged in a row.\n On each player's turn, while the number of stones is more than one, they will do the following:The game stops when only one stone is left in the row.\nThe score difference between Alice and Bob is (Alice's score - Bob's score).\n Alice's goal is to maximize the score difference, and Bob's goal is the minimize the score difference.\nGiven an integer array stones of length n where stones[i] represents the value of the ith stone from the left, return the score difference between Alice and Bob if they both play optimally.",
    "examples": [
        "Input: stones = [-1,2,-3,4,-5]",
        "Output: 5",
        "Explanation:",
        "- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of",
        "  value 2 on the left. stones = [2,-5].",
        "- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on",
        "  the left. stones = [-3].",
        "The difference between their scores is 2 - (-3) = 5.",
        "Input: stones = [7,-6,5,10,5,-2,-6]",
        "Output: 13",
        "Explanation:",
        "- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a",
        "  stone of value 13 on the left. stones = [13].",
        "The difference between their scores is 13 - 0 = 13.",
        "Input: stones = [-10,-12]",
        "Output: -22",
        "Explanation:",
        "- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her",
        "  score and places a stone of value -22 on the left. stones = [-22].",
        "The difference between their scores is (-22) - 0 = -22.",
        ""
    ],
    "constraints": [
        "n == stones. length2 <= n <= 105-104 <= stones[i] <= 104"
    ]
},
{
    "id": "1879",
    "title": "Minimum XOR Sum of Two Arrays",
    "question": "You are given two integer arrays nums1 and nums2 of length n.\nThe XOR sum of the two integer arrays is (nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + .\n.\n.\n + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed).\nRearrange the elements of nums2 such that the resulting XOR sum is minimized.\nReturn the XOR sum after the rearrangement.",
    "examples": [
        "Input: nums1 = [1,2], nums2 = [2,3]",
        "Output: 2",
        "Explanation: Rearrange nums2 so that it becomes [3,2].",
        "The XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2. Input: nums1 = [1,0,3], nums2 = [5,3,4]",
        "Output: 8",
        "Explanation: Rearrange nums2 so that it becomes [5,4,3]. ",
        "The XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8.",
        ""
    ],
    "constraints": [
        "For example",
        " the XOR sum of [1",
        "2",
        "3] and [3",
        "2",
        "1] is equal to (1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4. n == nums1. lengthn == nums2. length1 <= n <= 140 <= nums1[i]",
        " nums2[i] <= 107"
    ]
},
{
    "id": "69",
    "title": "Sqrt(x)",
    "question": "Given a non-negative integer x, compute and return the square root of x.\nSince the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.\nNote: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.\n5) or x ** 0.\n5.",
    "examples": [
        "Input: x = 4",
        "Output: 2",
        "Input: x = 8",
        "Output: 2",
        "Explanation: The square root of 8 is 2. 82842..., and since the decimal part is truncated, 2 is returned."
    ],
    "constraints": [
        "0 <= x <= 231 - 1"
    ]
},
{
    "id": "706",
    "title": "Design HashMap",
    "question": "Design a HashMap without using any built-in hash table libraries.\nImplement the MyHashMap class:",
    "examples": [
        "Input",
        "[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]",
        "[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]",
        "Output",
        "[null, null, null, 1, -1, null, 1, null, -1]",
        "",
        "Explanation",
        "MyHashMap myHashMap = new MyHashMap();",
        "myHashMap. put(1, 1); // The map is now [[1,1]]",
        "myHashMap. put(2, 2); // The map is now [[1,1], [2,2]]",
        "myHashMap. get(1);    // return 1, The map is now [[1,1], [2,2]]",
        "myHashMap. get(3);    // return -1 (i. e., not found), The map is now [[1,1], [2,2]]",
        "myHashMap. put(2, 1); // The map is now [[1,1], [2,1]] (i. e., update the existing value)",
        "myHashMap. get(2);    // return 1, The map is now [[1,1], [2,1]]",
        "myHashMap. remove(2); // remove the mapping for 2, The map is now [[1,1]]",
        "myHashMap. get(2);    // return -1 (i. e., not found), The map is now [[1,1]]",
        ""
    ],
    "constraints": [
        "MyHashMap() initializes the object with an empty map. void put(int key",
        " int value) inserts a (key",
        " value) pair into the HashMap. If the key already exists in the map",
        " update the corresponding value. int get(int key) returns the value to which the specified key is mapped",
        " or -1 if this map contains no mapping for the key. void remove(key) removes the key and its corresponding value if the map contains the mapping for the key. 0 <= key",
        " value <= 106At most 104 calls will be made to put",
        " get",
        " and remove."
    ]
},
{
    "id": "1883",
    "title": "Minimum Skips to Arrive at Meeting On Time",
    "question": "You are given an integer hoursBefore, the number of hours you have to travel to your meeting.\n To arrive at your meeting, you have to travel through n roads.\n The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers.\n In addition, you are given an integer speed, which is the speed (in km/h) you will travel at.\nAfter you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road.\n Note that you do not have to rest after traveling the last road because you are already at the meeting.\nHowever, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour.\n Note that this means you may finish traveling future roads at different hour marks.\nReturn the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.",
    "examples": [
        "Input: dist = [1,3,2], speed = 4, hoursBefore = 2",
        "Output: 1",
        "Explanation:",
        "Without skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2. 5 hours.",
        "You can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1. 5 hours.",
        "Note that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest.",
        "Input: dist = [7,3,5,5], speed = 2, hoursBefore = 10",
        "Output: 2",
        "Explanation:",
        "Without skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11. 5 hours.",
        "You can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours.",
        "Input: dist = [7,3,5,5], speed = 1, hoursBefore = 10",
        "Output: -1",
        "Explanation: It is impossible to arrive at the meeting on time even if you skip all the rests.",
        ""
    ],
    "constraints": [
        "For example",
        " if traveling a road takes 1. 4 hours",
        " you must wait until the 2 hour mark before traveling the next road. If traveling a road takes exactly 2 hours",
        " you do not need to wait. For example",
        " suppose traveling the first road takes 1. 4 hours and traveling the second road takes 0. 6 hours. Skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark",
        " letting you start traveling the third road immediately. n == dist. length1 <= n <= 10001 <= dist[i] <= 1051 <= speed <= 1061 <= hoursBefore <= 107"
    ]
},
{
    "id": "1889",
    "title": "Minimum Space Wasted From Packaging",
    "question": "You have n packages that you are trying to place in boxes, one package in each box.\n There are m suppliers that each produce boxes of different sizes (with infinite supply).\n A package can be placed in a box if the size of the package is less than or equal to the size of the box.\nThe package sizes are given as an integer array packages, where packages[i] is the size of the ith package.\n The suppliers are given as a 2D integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces.\nYou want to choose a single supplier and use boxes from them such that the total wasted space is minimized.\n For each package in a box, we define the space wasted to be size of the box - size of the package.\n The total wasted space is the sum of the space wasted in all the boxes.\nReturn the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes.\n Since the answer may be large, return it modulo 109 + 7.",
    "examples": [
        "Input: packages = [2,3,5], boxes = [[4,8],[2,8]]",
        "Output: 6",
        "Explanation: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.",
        "The total waste is (4-2) + (4-3) + (8-5) = 6.",
        "Input: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]",
        "Output: -1",
        "Explanation: There is no box that the package of size 5 can fit in.",
        "Input: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]",
        "Output: 9",
        "Explanation: It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.",
        "The total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.",
        ""
    ],
    "constraints": [
        "For example",
        " if you have to fit packages with sizes [2",
        "3",
        "5] and the supplier offers boxes of sizes [4",
        "8]",
        " you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. This would result in a waste of (4-2) + (4-3) + (8-5) = 6. n == packages. lengthm == boxes. length1 <= n <= 1051 <= m <= 1051 <= packages[i] <= 1051 <= boxes[j]. length <= 1051 <= boxes[j][k] <= 105sum(boxes[j]. length) <= 105The elements in boxes[j] are distinct."
    ]
},
{
    "id": "1896",
    "title": "Minimum Cost to Change the Final Value of Expression",
    "question": "You are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR operator),'(', and ')'.\nReturn the minimum cost to change the final value of the expression.\nThe cost of changing the final value of an expression is the number of operations performed on the expression.\n The types of operations are described as follows:Note: '&' does not take precedence over '|' in the order of calculation.\n Evaluate parentheses first, then in left-to-right order.",
    "examples": [
        "Input: expression = \"1&(0|1)\"",
        "Output: 1",
        "Explanation: We can turn \"1&(0|1)\" into \"1&(0&1)\" by changing the '|' to a '&' using 1 operation.",
        "The new expression evaluates to 0. ",
        "Input: expression = \"(0&0)&(0&0&0)\"",
        "Output: 3",
        "Explanation: We can turn \"(0&0)&(0&0&0)\" into \"(0|1)|(0&0&0)\" using 3 operations.",
        "The new expression evaluates to 1.",
        "Input: expression = \"(0|(1|0&1))\"",
        "Output: 1",
        "Explanation: We can turn \"(0|(1|0&1))\" into \"(0|(0|0&1))\" using 1 operation.",
        "The new expression evaluates to 0."
    ],
    "constraints": [
        "For example",
        " \"()1|1\" and \"(1)&()\" are not valid while \"1\"",
        " \"(((1))|(0))\"",
        " and \"1|(0&(1))\" are valid expressions. For example",
        " if expression = \"1|1|(0&0)&1\"",
        " its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. We want to apply operations so that the new expression evaluates to 0. Turn a '1' into a '0'. Turn a '0' into a '1'. Turn a '&' into a '|'. Turn a '|' into a '&'. 1 <= expression. length <= 105expression only contains '1'",
        "'0'",
        "'&'",
        "'|'",
        "'('",
        " and ')'All parentheses are properly matched. There will be no empty parentheses (i. e: \"()\" is not a substring of expression)."
    ]
},
{
    "id": "1900",
    "title": "The Earliest and Latest Rounds Where Players Compete",
    "question": "There is a tournament where n players are participating.\n The players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.\n).\nThe tournament consists of multiple rounds (starting from round number 1).\n In each round, the ith player from the front of the row competes against the ith player from the end of the row, and the winner advances to the next round.\n When the number of players is odd for the current round, the player in the middle automatically advances to the next round.\nAfter each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order).\nThe players numbered firstPlayer and secondPlayer are the best in the tournament.\n They can win against any other player before they compete against each other.\n If any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round.\nGiven the integers n, firstPlayer, and secondPlayer, return an integer array containing two values, the earliest possible round number and the latest possible round number in which these two players will compete against each other, respectively.",
    "examples": [
        "Input: n = 11, firstPlayer = 2, secondPlayer = 4",
        "Output: [3,4]",
        "Explanation:",
        "One possible scenario which leads to the earliest round number:",
        "First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11",
        "Second round: 2, 3, 4, 5, 6, 11",
        "Third round: 2, 3, 4",
        "One possible scenario which leads to the latest round number:",
        "First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11",
        "Second round: 1, 2, 3, 4, 5, 6",
        "Third round: 1, 2, 4",
        "Fourth round: 2, 4",
        "Input: n = 5, firstPlayer = 1, secondPlayer = 5",
        "Output: [1,1]",
        "Explanation: The players numbered 1 and 5 compete in the first round.",
        "There is no way to make them compete in any other round.",
        ""
    ],
    "constraints": [
        "For example",
        " if the row consists of players 1",
        " 2",
        " 4",
        " 6",
        " 7\n\nPlayer 1 competes against player 7.\nPlayer 2 competes against player 6.\nPlayer 4 automatically advances to the next round.\n\nPlayer 1 competes against player 7. Player 2 competes against player 6. Player 4 automatically advances to the next round. 2 <= n <= 281 <= firstPlayer < secondPlayer <= n"
    ]
},
{
    "id": "1912",
    "title": "Design Movie Rental System",
    "question": "You have a movie renting company consisting of n shops.\n You want to implement a renting system that supports searching for, booking, and returning movies.\n The system should also support generating a report of the currently rented movies.\nEach movie is given as a 2D integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei.\n Each shop carries at most one copy of a movie moviei.\nThe system should support the following functions:Implement the MovieRentingSystem class:Note: The test cases will be generated such that rent will only be called if the shop has an unrented copy of the movie, and drop will only be called if the shop had previously rented out the movie.",
    "examples": [
        "Input",
        "[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]",
        "[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]",
        "Output",
        "[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]",
        "",
        "Explanation",
        "MovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);",
        "movieRentingSystem. search(1);  // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.",
        "movieRentingSystem. rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].",
        "movieRentingSystem. rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].",
        "movieRentingSystem. report();   // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.",
        "movieRentingSystem. drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].",
        "movieRentingSystem. search(2);  // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1.",
        ""
    ],
    "constraints": [
        "Search: Finds the cheapest 5 shops that have an unrented copy of a given movie. The shops should be sorted by price in ascending order",
        " and in case of a tie",
        " the one with the smaller shopi should appear first. If there are less than 5 matching shops",
        " then all of them should be returned. If no shop has an unrented copy",
        " then an empty list should be returned. Rent: Rents an unrented copy of a given movie from a given shop. Drop: Drops off a previously rented copy of a given movie at a given shop. Report: Returns the cheapest 5 rented movies (possibly of the same movie ID) as a 2D list res where res[j] = [shopj",
        " moviej] describes that the jth cheapest rented movie moviej was rented from the shop shopj. The movies in res should be sorted by price in ascending order",
        " and in case of a tie",
        " the one with the smaller shopj should appear first",
        " and if there is still tie",
        " the one with the smaller moviej should appear first. If there are fewer than 5 rented movies",
        " then all of them should be returned. If no movies are currently being rented",
        " then an empty list should be returned. MovieRentingSystem(int n",
        " int[][] entries) Initializes the MovieRentingSystem object with n shops and the movies in entries. List<Integer> search(int movie) Returns a list of shops that have an unrented copy of the given movie as described above. void rent(int shop",
        " int movie) Rents the given movie from the given shop. void drop(int shop",
        " int movie) Drops off a previously rented movie at the given shop. List<List<Integer>> report() Returns a list of cheapest rented movies as described above. 1 <= n <= 3 * 1051 <= entries. length <= 1050 <= shopi < n1 <= moviei",
        " pricei <= 104Each shop carries at most one copy of a movie moviei. At most 105 calls in total will be made to search",
        " rent",
        " drop and report."
    ]
},
{
    "id": "1916",
    "title": "Count Ways to Build Rooms in an Ant Colony",
    "question": "You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony.\n You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly.\n Room 0 is already built, so prevRoom[0] = -1.\n The expansion plan is given such that once all the rooms are built, every room will be reachable from room 0.\nYou can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected.\n You can choose to build any room as long as its previous room is already built.\nReturn the number of different orders you can build all the rooms in.\n Since the answer may be large, return it modulo 109 + 7.",
    "examples": [
        "Input: prevRoom = [-1,0,1]",
        "Output: 1",
        "Explanation: There is only one way to build the additional rooms: 0 → 1 → 2",
        "Input: prevRoom = [-1,0,0,1,2]",
        "Output: 6",
        "Explanation:",
        "The 6 ways are:",
        "0 → 1 → 3 → 2 → 4",
        "0 → 2 → 4 → 1 → 3",
        "0 → 1 → 2 → 3 → 4",
        "0 → 1 → 2 → 4 → 3",
        "0 → 2 → 1 → 3 → 4",
        "0 → 2 → 1 → 4 → 3",
        ""
    ],
    "constraints": [
        "n == prevRoom. length2 <= n <= 105prevRoom[0] == -10 <= prevRoom[i] < n for all 1 <= i < nEvery room is reachable from room 0 once all the rooms are built."
    ]
},
{
    "id": "1923",
    "title": "Longest Common Subpath",
    "question": "There is a country of n cities numbered from 0 to n - 1.\n In this country, there is a road connecting every pair of cities.\nThere are m friends numbered from 0 to m - 1 who are traveling through the country.\n Each one of them will take a path consisting of some cities.\n Each path is represented by an integer array that contains the visited cities in order.\n The path may contain a city more than once, but the same city will not be listed consecutively.\nGiven an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.\nA subpath of a path is a contiguous sequence of cities within that path.",
    "examples": [
        "Input: n = 5, paths = [[0,1,2,3,4],",
        "                       [2,3,4],",
        "                       [4,0,1,2,3]]",
        "Output: 2",
        "Explanation: The longest common subpath is [2,3].",
        "Input: n = 3, paths = [[0],[1],[2]]",
        "Output: 0",
        "Explanation: There is no common subpath shared by the three paths.",
        "Input: n = 5, paths = [[0,1,2,3,4],",
        "                       [4,3,2,1,0]]",
        "Output: 1",
        "Explanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1."
    ],
    "constraints": [
        "1 <= n <= 105m == paths. length2 <= m <= 105sum(paths[i]. length) <= 1050 <= paths[i][j] < nThe same city is not listed multiple times consecutively in paths[i]."
    ]
},
{
    "id": "1928",
    "title": "Minimum Cost to Reach Destination in Time",
    "question": "There is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads.\n The roads are represented as a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel.\n There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.\nEach time you pass through a city, you must pay a passing fee.\n This is represented as a 0-indexed integer array passingFees of length n where passingFees[j] is the amount of dollars you must pay when you pass through city j.\nIn the beginning, you are at city 0 and want to reach city n - 1 in maxTime minutes or less.\n The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities).\nGiven maxTime, edges, and passingFees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxTime minutes.",
    "examples": [
        "Input: maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
        "Output: 11",
        "Explanation: The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees.",
        "Input: maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
        "Output: 48",
        "Explanation: The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees.",
        "You cannot take path 0 -> 1 -> 2 -> 5 since it would take too long.",
        "Input: maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
        "Output: -1",
        "Explanation: There is no way to reach city 5 from city 0 within 25 minutes.",
        ""
    ],
    "constraints": [
        "1 <= maxTime <= 1000n == passingFees. length2 <= n <= 1000n - 1 <= edges. length <= 10000 <= xi",
        " yi <= n - 11 <= timei <= 10001 <= passingFees[j] <= 1000 The graph may contain multiple edges between two nodes. The graph does not contain self loops."
    ]
},
{
    "id": "1931",
    "title": "Painting a Grid With Three Different Colors",
    "question": "You are given two integers m and n.\n Consider an m x n grid where each cell is initially white.\n You can paint each cell red, green, or blue.\n All cells must be painted.\nReturn the number of ways to color the grid with no two adjacent cells having the same color.\n Since the answer can be very large, return it modulo 109 + 7.",
    "examples": [
        "Input: m = 1, n = 1",
        "Output: 3",
        "Explanation: The three possible colorings are shown in the image above.",
        "Input: m = 1, n = 2",
        "Output: 6",
        "Explanation: The six possible colorings are shown in the image above.",
        "Input: m = 5, n = 5",
        "Output: 580986",
        ""
    ],
    "constraints": [
        "1 <= m <= 51 <= n <= 1000"
    ]
},
{
    "id": "1932",
    "title": "Merge BSTs to Create Single BST",
    "question": "You are given n BST (binary search tree) root nodes for n separate BSTs stored in an array trees (0-indexed).\n Each BST in trees has at most 3 nodes, and no two roots have the same value.\n In one operation, you can:Return the root of the resulting BST if it is possible to form a valid BST after performing n - 1 operations, or null if it is impossible to create a valid BST.\nA BST (binary search tree) is a binary tree where each node satisfies the following property:A leaf is a node that has no children.",
    "examples": [
        "Input: trees = [[2,1],[3,2,5],[5,4]]",
        "Output: [3,2,5,1,null,4]",
        "Explanation:",
        "In the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].",
        "Delete trees[0], so trees = [[3,2,5,1],[5,4]].",
        "",
        "In the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].",
        "Delete trees[1], so trees = [[3,2,5,1,null,4]].",
        "",
        "The resulting tree, shown above, is a valid BST, so return its root. Input: trees = [[5,3,8],[3,2,6]]",
        "Output: []",
        "Explanation:",
        "Pick i=0 and j=1 and merge trees[1] into trees[0].",
        "Delete trees[1], so trees = [[5,3,8,2,6]].",
        "",
        "The resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null.",
        "Input: trees = [[5,4],[3]]",
        "Output: []",
        "Explanation: It is impossible to perform any operations.",
        "Input: trees = [[2,1,3]]",
        "Output: [2,1,3]",
        "Explanation: There is only one tree, and it is already a valid BST, so return its root.",
        ""
    ],
    "constraints": [
        "Select two distinct indices i and j such that the value stored at one of the leaves of trees[i] is equal to the root value of trees[j]. Replace the leaf node in trees[i] with trees[j]. Remove trees[j] from trees. Every node in the node's left subtree has a value strictly less than the node's value. Every node in the node's right subtree has a value strictly greater than the node's value. n == trees. length1 <= n <= 5 * 104The number of nodes in each tree is in the range [1",
        " 3]. Each node in the input may have children but no grandchildren. No two roots of trees have the same value. All the trees in the input are valid BSTs. 1 <= TreeNode. val <= 5 * 104."
    ]
},
{
    "id": "709",
    "title": "To Lower Case",
    "question": "Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.",
    "examples": [
        "Input: s = \"Hello\"",
        "Output: \"hello\"",
        "Input: s = \"here\"",
        "Output: \"here\"",
        "Input: s = \"LOVELY\"",
        "Output: \"lovely\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 100s consists of printable ASCII characters."
    ]
},
{
    "id": "1938",
    "title": "Maximum Genetic Difference Query",
    "question": "There is a rooted tree consisting of n nodes numbered 0 to n - 1.\n Each node's number denotes its unique genetic value (i.\ne.\n the genetic value of node x is x).\n The genetic difference between two genetic values is defined as the bitwise-XOR of their values.\n You are given the integer array parents, where parents[i] is the parent for node i.\n If node x is the root of the tree, then parents[x] == -1.\nYou are also given the array queries where queries[i] = [nodei, vali].\n For each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root).\n More formally, you want to maximize vali XOR pi.\nReturn an array ans where ans[i] is the answer to the ith query.",
    "examples": [
        "Input: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]",
        "Output: [2,3,7]",
        "Explanation: The queries are processed as follows:",
        "- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.",
        "- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.",
        "- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.",
        "Input: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]",
        "Output: [6,14,7]",
        "Explanation: The queries are processed as follows:",
        "- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.",
        "- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.",
        "- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.",
        ""
    ],
    "constraints": [
        "2 <= parents. length <= 1050 <= parents[i] <= parents. length - 1 for every node i that is not the root. parents[root] == -11 <= queries. length <= 3 * 1040 <= nodei <= parents. length - 10 <= vali <= 2 * 105"
    ]
},
{
    "id": "1944",
    "title": "Number of Visible People in a Queue",
    "question": "There are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order.\n You are given an array heights of distinct integers where heights[i] represents the height of the ith person.\nA person can see another person to their right in the queue if everybody in between is shorter than both of them.\n More formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], .\n.\n.\n, heights[j-1]).\nReturn an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.",
    "examples": [
        "Input: heights = [10,6,8,5,11,9]",
        "Output: [3,1,2,1,1,0]",
        "Explanation:",
        "Person 0 can see person 1, 2, and 4.",
        "Person 1 can see person 2.",
        "Person 2 can see person 3 and 4.",
        "Person 3 can see person 4.",
        "Person 4 can see person 5.",
        "Person 5 can see no one since nobody is to the right of them.",
        "Input: heights = [5,1,2,3,10]",
        "Output: [4,1,1,1,0]",
        ""
    ],
    "constraints": [
        "n == heights. length1 <= n <= 1051 <= heights[i] <= 105All the values of heights are unique."
    ]
},
{
    "id": "1948",
    "title": "Delete Duplicate Folders in System",
    "question": "Due to a bug, there are many duplicate folders in a file system.\n You are given a 2D array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system.\nTwo folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure.\n The folders do not need to be at the root level to be identical.\n If two or more folders are identical, then mark the folders as well as all their subfolders.\nOnce all the identical folders and their subfolders have been marked, the file system will delete all of them.\n The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.\nReturn the 2D array ans containing the paths of the remaining folders after deleting all the marked folders.\n The paths may be returned in any order.",
    "examples": [
        "Input: paths = [[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]",
        "Output: [[\"d\"],[\"d\",\"a\"]]",
        "Explanation: The file structure is as shown.",
        "Folders \"/a\" and \"/c\" (and their subfolders) are marked for deletion because they both contain an empty",
        "folder named \"b\".",
        "Input: paths = [[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]]",
        "Output: [[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]]",
        "Explanation: The file structure is as shown. ",
        "Folders \"/a/b/x\" and \"/w\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"y\".",
        "Note that folders \"/a\" and \"/c\" are identical after the deletion, but they are not deleted because they were not marked beforehand.",
        "Input: paths = [[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]]",
        "Output: [[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]]",
        "Explanation: All folders are unique in the file system.",
        "Note that the returned array can be in a different order as the order does not matter.",
        "Input: paths = [[\"a\"],[\"a\",\"x\"],[\"a\",\"x\",\"y\"],[\"a\",\"z\"],[\"b\"],[\"b\",\"x\"],[\"b\",\"x\",\"y\"],[\"b\",\"z\"]]",
        "Output: []",
        "Explanation: The file structure is as shown.",
        "Folders \"/a/x\" and \"/b/x\" (and their subfolders) are marked for deletion because they both contain an",
        "empty folder named \"y\".",
        "Folders \"/a\" and \"/b\" (and their subfolders) are marked for deletion because they both contain an empty",
        "folder \"z\" and the folder \"x\" described above.",
        "Input: paths = [[\"a\"],[\"a\",\"x\"],[\"a\",\"x\",\"y\"],[\"a\",\"z\"],[\"b\"],[\"b\",\"x\"],[\"b\",\"x\",\"y\"],[\"b\",\"z\"],[\"b\",\"w\"]]",
        "Output: [[\"b\"],[\"b\",\"w\"],[\"b\",\"z\"],[\"a\"],[\"a\",\"z\"]]",
        "Explanation: This has the same structure as the previous example, except with the added \"/b/w\".",
        "Folders \"/a/x\" and \"/b/x\" are still marked, but \"/a\" and \"/b\" are no longer marked because \"/b\" has the",
        "empty folder named \"w\" and \"/a\" does not.",
        "Note that \"/a/z\" and \"/b/z\" are not marked because the set of identical subfolders must be non-empty, but these folders are empty.",
        ""
    ],
    "constraints": [
        "For example",
        " [\"one\"",
        " \"two\"",
        " \"three\"] represents the path \"/one/two/three\". For example",
        " folders \"/a\" and \"/b\" in the file structure below are identical. They (as well as their subfolders) should all be marked:\n\n\t\n/a\n/a/x\n/a/x/y\n/a/z\n/b\n/b/x\n/b/x/y\n/b/z\n\n/a/a/x/a/x/y/a/z/b/b/x/b/x/y/b/zHowever",
        " if the file structure also included the path \"/b/w\"",
        " then the folders \"/a\" and \"/b\" would not be identical. Note that \"/a/x\" and \"/b/x\" would still be considered identical even with the added folder. 1 <= paths. length <= 2 * 1041 <= paths[i]. length <= 5001 <= paths[i][j]. length <= 101 <= sum(paths[i][j]. length) <= 2 * 105path[i][j] consists of lowercase English letters. No two paths lead to the same folder. For any folder not at the root level",
        " its parent folder will also be in the input."
    ]
},
{
    "id": "1955",
    "title": "Count Number of Special Subsequences",
    "question": "A sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s.\nGiven an array nums (consisting of only integers 0, 1, and 2), return the number of different subsequences that are special.\n Since the answer may be very large, return it modulo 109 + 7.\nA subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n Two subsequences are different if the set of indices chosen are different.",
    "examples": [
        "Input: nums = [0,1,2,2]",
        "Output: 3",
        "Explanation: The special subsequences are bolded [0,1,2,2], [0,1,2,2], and [0,1,2,2].",
        "Input: nums = [2,2,0,0]",
        "Output: 0",
        "Explanation: There are no special subsequences in [2,2,0,0].",
        "Input: nums = [0,1,2,0,1,2]",
        "Output: 7",
        "Explanation: The special subsequences are bolded:",
        "- [0,1,2,0,1,2]",
        "- [0,1,2,0,1,2]",
        "- [0,1,2,0,1,2]",
        "- [0,1,2,0,1,2]",
        "- [0,1,2,0,1,2]",
        "- [0,1,2,0,1,2]",
        "- [0,1,2,0,1,2]",
        ""
    ],
    "constraints": [
        "For example",
        " [0",
        "1",
        "2] and [0",
        "0",
        "1",
        "1",
        "1",
        "2] are special. In contrast",
        " [2",
        "1",
        "0]",
        " [1]",
        " and [0",
        "1",
        "2",
        "0] are not special. 1 <= nums. length <= 1050 <= nums[i] <= 2"
    ]
},
{
    "id": "1960",
    "title": "Maximum Product of the Length of Two Palindromic Substrings",
    "question": "You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.\nMore formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.\nlength and both the substrings s[i.\n.\n.\nj] and s[k.\n.\n.\nl] are palindromes and have odd lengths.\n s[i.\n.\n.\nj] denotes a substring from index i to index j inclusive.\nReturn the maximum possible product of the lengths of the two non-intersecting palindromic substrings.\nA palindrome is a string that is the same forward and backward.\n A substring is a contiguous sequence of characters in a string.",
    "examples": [
        "Input: s = \"ababbb\"",
        "Output: 9",
        "Explanation: Substrings \"aba\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.",
        "Input: s = \"zaaaxbbby\"",
        "Output: 9",
        "Explanation: Substrings \"aaa\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.",
        ""
    ],
    "constraints": [
        "2 <= s. length <= 105s consists of lowercase English letters."
    ]
},
{
    "id": "1964",
    "title": "Find the Longest Valid Obstacle Course at Each Position",
    "question": "You want to build some obstacle courses.\n You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.\nFor every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:Return an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.",
    "examples": [
        "Input: obstacles = [1,2,3,2]",
        "Output: [1,2,3,3]",
        "Explanation: The longest valid obstacle course at each position is:",
        "- i = 0: [1], [1] has length 1.",
        "- i = 1: [1,2], [1,2] has length 2.",
        "- i = 2: [1,2,3], [1,2,3] has length 3.",
        "- i = 3: [1,2,3,2], [1,2,2] has length 3.",
        "Input: obstacles = [2,2,1]",
        "Output: [1,2,1]",
        "Explanation: The longest valid obstacle course at each position is:",
        "- i = 0: [2], [2] has length 1.",
        "- i = 1: [2,2], [2,2] has length 2.",
        "- i = 2: [2,2,1], [1] has length 1.",
        "Input: obstacles = [3,1,5,6,4,2]",
        "Output: [1,1,2,3,2,2]",
        "Explanation: The longest valid obstacle course at each position is:",
        "- i = 0: [3], [3] has length 1.",
        "- i = 1: [3,1], [1] has length 1.",
        "- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.",
        "- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.",
        "- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.",
        "- i = 5: [3,1,5,6,4,2], [1,2] has length 2.",
        ""
    ],
    "constraints": [
        "You choose any number of obstacles between 0 and i inclusive. You must include the ith obstacle in the course. You must put the chosen obstacles in the same order as they appear in obstacles. Every obstacle (except the first) is taller than or the same height as the obstacle immediately before it. n == obstacles. length1 <= n <= 1051 <= obstacles[i] <= 107"
    ]
},
{
    "id": "1970",
    "title": "Last Day Where You Can Still Cross",
    "question": "There is a 1-based binary matrix where 0 represents land and 1 represents water.\n You are given integers row and col representing the number of rows and columns in the matrix, respectively.\nInitially on day 0, the entire matrix is land.\n However, each day a new cell becomes flooded with water.\n You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.\ne.\n, changed to 1).\nYou want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells.\n You can start from any cell in the top row and end at any cell in the bottom row.\n You can only travel in the four cardinal directions (left, right, up, and down).\nReturn the last day where it is possible to walk from the top to the bottom by only walking on land cells.",
    "examples": [
        "Input: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]",
        "Output: 2",
        "Explanation: The above image depicts how the matrix changes each day starting from day 0.",
        "The last day where it is possible to cross from top to bottom is on day 2.",
        "Input: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]",
        "Output: 1",
        "Explanation: The above image depicts how the matrix changes each day starting from day 0.",
        "The last day where it is possible to cross from top to bottom is on day 1.",
        "Input: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
        "Output: 3",
        "Explanation: The above image depicts how the matrix changes each day starting from day 0.",
        "The last day where it is possible to cross from top to bottom is on day 3.",
        ""
    ],
    "constraints": [
        "2 <= row",
        " col <= 2 * 1044 <= row * col <= 2 * 104cells. length == row * col1 <= ri <= row1 <= ci <= colAll the values of cells are unique."
    ]
},
{
    "id": "1977",
    "title": "Number of Ways to Separate Numbers",
    "question": "You wrote down many positive integers in a string called num.\n However, you realized that you forgot to add commas to seperate the different numbers.\n You remember that the list of integers was non-decreasing and that no integer had leading zeros.\nReturn the number of possible lists of integers that you could have written down to get the string num.\n Since the answer may be large, return it modulo 109 + 7.",
    "examples": [
        "Input: num = \"327\"",
        "Output: 2",
        "Explanation: You could have written down the numbers:",
        "3, 27",
        "327",
        "Input: num = \"094\"",
        "Output: 0",
        "Explanation: No numbers can have leading zeros and all numbers must be positive.",
        "Input: num = \"0\"",
        "Output: 0",
        "Explanation: No numbers can have leading zeros and all numbers must be positive.",
        "Input: num = \"9999999999999\"",
        "Output: 101",
        ""
    ],
    "constraints": [
        "1 <= num. length <= 3500num consists of digits '0' through '9'."
    ]
},
{
    "id": "1982",
    "title": "Find Array Given Subset Sums",
    "question": "You are given an integer n representing the length of an unknown array that you are trying to recover.\n You are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order).\nReturn the array ans of length n representing the unknown array.\n If multiple answers exist, return any of them.\nAn array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr.\n The sum of the elements in sub is one possible subset sum of arr.\n The sum of an empty array is considered to be 0.\nNote: Test cases are generated such that there will always be at least one correct answer.",
    "examples": [
        "Input: n = 3, sums = [-3,-2,-1,0,0,1,2,3]",
        "Output: [1,2,-3]",
        "Explanation: [1,2,-3] is able to achieve the given subset sums:",
        "- []: sum is 0",
        "- [1]: sum is 1",
        "- [2]: sum is 2",
        "- [1,2]: sum is 3",
        "- [-3]: sum is -3",
        "- [1,-3]: sum is -2",
        "- [2,-3]: sum is -1",
        "- [1,2,-3]: sum is 0",
        "Note that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.",
        "Input: n = 2, sums = [0,0,0,0]",
        "Output: [0,0]",
        "Explanation: The only correct answer is [0,0].",
        "Input: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
        "Output: [0,-1,4,5]",
        "Explanation: [0,-1,4,5] is able to achieve the given subset sums.",
        ""
    ],
    "constraints": [
        "1 <= n <= 15sums. length == 2n-104 <= sums[i] <= 104"
    ]
},
{
    "id": "1987",
    "title": "Number of Unique Good Subsequences",
    "question": "You are given a binary string binary.\n A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\nFind the number of unique good subsequences of binary.\nReturn the number of unique good subsequences of binary.\n Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
        "Input: binary = \"001\"",
        "Output: 2",
        "Explanation: The good subsequences of binary are [\"0\", \"0\", \"1\"].",
        "The unique good subsequences are \"0\" and \"1\".",
        "Input: binary = \"11\"",
        "Output: 2",
        "Explanation: The good subsequences of binary are [\"1\", \"1\", \"11\"].",
        "The unique good subsequences are \"1\" and \"11\". Input: binary = \"101\"",
        "Output: 5",
        "Explanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. ",
        "The unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".",
        ""
    ],
    "constraints": [
        "For example",
        " if binary = \"001\"",
        " then all the good subsequences are [\"0\"",
        " \"0\"",
        " \"1\"]",
        " so the unique good subsequences are \"0\" and \"1\". Note that subsequences \"00\"",
        " \"01\"",
        " and \"001\" are not good because they have leading zeros. 1 <= binary. length <= 105binary consists of only '0's and '1's."
    ]
},
{
    "id": "717",
    "title": "1-bit and 2-bit Characters",
    "question": "We have two special characters:Given a binary array bits that ends with 0, return true if the last character must be a one-bit character.",
    "examples": [
        "Input: bits = [1,0,0]",
        "Output: true",
        "Explanation: The only way to decode it is two-bit character and one-bit character.",
        "So the last character is one-bit character.",
        "Input: bits = [1,1,1,0]",
        "Output: false",
        "Explanation: The only way to decode it is two-bit character and two-bit character.",
        "So the last character is not one-bit character.",
        ""
    ],
    "constraints": [
        "The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11). 1 <= bits. length <= 1000bits[i] is either 0 or 1."
    ]
},
{
    "id": "1960",
    "title": "Maximum Product of the Length of Two Palindromic Substrings",
    "question": "You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.\nMore formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.\nlength and both the substrings s[i.\n.\n.\nj] and s[k.\n.\n.\nl] are palindromes and have odd lengths.\n s[i.\n.\n.\nj] denotes a substring from index i to index j inclusive.\nReturn the maximum possible product of the lengths of the two non-intersecting palindromic substrings.\nA palindrome is a string that is the same forward and backward.\n A substring is a contiguous sequence of characters in a string.",
    "examples": [
        "Input: s = \"ababbb\"",
        "Output: 9",
        "Explanation: Substrings \"aba\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.",
        "Input: s = \"zaaaxbbby\"",
        "Output: 9",
        "Explanation: Substrings \"aaa\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.",
        ""
    ],
    "constraints": [
        "2 <= s. length <= 105s consists of lowercase English letters."
    ]
},
{
    "id": "1964",
    "title": "Find the Longest Valid Obstacle Course at Each Position",
    "question": "You want to build some obstacle courses.\n You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.\nFor every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:Return an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.",
    "examples": [
        "Input: obstacles = [1,2,3,2]",
        "Output: [1,2,3,3]",
        "Explanation: The longest valid obstacle course at each position is:",
        "- i = 0: [1], [1] has length 1.",
        "- i = 1: [1,2], [1,2] has length 2.",
        "- i = 2: [1,2,3], [1,2,3] has length 3.",
        "- i = 3: [1,2,3,2], [1,2,2] has length 3.",
        "Input: obstacles = [2,2,1]",
        "Output: [1,2,1]",
        "Explanation: The longest valid obstacle course at each position is:",
        "- i = 0: [2], [2] has length 1.",
        "- i = 1: [2,2], [2,2] has length 2.",
        "- i = 2: [2,2,1], [1] has length 1.",
        "Input: obstacles = [3,1,5,6,4,2]",
        "Output: [1,1,2,3,2,2]",
        "Explanation: The longest valid obstacle course at each position is:",
        "- i = 0: [3], [3] has length 1.",
        "- i = 1: [3,1], [1] has length 1.",
        "- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.",
        "- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.",
        "- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.",
        "- i = 5: [3,1,5,6,4,2], [1,2] has length 2.",
        ""
    ],
    "constraints": [
        "You choose any number of obstacles between 0 and i inclusive. You must include the ith obstacle in the course. You must put the chosen obstacles in the same order as they appear in obstacles. Every obstacle (except the first) is taller than or the same height as the obstacle immediately before it. n == obstacles. length1 <= n <= 1051 <= obstacles[i] <= 107"
    ]
},
{
    "id": "1970",
    "title": "Last Day Where You Can Still Cross",
    "question": "There is a 1-based binary matrix where 0 represents land and 1 represents water.\n You are given integers row and col representing the number of rows and columns in the matrix, respectively.\nInitially on day 0, the entire matrix is land.\n However, each day a new cell becomes flooded with water.\n You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.\ne.\n, changed to 1).\nYou want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells.\n You can start from any cell in the top row and end at any cell in the bottom row.\n You can only travel in the four cardinal directions (left, right, up, and down).\nReturn the last day where it is possible to walk from the top to the bottom by only walking on land cells.",
    "examples": [
        "Input: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]",
        "Output: 2",
        "Explanation: The above image depicts how the matrix changes each day starting from day 0.",
        "The last day where it is possible to cross from top to bottom is on day 2.",
        "Input: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]",
        "Output: 1",
        "Explanation: The above image depicts how the matrix changes each day starting from day 0.",
        "The last day where it is possible to cross from top to bottom is on day 1.",
        "Input: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
        "Output: 3",
        "Explanation: The above image depicts how the matrix changes each day starting from day 0.",
        "The last day where it is possible to cross from top to bottom is on day 3.",
        ""
    ],
    "constraints": [
        "2 <= row",
        " col <= 2 * 1044 <= row * col <= 2 * 104cells. length == row * col1 <= ri <= row1 <= ci <= colAll the values of cells are unique."
    ]
},
{
    "id": "1977",
    "title": "Number of Ways to Separate Numbers",
    "question": "You wrote down many positive integers in a string called num.\n However, you realized that you forgot to add commas to seperate the different numbers.\n You remember that the list of integers was non-decreasing and that no integer had leading zeros.\nReturn the number of possible lists of integers that you could have written down to get the string num.\n Since the answer may be large, return it modulo 109 + 7.",
    "examples": [
        "Input: num = \"327\"",
        "Output: 2",
        "Explanation: You could have written down the numbers:",
        "3, 27",
        "327",
        "Input: num = \"094\"",
        "Output: 0",
        "Explanation: No numbers can have leading zeros and all numbers must be positive.",
        "Input: num = \"0\"",
        "Output: 0",
        "Explanation: No numbers can have leading zeros and all numbers must be positive.",
        "Input: num = \"9999999999999\"",
        "Output: 101",
        ""
    ],
    "constraints": [
        "1 <= num. length <= 3500num consists of digits '0' through '9'."
    ]
},
{
    "id": "1982",
    "title": "Find Array Given Subset Sums",
    "question": "You are given an integer n representing the length of an unknown array that you are trying to recover.\n You are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order).\nReturn the array ans of length n representing the unknown array.\n If multiple answers exist, return any of them.\nAn array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr.\n The sum of the elements in sub is one possible subset sum of arr.\n The sum of an empty array is considered to be 0.\nNote: Test cases are generated such that there will always be at least one correct answer.",
    "examples": [
        "Input: n = 3, sums = [-3,-2,-1,0,0,1,2,3]",
        "Output: [1,2,-3]",
        "Explanation: [1,2,-3] is able to achieve the given subset sums:",
        "- []: sum is 0",
        "- [1]: sum is 1",
        "- [2]: sum is 2",
        "- [1,2]: sum is 3",
        "- [-3]: sum is -3",
        "- [1,-3]: sum is -2",
        "- [2,-3]: sum is -1",
        "- [1,2,-3]: sum is 0",
        "Note that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.",
        "Input: n = 2, sums = [0,0,0,0]",
        "Output: [0,0]",
        "Explanation: The only correct answer is [0,0].",
        "Input: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
        "Output: [0,-1,4,5]",
        "Explanation: [0,-1,4,5] is able to achieve the given subset sums.",
        ""
    ],
    "constraints": [
        "1 <= n <= 15sums. length == 2n-104 <= sums[i] <= 104"
    ]
},
{
    "id": "1987",
    "title": "Number of Unique Good Subsequences",
    "question": "You are given a binary string binary.\n A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\nFind the number of unique good subsequences of binary.\nReturn the number of unique good subsequences of binary.\n Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
        "Input: binary = \"001\"",
        "Output: 2",
        "Explanation: The good subsequences of binary are [\"0\", \"0\", \"1\"].",
        "The unique good subsequences are \"0\" and \"1\".",
        "Input: binary = \"11\"",
        "Output: 2",
        "Explanation: The good subsequences of binary are [\"1\", \"1\", \"11\"].",
        "The unique good subsequences are \"1\" and \"11\". Input: binary = \"101\"",
        "Output: 5",
        "Explanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. ",
        "The unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".",
        ""
    ],
    "constraints": [
        "For example",
        " if binary = \"001\"",
        " then all the good subsequences are [\"0\"",
        " \"0\"",
        " \"1\"]",
        " so the unique good subsequences are \"0\" and \"1\". Note that subsequences \"00\"",
        " \"01\"",
        " and \"001\" are not good because they have leading zeros. 1 <= binary. length <= 105binary consists of only '0's and '1's."
    ]
},
{
    "id": "1994",
    "title": "The Number of Good Subsets",
    "question": "You are given an integer array nums.\n We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.\nReturn the number of different good subsets in nums modulo 109 + 7.\nA subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums.\n Two subsets are different if and only if the chosen indices to delete are different.",
    "examples": [
        "Input: nums = [1,2,3,4]",
        "Output: 6",
        "Explanation: The good subsets are:",
        "- [1,2]: product is 2, which is the product of distinct prime 2.",
        "- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.",
        "- [1,3]: product is 3, which is the product of distinct prime 3.",
        "- [2]: product is 2, which is the product of distinct prime 2.",
        "- [2,3]: product is 6, which is the product of distinct primes 2 and 3.",
        "- [3]: product is 3, which is the product of distinct prime 3.",
        "Input: nums = [4,2,3,15]",
        "Output: 5",
        "Explanation: The good subsets are:",
        "- [2]: product is 2, which is the product of distinct prime 2.",
        "- [2,3]: product is 6, which is the product of distinct primes 2 and 3.",
        "- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.",
        "- [3]: product is 3, which is the product of distinct prime 3.",
        "- [15]: product is 15, which is the product of distinct primes 3 and 5.",
        ""
    ],
    "constraints": [
        "For example",
        " if nums = [1",
        " 2",
        " 3",
        " 4]:\n\n\t\n[2",
        " 3]",
        " [1",
        " 2",
        " 3]",
        " and [1",
        " 3] are good subsets with products 6 = 2*3",
        " 6 = 2*3",
        " and 3 = 3 respectively.\n[1",
        " 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.\n\n[2",
        " 3]",
        " [1",
        " 2",
        " 3]",
        " and [1",
        " 3] are good subsets with products 6 = 2*3",
        " 6 = 2*3",
        " and 3 = 3 respectively.[1",
        " 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively. 1 <= nums. length <= 1051 <= nums[i] <= 30"
    ]
},
{
    "id": "1998",
    "title": "GCD Sort of an Array",
    "question": "You are given an integer array nums, and you can perform the following operation any number of times on nums:Return true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.",
    "examples": [
        "Input: nums = [7,21,3]",
        "Output: true",
        "Explanation: We can sort [7,21,3] by performing the following operations:",
        "- Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]",
        "- Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]",
        "Input: nums = [5,2,6,2]",
        "Output: false",
        "Explanation: It is impossible to sort the array because 5 cannot be swapped with any other element.",
        "Input: nums = [10,5,9,3,15]",
        "Output: true",
        "We can sort [10,5,9,3,15] by performing the following operations:",
        "- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]",
        "- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]",
        "- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]",
        ""
    ],
    "constraints": [
        "Swap the positions of two elements nums[i] and nums[j] if gcd(nums[i]",
        " nums[j]) > 1 where gcd(nums[i]",
        " nums[j]) is the greatest common divisor of nums[i] and nums[j]. 1 <= nums. length <= 3 * 1042 <= nums[i] <= 105"
    ]
},
{
    "id": "1987",
    "title": "Number of Unique Good Subsequences",
    "question": "You are given a binary string binary.\n A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\nFind the number of unique good subsequences of binary.\nReturn the number of unique good subsequences of binary.\n Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
        "Input: binary = \"001\"",
        "Output: 2",
        "Explanation: The good subsequences of binary are [\"0\", \"0\", \"1\"].",
        "The unique good subsequences are \"0\" and \"1\".",
        "Input: binary = \"11\"",
        "Output: 2",
        "Explanation: The good subsequences of binary are [\"1\", \"1\", \"11\"].",
        "The unique good subsequences are \"1\" and \"11\". Input: binary = \"101\"",
        "Output: 5",
        "Explanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. ",
        "The unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".",
        ""
    ],
    "constraints": [
        "For example",
        " if binary = \"001\"",
        " then all the good subsequences are [\"0\"",
        " \"0\"",
        " \"1\"]",
        " so the unique good subsequences are \"0\" and \"1\". Note that subsequences \"00\"",
        " \"01\"",
        " and \"001\" are not good because they have leading zeros. 1 <= binary. length <= 105binary consists of only '0's and '1's."
    ]
},
{
    "id": "1994",
    "title": "The Number of Good Subsets",
    "question": "You are given an integer array nums.\n We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.\nReturn the number of different good subsets in nums modulo 109 + 7.\nA subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums.\n Two subsets are different if and only if the chosen indices to delete are different.",
    "examples": [
        "Input: nums = [1,2,3,4]",
        "Output: 6",
        "Explanation: The good subsets are:",
        "- [1,2]: product is 2, which is the product of distinct prime 2.",
        "- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.",
        "- [1,3]: product is 3, which is the product of distinct prime 3.",
        "- [2]: product is 2, which is the product of distinct prime 2.",
        "- [2,3]: product is 6, which is the product of distinct primes 2 and 3.",
        "- [3]: product is 3, which is the product of distinct prime 3.",
        "Input: nums = [4,2,3,15]",
        "Output: 5",
        "Explanation: The good subsets are:",
        "- [2]: product is 2, which is the product of distinct prime 2.",
        "- [2,3]: product is 6, which is the product of distinct primes 2 and 3.",
        "- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.",
        "- [3]: product is 3, which is the product of distinct prime 3.",
        "- [15]: product is 15, which is the product of distinct primes 3 and 5.",
        ""
    ],
    "constraints": [
        "For example",
        " if nums = [1",
        " 2",
        " 3",
        " 4]:\n\n\t\n[2",
        " 3]",
        " [1",
        " 2",
        " 3]",
        " and [1",
        " 3] are good subsets with products 6 = 2*3",
        " 6 = 2*3",
        " and 3 = 3 respectively.\n[1",
        " 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.\n\n[2",
        " 3]",
        " [1",
        " 2",
        " 3]",
        " and [1",
        " 3] are good subsets with products 6 = 2*3",
        " 6 = 2*3",
        " and 3 = 3 respectively.[1",
        " 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively. 1 <= nums. length <= 1051 <= nums[i] <= 30"
    ]
},
{
    "id": "724",
    "title": "Find Pivot Index",
    "question": "Given an array of integers nums, calculate the pivot index of this array.\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left.\n This also applies to the right edge of the array.\nReturn the leftmost pivot index.\n If no such index exists, return -1.",
    "examples": [
        "Input: nums = [1,7,3,6,5,6]",
        "Output: 3",
        "Explanation:",
        "The pivot index is 3.",
        "Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11",
        "Right sum = nums[4] + nums[5] = 5 + 6 = 11",
        "Input: nums = [1,2,3]",
        "Output: -1",
        "Explanation:",
        "There is no index that satisfies the conditions in the problem statement. Input: nums = [2,1,-1]",
        "Output: 0",
        "Explanation:",
        "The pivot index is 0.",
        "Left sum = 0 (no elements to the left of index 0)",
        "Right sum = nums[1] + nums[2] = 1 + -1 = 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-1000 <= nums[i] <= 1000"
    ]
},
{
    "id": "1998",
    "title": "GCD Sort of an Array",
    "question": "You are given an integer array nums, and you can perform the following operation any number of times on nums:Return true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.",
    "examples": [
        "Input: nums = [7,21,3]",
        "Output: true",
        "Explanation: We can sort [7,21,3] by performing the following operations:",
        "- Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]",
        "- Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]",
        "Input: nums = [5,2,6,2]",
        "Output: false",
        "Explanation: It is impossible to sort the array because 5 cannot be swapped with any other element.",
        "Input: nums = [10,5,9,3,15]",
        "Output: true",
        "We can sort [10,5,9,3,15] by performing the following operations:",
        "- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]",
        "- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]",
        "- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]",
        ""
    ],
    "constraints": [
        "Swap the positions of two elements nums[i] and nums[j] if gcd(nums[i]",
        " nums[j]) > 1 where gcd(nums[i]",
        " nums[j]) is the greatest common divisor of nums[i] and nums[j]. 1 <= nums. length <= 3 * 1042 <= nums[i] <= 105"
    ]
},
{
    "id": "2003",
    "title": "Smallest Missing Genetic Value in Each Subtree",
    "question": "There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1.\n You are given a 0-indexed integer array parents, where parents[i] is the parent for node i.\n Since node 0 is the root, parents[0] == -1.\nThere are 105 genetic values, each represented by an integer in the inclusive range [1, 105].\n You are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i.\nReturn an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.\nThe subtree rooted at a node x contains node x and all of its descendant nodes.",
    "examples": [
        "Input: parents = [-1,0,0,2], nums = [1,2,3,4]",
        "Output: [5,1,1,1]",
        "Explanation: The answer for each subtree is calculated as follows:",
        "- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.",
        "- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.",
        "- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.",
        "- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value.",
        "Input: parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]",
        "Output: [7,1,1,4,2,1]",
        "Explanation: The answer for each subtree is calculated as follows:",
        "- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.",
        "- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.",
        "- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.",
        "- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.",
        "- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.",
        "- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value.",
        "Input: parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]",
        "Output: [1,1,1,1,1,1,1]",
        "Explanation: The value 1 is missing from all the subtrees.",
        ""
    ],
    "constraints": [
        "n == parents. length == nums. length2 <= n <= 1050 <= parents[i] <= n - 1 for i != 0parents[0] == -1parents represents a valid tree. 1 <= nums[i] <= 105Each nums[i] is distinct."
    ]
},
{
    "id": "1977",
    "title": "Number of Ways to Separate Numbers",
    "question": "You wrote down many positive integers in a string called num.\n However, you realized that you forgot to add commas to seperate the different numbers.\n You remember that the list of integers was non-decreasing and that no integer had leading zeros.\nReturn the number of possible lists of integers that you could have written down to get the string num.\n Since the answer may be large, return it modulo 109 + 7.",
    "examples": [
        "Input: num = \"327\"",
        "Output: 2",
        "Explanation: You could have written down the numbers:",
        "3, 27",
        "327",
        "Input: num = \"094\"",
        "Output: 0",
        "Explanation: No numbers can have leading zeros and all numbers must be positive.",
        "Input: num = \"0\"",
        "Output: 0",
        "Explanation: No numbers can have leading zeros and all numbers must be positive.",
        "Input: num = \"9999999999999\"",
        "Output: 101",
        ""
    ],
    "constraints": [
        "1 <= num. length <= 3500num consists of digits '0' through '9'."
    ]
},
{
    "id": "1982",
    "title": "Find Array Given Subset Sums",
    "question": "You are given an integer n representing the length of an unknown array that you are trying to recover.\n You are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order).\nReturn the array ans of length n representing the unknown array.\n If multiple answers exist, return any of them.\nAn array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr.\n The sum of the elements in sub is one possible subset sum of arr.\n The sum of an empty array is considered to be 0.\nNote: Test cases are generated such that there will always be at least one correct answer.",
    "examples": [
        "Input: n = 3, sums = [-3,-2,-1,0,0,1,2,3]",
        "Output: [1,2,-3]",
        "Explanation: [1,2,-3] is able to achieve the given subset sums:",
        "- []: sum is 0",
        "- [1]: sum is 1",
        "- [2]: sum is 2",
        "- [1,2]: sum is 3",
        "- [-3]: sum is -3",
        "- [1,-3]: sum is -2",
        "- [2,-3]: sum is -1",
        "- [1,2,-3]: sum is 0",
        "Note that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.",
        "Input: n = 2, sums = [0,0,0,0]",
        "Output: [0,0]",
        "Explanation: The only correct answer is [0,0].",
        "Input: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
        "Output: [0,-1,4,5]",
        "Explanation: [0,-1,4,5] is able to achieve the given subset sums.",
        ""
    ],
    "constraints": [
        "1 <= n <= 15sums. length == 2n-104 <= sums[i] <= 104"
    ]
},
{
    "id": "1987",
    "title": "Number of Unique Good Subsequences",
    "question": "You are given a binary string binary.\n A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\nFind the number of unique good subsequences of binary.\nReturn the number of unique good subsequences of binary.\n Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
        "Input: binary = \"001\"",
        "Output: 2",
        "Explanation: The good subsequences of binary are [\"0\", \"0\", \"1\"].",
        "The unique good subsequences are \"0\" and \"1\".",
        "Input: binary = \"11\"",
        "Output: 2",
        "Explanation: The good subsequences of binary are [\"1\", \"1\", \"11\"].",
        "The unique good subsequences are \"1\" and \"11\". Input: binary = \"101\"",
        "Output: 5",
        "Explanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. ",
        "The unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".",
        ""
    ],
    "constraints": [
        "For example",
        " if binary = \"001\"",
        " then all the good subsequences are [\"0\"",
        " \"0\"",
        " \"1\"]",
        " so the unique good subsequences are \"0\" and \"1\". Note that subsequences \"00\"",
        " \"01\"",
        " and \"001\" are not good because they have leading zeros. 1 <= binary. length <= 105binary consists of only '0's and '1's."
    ]
},
{
    "id": "1994",
    "title": "The Number of Good Subsets",
    "question": "You are given an integer array nums.\n We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.\nReturn the number of different good subsets in nums modulo 109 + 7.\nA subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums.\n Two subsets are different if and only if the chosen indices to delete are different.",
    "examples": [
        "Input: nums = [1,2,3,4]",
        "Output: 6",
        "Explanation: The good subsets are:",
        "- [1,2]: product is 2, which is the product of distinct prime 2.",
        "- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.",
        "- [1,3]: product is 3, which is the product of distinct prime 3.",
        "- [2]: product is 2, which is the product of distinct prime 2.",
        "- [2,3]: product is 6, which is the product of distinct primes 2 and 3.",
        "- [3]: product is 3, which is the product of distinct prime 3.",
        "Input: nums = [4,2,3,15]",
        "Output: 5",
        "Explanation: The good subsets are:",
        "- [2]: product is 2, which is the product of distinct prime 2.",
        "- [2,3]: product is 6, which is the product of distinct primes 2 and 3.",
        "- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.",
        "- [3]: product is 3, which is the product of distinct prime 3.",
        "- [15]: product is 15, which is the product of distinct primes 3 and 5.",
        ""
    ],
    "constraints": [
        "For example",
        " if nums = [1",
        " 2",
        " 3",
        " 4]:\n\n\t\n[2",
        " 3]",
        " [1",
        " 2",
        " 3]",
        " and [1",
        " 3] are good subsets with products 6 = 2*3",
        " 6 = 2*3",
        " and 3 = 3 respectively.\n[1",
        " 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.\n\n[2",
        " 3]",
        " [1",
        " 2",
        " 3]",
        " and [1",
        " 3] are good subsets with products 6 = 2*3",
        " 6 = 2*3",
        " and 3 = 3 respectively.[1",
        " 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively. 1 <= nums. length <= 1051 <= nums[i] <= 30"
    ]
},
{
    "id": "1998",
    "title": "GCD Sort of an Array",
    "question": "You are given an integer array nums, and you can perform the following operation any number of times on nums:Return true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.",
    "examples": [
        "Input: nums = [7,21,3]",
        "Output: true",
        "Explanation: We can sort [7,21,3] by performing the following operations:",
        "- Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]",
        "- Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]",
        "Input: nums = [5,2,6,2]",
        "Output: false",
        "Explanation: It is impossible to sort the array because 5 cannot be swapped with any other element.",
        "Input: nums = [10,5,9,3,15]",
        "Output: true",
        "We can sort [10,5,9,3,15] by performing the following operations:",
        "- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]",
        "- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]",
        "- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]",
        ""
    ],
    "constraints": [
        "Swap the positions of two elements nums[i] and nums[j] if gcd(nums[i]",
        " nums[j]) > 1 where gcd(nums[i]",
        " nums[j]) is the greatest common divisor of nums[i] and nums[j]. 1 <= nums. length <= 3 * 1042 <= nums[i] <= 105"
    ]
},
{
    "id": "2003",
    "title": "Smallest Missing Genetic Value in Each Subtree",
    "question": "There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1.\n You are given a 0-indexed integer array parents, where parents[i] is the parent for node i.\n Since node 0 is the root, parents[0] == -1.\nThere are 105 genetic values, each represented by an integer in the inclusive range [1, 105].\n You are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i.\nReturn an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.\nThe subtree rooted at a node x contains node x and all of its descendant nodes.",
    "examples": [
        "Input: parents = [-1,0,0,2], nums = [1,2,3,4]",
        "Output: [5,1,1,1]",
        "Explanation: The answer for each subtree is calculated as follows:",
        "- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.",
        "- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.",
        "- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.",
        "- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value.",
        "Input: parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]",
        "Output: [7,1,1,4,2,1]",
        "Explanation: The answer for each subtree is calculated as follows:",
        "- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.",
        "- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.",
        "- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.",
        "- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.",
        "- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.",
        "- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value.",
        "Input: parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]",
        "Output: [1,1,1,1,1,1,1]",
        "Explanation: The value 1 is missing from all the subtrees.",
        ""
    ],
    "constraints": [
        "n == parents. length == nums. length2 <= n <= 1050 <= parents[i] <= n - 1 for i != 0parents[0] == -1parents represents a valid tree. 1 <= nums[i] <= 105Each nums[i] is distinct."
    ]
},
{
    "id": "2009",
    "title": "Minimum Number of Operations to Make Array Continuous",
    "question": "You are given an integer array nums.\n In one operation, you can replace any element in nums with any integer.\nnums is considered continuous if both of the following conditions are fulfilled:For example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.\nReturn the minimum number of operations to make nums continuous.",
    "examples": [
        "Input: nums = [4,2,5,3]",
        "Output: 0",
        "Explanation: nums is already continuous.",
        "Input: nums = [1,2,3,5,6]",
        "Output: 1",
        "Explanation: One possible solution is to change the last element to 4.",
        "The resulting array is [1,2,3,5,4], which is continuous.",
        "Input: nums = [1,10,100,1000]",
        "Output: 3",
        "Explanation: One possible solution is to:",
        "- Change the second element to 2.",
        "- Change the third element to 3.",
        "- Change the fourth element to 4.",
        "The resulting array is [1,2,3,4], which is continuous.",
        ""
    ],
    "constraints": [
        "All elements in nums are unique. The difference between the maximum element and the minimum element in nums equals nums. length - 1. 1 <= nums. length <= 1051 <= nums[i] <= 109"
    ]
},
{
    "id": "2014",
    "title": "Longest Subsequence Repeated k Times",
    "question": "You are given a string s of length n, and an integer k.\n You are tasked to find the longest subsequence repeated k times in string s.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nA subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.\nReturn the longest subsequence repeated k times in string s.\n If multiple such subsequences are found, return the lexicographically largest one.\n If there is no such subsequence, return an empty string.",
    "examples": [
        "Input: s = \"letsleetcode\", k = 2",
        "Output: \"let\"",
        "Explanation: There are two longest subsequences repeated 2 times: \"let\" and \"ete\".",
        "\"let\" is the lexicographically largest one.",
        "Input: s = \"bb\", k = 2",
        "Output: \"b\"",
        "Explanation: The longest subsequence repeated 2 times is \"b\".",
        "Input: s = \"ab\", k = 2",
        "Output: \"\"",
        "Explanation: There is no subsequence repeated 2 times. Empty string is returned.",
        "Input: s = \"bbabbabbbbabaababab\", k = 3",
        "Output: \"bbbb\"",
        "Explanation: The longest subsequence \"bbbb\" is repeated 3 times in \"bbabbabbbbabaababab\".",
        ""
    ],
    "constraints": [
        "For example",
        " \"bba\" is repeated 2 times in the string \"bababcba\"",
        " because the string \"bbabba\"",
        " constructed by concatenating \"bba\" 2 times",
        " is a subsequence of the string \"bababcba\". n == s. length2 <= k <= 20002 <= n < k * 8s consists of lowercase English letters."
    ]
},
{
    "id": "728",
    "title": "Self Dividing Numbers",
    "question": "A self-dividing number is a number that is divisible by every digit it contains.\nA self-dividing number is not allowed to contain the digit zero.\nGiven two integers left and right, return a list of all the self-dividing numbers in the range [left, right].",
    "examples": [
        "Input: left = 1, right = 22",
        "Output: [1,2,3,4,5,6,7,8,9,11,12,15,22]",
        "Input: left = 47, right = 85",
        "Output: [48,55,66,77]",
        ""
    ],
    "constraints": [
        "For example",
        " 128 is a self-dividing number because 128 % 1 == 0",
        " 128 % 2 == 0",
        " and 128 % 8 == 0. 1 <= left <= right <= 104"
    ]
},
{
    "id": "733",
    "title": "Flood Fill",
    "question": "An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.\nYou are also given three integers sr, sc, and newColor.\n You should perform a flood fill on the image starting from the pixel image[sr][sc].\nTo perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on.\n Replace the color of all of the aforementioned pixels with newColor.\nReturn the modified image after performing the flood fill.",
    "examples": [
        "Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2",
        "Output: [[2,2,2],[2,2,0],[2,0,1]]",
        "Explanation: From the center of the image with position (sr, sc) = (1, 1) (i. e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i. e., the blue pixels) are colored with the new color.",
        "Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.",
        "Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, newColor = 2",
        "Output: [[2,2,2],[2,2,2]]",
        ""
    ],
    "constraints": [
        "m == image. lengthn == image[i]. length1 <= m",
        " n <= 500 <= image[i][j]",
        " newColor < 2160 <= sr < m0 <= sc < n"
    ]
},
{
    "id": "744",
    "title": "Find Smallest Letter Greater Than Target",
    "question": "Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.\nNote that the letters wrap around.",
    "examples": [
        "Input: letters = [\"c\",\"f\",\"j\"], target = \"a\"",
        "Output: \"c\"",
        "Input: letters = [\"c\",\"f\",\"j\"], target = \"c\"",
        "Output: \"f\"",
        "Input: letters = [\"c\",\"f\",\"j\"], target = \"d\"",
        "Output: \"f\"",
        "Input: letters = [\"c\",\"f\",\"j\"], target = \"g\"",
        "Output: \"j\"",
        "Input: letters = [\"c\",\"f\",\"j\"], target = \"j\"",
        "Output: \"c\"",
        ""
    ],
    "constraints": [
        "For example",
        " if target == 'z' and letters == ['a'",
        " 'b']",
        " the answer is 'a'. 2 <= letters. length <= 104letters[i] is a lowercase English letter. letters is sorted in non-decreasing order. letters contains at least two different characters. target is a lowercase English letter."
    ]
},
{
    "id": "746",
    "title": "Min Cost Climbing Stairs",
    "question": "You are given an integer array cost where cost[i] is the cost of ith step on a staircase.\n Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.",
    "examples": [
        "Input: cost = [10,15,20]",
        "Output: 15",
        "Explanation: Cheapest is: start on cost[1], pay that cost, and go to the top.",
        "Input: cost = [1,100,1,1,1,100,1,1,100,1]",
        "Output: 6",
        "Explanation: Cheapest is: start on cost[0], and only step on 1s, skipping cost[3].",
        ""
    ],
    "constraints": [
        "2 <= cost. length <= 10000 <= cost[i] <= 999"
    ]
},
{
    "id": "747",
    "title": "Largest Number At Least Twice of Others",
    "question": "You are given an integer array nums where the largest integer is unique.\nDetermine whether the largest element in the array is at least twice as much as every other number in the array.\n If it is, return the index of the largest element, or return -1 otherwise.",
    "examples": [
        "Input: nums = [3,6,1,0]",
        "Output: 1",
        "Explanation: 6 is the largest integer.",
        "For every other number in the array x, 6 is at least twice as big as x.",
        "The index of value 6 is 1, so we return 1.",
        "Input: nums = [1,2,3,4]",
        "Output: -1",
        "Explanation: 4 is less than twice the value of 3, so we return -1. Input: nums = [1]",
        "Output: 0",
        "Explanation: 1 is trivially at least twice the value as any other number because there are no other numbers.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 500 <= nums[i] <= 100The largest element in nums is unique."
    ]
},
{
    "id": "748",
    "title": "Shortest Completing Word",
    "question": "Given a string licensePlate and an array of strings words, find the shortest completing word in words.\nA completing word is a word that contains all the letters in licensePlate.\n Ignore numbers and spaces in licensePlate, and treat letters as case insensitive.\n If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.\nFor example, if licensePlate = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice.\n Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\".\nReturn the shortest completing word in words.\n It is guaranteed an answer exists.\n If there are multiple shortest completing words, return the first one that occurs in words.",
    "examples": [
        "Input: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]",
        "Output: \"steps\"",
        "Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.",
        "\"step\" contains 't' and 'p', but only contains 1 's'.",
        "\"steps\" contains 't', 'p', and both 's' characters.",
        "\"stripe\" is missing an 's'.",
        "\"stepple\" is missing an 's'.",
        "Since \"steps\" is the only word containing all the letters, that is the answer.",
        "Input: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]",
        "Output: \"pest\"",
        "Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.",
        "Input: licensePlate = \"Ah71752\", words = [\"suggest\",\"letter\",\"of\",\"husband\",\"easy\",\"education\",\"drug\",\"prevent\",\"writer\",\"old\"]",
        "Output: \"husband\"",
        "Input: licensePlate = \"OgEu755\", words = [\"enough\",\"these\",\"play\",\"wide\",\"wonder\",\"box\",\"arrive\",\"money\",\"tax\",\"thus\"]",
        "Output: \"enough\"",
        "Input: licensePlate = \"iMSlpe4\", words = [\"claim\",\"consumer\",\"student\",\"camera\",\"public\",\"never\",\"wonder\",\"simple\",\"thought\",\"use\"]",
        "Output: \"simple\"",
        ""
    ],
    "constraints": [
        "1 <= licensePlate. length <= 7licensePlate contains digits",
        " letters (uppercase or lowercase)",
        " or space ' '. 1 <= words. length <= 10001 <= words[i]. length <= 15words[i] consists of lower case English letters."
    ]
},
{
    "id": "70",
    "title": "Climbing Stairs",
    "question": "You are climbing a staircase.\n It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps.\n In how many distinct ways can you climb to the top?",
    "examples": [
        "Input: n = 2",
        "Output: 2",
        "Explanation: There are two ways to climb to the top.",
        "1. 1 step + 1 step",
        "2. 2 steps",
        "Input: n = 3",
        "Output: 3",
        "Explanation: There are three ways to climb to the top.",
        "1. 1 step + 1 step + 1 step",
        "2. 1 step + 2 steps",
        "3. 2 steps + 1 step",
        ""
    ],
    "constraints": [
        "1 <= n <= 45"
    ]
},
{
    "id": "762",
    "title": "Prime Number of Set Bits in Binary Representation",
    "question": "Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\nRecall that the number of set bits an integer has is the number of 1's present when written in binary.",
    "examples": [
        "Input: left = 6, right = 10",
        "Output: 4",
        "Explanation:",
        "6 -> 110 (2 set bits, 2 is prime)",
        "7 -> 111 (3 set bits, 3 is prime)",
        "9 -> 1001 (2 set bits , 2 is prime)",
        "10->1010 (2 set bits , 2 is prime)",
        "Input: left = 10, right = 15",
        "Output: 5",
        "Explanation:",
        "10 -> 1010 (2 set bits, 2 is prime)",
        "11 -> 1011 (3 set bits, 3 is prime)",
        "12 -> 1100 (2 set bits, 2 is prime)",
        "13 -> 1101 (3 set bits, 3 is prime)",
        "14 -> 1110 (3 set bits, 3 is prime)",
        "15 -> 1111 (4 set bits, 4 is not prime)",
        ""
    ],
    "constraints": [
        "For example",
        " 21 written in binary is 10101 which has 3 set bits. 1 <= left <= right <= 1060 <= right - left <= 104"
    ]
},
{
    "id": "766",
    "title": "Toeplitz Matrix",
    "question": "Given an m x n matrix, return true if the matrix is Toeplitz.\n Otherwise, return false.\nA matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\n   Follow up:",
    "examples": [
        "Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]",
        "Output: true",
        "Explanation:",
        "In the above grid, the diagonals are:",
        "\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".",
        "In each diagonal all elements are the same, so the answer is True.",
        "Input: matrix = [[1,2],[2,2]]",
        "Output: false",
        "Explanation:",
        "The diagonal \"[1, 2]\" has different elements.",
        ""
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 200 <= matrix[i][j] <= 99What if the matrix is stored on disk",
        " and the memory is limited such that you can only load at most one row of the matrix into the memory at once?What if the matrix is so large that you can only load up a partial row into the memory at once?"
    ]
},
{
    "id": "771",
    "title": "Jewels and Stones",
    "question": "You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have.\n Each character in stones is a type of stone you have.\n You want to know how many of the stones you have are also jewels.\nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".",
    "examples": [
        "Input: jewels = \"aA\", stones = \"aAAbbbb\"",
        "Output: 3",
        "Input: jewels = \"z\", stones = \"ZZ\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= jewels. length",
        " stones. length <= 50jewels and stones consist of only English letters. All the characters of jewels are unique."
    ]
},
{
    "id": "783",
    "title": "Minimum Distance Between BST Nodes",
    "question": "Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\n   Note: This question is the same as 530: https://leetcode.\ncom/problems/minimum-absolute-difference-in-bst/",
    "examples": [
        "Input: root = [4,2,6,1,3]",
        "Output: 1",
        "Input: root = [1,0,48,null,null,12,49]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [2",
        " 100]. 0 <= Node. val <= 105"
    ]
},
{
    "id": "796",
    "title": "Rotate String",
    "question": "Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\nA shift on s consists of moving the leftmost character of s to the rightmost position.",
    "examples": [
        "Input: s = \"abcde\", goal = \"cdeab\"",
        "Output: true",
        "Input: s = \"abcde\", goal = \"abced\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "For example",
        " if s = \"abcde\"",
        " then it will be \"bcdea\" after one shift. 1 <= s. length",
        " goal. length <= 100s and goal consist of lowercase English letters."
    ]
},
{
    "id": "804",
    "title": "Unique Morse Code Words",
    "question": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:For convenience, the full table for the 26 letters of the English alphabet is given below:Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\nReturn the number of different transformations among all words we have.",
    "examples": [
        "[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]Input: words = [\"gin\",\"zen\",\"gig\",\"msg\"]",
        "Output: 2",
        "Explanation: The transformation of each word is:",
        "\"gin\" -> \"--...-.\"",
        "\"zen\" -> \"--...-.\"",
        "\"gig\" -> \"--...--.\"",
        "\"msg\" -> \"--...--.\"",
        "There are 2 different transformations: \"--...-.\" and \"--...--.\".",
        "Input: words = [\"a\"]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "'a' maps to \".-\"",
        "'b' maps to \"-...\"",
        "'c' maps to \"-.-.\"",
        " and so on. For example",
        " \"cab\" can be written as \"-.-..--...\"",
        " which is the concatenation of \"-.-.\"",
        " \".-\"",
        " and \"-...\". We will call such a concatenation the transformation of a word. 1 <= words. length <= 1001 <= words[i]. length <= 12words[i] consists of lowercase English letters."
    ]
},
{
    "id": "806",
    "title": "Number of Lines To Write String",
    "question": "You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is.\n Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.\nYou are trying to write s across several lines, where each line is no longer than 100 pixels.\n Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels.\n Then, from where you stopped in s, continue writing as many letters as you can on the second line.\n Continue this process until you have written all of s.\nReturn an array result of length 2 where:",
    "examples": [
        "Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "Output: [3,60]",
        "Explanation: You can write s as follows:",
        "abcdefghij  // 100 pixels wide",
        "klmnopqrst  // 100 pixels wide",
        "uvwxyz      // 60 pixels wide",
        "There are a total of 3 lines, and the last line is 60 pixels wide. Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"",
        "Output: [2,4]",
        "Explanation: You can write s as follows:",
        "bbbcccdddaa  // 98 pixels wide",
        "a            // 4 pixels wide",
        "There are a total of 2 lines, and the last line is 4 pixels wide."
    ],
    "constraints": [
        "result[0] is the total number of lines. result[1] is the width of the last line in pixels. widths. length == 262 <= widths[i] <= 101 <= s. length <= 1000s contains only lowercase English letters."
    ]
},
{
    "id": "812",
    "title": "Largest Triangle Area",
    "question": "Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points.\n Answers within 10-5 of the actual answer will be accepted.",
    "examples": [
        "Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]",
        "Output: 2. 00000",
        "Explanation: The five points are shown in the above figure. The red triangle is the largest.",
        "Input: points = [[1,0],[0,0],[0,1]]",
        "Output: 0. 50000",
        ""
    ],
    "constraints": [
        "3 <= points. length <= 50-50 <= xi",
        " yi <= 50All the given points are unique."
    ]
},
{
    "id": "819",
    "title": "Most Common Word",
    "question": "Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned.\n It is guaranteed there is at least one word that is not banned, and that the answer is unique.\nThe words in paragraph are case-insensitive and the answer should be returned in lowercase.",
    "examples": [
        "Input: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]",
        "Output: \"ball\"",
        "Explanation: ",
        "\"hit\" occurs 3 times, but it is a banned word.",
        "\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. ",
        "Note that words in the paragraph are not case sensitive,",
        "that punctuation is ignored (even if adjacent to words, such as \"ball,\"), ",
        "and that \"hit\" isn't the answer even though it occurs more because it is banned.",
        "Input: paragraph = \"a.\", banned = []",
        "Output: \"a\"",
        ""
    ],
    "constraints": [
        "1 <= paragraph. length <= 1000paragraph consists of English letters",
        " space ' '",
        " or one of the symbols: \"!?'",
        ";.\". 0 <= banned. length <= 1001 <= banned[i]. length <= 10banned[i] consists of only lowercase English letters."
    ]
},
{
    "id": "821",
    "title": "Shortest Distance to a Character",
    "question": "Given a string s and a character c that occurs in s, return an array of integers answer where answer.\nlength == s.\nlength and answer[i] is the distance from index i to the closest occurrence of character c in s.\nThe distance between two indices i and j is abs(i - j), where abs is the absolute value function.",
    "examples": [
        "Input: s = \"loveleetcode\", c = \"e\"",
        "Output: [3,2,1,0,1,0,0,1,2,2,1,0]",
        "Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).",
        "The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.",
        "The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.",
        "For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.",
        "The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.",
        "Input: s = \"aaab\", c = \"b\"",
        "Output: [3,2,1,0]",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s[i] and c are lowercase English letters. It is guaranteed that c occurs at least once in s."
    ]
},
{
    "id": "83",
    "title": "Remove Duplicates from Sorted List",
    "question": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once.\n Return the linked list sorted as well.",
    "examples": [
        "Input: head = [1,1,2]",
        "Output: [1,2]",
        "Input: head = [1,1,2,3,3]",
        "Output: [1,2,3]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [0",
        " 300].-100 <= Node. val <= 100The list is guaranteed to be sorted in ascending order."
    ]
},
{
    "id": "824",
    "title": "Goat Latin",
    "question": "You are given a string sentence that consist of words separated by spaces.\n Each word consists of lowercase and uppercase letters only.\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.\n) The rules of Goat Latin are as follows:Return the final sentence representing the conversion from sentence to Goat Latin.",
    "examples": [
        "Input: sentence = \"I speak Goat Latin\"",
        "Output: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"",
        "Input: sentence = \"The quick brown fox jumped over the lazy dog\"",
        "Output: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"",
        ""
    ],
    "constraints": [
        "If a word begins with a vowel ('a'",
        " 'e'",
        " 'i'",
        " 'o'",
        " or 'u')",
        " append \"ma\" to the end of the word.\n\n\t\nFor example",
        " the word \"apple\" becomes \"applema\".\n\nFor example",
        " the word \"apple\" becomes \"applema\". If a word begins with a consonant (i. e.",
        " not a vowel)",
        " remove the first letter and append it to the end",
        " then add \"ma\".\n\t\nFor example",
        " the word \"goat\" becomes \"oatgma\".\n\nFor example",
        " the word \"goat\" becomes \"oatgma\". Add one letter 'a' to the end of each word per its word index in the sentence",
        " starting with 1.\n\t\nFor example",
        " the first word gets \"a\" added to the end",
        " the second word gets \"aa\" added to the end",
        " and so on.\n\nFor example",
        " the first word gets \"a\" added to the end",
        " the second word gets \"aa\" added to the end",
        " and so on. 1 <= sentence. length <= 150sentence consists of English letters and spaces. sentence has no leading or trailing spaces. All the words in sentence are separated by a single space."
    ]
},
{
    "id": "830",
    "title": "Positions of Large Groups",
    "question": "In a string s of lowercase letters, these letters form consecutive groups of the same character.\nFor example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and \"yy\".\nA group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group.\n In the above example, \"xxxx\" has the interval [3,6].\nA group is considered large if it has 3 or more characters.\nReturn the intervals of every large group sorted in increasing order by start index.",
    "examples": [
        "Input: s = \"abbxxxxzzy\"",
        "Output: [[3,6]]",
        "Explanation: \"xxxx\" is the only large group with start index 3 and end index 6.",
        "Input: s = \"abc\"",
        "Output: []",
        "Explanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups.",
        "Input: s = \"abcdddeeeeaabbbcd\"",
        "Output: [[3,5],[6,9],[12,14]]",
        "Explanation: The large groups are \"ddd\", \"eeee\", and \"bbb\".",
        "Input: s = \"aba\"",
        "Output: []",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s contains lower-case English letters only."
    ]
},
{
    "id": "832",
    "title": "Flipping an Image",
    "question": "Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\nTo flip an image horizontally means that each row of the image is reversed.\nTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.",
    "examples": [
        "Input: image = [[1,1,0],[1,0,1],[0,0,0]]",
        "Output: [[1,0,0],[0,1,0],[1,1,1]]",
        "Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].",
        "Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]",
        "Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]",
        "Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]",
        "Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].",
        "Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]",
        ""
    ],
    "constraints": [
        "For example",
        " flipping [1",
        "1",
        "0] horizontally results in [0",
        "1",
        "1]. For example",
        " inverting [0",
        "1",
        "1] results in [1",
        "0",
        "0]. n == image. lengthn == image[i]. length1 <= n <= 20images[i][j] is either 0 or 1."
    ]
},
{
    "id": "836",
    "title": "Rectangle Overlap",
    "question": "An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner.\n Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\nTwo rectangles overlap if the area of their intersection is positive.\n To be clear, two rectangles that only touch at the corner or edges do not overlap.\nGiven two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.",
    "examples": [
        "Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]",
        "Output: true",
        "Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]",
        "Output: false",
        "Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]",
        "Output: false",
        ""
    ],
    "constraints": [
        "rect1. length == 4rect2. length == 4-109 <= rec1[i]",
        " rec2[i] <= 109rec1 and rec2 represent a valid rectangle with a non-zero area."
    ]
},
{
    "id": "844",
    "title": "Backspace String Compare",
    "question": "Given two strings s and t, return true if they are equal when both are typed into empty text editors.\n '#' means a backspace character.\nNote that after backspacing an empty text, the text will continue empty.\n   Follow up: Can you solve it in O(n) time and O(1) space?",
    "examples": [
        "Input: s = \"ab#c\", t = \"ad#c\"",
        "Output: true",
        "Explanation: Both s and t become \"ac\".",
        "Input: s = \"ab##\", t = \"c#d#\"",
        "Output: true",
        "Explanation: Both s and t become \"\".",
        "Input: s = \"a##c\", t = \"#a#c\"",
        "Output: true",
        "Explanation: Both s and t become \"c\".",
        "Input: s = \"a#c\", t = \"b\"",
        "Output: false",
        "Explanation: s becomes \"c\" while t becomes \"b\".",
        ""
    ],
    "constraints": [
        "1 <= s. length",
        " t. length <= 200s and t only contain lowercase letters and '#' characters."
    ]
},
{
    "id": "852",
    "title": "Peak Index in a Mountain Array",
    "question": "Let's call an array arr a mountain if the following properties hold:Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < .\n.\n.\n arr[i - 1] < arr[i] > arr[i + 1] > .\n.\n.\n > arr[arr.\nlength - 1].",
    "examples": [
        "Input: arr = [0,1,0]",
        "Output: 1",
        "Input: arr = [0,2,1,0]",
        "Output: 1",
        "Input: arr = [0,10,5,2]",
        "Output: 1",
        "Input: arr = [3,4,5,1]",
        "Output: 2",
        "Input: arr = [24,69,100,99,79,78,67,36,26,19]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "arr. length >= 3There exists some i with 0 < i < arr. length - 1 such that:\n\t\narr[0] < arr[1] < ... arr[i-1] < arr[i] \narr[i] > arr[i+1] > ... > arr[arr. length - 1]\n\narr[0] < arr[1] < ... arr[i-1] < arr[i] arr[i] > arr[i+1] > ... > arr[arr. length - 1]3 <= arr. length <= 1040 <= arr[i] <= 106arr is guaranteed to be a mountain array."
    ]
},
{
    "id": "859",
    "title": "Buddy Strings",
    "question": "Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].",
    "examples": [
        "Input: s = \"ab\", goal = \"ba\"",
        "Output: true",
        "Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal.",
        "Input: s = \"ab\", goal = \"ab\"",
        "Output: false",
        "Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal.",
        "Input: s = \"aa\", goal = \"aa\"",
        "Output: true",
        "Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal.",
        "Input: s = \"aaaaaaabc\", goal = \"aaaaaaacb\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "For example",
        " swapping at indices 0 and 2 in \"abcd\" results in \"cbad\". 1 <= s. length",
        " goal. length <= 2 * 104s and goal consist of lowercase letters."
    ]
},
{
    "id": "860",
    "title": "Lemonade Change",
    "question": "At a lemonade stand, each lemonade costs $5.\n Customers are standing in a queue to buy from you, and order one at a time (in the order specified by bills).\n Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill.\n You must provide the correct change to each customer so that the net transaction is that the customer pays $5.\nNote that you don't have any change in hand at first.\nGiven an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with correct change, or false otherwise.",
    "examples": [
        "Input: bills = [5,5,5,10,20]",
        "Output: true",
        "Explanation: ",
        "From the first 3 customers, we collect three $5 bills in order.",
        "From the fourth customer, we collect a $10 bill and give back a $5.",
        "From the fifth customer, we give a $10 bill and a $5 bill.",
        "Since all customers got correct change, we output true.",
        "Input: bills = [5,5,10,10,20]",
        "Output: false",
        "Explanation: ",
        "From the first two customers in order, we collect two $5 bills.",
        "For the next two customers in order, we collect a $10 bill and give back a $5 bill.",
        "For the last customer, we can not give change of $15 back because we only have two $10 bills.",
        "Since not every customer received correct change, the answer is false.",
        "Input: bills = [5,5,10]",
        "Output: true",
        "Input: bills = [10,10]",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= bills. length <= 105bills[i] is either 5",
        " 10",
        " or 20."
    ]
},
{
    "id": "867",
    "title": "Transpose Matrix",
    "question": "Given a 2D integer array matrix, return the transpose of matrix.\nThe transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.",
    "examples": [
        "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "Output: [[1,4,7],[2,5,8],[3,6,9]]",
        "Input: matrix = [[1,2,3],[4,5,6]]",
        "Output: [[1,4],[2,5],[3,6]]",
        ""
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 10001 <= m * n <= 105-109 <= matrix[i][j] <= 109"
    ]
},
{
    "id": "868",
    "title": "Binary Gap",
    "question": "Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n.\n If there are no two adjacent 1's, return 0.\nTwo 1's are adjacent if there are only 0's separating them (possibly no 0's).\n The distance between two 1's is the absolute difference between their bit positions.\n For example, the two 1's in \"1001\" have a distance of 3.",
    "examples": [
        "Input: n = 22",
        "Output: 2",
        "Explanation: 22 in binary is \"10110\".",
        "The first adjacent pair of 1's is \"10110\" with a distance of 2.",
        "The second adjacent pair of 1's is \"10110\" with a distance of 1.",
        "The answer is the largest of these two distances, which is 2.",
        "Note that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.",
        "Input: n = 5",
        "Output: 2",
        "Explanation: 5 in binary is \"101\".",
        "Input: n = 6",
        "Output: 1",
        "Explanation: 6 in binary is \"110\".",
        "Input: n = 8",
        "Output: 0",
        "Explanation: 8 in binary is \"1000\".",
        "There aren't any adjacent pairs of 1's in the binary representation of 8, so we return 0.",
        "Input: n = 1",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= n <= 109"
    ]
},
{
    "id": "88",
    "title": "Merge Sorted Array",
    "question": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1.\n To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored.\n nums2 has a length of n.\n   Follow up: Can you come up with an algorithm that runs in O(m + n) time?",
    "examples": [
        "Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "Output: [1,2,2,3,5,6]",
        "Explanation: The arrays we are merging are [1,2,3] and [2,5,6].",
        "The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.",
        "Input: nums1 = [1], m = 1, nums2 = [], n = 0",
        "Output: [1]",
        "Explanation: The arrays we are merging are [1] and [].",
        "The result of the merge is [1].",
        "Input: nums1 = [0], m = 0, nums2 = [1], n = 1",
        "Output: [1]",
        "Explanation: The arrays we are merging are [] and [1].",
        "The result of the merge is [1].",
        "Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.",
        ""
    ],
    "constraints": [
        "nums1. length == m + nnums2. length == n0 <= m",
        " n <= 2001 <= m + n <= 200-109 <= nums1[i]",
        " nums2[j] <= 109"
    ]
},
{
    "id": "872",
    "title": "Leaf-Similar Trees",
    "question": "Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.\nFor example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\nTwo binary trees are considered leaf-similar if their leaf value sequence is the same.\nReturn true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.",
    "examples": [
        "Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
        "Output: true",
        "Input: root1 = [1], root2 = [1]",
        "Output: true",
        "Input: root1 = [1], root2 = [2]",
        "Output: false",
        "Input: root1 = [1,2], root2 = [2,2]",
        "Output: true",
        "Input: root1 = [1,2,3], root2 = [1,3,2]",
        "Output: false",
        ""
    ],
    "constraints": [
        "The number of nodes in each tree will be in the range [1",
        " 200]. Both of the given trees will have values in the range [0",
        " 200]."
    ]
},
{
    "id": "874",
    "title": "Walking Robot Simulation",
    "question": "A robot on an infinite XY-plane starts at point (0, 0) and faces north.\n The robot can receive one of three possible types of commands:Some of the grid squares are obstacles.\n The ith obstacle is at grid point obstacles[i] = (xi, yi).\nIf the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.\n)Return the maximum Euclidean distance that the robot will be from the origin squared (i.\ne.\n if the distance is 5, return 25).\nNote:",
    "examples": [
        "Input: commands = [4,-1,3], obstacles = []",
        "Output: 25",
        "Explanation: The robot starts at (0, 0):",
        "1. Move north 4 units to (0, 4).",
        "2. Turn right.",
        "3. Move east 3 units to (3, 4).",
        "The furthest point away from the origin is (3, 4), which is 32 + 42 = 25 units away.",
        "Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]",
        "Output: 65",
        "Explanation: The robot starts at (0, 0):",
        "1. Move north 4 units to (0, 4).",
        "2. Turn right.",
        "3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).",
        "4. Turn left.",
        "5. Move north 4 units to (1, 8).",
        "The furthest point away from the origin is (1, 8), which is 12 + 82 = 65 units away.",
        ""
    ],
    "constraints": [
        "-2: turn left 90 degrees",
        "-1: turn right 90 degrees",
        " or1 <= k <= 9: move forward k units. North means +Y direction. East means +X direction. South means -Y direction. West means -X direction. 1 <= commands. length <= 104commands[i] is one of the values in the list [-2",
        "-1",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9]. 0 <= obstacles. length <= 104-3 * 104 <= xi",
        " yi <= 3 * 104The answer is guaranteed to be less than 231."
    ]
},
{
    "id": "876",
    "title": "Middle of the Linked List",
    "question": "Given the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.",
    "examples": [
        "Input: head = [1,2,3,4,5]",
        "Output: [3,4,5]",
        "Explanation: The middle node of the list is node 3.",
        "Input: head = [1,2,3,4,5,6]",
        "Output: [4,5,6]",
        "Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [1",
        " 100]. 1 <= Node. val <= 100"
    ]
},
{
    "id": "883",
    "title": "Projection Area of 3D Shapes",
    "question": "You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.\nEach value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).\nWe view the projection of these cubes onto the xy, yz, and zx planes.\nA projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane.\n We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\nReturn the total area of all three projections.",
    "examples": [
        "Input: grid = [[1,2],[3,4]]",
        "Output: 17",
        "Explanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.",
        "Input: grid = [[2]]",
        "Output: 5",
        "Input: grid = [[1,0],[0,2]]",
        "Output: 8",
        "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "Output: 14",
        "Input: grid = [[2,2,2],[2,1,2],[2,2,2]]",
        "Output: 21",
        ""
    ],
    "constraints": [
        "n == grid. lengthn == grid[i]. length1 <= n <= 500 <= grid[i][j] <= 50"
    ]
},
{
    "id": "884",
    "title": "Uncommon Words from Two Sentences",
    "question": "A sentence is a string of single-space separated words where each word consists only of lowercase letters.\nA word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.\nGiven two sentences s1 and s2, return a list of all the uncommon words.\n You may return the answer in any order.",
    "examples": [
        "Input: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"",
        "Output: [\"sweet\",\"sour\"]",
        "Input: s1 = \"apple apple\", s2 = \"banana\"",
        "Output: [\"banana\"]",
        ""
    ],
    "constraints": [
        "1 <= s1. length",
        " s2. length <= 200s1 and s2 consist of lowercase English letters and spaces. s1 and s2 do not have leading or trailing spaces. All the words in s1 and s2 are separated by a single space."
    ]
},
{
    "id": "888",
    "title": "Fair Candy Swap",
    "question": "Alice and Bob have a different total number of candies.\n You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy.\n The total amount of candy a person has is the sum of the number of candies in each box they have.\nReturn an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange.\n If there are multiple answers, you may return any one of them.\n It is guaranteed that at least one answer exists.",
    "examples": [
        "Input: aliceSizes = [1,1], bobSizes = [2,2]",
        "Output: [1,2]",
        "Input: aliceSizes = [1,2], bobSizes = [2,3]",
        "Output: [1,2]",
        "Input: aliceSizes = [2], bobSizes = [1,3]",
        "Output: [2,3]",
        "Input: aliceSizes = [1,2,5], bobSizes = [2,4]",
        "Output: [5,4]",
        ""
    ],
    "constraints": [
        "1 <= aliceSizes. length",
        " bobSizes. length <= 1041 <= aliceSizes[i]",
        " bobSizes[j] <= 105Alice and Bob have a different total number of candies. There will be at least one valid answer for the given input."
    ]
},
{
    "id": "892",
    "title": "Surface Area of 3D Shapes",
    "question": "You are given an n x n grid where you have placed some 1 x 1 x 1 cubes.\n Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\nReturn the total surface area of the resulting shapes.\nNote: The bottom face of each shape counts toward its surface area.",
    "examples": [
        "Input: grid = [[2]]",
        "Output: 10",
        "Input: grid = [[1,2],[3,4]]",
        "Output: 34",
        "Input: grid = [[1,0],[0,2]]",
        "Output: 16",
        "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "Output: 32",
        "Input: grid = [[2,2,2],[2,1,2],[2,2,2]]",
        "Output: 46",
        ""
    ],
    "constraints": [
        "n == grid. lengthn == grid[i]. length1 <= n <= 500 <= grid[i][j] <= 50"
    ]
},
{
    "id": "896",
    "title": "Monotonic Array",
    "question": "An array is monotonic if it is either monotone increasing or monotone decreasing.\nAn array nums is monotone increasing if for all i <= j, nums[i] <= nums[j].\n An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\nGiven an integer array nums, return true if the given array is monotonic, or false otherwise.",
    "examples": [
        "Input: nums = [1,2,2,3]",
        "Output: true",
        "Input: nums = [6,5,4,4]",
        "Output: true",
        "Input: nums = [1,3,2]",
        "Output: false",
        "Input: nums = [1,2,4,5]",
        "Output: true",
        "Input: nums = [1,1,1]",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105-105 <= nums[i] <= 105"
    ]
},
{
    "id": "897",
    "title": "Increasing Order Search Tree",
    "question": "Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.",
    "examples": [
        "Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]",
        "Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "Input: root = [5,1,7]",
        "Output: [1,null,5,null,7]",
        ""
    ],
    "constraints": [
        "The number of nodes in the given tree will be in the range [1",
        " 100]. 0 <= Node. val <= 1000"
    ]
},
{
    "id": "905",
    "title": "Sort Array By Parity",
    "question": "Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.\nReturn any array that satisfies this condition.",
    "examples": [
        "Input: nums = [3,1,2,4]",
        "Output: [2,4,3,1]",
        "Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.",
        "Input: nums = [0]",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 50000 <= nums[i] <= 5000"
    ]
},
{
    "id": "94",
    "title": "Binary Tree Inorder Traversal",
    "question": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
    "examples": [
        "Input: root = [1,null,2,3]",
        "Output: [1,3,2]",
        "Input: root = []",
        "Output: []",
        "Input: root = [1]",
        "Output: [1]",
        "Input: root = [1,2]",
        "Output: [2,1]",
        "Input: root = [1,null,2]",
        "Output: [1,2]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 100].-100 <= Node. val <= 100"
    ]
},
{
    "id": "908",
    "title": "Smallest Range I",
    "question": "You are given an integer array nums and an integer k.\nIn one operation, you can choose any index i where 0 <= i < nums.\nlength and change nums[i] to nums[i] + x where x is an integer from the range [-k, k].\n You can apply this operation at most once for each index i.\nThe score of nums is the difference between the maximum and minimum elements in nums.\nReturn the minimum score of nums after applying the mentioned operation at most once for each index in it.",
    "examples": [
        "Input: nums = [1], k = 0",
        "Output: 0",
        "Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.",
        "Input: nums = [0,10], k = 2",
        "Output: 6",
        "Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.",
        "Input: nums = [1,3,6], k = 3",
        "Output: 0",
        "Explanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1040 <= nums[i] <= 1040 <= k <= 104"
    ]
},
{
    "id": "914",
    "title": "X of a Kind in a Deck of Cards",
    "question": "In a deck of cards, each card has an integer written on it.\nReturn true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:",
    "examples": [
        "Input: deck = [1,2,3,4,4,3,2,1]",
        "Output: true",
        "Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].",
        "Input: deck = [1,1,1,2,2,2,3,3]",
        "Output: false",
        "Explanation: No possible partition.",
        "Input: deck = [1]",
        "Output: false",
        "Explanation: No possible partition.",
        "Input: deck = [1,1]",
        "Output: true",
        "Explanation: Possible partition [1,1].",
        "Input: deck = [1,1,2,2,2,2]",
        "Output: true",
        "Explanation: Possible partition [1,1],[2,2],[2,2].",
        ""
    ],
    "constraints": [
        "Each group has exactly X cards. All the cards in each group have the same integer. 1 <= deck. length <= 1040 <= deck[i] < 104"
    ]
},
{
    "id": "917",
    "title": "Reverse Only Letters",
    "question": "Given a string s, reverse the string according to the following rules:Return s after reversing it.",
    "examples": [
        "Input: s = \"ab-cd\"",
        "Output: \"dc-ba\"",
        "Input: s = \"a-bC-dEf-ghIj\"",
        "Output: \"j-Ih-gfE-dCba\"",
        "Input: s = \"Test1ng-Leet=code-Q!\"",
        "Output: \"Qedo1ct-eeLg=ntse-T!\"",
        ""
    ],
    "constraints": [
        "All the characters that are not English letters remain in the same position. All the English letters (lowercase or uppercase) should be reversed. 1 <= s. length <= 100s consists of characters with ASCII values in the range [33",
        " 122]. s does not contain '\\\"' or '\\\\'."
    ]
},
{
    "id": "922",
    "title": "Sort Array By Parity II",
    "question": "Given an array of integers nums, half of the integers in nums are odd, and the other half are even.\nSort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.\nReturn any answer array that satisfies this condition.\n   Follow Up: Could you solve it in-place?",
    "examples": [
        "Input: nums = [4,2,5,7]",
        "Output: [4,5,2,7]",
        "Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.",
        "Input: nums = [2,3]",
        "Output: [2,3]",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 2 * 104nums. length is even. Half of the integers in nums are even. 0 <= nums[i] <= 1000"
    ]
},
{
    "id": "925",
    "title": "Long Pressed Name",
    "question": "Your friend is typing his name into a keyboard.\n Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\nYou examine the typed characters of the keyboard.\n Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.",
    "examples": [
        "Input: name = \"alex\", typed = \"aaleex\"",
        "Output: true",
        "Explanation: 'a' and 'e' in 'alex' were long pressed.",
        "Input: name = \"saeed\", typed = \"ssaaedd\"",
        "Output: false",
        "Explanation: 'e' must have been pressed twice, but it wasn't in the typed output.",
        "Input: name = \"leelee\", typed = \"lleeelee\"",
        "Output: true",
        "Input: name = \"laiden\", typed = \"laiden\"",
        "Output: true",
        "Explanation: It's not necessary to long press any character.",
        ""
    ],
    "constraints": [
        "1 <= name. length <= 10001 <= typed. length <= 1000name and typed contain only lowercase English letters."
    ]
},
{
    "id": "929",
    "title": "Unique Email Addresses",
    "question": "Every valid email consists of a local name and a domain name, separated by the '@' sign.\n Besides lowercase letters, the email may contain one or more '.\n' or '+'.\nIf you add periods '.\n' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.\n Note that this rule does not apply to domain names.\nIf you add a plus '+' in the local name, everything after the first plus sign will be ignored.\n This allows certain emails to be filtered.\n Note that this rule does not apply to domain names.\nIt is possible to use both of these rules at the same time.\nGiven an array of strings emails where we send one email to each email[i], return the number of different addresses that actually receive mails.",
    "examples": [
        "Input: emails = [\"test. email+alex@leetcode. com\",\"test. e. mail+bob. cathy@leetcode. com\",\"testemail+david@lee. tcode. com\"]",
        "Output: 2",
        "Explanation: \"testemail@leetcode. com\" and \"testemail@lee. tcode. com\" actually receive mails.",
        "Input: emails = [\"a@leetcode. com\",\"b@leetcode. com\",\"c@leetcode. com\"]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "For example",
        " in \"alice@leetcode. com\"",
        " \"alice\" is the local name",
        " and \"leetcode. com\" is the domain name. For example",
        " \"alice. z@leetcode. com\" and \"alicez@leetcode. com\" forward to the same email address. For example",
        " \"m. y+name@email. com\" will be forwarded to \"my@email. com\". 1 <= emails. length <= 1001 <= emails[i]. length <= 100email[i] consist of lowercase English letters",
        " '+'",
        " '.' and '@'. Each emails[i] contains exactly one '@' character. All local and domain names are non-empty. Local names do not start with a '+' character."
    ]
},
{
    "id": "933",
    "title": "Number of Recent Calls",
    "question": "You have a RecentCounter class which counts the number of recent requests within a certain time frame.\nImplement the RecentCounter class:It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.",
    "examples": [
        "Input",
        "[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]",
        "[[], [1], [100], [3001], [3002]]",
        "Output",
        "[null, 1, 2, 3, 3]",
        "",
        "Explanation",
        "RecentCounter recentCounter = new RecentCounter();",
        "recentCounter. ping(1);     // requests = [1], range is [-2999,1], return 1",
        "recentCounter. ping(100);   // requests = [1, 100], range is [-2900,100], return 2",
        "recentCounter. ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3",
        "recentCounter. ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3",
        ""
    ],
    "constraints": [
        "RecentCounter() Initializes the counter with zero recent requests. int ping(int t) Adds a new request at time t",
        " where t represents some time in milliseconds",
        " and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically",
        " return the number of requests that have happened in the inclusive range [t - 3000",
        " t]. 1 <= t <= 109Each test case will call ping with strictly increasing values of t. At most 104 calls will be made to ping."
    ]
},
{
    "id": "937",
    "title": "Reorder Data in Log Files",
    "question": "You are given an array of logs.\n Each log is a space-delimited string of words, where the first word is the identifier.\nThere are two types of logs:Reorder these logs so that:Return the final order of the logs.",
    "examples": [
        "Input: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]",
        "Output: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]",
        "Explanation:",
        "The letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".",
        "The digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\".",
        "Input: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]",
        "Output: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]",
        ""
    ],
    "constraints": [
        "Letter-logs: All words (except the identifier) consist of lowercase English letters. Digit-logs: All words (except the identifier) consist of digits. 1 <= logs. length <= 1003 <= logs[i]. length <= 100All the tokens of logs[i] are separated by a single space. logs[i] is guaranteed to have an identifier and at least one word after the identifier."
    ]
},
{
    "id": "938",
    "title": "Range Sum of BST",
    "question": "Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].",
    "examples": [
        "Input: root = [10,5,15,3,7,null,18], low = 7, high = 15",
        "Output: 32",
        "Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.",
        "Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10",
        "Output: 23",
        "Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 2 * 104]. 1 <= Node. val <= 1051 <= low <= high <= 105All Node. val are unique."
    ]
},
{
    "id": "941",
    "title": "Valid Mountain Array",
    "question": "Given an array of integers arr, return true if and only if it is a valid mountain array.\nRecall that arr is a mountain array if and only if:",
    "examples": [
        "Input: arr = [2,1]",
        "Output: false",
        "Input: arr = [3,5,5]",
        "Output: false",
        "Input: arr = [0,3,2,1]",
        "Output: true",
        ""
    ],
    "constraints": [
        "arr. length >= 3There exists some i with 0 < i < arr. length - 1 such that:\n\t\narr[0] < arr[1] < ... < arr[i - 1] < arr[i] \narr[i] > arr[i + 1] > ... > arr[arr. length - 1]\n\narr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr. length - 1]1 <= arr. length <= 1040 <= arr[i] <= 104"
    ]
},
{
    "id": "9",
    "title": "Palindrome Number",
    "question": "Given an integer x, return true if x is palindrome integer.\nAn integer is a palindrome when it reads the same backward as forward.\n For example, 121 is palindrome while 123 is not.",
    "examples": [
        "Input: x = 121",
        "Output: true",
        "Input: x = -121",
        "Output: false",
        "Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.",
        "Input: x = 10",
        "Output: false",
        "Explanation: Reads 01 from right to left. Therefore it is not a palindrome.",
        "Input: x = -101",
        "Output: false",
        ""
    ],
    "constraints": [
        "-231 <= x <= 231 - 1"
    ]
},
{
    "id": "100",
    "title": "Same Tree",
    "question": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
    "examples": [
        "Input: p = [1,2,3], q = [1,2,3]",
        "Output: true",
        "Input: p = [1,2], q = [1,null,2]",
        "Output: false",
        "Input: p = [1,2,1], q = [1,1,2]",
        "Output: false",
        ""
    ],
    "constraints": [
        "The number of nodes in both trees is in the range [0",
        " 100].-104 <= Node. val <= 104"
    ]
},
{
    "id": "942",
    "title": "DI String Match",
    "question": "A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:Given a string s, reconstruct the permutation perm and return it.\n If there are multiple valid permutations perm, return any of them.",
    "examples": [
        "Input: s = \"IDID\"",
        "Output: [0,4,1,3,2]",
        "Input: s = \"III\"",
        "Output: [0,1,2,3]",
        "Input: s = \"DDI\"",
        "Output: [3,2,0,1]",
        ""
    ],
    "constraints": [
        "s[i] == 'I' if perm[i] < perm[i + 1]",
        " ands[i] == 'D' if perm[i] > perm[i + 1]. 1 <= s. length <= 105s[i] is either 'I' or 'D'."
    ]
},
{
    "id": "944",
    "title": "Delete Columns to Make Sorted",
    "question": "You are given an array of n strings strs, all of the same length.\nThe strings can be arranged such that there is one on each line, making a grid.\n For example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as:You want to delete the columns that are not sorted lexicographically.\n In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted while column 1 ('b', 'c', 'a') is not, so you would delete column 1.\nReturn the number of columns that you will delete.",
    "examples": [
        "abc",
        "bce",
        "cae",
        "Input: strs = [\"cba\",\"daf\",\"ghi\"]",
        "Output: 1",
        "Explanation: The grid looks as follows:",
        "  cba",
        "  daf",
        "  ghi",
        "Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.",
        "Input: strs = [\"a\",\"b\"]",
        "Output: 0",
        "Explanation: The grid looks as follows:",
        "  a",
        "  b",
        "Column 0 is the only column and is sorted, so you will not delete any columns.",
        "Input: strs = [\"zyx\",\"wvu\",\"tsr\"]",
        "Output: 3",
        "Explanation: The grid looks as follows:",
        "  zyx",
        "  wvu",
        "  tsr",
        "All 3 columns are not sorted, so you will delete all 3.",
        ""
    ],
    "constraints": [
        "n == strs. length1 <= n <= 1001 <= strs[i]. length <= 1000strs[i] consists of lowercase English letters."
    ]
},
{
    "id": "953",
    "title": "Verifying an Alien Dictionary",
    "question": "In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order.\n The order of the alphabet is some permutation of lowercase letters.\nGiven a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.",
    "examples": [
        "Input: words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"",
        "Output: true",
        "Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.",
        "Input: words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"",
        "Output: false",
        "Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.",
        "Input: words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"",
        "Output: false",
        "Explanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info).",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 1001 <= words[i]. length <= 20order. length == 26All characters in words[i] and order are English lowercase letters."
    ]
},
{
    "id": "961",
    "title": "N-Repeated Element in Size 2N Array",
    "question": "You are given an integer array nums with the following properties:Return the element that is repeated n times.",
    "examples": [
        "Input: nums = [1,2,3,3]",
        "Output: 3",
        "Input: nums = [2,1,2,5,3,2]",
        "Output: 2",
        "Input: nums = [5,1,5,2,5,3,5,4]",
        "Output: 5",
        ""
    ],
    "constraints": [
        "nums. length == 2 * n. nums contains n + 1 unique elements. Exactly one element of nums is repeated n times. 2 <= n <= 5000nums. length == 2 * n0 <= nums[i] <= 104nums contains n + 1 unique elements and one of them is repeated exactly n times."
    ]
},
{
    "id": "965",
    "title": "Univalued Binary Tree",
    "question": "A binary tree is uni-valued if every node in the tree has the same value.\nGiven the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.",
    "examples": [
        "Input: root = [1,1,1,1,1,null,1]",
        "Output: true",
        "Input: root = [2,2,2,5,2]",
        "Output: false",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 100]. 0 <= Node. val < 100"
    ]
},
{
    "id": "976",
    "title": "Largest Perimeter Triangle",
    "question": "Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths.\n If it is impossible to form any triangle of a non-zero area, return 0.",
    "examples": [
        "Input: nums = [2,1,2]",
        "Output: 5",
        "Input: nums = [1,2,1]",
        "Output: 0",
        "Input: nums = [3,2,3,4]",
        "Output: 10",
        "Input: nums = [3,6,2,3]",
        "Output: 8",
        ""
    ],
    "constraints": [
        "3 <= nums. length <= 1041 <= nums[i] <= 106"
    ]
},
{
    "id": "977",
    "title": "Squares of a Sorted Array",
    "question": "Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.",
    "examples": [
        "Input: nums = [-4,-1,0,3,10]",
        "Output: [0,1,9,16,100]",
        "Explanation: After squaring, the array becomes [16,1,0,9,100].",
        "After sorting, it becomes [0,1,9,16,100].",
        "Input: nums = [-7,-3,2,3,11]",
        "Output: [4,9,9,49,121]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-104 <= nums[i] <= 104nums is sorted in non-decreasing order."
    ]
},
{
    "id": "989",
    "title": "Add to Array-Form of Integer",
    "question": "The array-form of an integer num is an array representing its digits in left to right order.\nGiven num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.",
    "examples": [
        "Input: num = [1,2,0,0], k = 34",
        "Output: [1,2,3,4]",
        "Explanation: 1200 + 34 = 1234",
        "Input: num = [2,7,4], k = 181",
        "Output: [4,5,5]",
        "Explanation: 274 + 181 = 455",
        "Input: num = [2,1,5], k = 806",
        "Output: [1,0,2,1]",
        "Explanation: 215 + 806 = 1021",
        "Input: num = [9,9,9,9,9,9,9,9,9,9], k = 1",
        "Output: [1,0,0,0,0,0,0,0,0,0,0]",
        "Explanation: 9999999999 + 1 = 10000000000",
        ""
    ],
    "constraints": [
        "For example",
        " for num = 1321",
        " the array form is [1",
        "3",
        "2",
        "1]. 1 <= num. length <= 1040 <= num[i] <= 9num does not contain any leading zeros except for the zero itself. 1 <= k <= 104"
    ]
},
{
    "id": "993",
    "title": "Cousins in Binary Tree",
    "question": "Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.\nTwo nodes of a binary tree are cousins if they have the same depth with different parents.\nNote that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.",
    "examples": [
        "Input: root = [1,2,3,4], x = 4, y = 3",
        "Output: false",
        "Input: root = [1,2,3,null,4,null,5], x = 5, y = 4",
        "Output: true",
        "Input: root = [1,2,3,null,4], x = 2, y = 3",
        "Output: false",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [2",
        " 100]. 1 <= Node. val <= 100Each node has a unique value. x != yx and y are exist in the tree."
    ]
},
{
    "id": "997",
    "title": "Find the Town Judge",
    "question": "In a town, there are n people labeled from 1 to n.\n There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.\nReturn the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.",
    "examples": [
        "Input: n = 2, trust = [[1,2]]",
        "Output: 2",
        "Input: n = 3, trust = [[1,3],[2,3]]",
        "Output: 3",
        "Input: n = 3, trust = [[1,3],[2,3],[3,1]]",
        "Output: -1",
        "Input: n = 3, trust = [[1,2],[2,3]]",
        "Output: -1",
        "Input: n = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= n <= 10000 <= trust. length <= 104trust[i]. length == 2All the pairs of trust are unique. ai != bi1 <= ai",
        " bi <= n"
    ]
},
{
    "id": "101",
    "title": "Symmetric Tree",
    "question": "Given the root of a binary tree, check whether it is a mirror of itself (i.\ne.\n, symmetric around its center).",
    "examples": [
        "Input: root = [1,2,2,3,4,4,3]",
        "Output: true",
        "Input: root = [1,2,2,null,3,null,3]",
        "Output: false",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 1000].-100 <= Node. val <= 100"
    ]
},
{
    "id": "999",
    "title": "Available Captures for Rook",
    "question": "On an 8 x 8 chessboard, there is exactly one white rook 'R' and some number of white bishops 'B', black pawns 'p', and empty squares '.\n'.\nWhen the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop.\n A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn.\n The number of available captures for the white rook is the number of pawns that the rook is attacking.\nReturn the number of available captures for the white rook.",
    "examples": [
        "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
        "Output: 3",
        "Explanation: In this example, the rook is attacking all the pawns.",
        "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
        "Output: 0",
        "Explanation: The bishops are blocking the rook from attacking any of the pawns.",
        "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]",
        "Output: 3",
        "Explanation: The rook is attacking the pawns at positions b5, d6, and f5.",
        ""
    ],
    "constraints": [
        "board. length == 8board[i]. length == 8board[i][j] is either 'R'",
        " '.'",
        " 'B'",
        " or 'p'There is exactly one cell with board[i][j] == 'R'"
    ]
},
{
    "id": "1002",
    "title": "Find Common Characters",
    "question": "Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates).\n You may return the answer in any order.",
    "examples": [
        "Input: words = [\"bella\",\"label\",\"roller\"]",
        "Output: [\"e\",\"l\",\"l\"]",
        "Input: words = [\"cool\",\"lock\",\"cook\"]",
        "Output: [\"c\",\"o\"]",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 1001 <= words[i]. length <= 100words[i] consists of lowercase English letters."
    ]
},
{
    "id": "1005",
    "title": "Maximize Sum Of Array After K Negations",
    "question": "Given an integer array nums and an integer k, modify the array in the following way:You should apply this process exactly k times.\n You may choose the same index i multiple times.\nReturn the largest possible sum of the array after modifying it in this way.",
    "examples": [
        "Input: nums = [4,2,3], k = 1",
        "Output: 5",
        "Explanation: Choose index 1 and nums becomes [4,-2,3].",
        "Input: nums = [3,-1,0,2], k = 3",
        "Output: 6",
        "Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].",
        "Input: nums = [2,-3,-1,5,-4], k = 2",
        "Output: 13",
        "Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].",
        ""
    ],
    "constraints": [
        "choose an index i and replace nums[i] with -nums[i]. 1 <= nums. length <= 104-100 <= nums[i] <= 1001 <= k <= 104"
    ]
},
{
    "id": "1009",
    "title": "Complement of Base 10 Integer",
    "question": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\nGiven an integer n, return its complement.\n   Note: This question is the same as 476: https://leetcode.\ncom/problems/number-complement/",
    "examples": [
        "Input: n = 5",
        "Output: 2",
        "Explanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.",
        "Input: n = 7",
        "Output: 0",
        "Explanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.",
        "Input: n = 10",
        "Output: 5",
        "Explanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.",
        ""
    ],
    "constraints": [
        "For example",
        " The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2. 0 <= n < 109"
    ]
},
{
    "id": "1013",
    "title": "Partition Array Into Three Parts With Equal Sum",
    "question": "Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.\nFormally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + .\n.\n.\n + arr[i] == arr[i + 1] + arr[i + 2] + .\n.\n.\n + arr[j - 1] == arr[j] + arr[j + 1] + .\n.\n.\n + arr[arr.\nlength - 1])",
    "examples": [
        "Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]",
        "Output: true",
        "Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1",
        "Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]",
        "Output: false",
        "Input: arr = [3,3,6,5,-2,2,5,1,-9,4]",
        "Output: true",
        "Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4",
        ""
    ],
    "constraints": [
        "3 <= arr. length <= 5 * 104-104 <= arr[i] <= 104"
    ]
},
{
    "id": "1018",
    "title": "Binary Prefix Divisible By 5",
    "question": "You are given a binary array nums (0-indexed).\nWe define xi as the number whose binary representation is the subarray nums[0.\n.\ni] (from most-significant-bit to least-significant-bit).\nReturn an array of booleans answer where answer[i] is true if xi is divisible by 5.",
    "examples": [
        "Input: nums = [0,1,1]",
        "Output: [true,false,false]",
        "Explanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.",
        "Only the first number is divisible by 5, so answer[0] is true.",
        "Input: nums = [1,1,1]",
        "Output: [false,false,false]",
        "Input: nums = [0,1,1,1,1,1]",
        "Output: [true,false,false,false,true,false]",
        "Input: nums = [1,1,1,0,1]",
        "Output: [false,false,false,false,false]",
        ""
    ],
    "constraints": [
        "For example",
        " if nums = [1",
        "0",
        "1]",
        " then x0 = 1",
        " x1 = 2",
        " and x2 = 5. 1 <= nums. length <= 105nums[i] is 0 or 1."
    ]
},
{
    "id": "1021",
    "title": "Remove Outermost Parentheses",
    "question": "A valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.\nA valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.\nGiven a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + .\n.\n.\n + Pk, where Pi are primitive valid parentheses strings.\nReturn s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.",
    "examples": [
        "Input: s = \"(()())(())\"",
        "Output: \"()()()\"",
        "Explanation: ",
        "The input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".",
        "After removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".",
        "Input: s = \"(()())(())(()(()))\"",
        "Output: \"()()()()(())\"",
        "Explanation: ",
        "The input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".",
        "After removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".",
        "Input: s = \"()()\"",
        "Output: \"\"",
        "Explanation: ",
        "The input string is \"()()\", with primitive decomposition \"()\" + \"()\".",
        "After removing outer parentheses of each part, this is \"\" + \"\" = \"\".",
        ""
    ],
    "constraints": [
        "For example",
        " \"\"",
        " \"()\"",
        " \"(())()\"",
        " and \"(()(()))\" are all valid parentheses strings. 1 <= s. length <= 105s[i] is either '(' or ')'. s is a valid parentheses string."
    ]
},
{
    "id": "1022",
    "title": "Sum of Root To Leaf Binary Numbers",
    "question": "You are given the root of a binary tree where each node has a value 0 or 1.\n  Each root-to-leaf path represents a binary number starting with the most significant bit.\n  For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf.\nReturn the sum of these numbers.\n The answer is guaranteed to fit in a 32-bits integer.",
    "examples": [
        "Input: root = [1,0,1,0,1,0,1]",
        "Output: 22",
        "Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22",
        "Input: root = [0]",
        "Output: 0",
        "Input: root = [1]",
        "Output: 1",
        "Input: root = [1,1]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 1000]. Node. val is 0 or 1."
    ]
},
{
    "id": "1025",
    "title": "Divisor Game",
    "question": "Alice and Bob take turns playing a game, with Alice starting first.\nInitially, there is a number n on the chalkboard.\n On each player's turn, that player makes a move consisting of:Also, if a player cannot make a move, they lose the game.\nReturn true if and only if Alice wins the game, assuming both players play optimally.",
    "examples": [
        "Input: n = 2",
        "Output: true",
        "Explanation: Alice chooses 1, and Bob has no more moves.",
        "Input: n = 3",
        "Output: false",
        "Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.",
        ""
    ],
    "constraints": [
        "Choosing any x with 0 < x < n and n % x == 0. Replacing the number n on the chalkboard with n - x. 1 <= n <= 1000"
    ]
},
{
    "id": "1030",
    "title": "Matrix Cells in Distance Order",
    "question": "You are given four integers row, cols, rCenter, and cCenter.\n There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter).\nReturn the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from the smallest distance to the largest distance.\n You may return the answer in any order that satisfies this condition.\nThe distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.",
    "examples": [
        "Input: rows = 1, cols = 2, rCenter = 0, cCenter = 0",
        "Output: [[0,0],[0,1]]",
        "Explanation: The distances from (0, 0) to other cells are: [0,1]",
        "Input: rows = 2, cols = 2, rCenter = 0, cCenter = 1",
        "Output: [[0,1],[0,0],[1,1],[1,0]]",
        "Explanation: The distances from (0, 1) to other cells are: [0,1,1,2]",
        "The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.",
        "Input: rows = 2, cols = 3, rCenter = 1, cCenter = 2",
        "Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]",
        "Explanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]",
        "There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].",
        ""
    ],
    "constraints": [
        "1 <= rows",
        " cols <= 1000 <= rCenter < rows0 <= cCenter < cols"
    ]
},
{
    "id": "104",
    "title": "Maximum Depth of Binary Tree",
    "question": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
    "examples": [
        "Input: root = [3,9,20,null,null,15,7]",
        "Output: 3",
        "Input: root = [1,null,2]",
        "Output: 2",
        "Input: root = []",
        "Output: 0",
        "Input: root = [0]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 104].-100 <= Node. val <= 100"
    ]
},
{
    "id": "1037",
    "title": "Valid Boomerang",
    "question": "Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.\nA boomerang is a set of three points that are all distinct and not in a straight line.",
    "examples": [
        "Input: points = [[1,1],[2,3],[3,2]]",
        "Output: true",
        "Input: points = [[1,1],[2,2],[3,3]]",
        "Output: false",
        ""
    ],
    "constraints": [
        "points. length == 3points[i]. length == 20 <= xi",
        " yi <= 100"
    ]
},
{
    "id": "1046",
    "title": "Last Stone Weight",
    "question": "You are given an array of integers stones where stones[i] is the weight of the ith stone.\nWe are playing a game with the stones.\n On each turn, we choose the heaviest two stones and smash them together.\n Suppose the heaviest two stones have weights x and y with x <= y.\n The result of this smash is:At the end of the game, there is at most one stone left.\nReturn the smallest possible weight of the left stone.\n If there are no stones left, return 0.",
    "examples": [
        "Input: stones = [2,7,4,1,8,1]",
        "Output: 1",
        "Explanation: ",
        "We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,",
        "we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,",
        "we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,",
        "we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.",
        "Input: stones = [1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "If x == y",
        " both stones are destroyed",
        " andIf x != y",
        " the stone of weight x is destroyed",
        " and the stone of weight y has new weight y - x. 1 <= stones. length <= 301 <= stones[i] <= 1000"
    ]
},
{
    "id": "1047",
    "title": "Remove All Adjacent Duplicates In String",
    "question": "You are given a string s consisting of lowercase English letters.\n A duplicate removal consists of choosing two adjacent and equal letters and removing them.\nWe repeatedly make duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made.\n It can be proven that the answer is unique.",
    "examples": [
        "Input: s = \"abbaca\"",
        "Output: \"ca\"",
        "Explanation: ",
        "For example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".",
        "Input: s = \"azxxzy\"",
        "Output: \"ay\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s consists of lowercase English letters."
    ]
},
{
    "id": "1051",
    "title": "Height Checker",
    "question": "A school is trying to take an annual photo of all the students.\n The students are asked to stand in a single file line in non-decreasing order by height.\n Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.\nYou are given an integer array heights representing the current order that the students are standing in.\n Each heights[i] is the height of the ith student in line (0-indexed).\nReturn the number of indices where heights[i] != expected[i].",
    "examples": [
        "Input: heights = [1,1,4,2,1,3]",
        "Output: 3",
        "Explanation: ",
        "heights:  [1,1,4,2,1,3]",
        "expected: [1,1,1,2,3,4]",
        "Indices 2, 4, and 5 do not match.",
        "Input: heights = [5,1,2,3,4]",
        "Output: 5",
        "Explanation:",
        "heights:  [5,1,2,3,4]",
        "expected: [1,2,3,4,5]",
        "All indices do not match.",
        "Input: heights = [1,2,3,4,5]",
        "Output: 0",
        "Explanation:",
        "heights:  [1,2,3,4,5]",
        "expected: [1,2,3,4,5]",
        "All indices match.",
        ""
    ],
    "constraints": [
        "1 <= heights. length <= 1001 <= heights[i] <= 100"
    ]
},
{
    "id": "1071",
    "title": "Greatest Common Divisor of Strings",
    "question": "For two strings s and t, we say \"t divides s\" if and only if s = t + .\n.\n.\n + t  (t concatenated with itself 1 or more times)Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.",
    "examples": [
        "Input: str1 = \"ABCABC\", str2 = \"ABC\"",
        "Output: \"ABC\"",
        "Input: str1 = \"ABABAB\", str2 = \"ABAB\"",
        "Output: \"AB\"",
        "Input: str1 = \"LEET\", str2 = \"CODE\"",
        "Output: \"\"",
        "Input: str1 = \"ABCDEF\", str2 = \"ABC\"",
        "Output: \"\"",
        ""
    ],
    "constraints": [
        "1 <= str1. length <= 10001 <= str2. length <= 1000str1 and str2 consist of English uppercase letters."
    ]
},
{
    "id": "1078",
    "title": "Occurrences After Bigram",
    "question": "Given two strings first and second, consider occurrences in some text of the form \"first second third\", where second comes immediately after first, and third comes immediately after second.\nReturn an array of all the words third for each occurrence of \"first second third\".",
    "examples": [
        "Input: text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"",
        "Output: [\"girl\",\"student\"]",
        "Input: text = \"we will we will rock you\", first = \"we\", second = \"will\"",
        "Output: [\"we\",\"rock\"]",
        ""
    ],
    "constraints": [
        "1 <= text. length <= 1000text consists of lowercase English letters and spaces. All the words in text a separated by a single space. 1 <= first. length",
        " second. length <= 10first and second consist of lowercase English letters."
    ]
},
{
    "id": "1089",
    "title": "Duplicate Zeros",
    "question": "Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.\nNote that elements beyond the length of the original array are not written.\n Do the above modifications to the input array in place and do not return anything.",
    "examples": [
        "Input: arr = [1,0,2,3,0,4,5,0]",
        "Output: [1,0,0,2,3,0,0,4]",
        "Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]",
        "Input: arr = [1,2,3]",
        "Output: [1,2,3]",
        "Explanation: After calling your function, the input array is modified to: [1,2,3]",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1040 <= arr[i] <= 9"
    ]
},
{
    "id": "1103",
    "title": "Distribute Candies to People",
    "question": "We distribute some number of candies, to a row of n = num_people people in the following way:We then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person.\nThen, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person.\nThis process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.\n  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).\nReturn an array (of length num_people and sum candies) that represents the final distribution of candies.",
    "examples": [
        "Input: candies = 7, num_people = 4",
        "Output: [1,2,3,1]",
        "Explanation:",
        "On the first turn, ans[0] += 1, and the array is [1,0,0,0].",
        "On the second turn, ans[1] += 2, and the array is [1,2,0,0].",
        "On the third turn, ans[2] += 3, and the array is [1,2,3,0].",
        "On the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].",
        "Input: candies = 10, num_people = 3",
        "Output: [5,2,3]",
        "Explanation: ",
        "On the first turn, ans[0] += 1, and the array is [1,0,0].",
        "On the second turn, ans[1] += 2, and the array is [1,2,0].",
        "On the third turn, ans[2] += 3, and the array is [1,2,3].",
        "On the fourth turn, ans[0] += 4, and the final array is [5,2,3].",
        ""
    ],
    "constraints": [
        "1 <= candies <= 10^91 <= num_people <= 1000"
    ]
},
{
    "id": "1108",
    "title": "Defanging an IP Address",
    "question": "Given a valid (IPv4) IP address, return a defanged version of that IP address.\nA defanged IP address replaces every period \".\n\" with \"[.\n]\".",
    "examples": [
        "Input: address = \"1. 1. 1. 1\"",
        "Output: \"1[.]1[.]1[.]1\"",
        "Input: address = \"255. 100. 50. 0\"",
        "Output: \"255[.]100[.]50[.]0\"",
        ""
    ],
    "constraints": [
        "The given address is a valid IPv4 address."
    ]
},
{
    "id": "1122",
    "title": "Relative Sort Array",
    "question": "Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.\nSort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2.\n Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.",
    "examples": [
        "Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]",
        "Output: [2,2,2,1,4,3,3,9,6,7,19]",
        "Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]",
        "Output: [22,28,8,6,17,44]",
        ""
    ],
    "constraints": [
        "1 <= arr1. length",
        " arr2. length <= 10000 <= arr1[i]",
        " arr2[i] <= 1000All the elements of arr2 are distinct. Each arr2[i] is in arr1."
    ]
},
{
    "id": "108",
    "title": "Convert Sorted Array to Binary Search Tree",
    "question": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.",
    "examples": [
        "Input: nums = [-10,-3,0,5,9]",
        "Output: [0,-3,9,-10,null,5]",
        "Explanation: [0,-10,5,null,-3,null,9] is also accepted:",
        "",
        "Input: nums = [1,3]",
        "Output: [3,1]",
        "Explanation: [1,3] and [3,1] are both a height-balanced BSTs.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-104 <= nums[i] <= 104nums is sorted in a strictly increasing order."
    ]
},
{
    "id": "1128",
    "title": "Number of Equivalent Domino Pairs",
    "question": "Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.\nReturn the number of pairs (i, j) for which 0 <= i < j < dominoes.\nlength, and dominoes[i] is equivalent to dominoes[j].",
    "examples": [
        "Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]",
        "Output: 1",
        "Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= dominoes. length <= 4 * 104dominoes[i]. length == 21 <= dominoes[i][j] <= 9"
    ]
},
{
    "id": "1137",
    "title": "N-th Tribonacci Number",
    "question": "The Tribonacci sequence Tn is defined as follows: T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\nGiven n, return the value of Tn.",
    "examples": [
        "Input: n = 4",
        "Output: 4",
        "Explanation:",
        "T_3 = 0 + 1 + 1 = 2",
        "T_4 = 1 + 1 + 2 = 4",
        "Input: n = 25",
        "Output: 1389537",
        ""
    ],
    "constraints": [
        "0 <= n <= 37The answer is guaranteed to fit within a 32-bit integer",
        " ie. answer <= 2^31 - 1."
    ]
},
{
    "id": "1154",
    "title": "Day of the Year",
    "question": "Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.",
    "examples": [
        "Input: date = \"2019-01-09\"",
        "Output: 9",
        "Explanation: Given date is the 9th day of the year in 2019.",
        "Input: date = \"2019-02-10\"",
        "Output: 41",
        "Input: date = \"2003-03-01\"",
        "Output: 60",
        "Input: date = \"2004-03-01\"",
        "Output: 61",
        ""
    ],
    "constraints": [
        "date. length == 10date[4] == date[7] == '-'",
        " and all other date[i]'s are digitsdate represents a calendar date between Jan 1st",
        " 1900 and Dec 31",
        " 2019."
    ]
},
{
    "id": "1160",
    "title": "Find Words That Can Be Formed by Characters",
    "question": "You are given an array of strings words and a string chars.\nA string is good if it can be formed by characters from chars (each character can only be used once).\nReturn the sum of lengths of all good strings in words.",
    "examples": [
        "Input: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"",
        "Output: 6",
        "Explanation: The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.",
        "Input: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"",
        "Output: 10",
        "Explanation: The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 10001 <= words[i]. length",
        " chars. length <= 100words[i] and chars consist of lowercase English letters."
    ]
},
{
    "id": "1175",
    "title": "Prime Arrangements",
    "question": "Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.\n)(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.\n)Since the answer may be large, return the answer modulo 10^9 + 7.",
    "examples": [
        "Input: n = 5",
        "Output: 12",
        "Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.",
        "Input: n = 100",
        "Output: 682289015",
        ""
    ],
    "constraints": [
        "1 <= n <= 100"
    ]
},
{
    "id": "1184",
    "title": "Distance Between Bus Stops",
    "question": "A bus has n stops numbered from 0 to n - 1 that form a circle.\n We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.\nThe bus goes along both directions i.\ne.\n clockwise and counterclockwise.\nReturn the shortest distance between the given start and destination stops.",
    "examples": [
        "Input: distance = [1,2,3,4], start = 0, destination = 1",
        "Output: 1",
        "Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1. Input: distance = [1,2,3,4], start = 0, destination = 2",
        "Output: 3",
        "Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.",
        "Input: distance = [1,2,3,4], start = 0, destination = 3",
        "Output: 4",
        "Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4.",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^4distance. length == n0 <= start",
        " destination < n0 <= distance[i] <= 10^4"
    ]
},
{
    "id": "1185",
    "title": "Day of the Week",
    "question": "Given a date, return the corresponding day of the week for that date.\nThe input is given as three integers representing the day, month and year respectively.\nReturn the answer as one of the following values {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}.",
    "examples": [
        "Input: day = 31, month = 8, year = 2019",
        "Output: \"Saturday\"",
        "Input: day = 18, month = 7, year = 1999",
        "Output: \"Sunday\"",
        "Input: day = 15, month = 8, year = 1993",
        "Output: \"Sunday\"",
        ""
    ],
    "constraints": [
        "The given dates are valid dates between the years 1971 and 2100."
    ]
},
{
    "id": "1189",
    "title": "Maximum Number of Balloons",
    "question": "Given a string text, you want to use the characters of text to form as many instances of the word \"balloon\" as possible.\nYou can use each character in text at most once.\n Return the maximum number of instances that can be formed.",
    "examples": [
        "Input: text = \"nlaebolko\"",
        "Output: 1",
        "Input: text = \"loonbalxballpoon\"",
        "Output: 2",
        "Input: text = \"leetcode\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= text. length <= 104text consists of lower case English letters only."
    ]
},
{
    "id": "1200",
    "title": "Minimum Absolute Difference",
    "question": "Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.\n Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows",
    "examples": [
        "Input: arr = [4,2,1,3]",
        "Output: [[1,2],[2,3],[3,4]]",
        "Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order. Input: arr = [1,3,6,10,15]",
        "Output: [[1,3]]",
        "Input: arr = [3,8,-10,23,19,-4,-14,27]",
        "Output: [[-14,-10],[19,23],[23,27]]",
        ""
    ],
    "constraints": [
        "a",
        " b are from arra < bb - a equals to the minimum absolute difference of any two elements in arr2 <= arr. length <= 10^5-10^6 <= arr[i] <= 10^6"
    ]
},
{
    "id": "1207",
    "title": "Unique Number of Occurrences",
    "question": "Given an array of integers arr, write a function that returns true if and only if the number of occurrences of each value in the array is unique.",
    "examples": [
        "Input: arr = [1,2,2,1,1,3]",
        "Output: true",
        "Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences. Input: arr = [1,2]",
        "Output: false",
        "Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1000-1000 <= arr[i] <= 1000"
    ]
},
{
    "id": "110",
    "title": "Balanced Binary Tree",
    "question": "Given a binary tree, determine if it is height-balanced.\nFor this problem, a height-balanced binary tree is defined as:",
    "examples": [
        "Input: root = [3,9,20,null,null,15,7]",
        "Output: true",
        "Input: root = [1,2,2,3,3,null,null,4,4]",
        "Output: false",
        "Input: root = []",
        "Output: true",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 5000].-104 <= Node. val <= 104"
    ]
},
{
    "id": "1217",
    "title": "Minimum Cost to Move Chips to The Same Position",
    "question": "We have n chips, where the position of the ith chip is position[i].\nWe need to move all the chips to the same position.\n In one step, we can change the position of the ith chip from position[i] to:Return the minimum cost needed to move all the chips to the same position.",
    "examples": [
        "Input: position = [1,2,3]",
        "Output: 1",
        "Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.",
        "Second step: Move the chip at position 2 to position 1 with cost = 1.",
        "Total cost is 1.",
        "Input: position = [2,2,2,3,3]",
        "Output: 2",
        "Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.",
        "Input: position = [1,1000000000]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "position[i] + 2 or position[i] - 2 with cost = 0. position[i] + 1 or position[i] - 1 with cost = 1. 1 <= position. length <= 1001 <= position[i] <= 10^9"
    ]
},
{
    "id": "1221",
    "title": "Split a String in Balanced Strings",
    "question": "Balanced strings are those that have an equal quantity of 'L' and 'R' characters.\nGiven a balanced string s, split it in the maximum amount of balanced strings.\nReturn the maximum amount of split balanced strings.",
    "examples": [
        "Input: s = \"RLRRLLRLRL\"",
        "Output: 4",
        "Explanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.",
        "Input: s = \"RLLLLRRRLR\"",
        "Output: 3",
        "Explanation: s can be split into \"RL\", \"LLLRRR\", \"LR\", each substring contains same number of 'L' and 'R'.",
        "Input: s = \"LLLLRRRR\"",
        "Output: 1",
        "Explanation: s can be split into \"LLLLRRRR\".",
        "Input: s = \"RLRRRLLRLL\"",
        "Output: 2",
        "Explanation: s can be split into \"RL\", \"RRRLLRLL\", since each substring contains an equal number of 'L' and 'R'",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s[i] is either 'L' or 'R'. s is a balanced string."
    ]
},
{
    "id": "1232",
    "title": "Check If It Is a Straight Line",
    "question": "You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point.\n Check if these points make a straight line in the XY plane.",
    "examples": [
        "Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "Output: true",
        "Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]",
        "Output: false",
        ""
    ],
    "constraints": [
        "2 <= coordinates. length <= 1000coordinates[i]. length == 2-10^4 <= coordinates[i][0]",
        " coordinates[i][1] <= 10^4coordinates contains no duplicate point."
    ]
},
{
    "id": "1252",
    "title": "Cells with Odd Values in a Matrix",
    "question": "There is an m x n matrix that is initialized to all 0's.\n There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix.\nFor each location indices[i], do both of the following:Given m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.\n   Follow up: Could you solve this in O(n + m + indices.\nlength) time with only O(n + m) extra space?",
    "examples": [
        "Input: m = 2, n = 3, indices = [[0,1],[1,1]]",
        "Output: 6",
        "Explanation: Initial matrix = [[0,0,0],[0,0,0]].",
        "After applying first increment it becomes [[1,2,1],[0,1,0]].",
        "The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.",
        "Input: m = 2, n = 2, indices = [[1,1],[0,0]]",
        "Output: 0",
        "Explanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.",
        ""
    ],
    "constraints": [
        "1 <= m",
        " n <= 501 <= indices. length <= 1000 <= ri < m0 <= ci < n"
    ]
},
{
    "id": "1260",
    "title": "Shift 2D Grid",
    "question": "Given a 2D grid of size m x n and an integer k.\n You need to shift the grid k times.\nIn one shift operation:Return the 2D grid after applying shift operation k times.",
    "examples": [
        "Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
        "Output: [[9,1,2],[3,4,5],[6,7,8]]",
        "Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4",
        "Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]",
        "Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9",
        "Output: [[1,2,3],[4,5,6],[7,8,9]]",
        ""
    ],
    "constraints": [
        "Element at grid[i][j] moves to grid[i][j + 1]. Element at grid[i][n - 1] moves to grid[i + 1][0]. Element at grid[m - 1][n - 1] moves to grid[0][0]. m == grid. lengthn == grid[i]. length1 <= m <= 501 <= n <= 50-1000 <= grid[i][j] <= 10000 <= k <= 100"
    ]
},
{
    "id": "1266",
    "title": "Minimum Time Visiting All Points",
    "question": "On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi].\n Return the minimum time in seconds to visit all the points in the order given by points.\nYou can move according to these rules:",
    "examples": [
        "Input: points = [[1,1],[3,4],[-1,0]]",
        "Output: 7",
        "Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   ",
        "Time from [1,1] to [3,4] = 3 seconds ",
        "Time from [3,4] to [-1,0] = 4 seconds",
        "Total time = 7 secondsInput: points = [[3,2],[-2,2]]",
        "Output: 5",
        ""
    ],
    "constraints": [
        "In 1 second",
        " you can either:\n\n\t\nmove vertically by one unit",
        "\nmove horizontally by one unit",
        " or\nmove diagonally sqrt(2) units (in other words",
        " move one unit vertically then one unit horizontally in 1 second).\n\nmove vertically by one unit",
        "move horizontally by one unit",
        " ormove diagonally sqrt(2) units (in other words",
        " move one unit vertically then one unit horizontally in 1 second). You have to visit the points in the same order as they appear in the array. You are allowed to pass through points that appear later in the order",
        " but these do not count as visits. points. length == n1 <= n <= 100points[i]. length == 2-1000 <= points[i][0]",
        " points[i][1] <= 1000"
    ]
},
{
    "id": "1275",
    "title": "Find Winner on a Tic Tac Toe Game",
    "question": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid.\nHere are the rules of Tic-Tac-Toe:Given an array moves where each element is another array of size 2 corresponding to the row and column of the grid where they mark their respective character in the order in which A and B play.\nReturn the winner of the game if it exists (A or B), in case the game ends in a draw return \"Draw\", if there are still movements to play return \"Pending\".\nYou can assume that moves is valid (It follows the rules of Tic-Tac-Toe), the grid is initially empty and A will play first.",
    "examples": [
        "Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]",
        "Output: \"A\"",
        "Explanation: \"A\" wins, he always plays first.",
        "\"X  \"    \"X  \"    \"X  \"    \"X  \"    \"X  \"",
        "\"   \" -> \"   \" -> \" X \" -> \" X \" -> \" X \"",
        "\"   \"    \"O  \"    \"O  \"    \"OO \"    \"OOX\"",
        "Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]",
        "Output: \"B\"",
        "Explanation: \"B\" wins.",
        "\"X  \"    \"X  \"    \"XX \"    \"XXO\"    \"XXO\"    \"XXO\"",
        "\"   \" -> \" O \" -> \" O \" -> \" O \" -> \"XO \" -> \"XO \" ",
        "\"   \"    \"   \"    \"   \"    \"   \"    \"   \"    \"O  \"",
        "Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]",
        "Output: \"Draw\"",
        "Explanation: The game ends in a draw since there are no moves to make.",
        "\"XXO\"",
        "\"OOX\"",
        "\"XOX\"",
        "Input: moves = [[0,0],[1,1]]",
        "Output: \"Pending\"",
        "Explanation: The game has not finished yet.",
        "\"X  \"",
        "\" O \"",
        "\"   \"",
        ""
    ],
    "constraints": [
        "Players take turns placing characters into empty squares (\" \"). The first player A always places \"X\" characters",
        " while the second player B always places \"O\" characters.\"X\" and \"O\" characters are always placed into empty squares",
        " never on filled ones. The game ends when there are 3 of the same (non-empty) character filling any row",
        " column",
        " or diagonal. The game also ends if all squares are non-empty. No more moves can be played if the game is over. 1 <= moves. length <= 9moves[i]. length == 20 <= moves[i][j] <= 2There are no repeated elements on moves. moves follow the rules of tic tac toe."
    ]
},
{
    "id": "1281",
    "title": "Subtract the Product and Sum of Digits of an Integer",
    "question": "",
    "examples": [
        "Input: n = 234",
        "Output: 15 ",
        "Explanation: ",
        "Product of digits = 2 * 3 * 4 = 24 ",
        "Sum of digits = 2 + 3 + 4 = 9 ",
        "Result = 24 - 9 = 15",
        "Input: n = 4421",
        "Output: 21",
        "Explanation: ",
        "Product of digits = 4 * 4 * 2 * 1 = 32 ",
        "Sum of digits = 4 + 4 + 2 + 1 = 11 ",
        "Result = 32 - 11 = 21",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^5"
    ]
},
{
    "id": "1287",
    "title": "Element Appearing More Than 25% In Sorted Array",
    "question": "Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.",
    "examples": [
        "Input: arr = [1,2,2,6,6,6,6,7,10]",
        "Output: 6",
        "Input: arr = [1,1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1040 <= arr[i] <= 105"
    ]
},
{
    "id": "1290",
    "title": "Convert Binary Number in a Linked List to Integer",
    "question": "Given head which is a reference node to a singly-linked list.\n The value of each node in the linked list is either 0 or 1.\n The linked list holds the binary representation of a number.\nReturn the decimal value of the number in the linked list.",
    "examples": [
        "Input: head = [1,0,1]",
        "Output: 5",
        "Explanation: (101) in base 2 = (5) in base 10",
        "Input: head = [0]",
        "Output: 0",
        "Input: head = [1]",
        "Output: 1",
        "Input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]",
        "Output: 18880",
        "Input: head = [0,0]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "The Linked List is not empty. Number of nodes will not exceed 30. Each node's value is either 0 or 1."
    ]
},
{
    "id": "111",
    "title": "Minimum Depth of Binary Tree",
    "question": "Given a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote: A leaf is a node with no children.",
    "examples": [
        "Input: root = [3,9,20,null,null,15,7]",
        "Output: 2",
        "Input: root = [2,null,3,null,4,null,5,null,6]",
        "Output: 5",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 105].-1000 <= Node. val <= 1000"
    ]
},
{
    "id": "1295",
    "title": "Find Numbers with Even Number of Digits",
    "question": "",
    "examples": [
        "Input: nums = [12,345,2,6,7896]",
        "Output: 2",
        "Explanation: ",
        "12 contains 2 digits (even number of digits). ",
        "345 contains 3 digits (odd number of digits). ",
        "2 contains 1 digit (odd number of digits). ",
        "6 contains 1 digit (odd number of digits). ",
        "7896 contains 4 digits (even number of digits). ",
        "Therefore only 12 and 7896 contain an even number of digits.",
        "Input: nums = [555,901,482,1771]",
        "Output: 1 ",
        "Explanation: ",
        "Only 1771 contains an even number of digits.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5001 <= nums[i] <= 10^5"
    ]
},
{
    "id": "1299",
    "title": "Replace Elements with Greatest Element on Right Side",
    "question": "Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1.\nAfter doing so, return the array.",
    "examples": [
        "Input: arr = [17,18,5,4,6,1]",
        "Output: [18,6,6,6,1,-1]",
        "Explanation: ",
        "- index 0 --> the greatest element to the right of index 0 is index 1 (18).",
        "- index 1 --> the greatest element to the right of index 1 is index 4 (6).",
        "- index 2 --> the greatest element to the right of index 2 is index 4 (6).",
        "- index 3 --> the greatest element to the right of index 3 is index 4 (6).",
        "- index 4 --> the greatest element to the right of index 4 is index 5 (1).",
        "- index 5 --> there are no elements to the right of index 5, so we put -1.",
        "Input: arr = [400]",
        "Output: [-1]",
        "Explanation: There are no elements to the right of index 0.",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1041 <= arr[i] <= 105"
    ]
},
{
    "id": "1304",
    "title": "Find N Unique Integers Sum up to Zero",
    "question": "Given an integer n, return any array containing n unique integers such that they add up to 0.",
    "examples": [
        "Input: n = 5",
        "Output: [-7,-1,1,3,4]",
        "Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].",
        "Input: n = 3",
        "Output: [-1,0,1]",
        "Input: n = 1",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "1 <= n <= 1000"
    ]
},
{
    "id": "1309",
    "title": "Decrypt String from Alphabet to Integer Mapping",
    "question": "Given a string s formed by digits ('0' - '9') and '#' .\n We want to map s to English lowercase characters as follows:Return the string formed after mapping.\nIt's guaranteed that a unique mapping will always exist.",
    "examples": [
        "Input: s = \"10#11#12\"",
        "Output: \"jkab\"",
        "Explanation: \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\".",
        "Input: s = \"1326#\"",
        "Output: \"acz\"",
        "Input: s = \"25#\"",
        "Output: \"y\"",
        "Input: s = \"12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#\"",
        "Output: \"abcdefghijklmnopqrstuvwxyz\"",
        ""
    ],
    "constraints": [
        "Characters ('a' to 'i') are represented by ('1' to '9') respectively. Characters ('j' to 'z') are represented by ('10#' to '26#') respectively. 1 <= s. length <= 1000s[i] only contains digits letters ('0'-'9') and '#' letter. s will be valid string such that mapping is always possible."
    ]
},
{
    "id": "1313",
    "title": "Decompress Run-Length Encoded List",
    "question": "We are given a list nums of integers representing a list compressed with run-length encoding.\nConsider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).\n  For each such pair, there are freq elements with value val concatenated in a sublist.\n Concatenate all the sublists from left to right to generate the decompressed list.\nReturn the decompressed list.",
    "examples": [
        "Input: nums = [1,2,3,4]",
        "Output: [2,4,4,4]",
        "Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].",
        "The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].",
        "At the end the concatenation [2] + [4,4,4] is [2,4,4,4].",
        "Input: nums = [1,1,2,3]",
        "Output: [1,3,3]",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 100nums. length % 2 == 01 <= nums[i] <= 100"
    ]
},
{
    "id": "1317",
    "title": "Convert Integer to the Sum of Two No-Zero Integers",
    "question": "Given an integer n.\n No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.\nReturn a list of two integers [A, B] where:It's guarateed that there is at least one valid solution.\n If there are many valid solutions you can return any of them.",
    "examples": [
        "Input: n = 2",
        "Output: [1,1]",
        "Explanation: A = 1, B = 1. A + B = n and both A and B don't contain any 0 in their decimal representation.",
        "Input: n = 11",
        "Output: [2,9]",
        "Input: n = 10000",
        "Output: [1,9999]",
        "Input: n = 69",
        "Output: [1,68]",
        "Input: n = 1010",
        "Output: [11,999]",
        ""
    ],
    "constraints": [
        "A and B are No-Zero integers. A + B = n2 <= n <= 10^4"
    ]
},
{
    "id": "1323",
    "title": "Maximum 69 Number",
    "question": "Given a positive integer num consisting only of digits 6 and 9.\nReturn the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).",
    "examples": [
        "Input: num = 9669",
        "Output: 9969",
        "Explanation: ",
        "Changing the first digit results in 6669.",
        "Changing the second digit results in 9969.",
        "Changing the third digit results in 9699.",
        "Changing the fourth digit results in 9666. ",
        "The maximum number is 9969.",
        "Input: num = 9996",
        "Output: 9999",
        "Explanation: Changing the last digit 6 to 9 results in the maximum number. Input: num = 9999",
        "Output: 9999",
        "Explanation: It is better not to apply any change."
    ],
    "constraints": [
        "1 <= num <= 10^4num's digits are 6 or 9."
    ]
},
{
    "id": "1331",
    "title": "Rank Transform of an Array",
    "question": "Given an array of integers arr, replace each element with its rank.\nThe rank represents how large the element is.\n The rank has the following rules:",
    "examples": [
        "Input: arr = [40,10,20,30]",
        "Output: [4,1,2,3]",
        "Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest. Input: arr = [100,100,100]",
        "Output: [1,1,1]",
        "Explanation: Same elements share the same rank.",
        "Input: arr = [37,12,28,9,100,56,80,5,12]",
        "Output: [5,3,4,2,8,6,7,1,3]",
        ""
    ],
    "constraints": [
        "Rank is an integer starting from 1. The larger the element",
        " the larger the rank. If two elements are equal",
        " their rank must be the same. Rank should be as small as possible. 0 <= arr. length <= 105-109 <= arr[i] <= 109"
    ]
},
{
    "id": "1332",
    "title": "Remove Palindromic Subsequences",
    "question": "You are given a string s consisting only of letters 'a' and 'b'.\n In a single step you can remove one palindromic subsequence from s.\nReturn the minimum number of steps to make the given string empty.\nA string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order.\n Note that a subsequence does not necessarily need to be contiguous.\nA string is called palindrome if is one that reads the same backward as well as forward.",
    "examples": [
        "Input: s = \"ababa\"",
        "Output: 1",
        "Explanation: s is already a palindrome, so its entirety can be removed in a single step.",
        "Input: s = \"abb\"",
        "Output: 2",
        "Explanation: \"abb\" -> \"bb\" -> \"\". ",
        "Remove palindromic subsequence \"a\" then \"bb\".",
        "Input: s = \"baabb\"",
        "Output: 2",
        "Explanation: \"baabb\" -> \"b\" -> \"\". ",
        "Remove palindromic subsequence \"baab\" then \"b\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s[i] is either 'a' or 'b'."
    ]
},
{
    "id": "1337",
    "title": "The K Weakest Rows in a Matrix",
    "question": "You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians).\n The soldiers are positioned in front of the civilians.\n That is, all the 1's will appear to the left of all the 0's in each row.\nA row i is weaker than a row j if one of the following is true:Return the indices of the k weakest rows in the matrix ordered from weakest to strongest.",
    "examples": [
        "Input: mat = ",
        "[[1,1,0,0,0],",
        " [1,1,1,1,0],",
        " [1,0,0,0,0],",
        " [1,1,0,0,0],",
        " [1,1,1,1,1]], ",
        "k = 3",
        "Output: [2,0,3]",
        "Explanation: ",
        "The number of soldiers in each row is: ",
        "- Row 0: 2 ",
        "- Row 1: 4 ",
        "- Row 2: 1 ",
        "- Row 3: 2 ",
        "- Row 4: 5 ",
        "The rows ordered from weakest to strongest are [2,0,3,1,4].",
        "Input: mat = ",
        "[[1,0,0,0],",
        " [1,1,1,1],",
        " [1,0,0,0],",
        " [1,0,0,0]], ",
        "k = 2",
        "Output: [0,2]",
        "Explanation: ",
        "The number of soldiers in each row is: ",
        "- Row 0: 1 ",
        "- Row 1: 4 ",
        "- Row 2: 1 ",
        "- Row 3: 1 ",
        "The rows ordered from weakest to strongest are [0,2,3,1].",
        ""
    ],
    "constraints": [
        "The number of soldiers in row i is less than the number of soldiers in row j. Both rows have the same number of soldiers and i < j. m == mat. lengthn == mat[i]. length2 <= n",
        " m <= 1001 <= k <= mmatrix[i][j] is either 0 or 1."
    ]
},
{
    "id": "112",
    "title": "Path Sum",
    "question": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.",
    "examples": [
        "Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22",
        "Output: true",
        "Input: root = [1,2,3], targetSum = 5",
        "Output: false",
        "Input: root = [1,2], targetSum = 0",
        "Output: false",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 5000].-1000 <= Node. val <= 1000-1000 <= targetSum <= 1000"
    ]
},
{
    "id": "1342",
    "title": "Number of Steps to Reduce a Number to Zero",
    "question": "Given an integer num, return the number of steps to reduce it to zero.\nIn one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.",
    "examples": [
        "Input: num = 14",
        "Output: 6",
        "Explanation: ",
        "Step 1) 14 is even; divide by 2 and obtain 7. ",
        "Step 2) 7 is odd; subtract 1 and obtain 6.",
        "Step 3) 6 is even; divide by 2 and obtain 3. ",
        "Step 4) 3 is odd; subtract 1 and obtain 2. ",
        "Step 5) 2 is even; divide by 2 and obtain 1. ",
        "Step 6) 1 is odd; subtract 1 and obtain 0.",
        "Input: num = 8",
        "Output: 4",
        "Explanation: ",
        "Step 1) 8 is even; divide by 2 and obtain 4. ",
        "Step 2) 4 is even; divide by 2 and obtain 2. ",
        "Step 3) 2 is even; divide by 2 and obtain 1. ",
        "Step 4) 1 is odd; subtract 1 and obtain 0.",
        "Input: num = 123",
        "Output: 12",
        ""
    ],
    "constraints": [
        "0 <= num <= 106"
    ]
},
{
    "id": "1346",
    "title": "Check If N and Its Double Exist",
    "question": "Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.\ne.\n N = 2 * M).\nMore formally check if there exists two indices i and j such that :",
    "examples": [
        "Input: arr = [10,2,5,3]",
        "Output: true",
        "Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.",
        "Input: arr = [7,1,14,11]",
        "Output: true",
        "Explanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.",
        "Input: arr = [3,1,7,11]",
        "Output: false",
        "Explanation: In this case does not exist N and M, such that N = 2 * M.",
        ""
    ],
    "constraints": [
        "i != j0 <= i",
        " j < arr. lengtharr[i] == 2 * arr[j]2 <= arr. length <= 500-10^3 <= arr[i] <= 10^3"
    ]
},
{
    "id": "1351",
    "title": "Count Negative Numbers in a Sorted Matrix",
    "question": "Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.",
    "examples": [
        "Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]",
        "Output: 8",
        "Explanation: There are 8 negatives number in the matrix.",
        "Input: grid = [[3,2],[1,0]]",
        "Output: 0",
        "Input: grid = [[1,-1],[-1,-1]]",
        "Output: 3",
        "Input: grid = [[-1]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 100-100 <= grid[i][j] <= 100"
    ]
},
{
    "id": "1356",
    "title": "Sort Integers by The Number of 1 Bits",
    "question": "Given an integer array arr.\n You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.\nReturn the sorted array.",
    "examples": [
        "Input: arr = [0,1,2,3,4,5,6,7,8]",
        "Output: [0,1,2,4,8,3,5,6,7]",
        "Explantion: [0] is the only integer with 0 bits.",
        "[1,2,4,8] all have 1 bit.",
        "[3,5,6] have 2 bits.",
        "[7] has 3 bits.",
        "The sorted array by bits is [0,1,2,4,8,3,5,6,7]",
        "Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]",
        "Output: [1,2,4,8,16,32,64,128,256,512,1024]",
        "Explantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.",
        "Input: arr = [10000,10000]",
        "Output: [10000,10000]",
        "Input: arr = [2,3,5,7,11,13,17,19]",
        "Output: [2,3,5,17,7,11,13,19]",
        "Input: arr = [10,100,1000,10000]",
        "Output: [10,100,10000,1000]",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 5000 <= arr[i] <= 10^4"
    ]
},
{
    "id": "1360",
    "title": "Number of Days Between Two Dates",
    "question": "Write a program to count the number of days between two dates.\nThe two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.",
    "examples": [
        "Input: date1 = \"2019-06-29\", date2 = \"2019-06-30\"",
        "Output: 1",
        "Input: date1 = \"2020-01-15\", date2 = \"2019-12-31\"",
        "Output: 15",
        ""
    ],
    "constraints": [
        "The given dates are valid dates between the years 1971 and 2100."
    ]
},
{
    "id": "1365",
    "title": "How Many Numbers Are Smaller Than the Current Number",
    "question": "Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it.\n That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].\nReturn the answer in an array.",
    "examples": [
        "Input: nums = [8,1,2,2,3]",
        "Output: [4,0,1,1,3]",
        "Explanation: ",
        "For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). ",
        "For nums[1]=1 does not exist any smaller number than it.",
        "For nums[2]=2 there exist one smaller number than it (1). ",
        "For nums[3]=2 there exist one smaller number than it (1). ",
        "For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).",
        "Input: nums = [6,5,4,8]",
        "Output: [2,1,0,3]",
        "Input: nums = [7,7,7,7]",
        "Output: [0,0,0,0]",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 5000 <= nums[i] <= 100"
    ]
},
{
    "id": "1370",
    "title": "Increasing Decreasing String",
    "question": "Given a string s.\n You should re-order the string using the following algorithm:In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.\nReturn the result string after sorting s with this algorithm.",
    "examples": [
        "Input: s = \"aaaabbbbcccc\"",
        "Output: \"abccbaabccba\"",
        "Explanation: After steps 1, 2 and 3 of the first iteration, result = \"abc\"",
        "After steps 4, 5 and 6 of the first iteration, result = \"abccba\"",
        "First iteration is done. Now s = \"aabbcc\" and we go back to step 1",
        "After steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"",
        "After steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\"",
        "Input: s = \"rat\"",
        "Output: \"art\"",
        "Explanation: The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm.",
        "Input: s = \"leetcode\"",
        "Output: \"cdelotee\"",
        "Input: s = \"ggggggg\"",
        "Output: \"ggggggg\"",
        "Input: s = \"spo\"",
        "Output: \"ops\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 500s contains only lower-case English letters."
    ]
},
{
    "id": "1374",
    "title": "Generate a String With Characters That Have Odd Counts",
    "question": "Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times.\nThe returned string must contain only lowercase English letters.\n If there are multiples valid strings, return any of them.",
    "examples": [
        "Input: n = 4",
        "Output: \"pppz\"",
        "Explanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\".",
        "Input: n = 2",
        "Output: \"xy\"",
        "Explanation: \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\".",
        "Input: n = 7",
        "Output: \"holasss\"",
        ""
    ],
    "constraints": [
        "1 <= n <= 500"
    ]
},
{
    "id": "1380",
    "title": "Lucky Numbers in a Matrix",
    "question": "Given a m * n matrix of distinct numbers, return all lucky numbers in the matrix in any order.\nA lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.",
    "examples": [
        "Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]",
        "Output: [15]",
        "Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column",
        "Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]",
        "Output: [12]",
        "Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.",
        "Input: matrix = [[7,8],[1,2]]",
        "Output: [7]",
        ""
    ],
    "constraints": [
        "m == mat. lengthn == mat[i]. length1 <= n",
        " m <= 501 <= matrix[i][j] <= 10^5. All elements in the matrix are distinct."
    ]
},
{
    "id": "1385",
    "title": "Find the Distance Value Between Two Arrays",
    "question": "Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.\nThe distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.",
    "examples": [
        "Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2",
        "Output: 2",
        "Explanation: ",
        "For arr1[0]=4 we have: ",
        "|4-10|=6 > d=2 ",
        "|4-9|=5 > d=2 ",
        "|4-1|=3 > d=2 ",
        "|4-8|=4 > d=2 ",
        "For arr1[1]=5 we have: ",
        "|5-10|=5 > d=2 ",
        "|5-9|=4 > d=2 ",
        "|5-1|=4 > d=2 ",
        "|5-8|=3 > d=2",
        "For arr1[2]=8 we have:",
        "|8-10|=2 <= d=2",
        "|8-9|=1 <= d=2",
        "|8-1|=7 > d=2",
        "|8-8|=0 <= d=2",
        "Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3",
        "Output: 2",
        "Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= arr1. length",
        " arr2. length <= 500-10^3 <= arr1[i]",
        " arr2[j] <= 10^30 <= d <= 100"
    ]
},
{
    "id": "118",
    "title": "Pascal's Triangle",
    "question": "Given an integer numRows, return the first numRows of Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",
    "examples": [
        "Input: numRows = 5",
        "Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
        "Input: numRows = 1",
        "Output: [[1]]",
        ""
    ],
    "constraints": [
        "1 <= numRows <= 30"
    ]
},
{
    "id": "1389",
    "title": "Create Target Array in the Given Order",
    "question": "Given two arrays of integers nums and index.\n Your task is to create target array under the following rules:Return the target array.\nIt is guaranteed that the insertion operations will be valid.",
    "examples": [
        "Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]",
        "Output: [0,4,1,3,2]",
        "Explanation:",
        "nums       index     target",
        "0            0        [0]",
        "1            1        [0,1]",
        "2            2        [0,1,2]",
        "3            2        [0,1,3,2]",
        "4            1        [0,4,1,3,2]",
        "Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]",
        "Output: [0,1,2,3,4]",
        "Explanation:",
        "nums       index     target",
        "1            0        [1]",
        "2            1        [1,2]",
        "3            2        [1,2,3]",
        "4            3        [1,2,3,4]",
        "0            0        [0,1,2,3,4]",
        "Input: nums = [1], index = [0]",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "Initially target array is empty. From left to right read nums[i] and index[i]",
        " insert at index index[i] the value nums[i] in target array. Repeat the previous step until there are no elements to read in nums and index. 1 <= nums. length",
        " index. length <= 100nums. length == index. length0 <= nums[i] <= 1000 <= index[i] <= i"
    ]
},
{
    "id": "1394",
    "title": "Find Lucky Integer in an Array",
    "question": "Given an array of integers arr, a lucky integer is an integer which has a frequency in the array equal to its value.\nReturn a lucky integer in the array.\n If there are multiple lucky integers return the largest of them.\n If there is no lucky integer return -1.",
    "examples": [
        "Input: arr = [2,2,3,4]",
        "Output: 2",
        "Explanation: The only lucky number in the array is 2 because frequency[2] == 2.",
        "Input: arr = [1,2,2,3,3,3]",
        "Output: 3",
        "Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.",
        "Input: arr = [2,2,2,3,3]",
        "Output: -1",
        "Explanation: There are no lucky numbers in the array.",
        "Input: arr = [5]",
        "Output: -1",
        "Input: arr = [7,7,7,7,7,7,7]",
        "Output: 7",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 5001 <= arr[i] <= 500"
    ]
},
{
    "id": "1399",
    "title": "Count Largest Group",
    "question": "Given an integer n.\n Each number from 1 to n is grouped according to the sum of its digits.\n Return how many groups have the largest size.",
    "examples": [
        "Input: n = 13",
        "Output: 4",
        "Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:",
        "[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with largest size.",
        "Input: n = 2",
        "Output: 2",
        "Explanation: There are 2 groups [1], [2] of size 1.",
        "Input: n = 15",
        "Output: 6",
        "Input: n = 24",
        "Output: 5",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^4"
    ]
},
{
    "id": "1403",
    "title": "Minimum Subsequence in Non-Increasing Order",
    "question": "Given the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence.\n If there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements.\n A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\n Note that the solution with the given constraints is guaranteed to be unique.\n Also return the answer sorted in non-increasing order.",
    "examples": [
        "Input: nums = [4,3,10,9,8]",
        "Output: [10,9] ",
        "Explanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements. ",
        "Input: nums = [4,4,7,6,7]",
        "Output: [7,7,6] ",
        "Explanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order.  ",
        "Input: nums = [6]",
        "Output: [6]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5001 <= nums[i] <= 100"
    ]
},
{
    "id": "1408",
    "title": "String Matching in an Array",
    "question": "Given an array of string words.\n Return all strings in words which is substring of another word in any order.\n String words[i] is substring of words[j], if can be obtained removing some characters to left and/or right side of words[j].",
    "examples": [
        "Input: words = [\"mass\",\"as\",\"hero\",\"superhero\"]",
        "Output: [\"as\",\"hero\"]",
        "Explanation: \"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\".",
        "[\"hero\",\"as\"] is also a valid answer.",
        "Input: words = [\"leetcode\",\"et\",\"code\"]",
        "Output: [\"et\",\"code\"]",
        "Explanation: \"et\", \"code\" are substring of \"leetcode\".",
        "Input: words = [\"blue\",\"green\",\"bu\"]",
        "Output: []",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 1001 <= words[i]. length <= 30words[i] contains only lowercase English letters. It's guaranteed that words[i] will be unique."
    ]
},
{
    "id": "1413",
    "title": "Minimum Value to Get Positive Step by Step Sum",
    "question": "Given an array of integers nums, you start with an initial positive value startValue.\nIn each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).\nReturn the minimum positive value of startValue such that the step by step sum is never less than 1.",
    "examples": [
        "Input: nums = [-3,2,-3,4,2]",
        "Output: 5",
        "Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.",
        "                step by step sum",
        "                startValue = 4 | startValue = 5 | nums",
        "                  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3",
        "                  (1 +2 ) = 3  | (2 +2 ) = 4    |   2",
        "                  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3",
        "                  (0 +4 ) = 4  | (1 +4 ) = 5    |   4",
        "                  (4 +2 ) = 6  | (5 +2 ) = 7    |   2",
        "Input: nums = [1,2]",
        "Output: 1",
        "Explanation: Minimum start value should be positive. ",
        "Input: nums = [1,-2,-3]",
        "Output: 5",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 100-100 <= nums[i] <= 100"
    ]
},
{
    "id": "1417",
    "title": "Reformat The String",
    "question": "Given alphanumeric string s.\n (Alphanumeric string is a string consisting of lowercase English letters and digits).\nYou have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit.\n That is, no two adjacent characters have the same type.\nReturn the reformatted string or return an empty string if it is impossible to reformat the string.",
    "examples": [
        "Input: s = \"a0b1c2\"",
        "Output: \"0a1b2c\"",
        "Explanation: No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations.",
        "Input: s = \"leetcode\"",
        "Output: \"\"",
        "Explanation: \"leetcode\" has only characters so we cannot separate them by digits.",
        "Input: s = \"1229857369\"",
        "Output: \"\"",
        "Explanation: \"1229857369\" has only digits so we cannot separate them by characters.",
        "Input: s = \"covid2019\"",
        "Output: \"c2o0v1i9d\"",
        "Input: s = \"ab123\"",
        "Output: \"1a2b3\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 500s consists of only lowercase English letters and/or digits."
    ]
},
{
    "id": "1422",
    "title": "Maximum Score After Splitting a String",
    "question": "Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.\ne.\n left substring and right substring).\nThe score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.",
    "examples": [
        "Input: s = \"011101\"",
        "Output: 5 ",
        "Explanation: ",
        "All possible ways of splitting s into two non-empty substrings are:",
        "left = \"0\" and right = \"11101\", score = 1 + 4 = 5 ",
        "left = \"01\" and right = \"1101\", score = 1 + 3 = 4 ",
        "left = \"011\" and right = \"101\", score = 1 + 2 = 3 ",
        "left = \"0111\" and right = \"01\", score = 1 + 1 = 2 ",
        "left = \"01110\" and right = \"1\", score = 2 + 1 = 3",
        "Input: s = \"00111\"",
        "Output: 5",
        "Explanation: When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5",
        "Input: s = \"1111\"",
        "Output: 3",
        ""
    ],
    "constraints": [
        "2 <= s. length <= 500The string s consists of characters '0' and '1' only."
    ]
},
{
    "id": "1431",
    "title": "Kids With the Greatest Number of Candies",
    "question": "There are n kids with candies.\n You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.\nReturn a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.\nNote that multiple kids can have the greatest number of candies.",
    "examples": [
        "Input: candies = [2,3,5,1,3], extraCandies = 3",
        "Output: [true,true,true,false,true] ",
        "Explanation: If you give all extraCandies to:",
        "- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.",
        "- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.",
        "- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.",
        "- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.",
        "- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.",
        "Input: candies = [4,2,1,1,2], extraCandies = 1",
        "Output: [true,false,false,false,false] ",
        "Explanation: There is only 1 extra candy.",
        "Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.",
        "Input: candies = [12,1,12], extraCandies = 10",
        "Output: [true,false,true]",
        ""
    ],
    "constraints": [
        "n == candies. length2 <= n <= 1001 <= candies[i] <= 1001 <= extraCandies <= 50"
    ]
},
{
    "id": "1436",
    "title": "Destination City",
    "question": "You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi.\n Return the destination city, that is, the city without any path outgoing to another city.\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.",
    "examples": [
        "Input: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]",
        "Output: \"Sao Paulo\" ",
        "Explanation: Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\".",
        "Input: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]",
        "Output: \"A\"",
        "Explanation: All possible trips are: ",
        "\"D\" -> \"B\" -> \"C\" -> \"A\". ",
        "\"B\" -> \"C\" -> \"A\". ",
        "\"C\" -> \"A\". ",
        "\"A\". ",
        "Clearly the destination city is \"A\".",
        "Input: paths = [[\"A\",\"Z\"]]",
        "Output: \"Z\"",
        ""
    ],
    "constraints": [
        "1 <= paths. length <= 100paths[i]. length == 21 <= cityAi. length",
        " cityBi. length <= 10cityAi != cityBiAll strings consist of lowercase and uppercase English letters and the space character."
    ]
},
{
    "id": "119",
    "title": "Pascal's Triangle II",
    "question": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:   Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?",
    "examples": [
        "Input: rowIndex = 3",
        "Output: [1,3,3,1]",
        "Input: rowIndex = 0",
        "Output: [1]",
        "Input: rowIndex = 1",
        "Output: [1,1]",
        ""
    ],
    "constraints": [
        "0 <= rowIndex <= 33"
    ]
},
{
    "id": "1437",
    "title": "Check If All 1's Are at Least Length K Places Away",
    "question": "Given an array nums of 0s and 1s and an integer k, return True if all 1's are at least k places away from each other, otherwise return False.",
    "examples": [
        "Input: nums = [1,0,0,0,1,0,0,1], k = 2",
        "Output: true",
        "Explanation: Each of the 1s are at least 2 places away from each other.",
        "Input: nums = [1,0,0,1,0,1], k = 2",
        "Output: false",
        "Explanation: The second 1 and third 1 are only one apart from each other. Input: nums = [1,1,1,1,1], k = 0",
        "Output: true",
        "Input: nums = [0,1,0,1], k = 1",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1050 <= k <= nums. lengthnums[i] is 0 or 1"
    ]
},
{
    "id": "1441",
    "title": "Build an Array With Stack Operations",
    "question": "Given an array target and an integer n.\n In each iteration, you will read a number from  list = {1,2,3.\n.\n.\n, n}.\nBuild the target array using the following operations:Return the operations to build the target array.\n You are guaranteed that the answer is unique.",
    "examples": [
        "Input: target = [1,3], n = 3",
        "Output: [\"Push\",\"Push\",\"Pop\",\"Push\"]",
        "Explanation: ",
        "Read number 1 and automatically push in the array -> [1]",
        "Read number 2 and automatically push in the array then Pop it -> [1]",
        "Read number 3 and automatically push in the array -> [1,3]",
        "Input: target = [1,2,3], n = 3",
        "Output: [\"Push\",\"Push\",\"Push\"]",
        "Input: target = [1,2], n = 4",
        "Output: [\"Push\",\"Push\"]",
        "Explanation: You only need to read the first 2 numbers and stop.",
        "Input: target = [2,3,4], n = 4",
        "Output: [\"Push\",\"Pop\",\"Push\",\"Push\",\"Push\"]",
        ""
    ],
    "constraints": [
        "Push: Read a new element from the beginning list",
        " and push it in the array. Pop: delete the last element of the array. If the target array is already built",
        " stop reading more elements. 1 <= target. length <= 1001 <= target[i] <= n1 <= n <= 100target is strictly increasing."
    ]
},
{
    "id": "1446",
    "title": "Consecutive Characters",
    "question": "The power of the string is the maximum length of a non-empty substring that contains only one unique character.\nGiven a string s, return the power of s.",
    "examples": [
        "Input: s = \"leetcode\"",
        "Output: 2",
        "Explanation: The substring \"ee\" is of length 2 with the character 'e' only.",
        "Input: s = \"abbcccddddeeeeedcba\"",
        "Output: 5",
        "Explanation: The substring \"eeeee\" is of length 5 with the character 'e' only.",
        "Input: s = \"triplepillooooow\"",
        "Output: 5",
        "Input: s = \"hooraaaaaaaaaaay\"",
        "Output: 11",
        "Input: s = \"tourist\"",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 500s consists of only lowercase English letters."
    ]
},
{
    "id": "1450",
    "title": "Number of Students Doing Homework at a Given Time",
    "question": "Given two integer arrays startTime and endTime and given an integer queryTime.\nThe ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].\nReturn the number of students doing their homework at time queryTime.\n More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.",
    "examples": [
        "Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4",
        "Output: 1",
        "Explanation: We have 3 students where:",
        "The first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.",
        "The second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.",
        "The third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.",
        "Input: startTime = [4], endTime = [4], queryTime = 4",
        "Output: 1",
        "Explanation: The only student was doing their homework at the queryTime.",
        "Input: startTime = [4], endTime = [4], queryTime = 5",
        "Output: 0",
        "Input: startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7",
        "Output: 0",
        "Input: startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5",
        "Output: 5",
        ""
    ],
    "constraints": [
        "startTime. length == endTime. length1 <= startTime. length <= 1001 <= startTime[i] <= endTime[i] <= 10001 <= queryTime <= 1000"
    ]
},
{
    "id": "1455",
    "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "question": "Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.\nReturn the index of the word in sentence (1-indexed) where searchWord is a prefix of this word.\n If searchWord is a prefix of more than one word, return the index of the first word (minimum index).\n If there is no such word return -1.\nA prefix of a string s is any leading contiguous substring of s.",
    "examples": [
        "Input: sentence = \"i love eating burger\", searchWord = \"burg\"",
        "Output: 4",
        "Explanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence.",
        "Input: sentence = \"this problem is an easy problem\", searchWord = \"pro\"",
        "Output: 2",
        "Explanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.",
        "Input: sentence = \"i am tired\", searchWord = \"you\"",
        "Output: -1",
        "Explanation: \"you\" is not a prefix of any word in the sentence.",
        "Input: sentence = \"i use triple pillow\", searchWord = \"pill\"",
        "Output: 4",
        "Input: sentence = \"hello from the other side\", searchWord = \"they\"",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= sentence. length <= 1001 <= searchWord. length <= 10sentence consists of lowercase English letters and spaces. searchWord consists of lowercase English letters."
    ]
},
{
    "id": "1460",
    "title": "Make Two Arrays Equal by Reversing Sub-arrays",
    "question": "Given two integer arrays of equal length target and arr.\nIn one step, you can select any non-empty sub-array of arr and reverse it.\n You are allowed to make any number of steps.\nReturn True if you can make arr equal to target, or False otherwise.",
    "examples": [
        "Input: target = [1,2,3,4], arr = [2,4,1,3]",
        "Output: true",
        "Explanation: You can follow the next steps to convert arr to target:",
        "1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]",
        "2- Reverse sub-array [4,2], arr becomes [1,2,4,3]",
        "3- Reverse sub-array [4,3], arr becomes [1,2,3,4]",
        "There are multiple ways to convert arr to target, this is not the only way to do so.",
        "Input: target = [7], arr = [7]",
        "Output: true",
        "Explanation: arr is equal to target without any reverses.",
        "Input: target = [1,12], arr = [12,1]",
        "Output: true",
        "Input: target = [3,7,9], arr = [3,7,11]",
        "Output: false",
        "Explanation: arr doesn't have value 9 and it can never be converted to target.",
        "Input: target = [1,1,1,1,1], arr = [1,1,1,1,1]",
        "Output: true",
        ""
    ],
    "constraints": [
        "target. length == arr. length1 <= target. length <= 10001 <= target[i] <= 10001 <= arr[i] <= 1000"
    ]
},
{
    "id": "1464",
    "title": "Maximum Product of Two Elements in an Array",
    "question": "",
    "examples": [
        "Input: nums = [3,4,5,2]",
        "Output: 12 ",
        "Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. ",
        "Input: nums = [1,5,4,5]",
        "Output: 16",
        "Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.",
        "Input: nums = [3,7]",
        "Output: 12",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 5001 <= nums[i] <= 10^3"
    ]
},
{
    "id": "1470",
    "title": "Shuffle the Array",
    "question": "Given the array nums consisting of 2n elements in the form [x1,x2,.\n.\n.\n,xn,y1,y2,.\n.\n.\n,yn].\nReturn the array in the form [x1,y1,x2,y2,.\n.\n.\n,xn,yn].",
    "examples": [
        "Input: nums = [2,5,1,3,4,7], n = 3",
        "Output: [2,3,5,4,1,7] ",
        "Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].",
        "Input: nums = [1,2,3,4,4,3,2,1], n = 4",
        "Output: [1,4,2,3,3,2,4,1]",
        "Input: nums = [1,1,2,2], n = 2",
        "Output: [1,2,1,2]",
        ""
    ],
    "constraints": [
        "1 <= n <= 500nums. length == 2n1 <= nums[i] <= 10^3"
    ]
},
{
    "id": "1475",
    "title": "Final Prices With a Special Discount in a Shop",
    "question": "Given the array prices where prices[i] is the price of the ith item in a shop.\n There is a special discount for items in the shop, if you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i], otherwise, you will not receive any discount at all.\nReturn an array where the ith element is the final price you will pay for the ith item of the shop considering the special discount.",
    "examples": [
        "Input: prices = [8,4,6,2,3]",
        "Output: [4,2,4,2,3]",
        "Explanation: ",
        "For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. ",
        "For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. ",
        "For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. ",
        "For items 3 and 4 you will not receive any discount at all.",
        "Input: prices = [1,2,3,4,5]",
        "Output: [1,2,3,4,5]",
        "Explanation: In this case, for all items, you will not receive any discount at all.",
        "Input: prices = [10,1,1,6]",
        "Output: [9,0,1,6]",
        ""
    ],
    "constraints": [
        "1 <= prices. length <= 5001 <= prices[i] <= 10^3"
    ]
},
{
    "id": "1480",
    "title": "Running Sum of 1d Array",
    "question": "Given an array nums.\n We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).\nReturn the running sum of nums.",
    "examples": [
        "Input: nums = [1,2,3,4]",
        "Output: [1,3,6,10]",
        "Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]. Input: nums = [1,1,1,1,1]",
        "Output: [1,2,3,4,5]",
        "Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]. Input: nums = [3,1,2,10,1]",
        "Output: [3,4,6,16,17]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1000-10^6 <= nums[i] <= 10^6"
    ]
},
{
    "id": "121",
    "title": "Best Time to Buy and Sell Stock",
    "question": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction.\n If you cannot achieve any profit, return 0.",
    "examples": [
        "Input: prices = [7,1,5,3,6,4]",
        "Output: 5",
        "Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.",
        "Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.",
        "Input: prices = [7,6,4,3,1]",
        "Output: 0",
        "Explanation: In this case, no transactions are done and the max profit = 0.",
        ""
    ],
    "constraints": [
        "1 <= prices. length <= 1050 <= prices[i] <= 104"
    ]
},
{
    "id": "1486",
    "title": "XOR Operation in an Array",
    "question": "Given an integer n and an integer start.\nDefine an array nums where nums[i] = start + 2*i (0-indexed) and n == nums.\nlength.\nReturn the bitwise XOR of all elements of nums.",
    "examples": [
        "Input: n = 5, start = 0",
        "Output: 8",
        "Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.",
        "Where \"^\" corresponds to bitwise XOR operator.",
        "Input: n = 4, start = 3",
        "Output: 8",
        "Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8. Input: n = 1, start = 7",
        "Output: 7",
        "Input: n = 10, start = 5",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= n <= 10000 <= start <= 1000n == nums. length"
    ]
},
{
    "id": "1491",
    "title": "Average Salary Excluding the Minimum and Maximum Salary",
    "question": "Given an array of unique integers salary where salary[i] is the salary of the employee i.\nReturn the average salary of employees excluding the minimum and maximum salary.",
    "examples": [
        "Input: salary = [4000,3000,1000,2000]",
        "Output: 2500. 00000",
        "Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.",
        "Average salary excluding minimum and maximum salary is (2000+3000)/2= 2500",
        "Input: salary = [1000,2000,3000]",
        "Output: 2000. 00000",
        "Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively.",
        "Average salary excluding minimum and maximum salary is (2000)/1= 2000",
        "Input: salary = [6000,5000,4000,3000,2000,1000]",
        "Output: 3500. 00000",
        "Input: salary = [8000,9000,2000,3000,6000,1000]",
        "Output: 4750. 00000",
        ""
    ],
    "constraints": [
        "3 <= salary. length <= 10010^3 <= salary[i] <= 10^6salary[i] is unique. Answers within 10^-5 of the actual value will be accepted as correct."
    ]
},
{
    "id": "1496",
    "title": "Path Crossing",
    "question": "Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively.\n You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.\nReturn true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited.\n Return false otherwise.",
    "examples": [
        "Input: path = \"NES\"",
        "Output: false ",
        "Explanation: Notice that the path doesn't cross any point more than once.",
        "Input: path = \"NESWW\"",
        "Output: true",
        "Explanation: Notice that the path visits the origin twice."
    ],
    "constraints": [
        "1 <= path. length <= 104path[i] is either 'N'",
        " 'S'",
        " 'E'",
        " or 'W'."
    ]
},
{
    "id": "1502",
    "title": "Can Make Arithmetic Progression From Sequence",
    "question": "A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.\nGiven an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression.\n Otherwise, return false.",
    "examples": [
        "Input: arr = [3,5,1]",
        "Output: true",
        "Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.",
        "Input: arr = [1,2,4]",
        "Output: false",
        "Explanation: There is no way to reorder the elements to obtain an arithmetic progression.",
        ""
    ],
    "constraints": [
        "2 <= arr. length <= 1000-106 <= arr[i] <= 106"
    ]
},
{
    "id": "1507",
    "title": "Reformat Date",
    "question": "Given a date string in the form Day Month Year, where:Convert the date string to the format YYYY-MM-DD, where:",
    "examples": [
        "Input: date = \"20th Oct 2052\"",
        "Output: \"2052-10-20\"",
        "Input: date = \"6th Jun 1933\"",
        "Output: \"1933-06-06\"",
        "Input: date = \"26th May 1960\"",
        "Output: \"1960-05-26\"",
        ""
    ],
    "constraints": [
        "Day is in the set {\"1st\"",
        " \"2nd\"",
        " \"3rd\"",
        " \"4th\"",
        " ...",
        " \"30th\"",
        " \"31st\"}. Month is in the set {\"Jan\"",
        " \"Feb\"",
        " \"Mar\"",
        " \"Apr\"",
        " \"May\"",
        " \"Jun\"",
        " \"Jul\"",
        " \"Aug\"",
        " \"Sep\"",
        " \"Oct\"",
        " \"Nov\"",
        " \"Dec\"}. Year is in the range [1900",
        " 2100]. YYYY denotes the 4 digit year. MM denotes the 2 digit month. DD denotes the 2 digit day. The given dates are guaranteed to be valid",
        " so no error handling is necessary."
    ]
},
{
    "id": "1512",
    "title": "Number of Good Pairs",
    "question": "Given an array of integers nums, return the number of good pairs.\nA pair (i, j) is called good if nums[i] == nums[j] and i < j.",
    "examples": [
        "Input: nums = [1,2,3,1,1,3]",
        "Output: 4",
        "Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.",
        "Input: nums = [1,1,1,1]",
        "Output: 6",
        "Explanation: Each pair in the array are good.",
        "Input: nums = [1,2,3]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1001 <= nums[i] <= 100"
    ]
},
{
    "id": "1518",
    "title": "Water Bottles",
    "question": "Given numBottles full water bottles, you can exchange numExchange empty water bottles for one full water bottle.\nThe operation of drinking a full water bottle turns it into an empty bottle.\nReturn the maximum number of water bottles you can drink.",
    "examples": [
        "Input: numBottles = 9, numExchange = 3",
        "Output: 13",
        "Explanation: You can exchange 3 empty bottles to get 1 full water bottle.",
        "Number of water bottles you can drink: 9 + 3 + 1 = 13.",
        "Input: numBottles = 15, numExchange = 4",
        "Output: 19",
        "Explanation: You can exchange 4 empty bottles to get 1 full water bottle. ",
        "Number of water bottles you can drink: 15 + 3 + 1 = 19.",
        "Input: numBottles = 5, numExchange = 5",
        "Output: 6",
        "Input: numBottles = 2, numExchange = 3",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= numBottles <= 1002 <= numExchange <= 100"
    ]
},
{
    "id": "1523",
    "title": "Count Odd Numbers in an Interval Range",
    "question": "Given two non-negative integers low and high.\n Return the count of odd numbers between low and high (inclusive).",
    "examples": [
        "Input: low = 3, high = 7",
        "Output: 3",
        "Explanation: The odd numbers between 3 and 7 are [3,5,7]. Input: low = 8, high = 10",
        "Output: 1",
        "Explanation: The odd numbers between 8 and 10 are [9]."
    ],
    "constraints": [
        "0 <= low <= high <= 10^9"
    ]
},
{
    "id": "1528",
    "title": "Shuffle String",
    "question": "Given a string s and an integer array indices of the same length.\nThe string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\nReturn the shuffled string.",
    "examples": [
        "Input: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]",
        "Output: \"leetcode\"",
        "Explanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling.",
        "Input: s = \"abc\", indices = [0,1,2]",
        "Output: \"abc\"",
        "Explanation: After shuffling, each character remains in its position.",
        "Input: s = \"aiohn\", indices = [3,1,4,2,0]",
        "Output: \"nihao\"",
        "Input: s = \"aaiougrt\", indices = [4,0,2,6,7,3,1,5]",
        "Output: \"arigatou\"",
        "Input: s = \"art\", indices = [1,0,2]",
        "Output: \"rat\"",
        ""
    ],
    "constraints": [
        "s. length == indices. length == n1 <= n <= 100s contains only lower-case English letters. 0 <= indices[i] < nAll values of indices are unique (i. e. indices is a permutation of the integers from 0 to n - 1)."
    ]
},
{
    "id": "1534",
    "title": "Count Good Triplets",
    "question": "Given an array of integers arr, and three integers a, b and c.\n You need to find the number of good triplets.\nA triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:Where |x| denotes the absolute value of x.\nReturn the number of good triplets.",
    "examples": [
        "Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3",
        "Output: 4",
        "Explanation: There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].",
        "Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1",
        "Output: 0",
        "Explanation: No triplet satisfies all conditions.",
        ""
    ],
    "constraints": [
        "0 <= i < j < k < arr. length|arr[i] - arr[j]| <= a|arr[j] - arr[k]| <= b|arr[i] - arr[k]| <= c3 <= arr. length <= 1000 <= arr[i] <= 10000 <= a",
        " b",
        " c <= 1000"
    ]
},
{
    "id": "13",
    "title": "Roman to Integer",
    "question": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nFor example, 2 is written as II in Roman numeral, just two one's added together.\n 12 is written as XII, which is simply X + II.\n The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right.\n However, the numeral for four is not IIII.\n Instead, the number four is written as IV.\n Because the one is before the five we subtract it making four.\n The same principle applies to the number nine, which is written as IX.\n There are six instances where subtraction is used:Given a roman numeral, convert it to an integer.",
    "examples": [
        "Symbol       Value",
        "I             1",
        "V             5",
        "X             10",
        "L             50",
        "C             100",
        "D             500",
        "M             1000Input: s = \"III\"",
        "Output: 3",
        "Input: s = \"IV\"",
        "Output: 4",
        "Input: s = \"IX\"",
        "Output: 9",
        "Input: s = \"LVIII\"",
        "Output: 58",
        "Explanation: L = 50, V= 5, III = 3.",
        "Input: s = \"MCMXCIV\"",
        "Output: 1994",
        "Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.",
        ""
    ],
    "constraints": [
        "I can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900. 1 <= s. length <= 15s contains only the characters ('I'",
        " 'V'",
        " 'X'",
        " 'L'",
        " 'C'",
        " 'D'",
        " 'M'). It is guaranteed that s is a valid roman numeral in the range [1",
        " 3999]."
    ]
},
{
    "id": "122",
    "title": "Best Time to Buy and Sell Stock II",
    "question": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\nOn each day, you may decide to buy and/or sell the stock.\n You can only hold at most one share of the stock at any time.\n However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.",
    "examples": [
        "Input: prices = [7,1,5,3,6,4]",
        "Output: 7",
        "Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.",
        "Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.",
        "Total profit is 4 + 3 = 7.",
        "Input: prices = [1,2,3,4,5]",
        "Output: 4",
        "Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.",
        "Total profit is 4.",
        "Input: prices = [7,6,4,3,1]",
        "Output: 0",
        "Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.",
        ""
    ],
    "constraints": [
        "1 <= prices. length <= 3 * 1040 <= prices[i] <= 104"
    ]
},
{
    "id": "1539",
    "title": "Kth Missing Positive Number",
    "question": "Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.\nFind the kth positive integer that is missing from this array.",
    "examples": [
        "Input: arr = [2,3,4,7,11], k = 5",
        "Output: 9",
        "Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.",
        "Input: arr = [1,2,3,4], k = 2",
        "Output: 6",
        "Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 10001 <= arr[i] <= 10001 <= k <= 1000arr[i] < arr[j] for 1 <= i < j <= arr. length"
    ]
},
{
    "id": "1544",
    "title": "Make The String Great",
    "question": "Given a string s of lower and upper case English letters.\nA good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:To make the string good, you can choose two adjacent characters that make the string bad and remove them.\n You can keep doing this until the string becomes good.\nReturn the string after making it good.\n The answer is guaranteed to be unique under the given constraints.\nNotice that an empty string is also good.",
    "examples": [
        "Input: s = \"leEeetcode\"",
        "Output: \"leetcode\"",
        "Explanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\".",
        "Input: s = \"abBAcC\"",
        "Output: \"\"",
        "Explanation: We have many possible scenarios, and all lead to the same answer. For example:",
        "\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"",
        "\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\"",
        "Input: s = \"s\"",
        "Output: \"s\"",
        ""
    ],
    "constraints": [
        "0 <= i <= s. length - 2s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa. 1 <= s. length <= 100s contains only lower and upper case English letters."
    ]
},
{
    "id": "1550",
    "title": "Three Consecutive Odds",
    "question": "",
    "examples": [
        "Input: arr = [2,6,4,1]",
        "Output: false",
        "Explanation: There are no three consecutive odds.",
        "Input: arr = [1,2,34,3,4,5,7,23,12]",
        "Output: true",
        "Explanation: [5,7,23] are three consecutive odds.",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 10001 <= arr[i] <= 1000"
    ]
},
{
    "id": "1556",
    "title": "Thousand Separator",
    "question": "Given an integer n, add a dot (\".\n\") as the thousands separator and return it in string format.",
    "examples": [
        "Input: n = 987",
        "Output: \"987\"",
        "Input: n = 1234",
        "Output: \"1. 234\"",
        "Input: n = 123456789",
        "Output: \"123. 456. 789\"",
        "Input: n = 0",
        "Output: \"0\"",
        ""
    ],
    "constraints": [
        "0 <= n < 2^31"
    ]
},
{
    "id": "1560",
    "title": "Most Visited Sector in  a Circular Track",
    "question": "Given an integer n and an integer array rounds.\n We have a circular track which consists of n sectors labeled from 1 to n.\n A marathon will be held on this track, the marathon consists of m rounds.\n The ith round starts at sector rounds[i - 1] and ends at sector rounds[i].\n For example, round 1 starts at sector rounds[0] and ends at sector rounds[1]Return an array of the most visited sectors sorted in ascending order.\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).",
    "examples": [
        "Input: n = 4, rounds = [1,3,1,2]",
        "Output: [1,2]",
        "Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows:",
        "1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)",
        "We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once. Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2]",
        "Output: [2]",
        "Input: n = 7, rounds = [1,3,5,7]",
        "Output: [1,2,3,4,5,6,7]",
        ""
    ],
    "constraints": [
        "2 <= n <= 1001 <= m <= 100rounds. length == m + 11 <= rounds[i] <= nrounds[i] != rounds[i + 1] for 0 <= i < m"
    ]
},
{
    "id": "1566",
    "title": "Detect Pattern of Length M Repeated K or More Times",
    "question": "Given an array of positive integers arr,  find a pattern of length m that is repeated k or more times.\nA pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping.\n A pattern is defined by its length and the number of repetitions.\nReturn true if there exists a pattern of length m that is repeated k or more times, otherwise return false.",
    "examples": [
        "Input: arr = [1,2,4,4,4,4], m = 1, k = 3",
        "Output: true",
        "Explanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.",
        "Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2",
        "Output: true",
        "Explanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.",
        "Input: arr = [1,2,1,2,1,3], m = 2, k = 3",
        "Output: false",
        "Explanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.",
        "Input: arr = [1,2,3,1,2], m = 2, k = 2",
        "Output: false",
        "Explanation: Notice that the pattern (1,2) exists twice but not consecutively, so it doesn't count.",
        "Input: arr = [2,2,2,2], m = 2, k = 3",
        "Output: false",
        "Explanation: The only pattern of length 2 is (2,2) however it's repeated only twice. Notice that we do not count overlapping repetitions.",
        ""
    ],
    "constraints": [
        "2 <= arr. length <= 1001 <= arr[i] <= 1001 <= m <= 1002 <= k <= 100"
    ]
},
{
    "id": "1572",
    "title": "Matrix Diagonal Sum",
    "question": "Given a square matrix mat, return the sum of the matrix diagonals.\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.",
    "examples": [
        "Input: mat = [[1,2,3],",
        "              [4,5,6],",
        "              [7,8,9]]",
        "Output: 25",
        "Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25",
        "Notice that element mat[1][1] = 5 is counted only once.",
        "Input: mat = [[1,1,1,1],",
        "              [1,1,1,1],",
        "              [1,1,1,1],",
        "              [1,1,1,1]]",
        "Output: 8",
        "Input: mat = [[5]]",
        "Output: 5",
        ""
    ],
    "constraints": [
        "n == mat. length == mat[i]. length1 <= n <= 1001 <= mat[i][j] <= 100"
    ]
},
{
    "id": "1576",
    "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
    "question": "Given a string s containing only lowercase English letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters.\n You cannot modify the non '?' characters.\nIt is guaranteed that there are no consecutive repeating characters in the given string except for '?'.\nReturn the final string after all the conversions (possibly zero) have been made.\n If there is more than one solution, return any of them.\n It can be shown that an answer is always possible with the given constraints.",
    "examples": [
        "Input: s = \"?zs\"",
        "Output: \"azs\"",
        "Explanation: There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\". Input: s = \"ubv?w\"",
        "Output: \"ubvaw\"",
        "Explanation: There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\".",
        "Input: s = \"j?qg??b\"",
        "Output: \"jaqgacb\"",
        "Input: s = \"??yw?ipkj?\"",
        "Output: \"acywaipkja\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 100s consist of lowercase English letters and '?'."
    ]
},
{
    "id": "1582",
    "title": "Special Positions in a Binary Matrix",
    "question": "Given a rows x cols matrix mat, where mat[i][j] is either 0 or 1, return the number of special positions in mat.\nA position (i,j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).",
    "examples": [
        "Input: mat = [[1,0,0],",
        "              [0,0,1],",
        "              [1,0,0]]",
        "Output: 1",
        "Explanation: (1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.",
        "Input: mat = [[1,0,0],",
        "              [0,1,0],",
        "              [0,0,1]]",
        "Output: 3",
        "Explanation: (0,0), (1,1) and (2,2) are special positions. ",
        "Input: mat = [[0,0,0,1],",
        "              [1,0,0,0],",
        "              [0,1,1,0],",
        "              [0,0,0,0]]",
        "Output: 2",
        "Input: mat = [[0,0,0,0,0],",
        "              [1,0,0,0,0],",
        "              [0,1,0,0,0],",
        "              [0,0,1,0,0],",
        "              [0,0,0,1,1]]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "rows == mat. lengthcols == mat[i]. length1 <= rows",
        " cols <= 100mat[i][j] is 0 or 1."
    ]
},
{
    "id": "1588",
    "title": "Sum of All Odd Length Subarrays",
    "question": "Given an array of positive integers arr, calculate the sum of all possible odd-length subarrays.\nA subarray is a contiguous subsequence of the array.\nReturn the sum of all odd-length subarrays of arr.",
    "examples": [
        "Input: arr = [1,4,2,5,3]",
        "Output: 58",
        "Explanation: The odd-length subarrays of arr and their sums are:",
        "[1] = 1",
        "[4] = 4",
        "[2] = 2",
        "[5] = 5",
        "[3] = 3",
        "[1,4,2] = 7",
        "[4,2,5] = 11",
        "[2,5,3] = 10",
        "[1,4,2,5,3] = 15",
        "If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58Input: arr = [1,2]",
        "Output: 3",
        "Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3. Input: arr = [10,11,12]",
        "Output: 66",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1001 <= arr[i] <= 1000"
    ]
},
{
    "id": "125",
    "title": "Valid Palindrome",
    "question": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.",
    "examples": [
        "Input: s = \"A man, a plan, a canal: Panama\"",
        "Output: true",
        "Explanation: \"amanaplanacanalpanama\" is a palindrome.",
        "Input: s = \"race a car\"",
        "Output: false",
        "Explanation: \"raceacar\" is not a palindrome.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 2 * 105s consists only of printable ASCII characters."
    ]
},
{
    "id": "1592",
    "title": "Rearrange Spaces Between Words",
    "question": "You are given a string text of words that are placed among some number of spaces.\n Each word consists of one or more lowercase English letters and are separated by at least one space.\n It's guaranteed that text contains at least one word.\nRearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized.\n If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text.\nReturn the string after rearranging the spaces.",
    "examples": [
        "Input: text = \"  this   is  a sentence \"",
        "Output: \"this   is   a   sentence\"",
        "Explanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.",
        "Input: text = \" practice   makes   perfect\"",
        "Output: \"practice   makes   perfect \"",
        "Explanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.",
        "Input: text = \"hello   world\"",
        "Output: \"hello   world\"",
        "Input: text = \"  walks  udp package   into  bar a\"",
        "Output: \"walks  udp  package  into  bar  a \"",
        "Input: text = \"a\"",
        "Output: \"a\"",
        ""
    ],
    "constraints": [
        "1 <= text. length <= 100text consists of lowercase English letters and ' '. text contains at least one word."
    ]
},
{
    "id": "1598",
    "title": "Crawler Log Folder",
    "question": "The Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:You are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.\nThe file system starts in the main folder, then the operations in logs are performed.\nReturn the minimum number of operations needed to go back to the main folder after the change folder operations.",
    "examples": [
        "Input: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]",
        "Output: 2",
        "Explanation: Use this change folder operation \"../\" 2 times and go back to the main folder.",
        "Input: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]",
        "Output: 3",
        "Input: logs = [\"d1/\",\"../\",\"../\",\"../\"]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "\"../\" : Move to the parent folder of the current folder. (If you are already in the main folder",
        " remain in the same folder).\"./\" : Remain in the same folder.\"x/\" : Move to the child folder named x (This folder is guaranteed to always exist). 1 <= logs. length <= 1032 <= logs[i]. length <= 10logs[i] contains lowercase English letters",
        " digits",
        " '.'",
        " and '/'. logs[i] follows the format described in the statement. Folder names consist of lowercase English letters and digits."
    ]
},
{
    "id": "1603",
    "title": "Design Parking System",
    "question": "Design a parking system for a parking lot.\n The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\nImplement the ParkingSystem class:",
    "examples": [
        "Input",
        "[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]",
        "[[1, 1, 0], [1], [2], [3], [1]]",
        "Output",
        "[null, true, true, false, false]",
        "",
        "Explanation",
        "ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);",
        "parkingSystem. addCar(1); // return true because there is 1 available slot for a big car",
        "parkingSystem. addCar(2); // return true because there is 1 available slot for a medium car",
        "parkingSystem. addCar(3); // return false because there is no available slot for a small car",
        "parkingSystem. addCar(1); // return false because there is no available slot for a big car. It is already occupied.",
        ""
    ],
    "constraints": [
        "ParkingSystem(int big",
        " int medium",
        " int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor. bool addCar(int carType) Checks whether there is a parking space of carType for the car that wants to get into the parking lot. carType can be of three kinds: big",
        " medium",
        " or small",
        " which are represented by 1",
        " 2",
        " and 3 respectively. A car can only park in a parking space of its carType. If there is no space available",
        " return false",
        " else park the car in that size space and return true. 0 <= big",
        " medium",
        " small <= 1000carType is 1",
        " 2",
        " or 3At most 1000 calls will be made to addCar"
    ]
},
{
    "id": "1608",
    "title": "Special Array With X Elements Greater Than or Equal X",
    "question": "You are given an array nums of non-negative integers.\n nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.\nNotice that x does not have to be an element in nums.\nReturn x if the array is special, otherwise, return -1.\n It can be proven that if nums is special, the value for x is unique.",
    "examples": [
        "Input: nums = [3,5]",
        "Output: 2",
        "Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.",
        "Input: nums = [0,0]",
        "Output: -1",
        "Explanation: No numbers fit the criteria for x.",
        "If x = 0, there should be 0 numbers >= x, but there are 2.",
        "If x = 1, there should be 1 number >= x, but there are 0.",
        "If x = 2, there should be 2 numbers >= x, but there are 0.",
        "x cannot be greater since there are only 2 numbers in nums.",
        "Input: nums = [0,4,3,0,4]",
        "Output: 3",
        "Explanation: There are 3 values that are greater than or equal to 3.",
        "Input: nums = [3,6,7,7,0]",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1000 <= nums[i] <= 1000"
    ]
},
{
    "id": "1614",
    "title": "Maximum Nesting Depth of the Parentheses",
    "question": "A string is a valid parentheses string (denoted VPS) if it meets one of the following:We can similarly define the nesting depth depth(S) of any VPS S as follows:For example, \"\", \"()()\", and \"()(()())\" are VPS's (with nesting depths 0, 1, and 2), and \")(\" and \"(()\" are not VPS's.\nGiven a VPS represented as string s, return the nesting depth of s.",
    "examples": [
        "Input: s = \"(1+(2*3)+((8)/4))+1\"",
        "Output: 3",
        "Explanation: Digit 8 is inside of 3 nested parentheses in the string.",
        "Input: s = \"(1)+((2))+(((3)))\"",
        "Output: 3",
        "Input: s = \"1+(2*3)/(2-1)\"",
        "Output: 1",
        "Input: s = \"1\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "It is an empty string \"\"",
        " or a single character not equal to \"(\" or \")\"",
        "It can be written as AB (A concatenated with B)",
        " where A and B are VPS's",
        " orIt can be written as (A)",
        " where A is a VPS. depth(\"\") = 0depth(C) = 0",
        " where C is a string with a single character not equal to \"(\" or \")\". depth(A + B) = max(depth(A)",
        " depth(B))",
        " where A and B are VPS's. depth(\"(\" + A + \")\") = 1 + depth(A)",
        " where A is a VPS. 1 <= s. length <= 100s consists of digits 0-9 and characters '+'",
        " '-'",
        " '*'",
        " '/'",
        " '('",
        " and ')'. It is guaranteed that parentheses expression s is a VPS."
    ]
},
{
    "id": "1619",
    "title": "Mean of Array After Removing Some Elements",
    "question": "Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.\nAnswers within 10-5 of the actual answer will be considered accepted.",
    "examples": [
        "Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]",
        "Output: 2. 00000",
        "Explanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.",
        "Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]",
        "Output: 4. 00000",
        "Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]",
        "Output: 4. 77778",
        "Input: arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]",
        "Output: 5. 27778",
        "Input: arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]",
        "Output: 5. 29167",
        ""
    ],
    "constraints": [
        "20 <= arr. length <= 1000arr. length is a multiple of 20. 0 <= arr[i] <= 105"
    ]
},
{
    "id": "1624",
    "title": "Largest Substring Between Two Equal Characters",
    "question": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters.\n If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
        "Input: s = \"aa\"",
        "Output: 0",
        "Explanation: The optimal substring here is an empty substring between the two 'a's. Input: s = \"abca\"",
        "Output: 2",
        "Explanation: The optimal substring here is \"bc\".",
        "Input: s = \"cbzxy\"",
        "Output: -1",
        "Explanation: There are no characters that appear twice in s.",
        "Input: s = \"cabbac\"",
        "Output: 4",
        "Explanation: The optimal substring here is \"abba\". Other non-optimal substrings include \"bb\" and \"\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 300s contains only lowercase English letters."
    ]
},
{
    "id": "1629",
    "title": "Slowest Key",
    "question": "A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.\nYou are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the ith key was released.\n Both arrays are 0-indexed.\n The 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released.\nThe tester wants to know the key of the keypress that had the longest duration.\n The ith keypress had a duration of releaseTimes[i] - releaseTimes[i - 1], and the 0th keypress had a duration of releaseTimes[0].\nNote that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.\nReturn the key of the keypress that had the longest duration.\n If there are multiple such keypresses, return the lexicographically largest key of the keypresses.",
    "examples": [
        "Input: releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"",
        "Output: \"c\"",
        "Explanation: The keypresses were as follows:",
        "Keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).",
        "Keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).",
        "Keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).",
        "Keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).",
        "The longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.",
        "'c' is lexicographically larger than 'b', so the answer is 'c'.",
        "Input: releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"",
        "Output: \"a\"",
        "Explanation: The keypresses were as follows:",
        "Keypress for 's' had a duration of 12.",
        "Keypress for 'p' had a duration of 23 - 12 = 11.",
        "Keypress for 'u' had a duration of 36 - 23 = 13.",
        "Keypress for 'd' had a duration of 46 - 36 = 10.",
        "Keypress for 'a' had a duration of 62 - 46 = 16.",
        "The longest of these was the keypress for 'a' with duration 16."
    ],
    "constraints": [
        "releaseTimes. length == nkeysPressed. length == n2 <= n <= 10001 <= releaseTimes[i] <= 109releaseTimes[i] < releaseTimes[i+1]keysPressed contains only lowercase English letters."
    ]
},
{
    "id": "1636",
    "title": "Sort Array by Increasing Frequency",
    "question": "Given an array of integers nums, sort the array in increasing order based on the frequency of the values.\n If multiple values have the same frequency, sort them in decreasing order.\nReturn the sorted array.",
    "examples": [
        "Input: nums = [1,1,2,2,2,3]",
        "Output: [3,1,1,2,2,2]",
        "Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.",
        "Input: nums = [2,3,1,3,2]",
        "Output: [1,3,3,2,2]",
        "Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.",
        "Input: nums = [-1,1,-6,4,5,-6,1,4,1]",
        "Output: [5,-1,4,4,-6,-6,1,1,1]"
    ],
    "constraints": [
        "1 <= nums. length <= 100-100 <= nums[i] <= 100"
    ]
},
{
    "id": "1640",
    "title": "Check Array Formation Through Concatenation",
    "question": "You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct.\n Your goal is to form arr by concatenating the arrays in pieces in any order.\n However, you are not allowed to reorder the integers in each array pieces[i].\nReturn true if it is possible to form the array arr from pieces.\n Otherwise, return false.",
    "examples": [
        "Input: arr = [85], pieces = [[85]]",
        "Output: true",
        "Input: arr = [15,88], pieces = [[88],[15]]",
        "Output: true",
        "Explanation: Concatenate [15] then [88]",
        "Input: arr = [49,18,16], pieces = [[16,18,49]]",
        "Output: false",
        "Explanation: Even though the numbers match, we cannot reorder pieces[0].",
        "Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]",
        "Output: true",
        "Explanation: Concatenate [91] then [4,64] then [78]Input: arr = [1,3,5,7], pieces = [[2,4,6,8]]",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= pieces. length <= arr. length <= 100sum(pieces[i]. length) == arr. length1 <= pieces[i]. length <= arr. length1 <= arr[i]",
        " pieces[i][j] <= 100The integers in arr are distinct. The integers in pieces are distinct (i. e.",
        " If we flatten pieces in a 1D array",
        " all the integers in this array are distinct)."
    ]
},
{
    "id": "136",
    "title": "Single Number",
    "question": "Given a non-empty array of integers nums, every element appears twice except for one.\n Find that single one.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.",
    "examples": [
        "Input: nums = [2,2,1]",
        "Output: 1",
        "Input: nums = [4,1,2,1,2]",
        "Output: 4",
        "Input: nums = [1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 3 * 104-3 * 104 <= nums[i] <= 3 * 104Each element in the array appears twice except for one element which appears only once."
    ]
},
{
    "id": "1646",
    "title": "Get Maximum in Generated Array",
    "question": "You are given an integer n.\n An array nums of length n + 1 is generated in the following way:Return the maximum integer in the array nums​​​.",
    "examples": [
        "Input: n = 7",
        "Output: 3",
        "Explanation: According to the given rules:",
        "  nums[0] = 0",
        "  nums[1] = 1",
        "  nums[(1 * 2) = 2] = nums[1] = 1",
        "  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2",
        "  nums[(2 * 2) = 4] = nums[2] = 1",
        "  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3",
        "  nums[(3 * 2) = 6] = nums[3] = 2",
        "  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3",
        "Hence, nums = [0,1,1,2,1,3,2,3], and the maximum is 3.",
        "Input: n = 2",
        "Output: 1",
        "Explanation: According to the given rules, the maximum between nums[0], nums[1], and nums[2] is 1.",
        "Input: n = 3",
        "Output: 2",
        "Explanation: According to the given rules, the maximum between nums[0], nums[1], nums[2], and nums[3] is 2.",
        ""
    ],
    "constraints": [
        "nums[0] = 0nums[1] = 1nums[2 * i] = nums[i] when 2 <= 2 * i <= nnums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n0 <= n <= 100"
    ]
},
{
    "id": "1652",
    "title": "Defuse the Bomb",
    "question": "You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.\nTo decrypt the code, you must replace every number.\n All the numbers are replaced simultaneously.\nAs code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].\nGiven the circular array code and an integer key k, return the decrypted code to defuse the bomb!",
    "examples": [
        "Input: code = [5,7,1,4], k = 3",
        "Output: [12,10,16,13]",
        "Explanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.",
        "Input: code = [1,2,3,4], k = 0",
        "Output: [0,0,0,0]",
        "Explanation: When k is zero, the numbers are replaced by 0. ",
        "Input: code = [2,4,9,3], k = -2",
        "Output: [12,5,6,13]",
        "Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers.",
        ""
    ],
    "constraints": [
        "If k > 0",
        " replace the ith number with the sum of the next k numbers. If k < 0",
        " replace the ith number with the sum of the previous k numbers. If k == 0",
        " replace the ith number with 0. n == code. length1 <= n <= 1001 <= code[i] <= 100-(n - 1) <= k <= n - 1"
    ]
},
{
    "id": "1656",
    "title": "Design an Ordered Stream",
    "question": "There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string.\n No two pairs have the same id.\nDesign a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion.\n The concatenation of all the chunks should result in a list of the sorted values.\nImplement the OrderedStream class: Example:",
    "examples": [
        "Input",
        "[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]",
        "[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]",
        "Output",
        "[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]",
        "",
        "Explanation",
        "// Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"].",
        "OrderedStream os = new OrderedStream(5);",
        "os. insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].",
        "os. insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].",
        "os. insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].",
        "os. insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].",
        "os. insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].",
        "// Concatentating all the chunks returned:",
        "// [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]",
        "// The resulting order is the same as the order above.",
        ""
    ],
    "constraints": [
        "OrderedStream(int n) Constructs the stream to take n values. String[] insert(int idKey",
        " String value) Inserts the pair (idKey",
        " value) into the stream",
        " then returns the largest possible chunk of currently inserted values that appear next in the order. 1 <= n <= 10001 <= id <= nvalue. length == 5value consists only of lowercase letters. Each call to insert will have a unique id. Exactly n calls will be made to insert."
    ]
},
{
    "id": "1662",
    "title": "Check If Two String Arrays are Equivalent",
    "question": "Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.",
    "examples": [
        "Input: word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]",
        "Output: true",
        "Explanation:",
        "word1 represents string \"ab\" + \"c\" -> \"abc\"",
        "word2 represents string \"a\" + \"bc\" -> \"abc\"",
        "The strings are the same, so return true. Input: word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]",
        "Output: false",
        "Input: word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= word1. length",
        " word2. length <= 1031 <= word1[i]. length",
        " word2[i]. length <= 1031 <= sum(word1[i]. length)",
        " sum(word2[i]. length) <= 103word1[i] and word2[i] consist of lowercase letters."
    ]
},
{
    "id": "1668",
    "title": "Maximum Repeating Substring",
    "question": "For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence.\n The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence.\n If word is not a substring of sequence, word's maximum k-repeating value is 0.\nGiven strings sequence and word, return the maximum k-repeating value of word in sequence.",
    "examples": [
        "Input: sequence = \"ababc\", word = \"ab\"",
        "Output: 2",
        "Explanation: \"abab\" is a substring in \"ababc\".",
        "Input: sequence = \"ababc\", word = \"ba\"",
        "Output: 1",
        "Explanation: \"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\".",
        "Input: sequence = \"ababc\", word = \"ac\"",
        "Output: 0",
        "Explanation: \"ac\" is not a substring in \"ababc\". ",
        ""
    ],
    "constraints": [
        "1 <= sequence. length <= 1001 <= word. length <= 100sequence and word contains only lowercase English letters."
    ]
},
{
    "id": "1672",
    "title": "Richest Customer Wealth",
    "question": "You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank.\n Return the wealth that the richest customer has.\nA customer's wealth is the amount of money they have in all their bank accounts.\n The richest customer is the customer that has the maximum wealth.",
    "examples": [
        "Input: accounts = [[1,2,3],[3,2,1]]",
        "Output: 6",
        "Explanation:",
        "1st customer has wealth = 1 + 2 + 3 = 6",
        "2nd customer has wealth = 3 + 2 + 1 = 6",
        "Both customers are considered the richest with a wealth of 6 each, so return 6.",
        "Input: accounts = [[1,5],[7,3],[3,5]]",
        "Output: 10",
        "Explanation: ",
        "1st customer has wealth = 6",
        "2nd customer has wealth = 10 ",
        "3rd customer has wealth = 8",
        "The 2nd customer is the richest with a wealth of 10. Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]",
        "Output: 17",
        ""
    ],
    "constraints": [
        "m == accounts. lengthn == accounts[i]. length1 <= m",
        " n <= 501 <= accounts[i][j] <= 100"
    ]
},
{
    "id": "1678",
    "title": "Goal Parser Interpretation",
    "question": "You own a Goal Parser that can interpret a string command.\n The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order.\n The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\".\n The interpreted strings are then concatenated in the original order.\nGiven the string command, return the Goal Parser's interpretation of command.",
    "examples": [
        "Input: command = \"G()(al)\"",
        "Output: \"Goal\"",
        "Explanation: The Goal Parser interprets the command as follows:",
        "G -> G",
        "() -> o",
        "(al) -> al",
        "The final concatenated result is \"Goal\".",
        "Input: command = \"G()()()()(al)\"",
        "Output: \"Gooooal\"",
        "Input: command = \"(al)G(al)()()G\"",
        "Output: \"alGalooG\"",
        ""
    ],
    "constraints": [
        "1 <= command. length <= 100command consists of \"G\"",
        " \"()\"",
        " and/or \"(al)\" in some order."
    ]
},
{
    "id": "1684",
    "title": "Count the Number of Consistent Strings",
    "question": "You are given a string allowed consisting of distinct characters and an array of strings words.\n A string is consistent if all characters in the string appear in the string allowed.\nReturn the number of consistent strings in the array words.",
    "examples": [
        "Input: allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]",
        "Output: 2",
        "Explanation: Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'.",
        "Input: allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]",
        "Output: 7",
        "Explanation: All strings are consistent.",
        "Input: allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]",
        "Output: 4",
        "Explanation: Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent.",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 1041 <= allowed. length <= 261 <= words[i]. length <= 10The characters in allowed are distinct. words[i] and allowed contain only lowercase English letters."
    ]
},
{
    "id": "1688",
    "title": "Count of Matches in Tournament",
    "question": "You are given an integer n, the number of teams in a tournament that has strange rules:Return the number of matches played in the tournament until a winner is decided.",
    "examples": [
        "Input: n = 7",
        "Output: 6",
        "Explanation: Details of the tournament: ",
        "- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.",
        "- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.",
        "- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.",
        "Total number of matches = 3 + 2 + 1 = 6.",
        "Input: n = 14",
        "Output: 13",
        "Explanation: Details of the tournament:",
        "- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.",
        "- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.",
        "- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.",
        "- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.",
        "Total number of matches = 7 + 3 + 2 + 1 = 13.",
        ""
    ],
    "constraints": [
        "If the current number of teams is even",
        " each team gets paired with another team. A total of n / 2 matches are played",
        " and n / 2 teams advance to the next round. If the current number of teams is odd",
        " one team randomly advances in the tournament",
        " and the rest gets paired. A total of (n - 1) / 2 matches are played",
        " and (n - 1) / 2 + 1 teams advance to the next round. 1 <= n <= 200"
    ]
},
{
    "id": "1694",
    "title": "Reformat Phone Number",
    "question": "You are given a phone number as a string number.\n number consists of digits, spaces ' ', and/or dashes '-'.\nYou would like to reformat the phone number in a certain manner.\n Firstly, remove all spaces and dashes.\n Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits.\n The final digits are then grouped as follows:The blocks are then joined by dashes.\n Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.\nReturn the phone number after formatting.",
    "examples": [
        "Input: number = \"1-23-45 6\"",
        "Output: \"123-456\"",
        "Explanation: The digits are \"123456\".",
        "Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".",
        "Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".",
        "Joining the blocks gives \"123-456\".",
        "Input: number = \"123 4-567\"",
        "Output: \"123-45-67\"",
        "Explanation: The digits are \"1234567\".",
        "Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".",
        "Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".",
        "Joining the blocks gives \"123-45-67\".",
        "Input: number = \"123 4-5678\"",
        "Output: \"123-456-78\"",
        "Explanation: The digits are \"12345678\".",
        "Step 1: The 1st block is \"123\".",
        "Step 2: The 2nd block is \"456\".",
        "Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".",
        "Joining the blocks gives \"123-456-78\".",
        "Input: number = \"12\"",
        "Output: \"12\"",
        "Input: number = \"--17-5 229 35-39475 \"",
        "Output: \"175-229-353-94-75\"",
        ""
    ],
    "constraints": [
        "2 digits: A single block of length 2. 3 digits: A single block of length 3. 4 digits: Two blocks of length 2 each. 2 <= number. length <= 100number consists of digits and the characters '-' and ' '. There are at least two digits in number."
    ]
},
{
    "id": "141",
    "title": "Linked List Cycle",
    "question": "Given head, the head of a linked list, determine if the linked list has a cycle in it.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.\n Internally, pos is used to denote the index of the node that tail's next pointer is connected to.\n Note that pos is not passed as a parameter.\nReturn true if there is a cycle in the linked list.\n Otherwise, return false.\n   Follow up: Can you solve it using O(1) (i.\ne.\n constant) memory?",
    "examples": [
        "Input: head = [3,2,0,-4], pos = 1",
        "Output: true",
        "Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).",
        "Input: head = [1,2], pos = 0",
        "Output: true",
        "Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.",
        "Input: head = [1], pos = -1",
        "Output: false",
        "Explanation: There is no cycle in the linked list.",
        ""
    ],
    "constraints": [
        "The number of the nodes in the list is in the range [0",
        " 104].-105 <= Node. val <= 105pos is -1 or a valid index in the linked-list."
    ]
},
{
    "id": "1700",
    "title": "Number of Students Unable to Eat Lunch",
    "question": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively.\n All students stand in a queue.\n Each student either prefers square or circular sandwiches.\nThe number of sandwiches in the cafeteria is equal to the number of students.\n The sandwiches are placed in a stack.\n At each step:This continues until none of the queue students want to take the top sandwich and are thus unable to eat.\nYou are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i​​​​​​th sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j​​​​​​th student in the initial queue (j = 0 is the front of the queue).\n Return the number of students that are unable to eat.",
    "examples": [
        "Input: students = [1,1,0,0], sandwiches = [0,1,0,1]",
        "Output: 0 ",
        "Explanation:",
        "- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].",
        "- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].",
        "- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].",
        "- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].",
        "- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].",
        "- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].",
        "- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].",
        "- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].",
        "Hence all students are able to eat.",
        "Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "If the student at the front of the queue prefers the sandwich on the top of the stack",
        " they will take it and leave the queue. Otherwise",
        " they will leave it and go to the queue's end. 1 <= students. length",
        " sandwiches. length <= 100students. length == sandwiches. lengthsandwiches[i] is 0 or 1. students[i] is 0 or 1."
    ]
},
{
    "id": "1704",
    "title": "Determine if String Halves Are Alike",
    "question": "You are given a string s of even length.\n Split this string into two halves of equal lengths, and let a be the first half and b be the second half.\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U').\n Notice that s contains uppercase and lowercase letters.\nReturn true if a and b are alike.\n Otherwise, return false.",
    "examples": [
        "Input: s = \"book\"",
        "Output: true",
        "Explanation: a = \"bo\" and b = \"ok\". a has 1 vowel and b has 1 vowel. Therefore, they are alike.",
        "Input: s = \"textbook\"",
        "Output: false",
        "Explanation: a = \"text\" and b = \"book\". a has 1 vowel whereas b has 2. Therefore, they are not alike.",
        "Notice that the vowel o is counted twice.",
        "Input: s = \"MerryChristmas\"",
        "Output: false",
        "Input: s = \"AbCdEfGh\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "2 <= s. length <= 1000s. length is even. s consists of uppercase and lowercase letters."
    ]
},
{
    "id": "1710",
    "title": "Maximum Units on a Truck",
    "question": "You are assigned to put some amount of boxes onto one truck.\n You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck.\n You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.\nReturn the maximum total number of units that can be put on the truck.",
    "examples": [
        "Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4",
        "Output: 8",
        "Explanation: There are:",
        "- 1 box of the first type that contains 3 units.",
        "- 2 boxes of the second type that contain 2 units each.",
        "- 3 boxes of the third type that contain 1 unit each.",
        "You can take all the boxes of the first and second types, and one box of the third type.",
        "The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.",
        "Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10",
        "Output: 91",
        ""
    ],
    "constraints": [
        "numberOfBoxesi is the number of boxes of type i. numberOfUnitsPerBoxi is the number of units in each box of the type i. 1 <= boxTypes. length <= 10001 <= numberOfBoxesi",
        " numberOfUnitsPerBoxi <= 10001 <= truckSize <= 106"
    ]
},
{
    "id": "1716",
    "title": "Calculate Money in Leetcode Bank",
    "question": "Hercy wants to save money for his first car.\n He puts money in the Leetcode bank every day.\nHe starts by putting in $1 on Monday, the first day.\n Every day from Tuesday to Sunday, he will put in $1 more than the day before.\n On every subsequent Monday, he will put in $1 more than the previous Monday.\n Given n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.",
    "examples": [
        "Input: n = 4",
        "Output: 10",
        "Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.",
        "Input: n = 10",
        "Output: 37",
        "Explanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.",
        "Input: n = 20",
        "Output: 96",
        "Explanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.",
        ""
    ],
    "constraints": [
        "1 <= n <= 1000"
    ]
},
{
    "id": "1720",
    "title": "Decode XORed Array",
    "question": "There is a hidden integer array arr that consists of n non-negative integers.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1].\n For example, if arr = [1,0,2,1], then encoded = [1,2,3].\nYou are given the encoded array.\n You are also given an integer first, that is the first element of arr, i.\ne.\n arr[0].\nReturn the original array arr.\n It can be proved that the answer exists and is unique.",
    "examples": [
        "Input: encoded = [1,2,3], first = 1",
        "Output: [1,0,2,1]",
        "Explanation: If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]",
        "Input: encoded = [6,2,7,3], first = 4",
        "Output: [4,2,0,7,4]",
        ""
    ],
    "constraints": [
        "2 <= n <= 104encoded. length == n - 10 <= encoded[i] <= 1050 <= first <= 105"
    ]
},
{
    "id": "1725",
    "title": "Number Of Rectangles That Can Form The Largest Square",
    "question": "You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.\nYou can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi.\n For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.\nLet maxLen be the side length of the largest square you can obtain from any of the given rectangles.\nReturn the number of rectangles that can make a square with a side length of maxLen.",
    "examples": [
        "Input: rectangles = [[5,8],[3,9],[5,12],[16,5]]",
        "Output: 3",
        "Explanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].",
        "The largest possible square is of length 5, and you can get it out of 3 rectangles.",
        "Input: rectangles = [[2,3],[3,7],[4,3],[3,7]]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= rectangles. length <= 1000rectangles[i]. length == 21 <= li",
        " wi <= 109li != wi"
    ]
},
{
    "id": "1732",
    "title": "Find the Highest Altitude",
    "question": "There is a biker going on a road trip.\n The road trip consists of n + 1 points at different altitudes.\n The biker starts his trip on point 0 with altitude equal 0.\nYou are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for all (0 <= i < n).\n Return the highest altitude of a point.",
    "examples": [
        "Input: gain = [-5,1,5,0,-7]",
        "Output: 1",
        "Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.",
        "Input: gain = [-4,-3,-2,-1,4,3,2]",
        "Output: 0",
        "Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.",
        ""
    ],
    "constraints": [
        "n == gain. length1 <= n <= 100-100 <= gain[i] <= 100"
    ]
},
{
    "id": "1736",
    "title": "Latest Time by Replacing Hidden Digits",
    "question": "You are given a string time in the form of  hh:mm, where some of the digits in the string are hidden (represented by ?).\nThe valid times are those inclusively between 00:00 and 23:59.\nReturn the latest valid time you can get from time by replacing the hidden digits.",
    "examples": [
        "Input: time = \"2?:?0\"",
        "Output: \"23:50\"",
        "Explanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.",
        "Input: time = \"0?:3?\"",
        "Output: \"09:39\"",
        "Input: time = \"1?:22\"",
        "Output: \"19:22\"",
        ""
    ],
    "constraints": [
        "time is in the format hh:mm. It is guaranteed that you can produce a valid time from the given string."
    ]
},
{
    "id": "1742",
    "title": "Maximum Number of Balls in a Box",
    "question": "You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.\ne.\n, n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number.\n For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.\nGiven two integers lowLimit and highLimit, return the number of balls in the box with the most balls.",
    "examples": [
        "Input: lowLimit = 1, highLimit = 10",
        "Output: 2",
        "Explanation:",
        "Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...",
        "Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ...",
        "Box 1 has the most number of balls with 2 balls. Input: lowLimit = 5, highLimit = 15",
        "Output: 2",
        "Explanation:",
        "Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...",
        "Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ...",
        "Boxes 5 and 6 have the most number of balls with 2 balls in each.",
        "Input: lowLimit = 19, highLimit = 28",
        "Output: 2",
        "Explanation:",
        "Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...",
        "Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...",
        "Box 10 has the most number of balls with 2 balls.",
        ""
    ],
    "constraints": [
        "1 <= lowLimit <= highLimit <= 105"
    ]
},
{
    "id": "1748",
    "title": "Sum of Unique Elements",
    "question": "You are given an integer array nums.\n The unique elements of an array are the elements that appear exactly once in the array.\nReturn the sum of all the unique elements of nums.",
    "examples": [
        "Input: nums = [1,2,3,2]",
        "Output: 4",
        "Explanation: The unique elements are [1,3], and the sum is 4.",
        "Input: nums = [1,1,1,1,1]",
        "Output: 0",
        "Explanation: There are no unique elements, and the sum is 0.",
        "Input: nums = [1,2,3,4,5]",
        "Output: 15",
        "Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1001 <= nums[i] <= 100"
    ]
},
{
    "id": "144",
    "title": "Binary Tree Preorder Traversal",
    "question": "Given the root of a binary tree, return the preorder traversal of its nodes' values.\n   Follow up: Recursive solution is trivial, could you do it iteratively?",
    "examples": [
        "Input: root = [1,null,2,3]",
        "Output: [1,2,3]",
        "Input: root = []",
        "Output: []",
        "Input: root = [1]",
        "Output: [1]",
        "Input: root = [1,2]",
        "Output: [1,2]",
        "Input: root = [1,null,2]",
        "Output: [1,2]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 100].-100 <= Node. val <= 100"
    ]
},
{
    "id": "1752",
    "title": "Check if Array Is Sorted and Rotated",
    "question": "Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero).\n Otherwise, return false.\nThere may be duplicates in the original array.\nNote: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.\nlength], where % is the modulo operation.",
    "examples": [
        "Input: nums = [3,4,5,1,2]",
        "Output: true",
        "Explanation: [1,2,3,4,5] is the original sorted array.",
        "You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].",
        "Input: nums = [2,1,3,4]",
        "Output: false",
        "Explanation: There is no sorted array once rotated that can make nums.",
        "Input: nums = [1,2,3]",
        "Output: true",
        "Explanation: [1,2,3] is the original sorted array.",
        "You can rotate the array by x = 0 positions (i. e. no rotation) to make nums.",
        "Input: nums = [1,1,1]",
        "Output: true",
        "Explanation: [1,1,1] is the original sorted array.",
        "You can rotate any number of positions to make nums.",
        "Input: nums = [2,1]",
        "Output: true",
        "Explanation: [1,2] is the original sorted array.",
        "You can rotate the array by x = 5 positions to begin on the element of value 2: [2,1].",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1001 <= nums[i] <= 100"
    ]
},
{
    "id": "1758",
    "title": "Minimum Changes To Make Alternating Binary String",
    "question": "You are given a string s consisting only of the characters '0' and '1'.\n In one operation, you can change any '0' to '1' or vice versa.\nThe string is called alternating if no two adjacent characters are equal.\n For example, the string \"010\" is alternating, while the string \"0100\" is not.\nReturn the minimum number of operations needed to make s alternating.",
    "examples": [
        "Input: s = \"0100\"",
        "Output: 1",
        "Explanation: If you change the last character to '1', s will be \"0101\", which is alternating.",
        "Input: s = \"10\"",
        "Output: 0",
        "Explanation: s is already alternating.",
        "Input: s = \"1111\"",
        "Output: 2",
        "Explanation: You need two operations to reach \"0101\" or \"1010\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s[i] is either '0' or '1'."
    ]
},
{
    "id": "1763",
    "title": "Longest Nice Substring",
    "question": "A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase.\n For example, \"abABB\" is nice because 'A' and 'a' appear, and 'B' and 'b' appear.\n However, \"abA\" is not because 'b' appears, but 'B' does not.\nGiven a string s, return the longest substring of s that is nice.\n If there are multiple, return the substring of the earliest occurrence.\n If there are none, return an empty string.",
    "examples": [
        "Input: s = \"YazaAay\"",
        "Output: \"aAa\"",
        "Explanation: \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.",
        "\"aAa\" is the longest nice substring.",
        "Input: s = \"Bb\"",
        "Output: \"Bb\"",
        "Explanation: \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring. Input: s = \"c\"",
        "Output: \"\"",
        "Explanation: There are no nice substrings. Input: s = \"dDzeE\"",
        "Output: \"dD\"",
        "Explanation: Both \"dD\" and \"eE\" are the longest nice substrings.",
        "As there are multiple longest nice substrings, return \"dD\" since it occurs earlier."
    ],
    "constraints": [
        "1 <= s. length <= 100s consists of uppercase and lowercase English letters."
    ]
},
{
    "id": "1768",
    "title": "Merge Strings Alternately",
    "question": "You are given two strings word1 and word2.\n Merge the strings by adding letters in alternating order, starting with word1.\n If a string is longer than the other, append the additional letters onto the end of the merged string.\nReturn the merged string.",
    "examples": [
        "Input: word1 = \"abc\", word2 = \"pqr\"",
        "Output: \"apbqcr\"",
        "Explanation: The merged string will be merged as so:",
        "word1:  a   b   c",
        "word2:    p   q   r",
        "merged: a p b q c r",
        "Input: word1 = \"ab\", word2 = \"pqrs\"",
        "Output: \"apbqrs\"",
        "Explanation: Notice that as word2 is longer, \"rs\" is appended to the end.",
        "word1:  a   b ",
        "word2:    p   q   r   s",
        "merged: a p b q   r   s",
        "Input: word1 = \"abcd\", word2 = \"pq\"",
        "Output: \"apbqcd\"",
        "Explanation: Notice that as word1 is longer, \"cd\" is appended to the end.",
        "word1:  a   b   c   d",
        "word2:    p   q ",
        "merged: a p b q c   d",
        ""
    ],
    "constraints": [
        "1 <= word1. length",
        " word2. length <= 100word1 and word2 consist of lowercase English letters."
    ]
},
{
    "id": "1773",
    "title": "Count Items Matching a Rule",
    "question": "You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item.\n You are also given a rule represented by two strings, ruleKey and ruleValue.\nThe ith item is said to match the rule if one of the following is true:Return the number of items that match the given rule.",
    "examples": [
        "Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"",
        "Output: 1",
        "Explanation: There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"].",
        "Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"",
        "Output: 2",
        "Explanation: There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match."
    ],
    "constraints": [
        "ruleKey == \"type\" and ruleValue == typei. ruleKey == \"color\" and ruleValue == colori. ruleKey == \"name\" and ruleValue == namei. 1 <= items. length <= 1041 <= typei. length",
        " colori. length",
        " namei. length",
        " ruleValue. length <= 10ruleKey is equal to either \"type\"",
        " \"color\"",
        " or \"name\". All strings consist only of lowercase letters."
    ]
},
{
    "id": "1779",
    "title": "Find Nearest Point That Has the Same X or Y Coordinate",
    "question": "You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y).\n You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi).\n A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location.\n If there are multiple, return the valid point with the smallest index.\n If there are no valid points, return -1.\nThe Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).",
    "examples": [
        "Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]",
        "Output: 2",
        "Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2. Input: x = 3, y = 4, points = [[3,4]]",
        "Output: 0",
        "Explanation: The answer is allowed to be on the same location as your current location. Input: x = 3, y = 4, points = [[2,3]]",
        "Output: -1",
        "Explanation: There are no valid points."
    ],
    "constraints": [
        "1 <= points. length <= 104points[i]. length == 21 <= x",
        " y",
        " ai",
        " bi <= 104"
    ]
},
{
    "id": "1784",
    "title": "Check if Binary String Has at Most One Segment of Ones",
    "question": "Given a binary string s ​​​​​without leading zeros, return true​​​ if s contains at most one contiguous segment of ones.\n Otherwise, return false.",
    "examples": [
        "Input: s = \"1001\"",
        "Output: false",
        "Explanation: The ones do not form a contiguous segment.",
        "Input: s = \"110\"",
        "Output: true"
    ],
    "constraints": [
        "1 <= s. length <= 100s[i]​​​​ is either '0' or '1'. s[0] is '1'."
    ]
},
{
    "id": "1790",
    "title": "Check if One String Swap Can Make Strings Equal",
    "question": "You are given two strings s1 and s2 of equal length.\n A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\nReturn true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings.\n Otherwise, return false.",
    "examples": [
        "Input: s1 = \"bank\", s2 = \"kanb\"",
        "Output: true",
        "Explanation: For example, swap the first character with the last character of s2 to make \"bank\".",
        "Input: s1 = \"attack\", s2 = \"defend\"",
        "Output: false",
        "Explanation: It is impossible to make them equal with one string swap.",
        "Input: s1 = \"kelb\", s2 = \"kelb\"",
        "Output: true",
        "Explanation: The two strings are already equal, so no string swap operation is required.",
        "Input: s1 = \"abcd\", s2 = \"dcba\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= s1. length",
        " s2. length <= 100s1. length == s2. lengths1 and s2 consist of only lowercase English letters."
    ]
},
{
    "id": "1791",
    "title": "Find Center of Star Graph",
    "question": "There is an undirected star graph consisting of n nodes labeled from 1 to n.\n A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.\nYou are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi.\n Return the center of the given star graph.",
    "examples": [
        "Input: edges = [[1,2],[2,3],[4,2]]",
        "Output: 2",
        "Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.",
        "Input: edges = [[1,2],[5,1],[1,3],[1,4]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "3 <= n <= 105edges. length == n - 1edges[i]. length == 21 <= ui",
        " vi <= nui != viThe given edges represent a valid star graph."
    ]
},
{
    "id": "1796",
    "title": "Second Largest Digit in a String",
    "question": "Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.\nAn alphanumeric string is a string consisting of lowercase English letters and digits.",
    "examples": [
        "Input: s = \"dfa12321afd\"",
        "Output: 2",
        "Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.",
        "Input: s = \"abc1111\"",
        "Output: -1",
        "Explanation: The digits that appear in s are [1]. There is no second largest digit. ",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 500s consists of only lowercase English letters and/or digits."
    ]
},
{
    "id": "145",
    "title": "Binary Tree Postorder Traversal",
    "question": "Given the root of a binary tree, return the postorder traversal of its nodes' values.",
    "examples": [
        "Input: root = [1,null,2,3]",
        "Output: [3,2,1]",
        "Input: root = []",
        "Output: []",
        "Input: root = [1]",
        "Output: [1]",
        "Input: root = [1,2]",
        "Output: [2,1]",
        "Input: root = [1,null,2]",
        "Output: [2,1]",
        ""
    ],
    "constraints": [
        "The number of the nodes in the tree is in the range [0",
        " 100].-100 <= Node. val <= 100"
    ]
},
{
    "id": "1800",
    "title": "Maximum Ascending Subarray Sum",
    "question": "Given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.\nA subarray is defined as a contiguous sequence of numbers in an array.\nA subarray [numsl, numsl+1, .\n.\n.\n, numsr-1, numsr] is ascending if for all i where l <= i < r, numsi  < numsi+1.\n Note that a subarray of size 1 is ascending.",
    "examples": [
        "Input: nums = [10,20,30,5,10,50]",
        "Output: 65",
        "Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65.",
        "Input: nums = [10,20,30,40,50]",
        "Output: 150",
        "Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.",
        "Input: nums = [12,17,15,13,10,11,12]",
        "Output: 33",
        "Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.",
        "Input: nums = [100,10,1]",
        "Output: 100",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1001 <= nums[i] <= 100"
    ]
},
{
    "id": "1805",
    "title": "Number of Different Integers in a String",
    "question": "You are given a string word that consists of digits and lowercase English letters.\nYou will replace every non-digit character with a space.\n For example, \"a123bc34d8ef34\" will become \" 123  34 8  34\".\n Notice that you are left with some integers that are separated by at least one space: \"123\", \"34\", \"8\", and \"34\".\nReturn the number of different integers after performing the replacement operations on word.\nTwo integers are considered different if their decimal representations without any leading zeros are different.",
    "examples": [
        "Input: word = \"a123bc34d8ef34\"",
        "Output: 3",
        "Explanation: The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once.",
        "Input: word = \"leet1234code234\"",
        "Output: 2",
        "Input: word = \"a1b01c001\"",
        "Output: 1",
        "Explanation: The three integers \"1\", \"01\", and \"001\" all represent the same integer because",
        "the leading zeros are ignored when comparing their decimal values.",
        ""
    ],
    "constraints": [
        "1 <= word. length <= 1000word consists of digits and lowercase English letters."
    ]
},
{
    "id": "1812",
    "title": "Determine Color of a Chessboard Square",
    "question": "You are given coordinates, a string that represents the coordinates of a square of the chessboard.\n Below is a chessboard for your reference.\nReturn true if the square is white, and false if the square is black.\nThe coordinate will always represent a valid chessboard square.\n The coordinate will always have the letter first, and the number second.",
    "examples": [
        "Input: coordinates = \"a1\"",
        "Output: false",
        "Explanation: From the chessboard above, the square with coordinates \"a1\" is black, so return false.",
        "Input: coordinates = \"h3\"",
        "Output: true",
        "Explanation: From the chessboard above, the square with coordinates \"h3\" is white, so return true.",
        "Input: coordinates = \"c7\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "coordinates. length == 2'a' <= coordinates[0] <= 'h''1' <= coordinates[1] <= '8'"
    ]
},
{
    "id": "1816",
    "title": "Truncate Sentence",
    "question": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces.\n Each of the words consists of only uppercase and lowercase English letters (no punctuation).\nYou are given a sentence s​​​​​​ and an integer k​​​​​​.\n You want to truncate s​​​​​​ such that it contains only the first k​​​​​​ words.\n Return s​​​​​​ after truncating it.",
    "examples": [
        "Input: s = \"Hello how are you Contestant\", k = 4",
        "Output: \"Hello how are you\"",
        "Explanation:",
        "The words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].",
        "The first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].",
        "Hence, you should return \"Hello how are you\".",
        "Input: s = \"What is the solution to this problem\", k = 4",
        "Output: \"What is the solution\"",
        "Explanation:",
        "The words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].",
        "The first 4 words are [\"What\", \"is\", \"the\", \"solution\"].",
        "Hence, you should return \"What is the solution\". Input: s = \"chopper is not a tanuki\", k = 5",
        "Output: \"chopper is not a tanuki\"",
        ""
    ],
    "constraints": [
        "For example",
        " \"Hello World\"",
        " \"HELLO\"",
        " and \"hello world hello world\" are all sentences. 1 <= s. length <= 500k is in the range [1",
        " the number of words in s]. s consist of only lowercase and uppercase English letters and spaces. The words in s are separated by a single space. There are no leading or trailing spaces."
    ]
},
{
    "id": "1822",
    "title": "Sign of the Product of an Array",
    "question": "There is a function signFunc(x) that returns:You are given an integer array nums.\n Let product be the product of all values in the array nums.\nReturn signFunc(product).",
    "examples": [
        "Input: nums = [-1,-2,-3,-4,3,2,1]",
        "Output: 1",
        "Explanation: The product of all values in the array is 144, and signFunc(144) = 1",
        "Input: nums = [1,5,0,2,-3]",
        "Output: 0",
        "Explanation: The product of all values in the array is 0, and signFunc(0) = 0",
        "Input: nums = [-1,1,-1,1,-1]",
        "Output: -1",
        "Explanation: The product of all values in the array is -1, and signFunc(-1) = -1",
        ""
    ],
    "constraints": [
        "1 if x is positive.-1 if x is negative. 0 if x is equal to 0. 1 <= nums. length <= 1000-100 <= nums[i] <= 100"
    ]
},
{
    "id": "1827",
    "title": "Minimum Operations to Make the Array Increasing",
    "question": "You are given an integer array nums (0-indexed).\n In one operation, you can choose an element of the array and increment it by 1.\nReturn the minimum number of operations needed to make nums strictly increasing.\nAn array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.\nlength - 1.\n An array of length 1 is trivially strictly increasing.",
    "examples": [
        "Input: nums = [1,1,1]",
        "Output: 3",
        "Explanation: You can do the following operations:",
        "1) Increment nums[2], so nums becomes [1,1,2].",
        "2) Increment nums[1], so nums becomes [1,2,2].",
        "3) Increment nums[2], so nums becomes [1,2,3].",
        "Input: nums = [1,5,2,4,1]",
        "Output: 14",
        "Input: nums = [8]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "For example",
        " if nums = [1",
        "2",
        "3]",
        " you can choose to increment nums[1] to make nums = [1",
        "3",
        "3]. 1 <= nums. length <= 50001 <= nums[i] <= 104"
    ]
},
{
    "id": "1832",
    "title": "Check if the Sentence Is Pangram",
    "question": "A pangram is a sentence where every letter of the English alphabet appears at least once.\nGiven a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.",
    "examples": [
        "Input: sentence = \"thequickbrownfoxjumpsoverthelazydog\"",
        "Output: true",
        "Explanation: sentence contains at least one of every letter of the English alphabet.",
        "Input: sentence = \"leetcode\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= sentence. length <= 1000sentence consists of lowercase English letters."
    ]
},
{
    "id": "1837",
    "title": "Sum of Digits in Base K",
    "question": "Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.\nAfter converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.",
    "examples": [
        "Input: n = 34, k = 6",
        "Output: 9",
        "Explanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.",
        "Input: n = 10, k = 10",
        "Output: 1",
        "Explanation: n is already in base 10. 1 + 0 = 1.",
        ""
    ],
    "constraints": [
        "1 <= n <= 1002 <= k <= 10"
    ]
},
{
    "id": "1844",
    "title": "Replace All Digits with Characters",
    "question": "You are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.\nThere is a function shift(c, x), where c is a character and x is a digit, that returns the xth character after c.\nFor every odd index i, you want to replace the digit s[i] with shift(s[i-1], s[i]).\nReturn s after replacing all digits.\n It is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'.",
    "examples": [
        "Input: s = \"a1c1e1\"",
        "Output: \"abcdef\"",
        "Explanation: The digits are replaced as follows:",
        "- s[1] -> shift('a',1) = 'b'",
        "- s[3] -> shift('c',1) = 'd'",
        "- s[5] -> shift('e',1) = 'f'Input: s = \"a1b2c3d4e\"",
        "Output: \"abbdcfdhe\"",
        "Explanation: The digits are replaced as follows:",
        "- s[1] -> shift('a',1) = 'b'",
        "- s[3] -> shift('b',2) = 'd'",
        "- s[5] -> shift('c',3) = 'f'",
        "- s[7] -> shift('d',4) = 'h'"
    ],
    "constraints": [
        "For example",
        " shift('a'",
        " 5) = 'f' and shift('x'",
        " 0) = 'x'. 1 <= s. length <= 100s consists only of lowercase English letters and digits. shift(s[i-1]",
        " s[i]) <= 'z' for all odd indices i."
    ]
},
{
    "id": "1848",
    "title": "Minimum Distance to the Target Element",
    "question": "Given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized.\n Note that abs(x) is the absolute value of x.\nReturn abs(i - start).\nIt is guaranteed that target exists in nums.",
    "examples": [
        "Input: nums = [1,2,3,4,5], target = 5, start = 3",
        "Output: 1",
        "Explanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.",
        "Input: nums = [1], target = 1, start = 0",
        "Output: 0",
        "Explanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.",
        "Input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0",
        "Output: 0",
        "Explanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10001 <= nums[i] <= 1040 <= start < nums. lengthtarget is in nums."
    ]
},
{
    "id": "155",
    "title": "Min Stack",
    "question": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class:",
    "examples": [
        "Input",
        "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]",
        "[[],[-2],[0],[-3],[],[],[],[]]",
        "",
        "Output",
        "[null,null,null,null,-3,null,0,-2]",
        "",
        "Explanation",
        "MinStack minStack = new MinStack();",
        "minStack. push(-2);",
        "minStack. push(0);",
        "minStack. push(-3);",
        "minStack. getMin(); // return -3",
        "minStack. pop();",
        "minStack. top();    // return 0",
        "minStack. getMin(); // return -2",
        ""
    ],
    "constraints": [
        "MinStack() initializes the stack object. void push(val) pushes the element val onto the stack. void pop() removes the element on the top of the stack. int top() gets the top element of the stack. int getMin() retrieves the minimum element in the stack.-231 <= val <= 231 - 1Methods pop",
        " top and getMin operations will always be called on non-empty stacks. At most 3 * 104 calls will be made to push",
        " pop",
        " top",
        " and getMin."
    ]
},
{
    "id": "1854",
    "title": "Maximum Population Year",
    "question": "You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.\nThe population of some year x is the number of people alive during that year.\n The ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1].\n Note that the person is not counted in the year that they die.\nReturn the earliest year with the maximum population.",
    "examples": [
        "Input: logs = [[1993,1999],[2000,2010]]",
        "Output: 1993",
        "Explanation: The maximum population is 1, and 1993 is the earliest year with this population.",
        "Input: logs = [[1950,1961],[1960,1971],[1970,1981]]",
        "Output: 1960",
        "Explanation: ",
        "The maximum population is 2, and it had happened in years 1960 and 1970.",
        "The earlier year between them is 1960."
    ],
    "constraints": [
        "1 <= logs. length <= 1001950 <= birthi < deathi <= 2050"
    ]
},
{
    "id": "1859",
    "title": "Sorting the Sentence",
    "question": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces.\n Each word consists of lowercase and uppercase English letters.\nA sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\nGiven a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.",
    "examples": [
        "Input: s = \"is2 sentence4 This1 a3\"",
        "Output: \"This is a sentence\"",
        "Explanation: Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers.",
        "Input: s = \"Myself2 Me1 I4 and3\"",
        "Output: \"Me Myself and I\"",
        "Explanation: Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers.",
        ""
    ],
    "constraints": [
        "For example",
        " the sentence \"This is a sentence\" can be shuffled as \"sentence4 a3 is2 This1\" or \"is2 sentence4 This1 a3\". 2 <= s. length <= 200s consists of lowercase and uppercase English letters",
        " spaces",
        " and digits from 1 to 9. The number of words in s is between 1 and 9. The words in s are separated by a single space. s contains no leading or trailing spaces."
    ]
},
{
    "id": "1863",
    "title": "Sum of All Subset XOR Totals",
    "question": "The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.\nGiven an array nums, return the sum of all XOR totals for every subset of nums.\n Note: Subsets with the same elements should be counted multiple times.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.",
    "examples": [
        "Input: nums = [1,3]",
        "Output: 6",
        "Explanation: The 4 subsets of [1,3] are:",
        "- The empty subset has an XOR total of 0.",
        "- [1] has an XOR total of 1.",
        "- [3] has an XOR total of 3.",
        "- [1,3] has an XOR total of 1 XOR 3 = 2.",
        "0 + 1 + 3 + 2 = 6",
        "Input: nums = [5,1,6]",
        "Output: 28",
        "Explanation: The 8 subsets of [5,1,6] are:",
        "- The empty subset has an XOR total of 0.",
        "- [5] has an XOR total of 5.",
        "- [1] has an XOR total of 1.",
        "- [6] has an XOR total of 6.",
        "- [5,1] has an XOR total of 5 XOR 1 = 4.",
        "- [5,6] has an XOR total of 5 XOR 6 = 3.",
        "- [1,6] has an XOR total of 1 XOR 6 = 7.",
        "- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.",
        "0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28",
        "Input: nums = [3,4,5,6,7,8]",
        "Output: 480",
        "Explanation: The sum of all XOR totals for every subset is 480.",
        ""
    ],
    "constraints": [
        "For example",
        " the XOR total of the array [2",
        "5",
        "6] is 2 XOR 5 XOR 6 = 1. 1 <= nums. length <= 121 <= nums[i] <= 20"
    ]
},
{
    "id": "1869",
    "title": "Longer Contiguous Segments of Ones than Zeros",
    "question": "Given a binary string s, return true if the longest contiguous segment of 1s is strictly longer than the longest contiguous segment of 0s in s.\n Return false otherwise.\nNote that if there are no 0s, then the longest contiguous segment of 0s is considered to have length 0.\n The same applies if there are no 1s.",
    "examples": [
        "Input: s = \"1101\"",
        "Output: true",
        "Explanation:",
        "The longest contiguous segment of 1s has length 2: \"1101\"",
        "The longest contiguous segment of 0s has length 1: \"1101\"",
        "The segment of 1s is longer, so return true.",
        "Input: s = \"111000\"",
        "Output: false",
        "Explanation:",
        "The longest contiguous segment of 1s has length 3: \"111000\"",
        "The longest contiguous segment of 0s has length 3: \"111000\"",
        "The segment of 1s is not longer, so return false.",
        "Input: s = \"110100010\"",
        "Output: false",
        "Explanation:",
        "The longest contiguous segment of 1s has length 2: \"110100010\"",
        "The longest contiguous segment of 0s has length 3: \"110100010\"",
        "The segment of 1s is not longer, so return false.",
        ""
    ],
    "constraints": [
        "For example",
        " in s = \"110100010\" the longest contiguous segment of 1s has length 2",
        " and the longest contiguous segment of 0s has length 3. 1 <= s. length <= 100s[i] is either '0' or '1'."
    ]
},
{
    "id": "1876",
    "title": "Substrings of Size Three with Distinct Characters",
    "question": "A string is good if there are no repeated characters.\nGiven a string s​​​​​, return the number of good substrings of length three in s​​​​​​.\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\nA substring is a contiguous sequence of characters in a string.",
    "examples": [
        "Input: s = \"xyzzaz\"",
        "Output: 1",
        "Explanation: There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". ",
        "The only good substring of length 3 is \"xyz\".",
        "Input: s = \"aababcabc\"",
        "Output: 4",
        "Explanation: There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".",
        "The good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 100s​​​​​​ consists of lowercase English letters."
    ]
},
{
    "id": "1880",
    "title": "Check if Word Equals Summation of Two Words",
    "question": "The letter value of a letter is its position in the alphabet starting from 0 (i.\ne.\n 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.\n).\nThe numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer.\nYou are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters 'a' through 'j' inclusive.\nReturn true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, or false otherwise.",
    "examples": [
        "Input: firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\"",
        "Output: true",
        "Explanation:",
        "The numerical value of firstWord is \"acb\" -> \"021\" -> 21.",
        "The numerical value of secondWord is \"cba\" -> \"210\" -> 210.",
        "The numerical value of targetWord is \"cdb\" -> \"231\" -> 231.",
        "We return true because 21 + 210 == 231.",
        "Input: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\"",
        "Output: false",
        "Explanation: ",
        "The numerical value of firstWord is \"aaa\" -> \"000\" -> 0.",
        "The numerical value of secondWord is \"a\" -> \"0\" -> 0.",
        "The numerical value of targetWord is \"aab\" -> \"001\" -> 1.",
        "We return false because 0 + 0 != 1.",
        "Input: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\"",
        "Output: true",
        "Explanation: ",
        "The numerical value of firstWord is \"aaa\" -> \"000\" -> 0.",
        "The numerical value of secondWord is \"a\" -> \"0\" -> 0.",
        "The numerical value of targetWord is \"aaaa\" -> \"0000\" -> 0.",
        "We return true because 0 + 0 == 0.",
        ""
    ],
    "constraints": [
        "For example",
        " if s = \"acb\"",
        " we concatenate each letter's letter value",
        " resulting in \"021\". After converting it",
        " we get 21. 1 <= firstWord. length",
        " secondWord. length",
        " targetWord. length <= 8firstWord",
        " secondWord",
        " and targetWord consist of lowercase English letters from 'a' to 'j' inclusive."
    ]
},
{
    "id": "1886",
    "title": "Determine Whether Matrix Can Be Obtained By Rotation",
    "question": "Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.",
    "examples": [
        "Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]",
        "Output: true",
        "Explanation: We can rotate mat 90 degrees clockwise to make mat equal target.",
        "Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]",
        "Output: false",
        "Explanation: It is impossible to make mat equal to target by rotating mat.",
        "Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]",
        "Output: true",
        "Explanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.",
        ""
    ],
    "constraints": [
        "n == mat. length == target. lengthn == mat[i]. length == target[i]. length1 <= n <= 10mat[i][j] and target[i][j] are either 0 or 1."
    ]
},
{
    "id": "1893",
    "title": "Check if All the Integers in a Range Are Covered",
    "question": "You are given a 2D integer array ranges and two integers left and right.\n Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.\nReturn true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges.\n Return false otherwise.\nAn integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.",
    "examples": [
        "Input: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5",
        "Output: true",
        "Explanation: Every integer between 2 and 5 is covered:",
        "- 2 is covered by the first range.",
        "- 3 and 4 are covered by the second range.",
        "- 5 is covered by the third range.",
        "Input: ranges = [[1,10],[10,20]], left = 21, right = 21",
        "Output: false",
        "Explanation: 21 is not covered by any range.",
        ""
    ],
    "constraints": [
        "1 <= ranges. length <= 501 <= starti <= endi <= 501 <= left <= right <= 50"
    ]
},
{
    "id": "1897",
    "title": "Redistribute Characters to Make All Strings Equal",
    "question": "You are given an array of strings words (0-indexed).\nIn one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].\nReturn true if you can make every string in words equal using any number of operations, and false otherwise.",
    "examples": [
        "Input: words = [\"abc\",\"aabc\",\"bc\"]",
        "Output: true",
        "Explanation: Move the first 'a' in words[1] to the front of words[2],",
        "to make words[1] = \"abc\" and words[2] = \"abc\".",
        "All the strings are now equal to \"abc\", so return true.",
        "Input: words = [\"ab\",\"a\"]",
        "Output: false",
        "Explanation: It is impossible to make all the strings equal using the operation.",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 1001 <= words[i]. length <= 100words[i] consists of lowercase English letters."
    ]
},
{
    "id": "1903",
    "title": "Largest Odd Number in String",
    "question": "You are given a string num, representing a large integer.\n Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string \"\" if no odd integer exists.\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
        "Input: num = \"52\"",
        "Output: \"5\"",
        "Explanation: The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number.",
        "Input: num = \"4206\"",
        "Output: \"\"",
        "Explanation: There are no odd numbers in \"4206\".",
        "Input: num = \"35427\"",
        "Output: \"35427\"",
        "Explanation: \"35427\" is already an odd number.",
        ""
    ],
    "constraints": [
        "1 <= num. length <= 105num only consists of digits and does not contain any leading zeros."
    ]
},
{
    "id": "160",
    "title": "Intersection of Two Linked Lists",
    "question": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect.\n If the two linked lists have no intersection at all, return null.\nFor example, the following two linked lists begin to intersect at node c1:The test cases are generated such that there are no cycles anywhere in the entire linked structure.\nNote that the linked lists must retain their original structure after the function returns.\nCustom Judge:The inputs to the judge are given as follows (your program is not given these inputs):The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program.\n If you correctly return the intersected node, then your solution will be accepted.",
    "examples": [
        "Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3",
        "Output: Intersected at '8'",
        "Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).",
        "From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.",
        "Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1",
        "Output: Intersected at '2'",
        "Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).",
        "From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.",
        "Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2",
        "Output: No intersection",
        "Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.",
        "Explanation: The two lists do not intersect, so return null.",
        ""
    ],
    "constraints": [
        "intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node. listA - The first linked list. listB - The second linked list. skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node. skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node. The number of nodes of listA is in the m. The number of nodes of listB is in the n. 0 <= m",
        " n <= 3 * 1041 <= Node. val <= 1050 <= skipA <= m0 <= skipB <= nintersectVal is 0 if listA and listB do not intersect. intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect."
    ]
},
{
    "id": "1909",
    "title": "Remove One Element to Make the Array Strictly Increasing",
    "question": "Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise.\n If the array is already strictly increasing, return true.\nThe array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.\nlength).",
    "examples": [
        "Input: nums = [1,2,10,5,7]",
        "Output: true",
        "Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].",
        "[1,2,5,7] is strictly increasing, so return true.",
        "Input: nums = [2,3,1,2]",
        "Output: false",
        "Explanation:",
        "[3,1,2] is the result of removing the element at index 0.",
        "[2,1,2] is the result of removing the element at index 1.",
        "[2,3,2] is the result of removing the element at index 2.",
        "[2,3,1] is the result of removing the element at index 3.",
        "No resulting array is strictly increasing, so return false. Input: nums = [1,1,1]",
        "Output: false",
        "Explanation: The result of removing any element is [1,1].",
        "[1,1] is not strictly increasing, so return false.",
        "Input: nums = [1,2,3]",
        "Output: true",
        "Explanation: [1,2,3] is already strictly increasing, so return true.",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 10001 <= nums[i] <= 1000"
    ]
},
{
    "id": "1913",
    "title": "Maximum Product Difference Between Two Pairs",
    "question": "The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).\nGiven an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.\nReturn the maximum such product difference.",
    "examples": [
        "Input: nums = [5,6,2,7,4]",
        "Output: 34",
        "Explanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).",
        "The product difference is (6 * 7) - (2 * 4) = 34.",
        "Input: nums = [4,2,5,9,7,4,8]",
        "Output: 64",
        "Explanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).",
        "The product difference is (9 * 8) - (2 * 4) = 64.",
        ""
    ],
    "constraints": [
        "For example",
        " the product difference between (5",
        " 6) and (2",
        " 7) is (5 * 6) - (2 * 7) = 16. 4 <= nums. length <= 1041 <= nums[i] <= 104"
    ]
},
{
    "id": "1920",
    "title": "Build Array from Permutation",
    "question": "Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.\nlength and return it.\nA zero-based permutation nums is an array of distinct integers from 0 to nums.\nlength - 1 (inclusive).\n   Follow-up: Can you solve it without using an extra space (i.\ne.\n, O(1) memory)?",
    "examples": [
        "Input: nums = [0,2,1,5,3,4]",
        "Output: [0,1,2,4,5,3]",
        "Explanation: The array ans is built as follows: ",
        "ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]",
        "    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]",
        "    = [0,1,2,4,5,3]Input: nums = [5,0,1,2,3,4]",
        "Output: [4,5,0,1,2,3]",
        "Explanation: The array ans is built as follows:",
        "ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]",
        "    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]",
        "    = [4,5,0,1,2,3]"
    ],
    "constraints": [
        "1 <= nums. length <= 10000 <= nums[i] < nums. lengthThe elements in nums are distinct."
    ]
},
{
    "id": "1925",
    "title": "Count Square Sum Triples",
    "question": "A square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.\nGiven an integer n, return the number of square triples such that 1 <= a, b, c <= n.",
    "examples": [
        "Input: n = 5",
        "Output: 2",
        "Explanation: The square triples are (3,4,5) and (4,3,5).",
        "Input: n = 10",
        "Output: 4",
        "Explanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).",
        ""
    ],
    "constraints": [
        "1 <= n <= 250"
    ]
},
{
    "id": "1929",
    "title": "Concatenation of Array",
    "question": "Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).\nSpecifically, ans is the concatenation of two nums arrays.\nReturn the array ans.",
    "examples": [
        "Input: nums = [1,2,1]",
        "Output: [1,2,1,1,2,1]",
        "Explanation: The array ans is formed as follows:",
        "- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]",
        "- ans = [1,2,1,1,2,1]Input: nums = [1,3,2,1]",
        "Output: [1,3,2,1,1,3,2,1]",
        "Explanation: The array ans is formed as follows:",
        "- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]",
        "- ans = [1,3,2,1,1,3,2,1]",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 10001 <= nums[i] <= 1000"
    ]
},
{
    "id": "1935",
    "title": "Maximum Number of Words You Can Type",
    "question": "There is a malfunctioning keyboard where some letter keys do not work.\n All other keys on the keyboard work properly.\nGiven a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.",
    "examples": [
        "Input: text = \"hello world\", brokenLetters = \"ad\"",
        "Output: 1",
        "Explanation: We cannot type \"world\" because the 'd' key is broken.",
        "Input: text = \"leet code\", brokenLetters = \"lt\"",
        "Output: 1",
        "Explanation: We cannot type \"leet\" because the 'l' and 't' keys are broken.",
        "Input: text = \"leet code\", brokenLetters = \"e\"",
        "Output: 0",
        "Explanation: We cannot type either word because the 'e' key is broken.",
        ""
    ],
    "constraints": [
        "1 <= text. length <= 1040 <= brokenLetters. length <= 26text consists of words separated by a single space without any leading or trailing spaces. Each word only consists of lowercase English letters. brokenLetters consists of distinct lowercase English letters."
    ]
},
{
    "id": "1941",
    "title": "Check if All Characters Have Equal Number of Occurrences",
    "question": "Given a string s, return true if s is a good string, or false otherwise.\nA string s is good if all the characters that appear in s have the same number of occurrences (i.\ne.\n, the same frequency).",
    "examples": [
        "Input: s = \"abacbc\"",
        "Output: true",
        "Explanation: The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.",
        "Input: s = \"aaabb\"",
        "Output: false",
        "Explanation: The characters that appear in s are 'a' and 'b'.",
        "'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s consists of lowercase English letters."
    ]
},
{
    "id": "1945",
    "title": "Sum of Digits of String After Convert",
    "question": "You are given a string s consisting of lowercase English letters, and an integer k.\nFirst, convert s into an integer by replacing each letter with its position in the alphabet (i.\ne.\n, replace 'a' with 1, 'b' with 2, .\n.\n.\n, 'z' with 26).\n Then, transform the integer by replacing it with the sum of its digits.\n Repeat the transform operation k times in total.\nFor example, if s = \"zbax\" and k = 2, then the resulting integer would be 8 by the following operations:Return the resulting integer after performing the operations described above.",
    "examples": [
        "Input: s = \"iiii\", k = 1",
        "Output: 36",
        "Explanation: The operations are as follows:",
        "- Convert: \"iiii\" ➝ \"(9)(9)(9)(9)\" ➝ \"9999\" ➝ 9999",
        "- Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36",
        "Thus the resulting integer is 36.",
        "Input: s = \"leetcode\", k = 2",
        "Output: 6",
        "Explanation: The operations are as follows:",
        "- Convert: \"leetcode\" ➝ \"(12)(5)(5)(20)(3)(15)(4)(5)\" ➝ \"12552031545\" ➝ 12552031545",
        "- Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33",
        "- Transform #2: 33 ➝ 3 + 3 ➝ 6",
        "Thus the resulting integer is 6.",
        "Input: s = \"zbax\", k = 2",
        "Output: 8",
        ""
    ],
    "constraints": [
        "Convert: \"zbax\" ➝ \"(26)(2)(1)(24)\" ➝ \"262124\" ➝ 262124Transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17Transform #2: 17 ➝ 1 + 7 ➝ 81 <= s. length <= 1001 <= k <= 10s consists of lowercase English letters."
    ]
},
{
    "id": "1952",
    "title": "Three Divisors",
    "question": "Given an integer n, return true if n has exactly three positive divisors.\n Otherwise, return false.\nAn integer m is a divisor of n if there exists an integer k such that n = k * m.",
    "examples": [
        "Input: n = 2",
        "Output: false",
        "Explantion: 2 has only two divisors: 1 and 2.",
        "Input: n = 4",
        "Output: true",
        "Explantion: 4 has three divisors: 1, 2, and 4.",
        ""
    ],
    "constraints": [
        "1 <= n <= 104"
    ]
},
{
    "id": "1957",
    "title": "Delete Characters to Make Fancy String",
    "question": "A fancy string is a string where no three consecutive characters are equal.\nGiven a string s, delete the minimum possible number of characters from s to make it fancy.\nReturn the final string after the deletion.\n It can be shown that the answer will always be unique.",
    "examples": [
        "Input: s = \"leeetcode\"",
        "Output: \"leetcode\"",
        "Explanation:",
        "Remove an 'e' from the first group of 'e's to create \"leetcode\".",
        "No three consecutive characters are equal, so return \"leetcode\".",
        "Input: s = \"aaabaaaa\"",
        "Output: \"aabaa\"",
        "Explanation:",
        "Remove an 'a' from the first group of 'a's to create \"aabaaaa\".",
        "Remove two 'a's from the second group of 'a's to create \"aabaa\".",
        "No three consecutive characters are equal, so return \"aabaa\".",
        "Input: s = \"aab\"",
        "Output: \"aab\"",
        "Explanation: No three consecutive characters are equal, so return \"aab\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s consists only of lowercase English letters."
    ]
},
{
    "id": "167",
    "title": "Two Sum II - Input array is sorted",
    "question": "Given an array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number.\nReturn the indices of the two numbers (1-indexed) as an integer array answer of size 2, where 1 <= answer[0] < answer[1] <= numbers.\nlength.\nThe tests are generated such that there is exactly one solution.\n You may not use the same element twice.",
    "examples": [
        "Input: numbers = [2,7,11,15], target = 9",
        "Output: [1,2]",
        "Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.",
        "Input: numbers = [2,3,4], target = 6",
        "Output: [1,3]",
        "Input: numbers = [-1,0], target = -1",
        "Output: [1,2]",
        ""
    ],
    "constraints": [
        "2 <= numbers. length <= 3 * 104-1000 <= numbers[i] <= 1000numbers is sorted in non-decreasing order.-1000 <= target <= 1000The tests are generated such that there is exactly one solution."
    ]
},
{
    "id": "1961",
    "title": "Check If String Is a Prefix of Array",
    "question": "Given a string s and an array of strings words, determine whether s is a prefix string of words.\nA string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words.\nlength.\nReturn true if s is a prefix string of words, or false otherwise.",
    "examples": [
        "Input: s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]",
        "Output: true",
        "Explanation:",
        "s can be made by concatenating \"i\", \"love\", and \"leetcode\" together.",
        "Input: s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]",
        "Output: false",
        "Explanation:",
        "It is impossible to make s using a prefix of arr."
    ],
    "constraints": [
        "1 <= words. length <= 1001 <= words[i]. length <= 201 <= s. length <= 1000words[i] and s consist of only lowercase English letters."
    ]
},
{
    "id": "1967",
    "title": "Number of Strings That Appear as Substrings in Word",
    "question": "Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
        "Input: patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"",
        "Output: 3",
        "Explanation:",
        "- \"a\" appears as a substring in \"abc\".",
        "- \"abc\" appears as a substring in \"abc\".",
        "- \"bc\" appears as a substring in \"abc\".",
        "- \"d\" does not appear as a substring in \"abc\".",
        "3 of the strings in patterns appear as a substring in word.",
        "Input: patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"",
        "Output: 2",
        "Explanation:",
        "- \"a\" appears as a substring in \"aaaaabbbbb\".",
        "- \"b\" appears as a substring in \"aaaaabbbbb\".",
        "- \"c\" does not appear as a substring in \"aaaaabbbbb\".",
        "2 of the strings in patterns appear as a substring in word.",
        "Input: patterns = [\"a\",\"a\",\"a\"], word = \"ab\"",
        "Output: 3",
        "Explanation: Each of the patterns appears as a substring in word \"ab\".",
        ""
    ],
    "constraints": [
        "1 <= patterns. length <= 1001 <= patterns[i]. length <= 1001 <= word. length <= 100patterns[i] and word consist of lowercase English letters."
    ]
},
{
    "id": "1971",
    "title": "Find if Path Exists in Graph",
    "question": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive).\n The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi.\n Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nYou want to determine if there is a valid path that exists from vertex start to vertex end.\nGiven edges and the integers n, start, and end, return true if there is a valid path from start to end, or false otherwise.",
    "examples": [
        "Input: n = 3, edges = [[0,1],[1,2],[2,0]], start = 0, end = 2",
        "Output: true",
        "Explanation: There are two paths from vertex 0 to vertex 2:",
        "- 0 → 1 → 2",
        "- 0 → 2",
        "Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], start = 0, end = 5",
        "Output: false",
        "Explanation: There is no path from vertex 0 to vertex 5.",
        ""
    ],
    "constraints": [
        "1 <= n <= 2 * 1050 <= edges. length <= 2 * 105edges[i]. length == 21 <= ui",
        " vi <= n - 1ui != vi1 <= start",
        " end <= n - 1There are no duplicate edges. There are no self edges."
    ]
},
{
    "id": "1974",
    "title": "Minimum Time to Type Word Using Special Typewriter",
    "question": "There is a special typewriter with lowercase English letters 'a' to 'z' arranged in a circle with a pointer.\n A character can only be typed if the pointer is pointing to that character.\n The pointer is initially pointing to the character 'a'.\nEach second, you may perform one of the following operations:Given a string word, return the minimum number of seconds to type out the characters in word.",
    "examples": [
        "Input: word = \"abc\"",
        "Output: 5",
        "Explanation: ",
        "The characters are printed as follows:",
        "- Type the character 'a' in 1 second since the pointer is initially on 'a'.",
        "- Move the pointer clockwise to 'b' in 1 second.",
        "- Type the character 'b' in 1 second.",
        "- Move the pointer clockwise to 'c' in 1 second.",
        "- Type the character 'c' in 1 second.",
        "Input: word = \"bza\"",
        "Output: 7",
        "Explanation:",
        "The characters are printed as follows:",
        "- Move the pointer clockwise to 'b' in 1 second.",
        "- Type the character 'b' in 1 second.",
        "- Move the pointer counterclockwise to 'z' in 2 seconds.",
        "- Type the character 'z' in 1 second.",
        "- Move the pointer clockwise to 'a' in 1 second.",
        "- Type the character 'a' in 1 second.",
        "Input: word = \"zjpc\"",
        "Output: 34",
        "Explanation:",
        "The characters are printed as follows:",
        "- Move the pointer counterclockwise to 'z' in 1 second.",
        "- Type the character 'z' in 1 second.",
        "- Move the pointer clockwise to 'j' in 10 seconds.",
        "- Type the character 'j' in 1 second.",
        "- Move the pointer clockwise to 'p' in 6 seconds.",
        "- Type the character 'p' in 1 second.",
        "- Move the pointer counterclockwise to 'c' in 13 seconds.",
        "- Type the character 'c' in 1 second.",
        ""
    ],
    "constraints": [
        "Move the pointer one character counterclockwise or clockwise. Type the character the pointer is currently on. 1 <= word. length <= 100word consists of lowercase English letters."
    ]
},
{
    "id": "1979",
    "title": "Find Greatest Common Divisor of Array",
    "question": "Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.\nThe greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.",
    "examples": [
        "Input: nums = [2,5,6,9,10]",
        "Output: 2",
        "Explanation:",
        "The smallest number in nums is 2.",
        "The largest number in nums is 10.",
        "The greatest common divisor of 2 and 10 is 2.",
        "Input: nums = [7,5,6,8,3]",
        "Output: 1",
        "Explanation:",
        "The smallest number in nums is 3.",
        "The largest number in nums is 8.",
        "The greatest common divisor of 3 and 8 is 1.",
        "Input: nums = [3,3]",
        "Output: 3",
        "Explanation:",
        "The smallest number in nums is 3.",
        "The largest number in nums is 3.",
        "The greatest common divisor of 3 and 3 is 3.",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 10001 <= nums[i] <= 1000"
    ]
},
{
    "id": "2",
    "title": "Add Two Numbers",
    "question": "You are given two non-empty linked lists representing two non-negative integers.\n The digits are stored in reverse order, and each of their nodes contains a single digit.\n Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
    "examples": [
        "Input: l1 = [2,4,3], l2 = [5,6,4]",
        "Output: [7,0,8]",
        "Explanation: 342 + 465 = 807.",
        "Input: l1 = [0], l2 = [0]",
        "Output: [0]",
        "Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        "Output: [8,9,9,9,0,0,0,1]",
        ""
    ],
    "constraints": [
        "The number of nodes in each linked list is in the range [1",
        " 100]. 0 <= Node. val <= 9It is guaranteed that the list represents a number that does not have leading zeros."
    ]
},
{
    "id": "3",
    "title": "Longest Substring Without Repeating Characters",
    "question": "Given a string s, find the length of the longest substring without repeating characters.",
    "examples": [
        "Input: s = \"abcabcbb\"",
        "Output: 3",
        "Explanation: The answer is \"abc\", with the length of 3.",
        "Input: s = \"bbbbb\"",
        "Output: 1",
        "Explanation: The answer is \"b\", with the length of 1.",
        "Input: s = \"pwwkew\"",
        "Output: 3",
        "Explanation: The answer is \"wke\", with the length of 3.",
        "Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.",
        "Input: s = \"\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 <= s. length <= 5 * 104s consists of English letters",
        " digits",
        " symbols and spaces."
    ]
},
{
    "id": "5",
    "title": "Longest Palindromic Substring",
    "question": "Given a string s, return the longest palindromic substring in s.",
    "examples": [
        "Input: s = \"babad\"",
        "Output: \"bab\"",
        "Note: \"aba\" is also a valid answer.",
        "Input: s = \"cbbd\"",
        "Output: \"bb\"",
        "Input: s = \"a\"",
        "Output: \"a\"",
        "Input: s = \"ac\"",
        "Output: \"a\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s consist of only digits and English letters."
    ]
},
{
    "id": "6",
    "title": "ZigZag Conversion",
    "question": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)And then read line by line: \"PAHNAPLSIIGYIR\"Write the code that will take a string and make this conversion given a number of rows:",
    "examples": [
        "P   A   H   N",
        "A P L S I I G",
        "Y   I   R",
        "string convert(string s, int numRows);",
        "Input: s = \"PAYPALISHIRING\", numRows = 3",
        "Output: \"PAHNAPLSIIGYIR\"",
        "Input: s = \"PAYPALISHIRING\", numRows = 4",
        "Output: \"PINALSIGYAHRPI\"",
        "Explanation:",
        "P     I    N",
        "A   L S  I G",
        "Y A   H R",
        "P     I",
        "Input: s = \"A\", numRows = 1",
        "Output: \"A\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s consists of English letters (lower-case and upper-case)",
        " '",
        "' and '.'. 1 <= numRows <= 1000"
    ]
},
{
    "id": "8",
    "title": "String to Integer (atoi)",
    "question": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\nThe algorithm for myAtoi(string s) is as follows:Note:",
    "examples": [
        "Input: s = \"42\"",
        "Output: 42",
        "Explanation: The underlined characters are what is read in, the caret is the current reader position.",
        "Step 1: \"42\" (no characters read because there is no leading whitespace)",
        "         ^",
        "Step 2: \"42\" (no characters read because there is neither a '-' nor '+')",
        "         ^",
        "Step 3: \"42\" (\"42\" is read in)",
        "           ^",
        "The parsed integer is 42.",
        "Since 42 is in the range [-231, 231 - 1], the final result is 42.",
        "Input: s = \"   -42\"",
        "Output: -42",
        "Explanation:",
        "Step 1: \"   -42\" (leading whitespace is read and ignored)",
        "            ^",
        "Step 2: \"   -42\" ('-' is read, so the result should be negative)",
        "             ^",
        "Step 3: \"   -42\" (\"42\" is read in)",
        "               ^",
        "The parsed integer is -42.",
        "Since -42 is in the range [-231, 231 - 1], the final result is -42.",
        "Input: s = \"4193 with words\"",
        "Output: 4193",
        "Explanation:",
        "Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)",
        "         ^",
        "Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')",
        "         ^",
        "Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)",
        "             ^",
        "The parsed integer is 4193.",
        "Since 4193 is in the range [-231, 231 - 1], the final result is 4193.",
        "Input: s = \"words and 987\"",
        "Output: 0",
        "Explanation:",
        "Step 1: \"words and 987\" (no characters read because there is no leading whitespace)",
        "         ^",
        "Step 2: \"words and 987\" (no characters read because there is neither a '-' nor '+')",
        "         ^",
        "Step 3: \"words and 987\" (reading stops immediately because there is a non-digit 'w')",
        "         ^",
        "The parsed integer is 0 because no digits were read.",
        "Since 0 is in the range [-231, 231 - 1], the final result is 0.",
        "Input: s = \"-91283472332\"",
        "Output: -2147483648",
        "Explanation:",
        "Step 1: \"-91283472332\" (no characters read because there is no leading whitespace)",
        "         ^",
        "Step 2: \"-91283472332\" ('-' is read, so the result should be negative)",
        "          ^",
        "Step 3: \"-91283472332\" (\"91283472332\" is read in)",
        "                     ^",
        "The parsed integer is -91283472332.",
        "Since -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is clamped to -231 = -2147483648. ",
        ""
    ],
    "constraints": [
        "Only the space character ' ' is considered a whitespace character. Do not ignore any characters other than the leading whitespace or the rest of the string after the digits. 0 <= s. length <= 200s consists of English letters (lower-case and upper-case)",
        " digits (0-9)",
        " ' '",
        " '+'",
        " '-'",
        " and '.'."
    ]
},
{
    "id": "168",
    "title": "Excel Sheet Column Title",
    "question": "Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\nFor example:",
    "examples": [
        "A -> 1",
        "B -> 2",
        "C -> 3",
        "...",
        "Z -> 26",
        "AA -> 27",
        "AB -> 28 ",
        "...",
        "Input: columnNumber = 1",
        "Output: \"A\"",
        "Input: columnNumber = 28",
        "Output: \"AB\"",
        "Input: columnNumber = 701",
        "Output: \"ZY\"",
        "Input: columnNumber = 2147483647",
        "Output: \"FXSHRXW\"",
        ""
    ],
    "constraints": [
        "1 <= columnNumber <= 231 - 1"
    ]
},
{
    "id": "11",
    "title": "Container With Most Water",
    "question": "Given n non-negative integers a1, a2, .\n.\n.\n, an , where each represents a point at coordinate (i, ai).\n n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0).\n Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\nNotice that you may not slant the container.",
    "examples": [
        "Input: height = [1,8,6,2,5,4,8,3,7]",
        "Output: 49",
        "Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.",
        "Input: height = [1,1]",
        "Output: 1",
        "Input: height = [4,3,2,1,4]",
        "Output: 16",
        "Input: height = [1,2,1]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "n == height. length2 <= n <= 1050 <= height[i] <= 104"
    ]
},
{
    "id": "12",
    "title": "Integer to Roman",
    "question": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nFor example, 2 is written as II in Roman numeral, just two one's added together.\n 12 is written as XII, which is simply X + II.\n The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right.\n However, the numeral for four is not IIII.\n Instead, the number four is written as IV.\n Because the one is before the five we subtract it making four.\n The same principle applies to the number nine, which is written as IX.\n There are six instances where subtraction is used:Given an integer, convert it to a roman numeral.",
    "examples": [
        "Symbol       Value",
        "I             1",
        "V             5",
        "X             10",
        "L             50",
        "C             100",
        "D             500",
        "M             1000Input: num = 3",
        "Output: \"III\"",
        "Input: num = 4",
        "Output: \"IV\"",
        "Input: num = 9",
        "Output: \"IX\"",
        "Input: num = 58",
        "Output: \"LVIII\"",
        "Explanation: L = 50, V = 5, III = 3.",
        "Input: num = 1994",
        "Output: \"MCMXCIV\"",
        "Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.",
        ""
    ],
    "constraints": [
        "I can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900. 1 <= num <= 3999"
    ]
},
{
    "id": "15",
    "title": "3Sum",
    "question": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.",
    "examples": [
        "Input: nums = [-1,0,1,2,-1,-4]",
        "Output: [[-1,-1,2],[-1,0,1]]",
        "Input: nums = []",
        "Output: []",
        "Input: nums = [0]",
        "Output: []",
        ""
    ],
    "constraints": [
        "0 <= nums. length <= 3000-105 <= nums[i] <= 105"
    ]
},
{
    "id": "16",
    "title": "3Sum Closest",
    "question": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.",
    "examples": [
        "Input: nums = [-1,2,1,-4], target = 1",
        "Output: 2",
        "Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).",
        "Input: nums = [0,0,0], target = 1",
        "Output: 0",
        ""
    ],
    "constraints": [
        "3 <= nums. length <= 1000-1000 <= nums[i] <= 1000-104 <= target <= 104"
    ]
},
{
    "id": "17",
    "title": "Letter Combinations of a Phone Number",
    "question": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n Return the answer in any order.\nA mapping of digit to letters (just like on the telephone buttons) is given below.\n Note that 1 does not map to any letters.",
    "examples": [
        "Input: digits = \"23\"",
        "Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]",
        "Input: digits = \"\"",
        "Output: []",
        "Input: digits = \"2\"",
        "Output: [\"a\",\"b\",\"c\"]",
        ""
    ],
    "constraints": [
        "0 <= digits. length <= 4digits[i] is a digit in the range ['2'",
        " '9']."
    ]
},
{
    "id": "18",
    "title": "4Sum",
    "question": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:You may return the answer in any order.",
    "examples": [
        "Input: nums = [1,0,-1,0,-2,2], target = 0",
        "Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
        "Input: nums = [2,2,2,2,2], target = 8",
        "Output: [[2,2,2,2]]",
        ""
    ],
    "constraints": [
        "0 <= a",
        " b",
        " c",
        " d < na",
        " b",
        " c",
        " and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target1 <= nums. length <= 200-109 <= nums[i] <= 109-109 <= target <= 109"
    ]
},
{
    "id": "19",
    "title": "Remove Nth Node From End of List",
    "question": "Given the head of a linked list, remove the nth node from the end of the list and return its head.\n   Follow up: Could you do this in one pass?",
    "examples": [
        "Input: head = [1,2,3,4,5], n = 2",
        "Output: [1,2,3,5]",
        "Input: head = [1], n = 1",
        "Output: []",
        "Input: head = [1,2], n = 1",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is sz. 1 <= sz <= 300 <= Node. val <= 1001 <= n <= sz"
    ]
},
{
    "id": "22",
    "title": "Generate Parentheses",
    "question": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
    "examples": [
        "Input: n = 3",
        "Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
        "Input: n = 1",
        "Output: [\"()\"]",
        ""
    ],
    "constraints": [
        "1 <= n <= 8"
    ]
},
{
    "id": "24",
    "title": "Swap Nodes in Pairs",
    "question": "Given a linked list, swap every two adjacent nodes and return its head.\n You must solve the problem without modifying the values in the list's nodes (i.\ne.\n, only nodes themselves may be changed.\n)",
    "examples": [
        "Input: head = [1,2,3,4]",
        "Output: [2,1,4,3]",
        "Input: head = []",
        "Output: []",
        "Input: head = [1]",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [0",
        " 100]. 0 <= Node. val <= 100"
    ]
},
{
    "id": "29",
    "title": "Divide Two Integers",
    "question": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nReturn the quotient after dividing dividend by divisor.\nThe integer division should truncate toward zero, which means losing its fractional part.\n For example, truncate(8.\n345) = 8 and truncate(-2.\n7335) = -2.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1].\n For this problem, assume that your function returns 231 − 1 when the division result overflows.",
    "examples": [
        "Input: dividend = 10, divisor = 3",
        "Output: 3",
        "Explanation: 10/3 = truncate(3. 33333..) = 3.",
        "Input: dividend = 7, divisor = -3",
        "Output: -2",
        "Explanation: 7/-3 = truncate(-2. 33333..) = -2.",
        "Input: dividend = 0, divisor = 1",
        "Output: 0",
        "Input: dividend = 1, divisor = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "-231 <= dividend",
        " divisor <= 231 - 1divisor != 0"
    ]
},
{
    "id": "14",
    "title": "Longest Common Prefix",
    "question": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".",
    "examples": [
        "Input: strs = [\"flower\",\"flow\",\"flight\"]",
        "Output: \"fl\"",
        "Input: strs = [\"dog\",\"racecar\",\"car\"]",
        "Output: \"\"",
        "Explanation: There is no common prefix among the input strings.",
        ""
    ],
    "constraints": [
        "1 <= strs. length <= 2000 <= strs[i]. length <= 200strs[i] consists of only lower-case English letters."
    ]
},
{
    "id": "169",
    "title": "Majority Element",
    "question": "Given an array nums of size n, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times.\n You may assume that the majority element always exists in the array.",
    "examples": [
        "Input: nums = [3,2,3]",
        "Output: 3",
        "Input: nums = [2,2,1,1,1,2,2]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 5 * 104-231 <= nums[i] <= 231 - 1"
    ]
},
{
    "id": "31",
    "title": "Next Permutation",
    "question": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.\ne.\n, sorted in ascending order).\nThe replacement must be in place and use only constant extra memory.",
    "examples": [
        "Input: nums = [1,2,3]",
        "Output: [1,3,2]",
        "Input: nums = [3,2,1]",
        "Output: [1,2,3]",
        "Input: nums = [1,1,5]",
        "Output: [1,5,1]",
        "Input: nums = [1]",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1000 <= nums[i] <= 100"
    ]
},
{
    "id": "33",
    "title": "Search in Rotated Sorted Array",
    "question": "There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.\nlength) such that the resulting array is [nums[k], nums[k+1], .\n.\n.\n, nums[n-1], nums[0], nums[1], .\n.\n.\n, nums[k-1]] (0-indexed).\n For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.",
    "examples": [
        "Input: nums = [4,5,6,7,0,1,2], target = 0",
        "Output: 4",
        "Input: nums = [4,5,6,7,0,1,2], target = 3",
        "Output: -1",
        "Input: nums = [1], target = 0",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5000-104 <= nums[i] <= 104All values of nums are unique. nums is guaranteed to be rotated at some pivot.-104 <= target <= 104"
    ]
},
{
    "id": "34",
    "title": "Find First and Last Position of Element in Sorted Array",
    "question": "Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.",
    "examples": [
        "Input: nums = [5,7,7,8,8,10], target = 8",
        "Output: [3,4]",
        "Input: nums = [5,7,7,8,8,10], target = 6",
        "Output: [-1,-1]",
        "Input: nums = [], target = 0",
        "Output: [-1,-1]",
        ""
    ],
    "constraints": [
        "0 <= nums. length <= 105-109 <= nums[i] <= 109nums is a non-decreasing array.-109 <= target <= 109"
    ]
},
{
    "id": "36",
    "title": "Valid Sudoku",
    "question": "Determine if a 9 x 9 Sudoku board is valid.\n Only the filled cells need to be validated according to the following rules:Note:",
    "examples": [
        "Input: board = ",
        "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]",
        ",[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]",
        ",[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]",
        ",[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]",
        ",[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]",
        ",[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]",
        ",[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]",
        ",[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]",
        ",[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "Output: true",
        "Input: board = ",
        "[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]",
        ",[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]",
        ",[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]",
        ",[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]",
        ",[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]",
        ",[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]",
        ",[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]",
        ",[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]",
        ",[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "Output: false",
        "Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.",
        ""
    ],
    "constraints": [
        "A Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated according to the mentioned rules. board. length == 9board[i]. length == 9board[i][j] is a digit 1-9 or '.'."
    ]
},
{
    "id": "38",
    "title": "Count and Say",
    "question": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:To determine how you \"say\" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character.\n Then for each group, say the number of characters, then say the character.\n To convert the saying into a digit string, replace the counts with a number and concatenate every saying.\nFor example, the saying and conversion for digit string \"3322251\":Given a positive integer n, return the nth term of the count-and-say sequence.",
    "examples": [
        "Input: n = 1",
        "Output: \"1\"",
        "Explanation: This is the base case.",
        "Input: n = 4",
        "Output: \"1211\"",
        "Explanation:",
        "countAndSay(1) = \"1\"",
        "countAndSay(2) = say \"1\" = one 1 = \"11\"",
        "countAndSay(3) = say \"11\" = two 1's = \"21\"",
        "countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"",
        ""
    ],
    "constraints": [
        "countAndSay(1) = \"1\"countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1)",
        " which is then converted into a different digit string. 1 <= n <= 30"
    ]
},
{
    "id": "39",
    "title": "Combination Sum",
    "question": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target.\n You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times.\n Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.",
    "examples": [
        "Input: candidates = [2,3,6,7], target = 7",
        "Output: [[2,2,3],[7]]",
        "Explanation:",
        "2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.",
        "7 is a candidate, and 7 = 7.",
        "These are the only two combinations.",
        "Input: candidates = [2,3,5], target = 8",
        "Output: [[2,2,2,2],[2,3,3],[3,5]]",
        "Input: candidates = [2], target = 1",
        "Output: []",
        "Input: candidates = [1], target = 1",
        "Output: [[1]]",
        "Input: candidates = [1], target = 2",
        "Output: [[1,1]]",
        ""
    ],
    "constraints": [
        "1 <= candidates. length <= 301 <= candidates[i] <= 200All elements of candidates are distinct. 1 <= target <= 500"
    ]
},
{
    "id": "40",
    "title": "Combination Sum II",
    "question": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\nEach number in candidates may only be used once in the combination.\nNote: The solution set must not contain duplicate combinations.",
    "examples": [
        "Input: candidates = [10,1,2,7,6,1,5], target = 8",
        "Output: ",
        "[",
        "[1,1,6],",
        "[1,2,5],",
        "[1,7],",
        "[2,6]",
        "]",
        "Input: candidates = [2,5,2,1,2], target = 5",
        "Output: ",
        "[",
        "[1,2,2],",
        "[5]",
        "]",
        ""
    ],
    "constraints": [
        "1 <= candidates. length <= 1001 <= candidates[i] <= 501 <= target <= 30"
    ]
},
{
    "id": "43",
    "title": "Multiply Strings",
    "question": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.",
    "examples": [
        "Input: num1 = \"2\", num2 = \"3\"",
        "Output: \"6\"",
        "Input: num1 = \"123\", num2 = \"456\"",
        "Output: \"56088\"",
        ""
    ],
    "constraints": [
        "1 <= num1. length",
        " num2. length <= 200num1 and num2 consist of digits only. Both num1 and num2 do not contain any leading zero",
        " except the number 0 itself."
    ]
},
{
    "id": "45",
    "title": "Jump Game II",
    "question": "Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nYour goal is to reach the last index in the minimum number of jumps.\nYou can assume that you can always reach the last index.",
    "examples": [
        "Input: nums = [2,3,1,1,4]",
        "Output: 2",
        "Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.",
        "Input: nums = [2,3,0,1,4]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1040 <= nums[i] <= 1000"
    ]
},
{
    "id": "46",
    "title": "Permutations",
    "question": "Given an array nums of distinct integers, return all the possible permutations.\n You can return the answer in any order.",
    "examples": [
        "Input: nums = [1,2,3]",
        "Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "Input: nums = [0,1]",
        "Output: [[0,1],[1,0]]",
        "Input: nums = [1]",
        "Output: [[1]]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 6-10 <= nums[i] <= 10All the integers of nums are unique."
    ]
},
{
    "id": "171",
    "title": "Excel Sheet Column Number",
    "question": "Given a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.\nFor example:",
    "examples": [
        "A -> 1",
        "B -> 2",
        "C -> 3",
        "...",
        "Z -> 26",
        "AA -> 27",
        "AB -> 28 ",
        "...",
        "Input: columnTitle = \"A\"",
        "Output: 1",
        "Input: columnTitle = \"AB\"",
        "Output: 28",
        "Input: columnTitle = \"ZY\"",
        "Output: 701",
        "Input: columnTitle = \"FXSHRXW\"",
        "Output: 2147483647",
        ""
    ],
    "constraints": [
        "1 <= columnTitle. length <= 7columnTitle consists only of uppercase English letters. columnTitle is in the range [\"A\"",
        " \"FXSHRXW\"]."
    ]
},
{
    "id": "47",
    "title": "Permutations II",
    "question": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.",
    "examples": [
        "Input: nums = [1,1,2]",
        "Output:",
        "[[1,1,2],",
        " [1,2,1],",
        " [2,1,1]]",
        "Input: nums = [1,2,3]",
        "Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 8-10 <= nums[i] <= 10"
    ]
},
{
    "id": "48",
    "title": "Rotate Image",
    "question": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly.\n DO NOT allocate another 2D matrix and do the rotation.",
    "examples": [
        "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "Output: [[7,4,1],[8,5,2],[9,6,3]]",
        "Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
        "Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
        "Input: matrix = [[1]]",
        "Output: [[1]]",
        "Input: matrix = [[1,2],[3,4]]",
        "Output: [[3,1],[4,2]]",
        ""
    ],
    "constraints": [
        "matrix. length == nmatrix[i]. length == n1 <= n <= 20-1000 <= matrix[i][j] <= 1000"
    ]
},
{
    "id": "49",
    "title": "Group Anagrams",
    "question": "Given an array of strings strs, group the anagrams together.\n You can return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "examples": [
        "Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
        "Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "Input: strs = [\"\"]",
        "Output: [[\"\"]]",
        "Input: strs = [\"a\"]",
        "Output: [[\"a\"]]",
        ""
    ],
    "constraints": [
        "1 <= strs. length <= 1040 <= strs[i]. length <= 100strs[i] consists of lowercase English letters."
    ]
},
{
    "id": "50",
    "title": "Pow(x, n)",
    "question": "Implement pow(x, n), which calculates x raised to the power n (i.\ne.\n, xn).",
    "examples": [
        "Input: x = 2. 00000, n = 10",
        "Output: 1024. 00000",
        "Input: x = 2. 10000, n = 3",
        "Output: 9. 26100",
        "Input: x = 2. 00000, n = -2",
        "Output: 0. 25000",
        "Explanation: 2-2 = 1/22 = 1/4 = 0. 25",
        ""
    ],
    "constraints": [
        "-100. 0 < x < 100. 0-231 <= n <= 231-1-104 <= xn <= 104"
    ]
},
{
    "id": "54",
    "title": "Spiral Matrix",
    "question": "Given an m x n matrix, return all elements of the matrix in spiral order.",
    "examples": [
        "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "Output: [1,2,3,6,9,8,7,4,5]",
        "Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
        "Output: [1,2,3,4,8,12,11,10,9,5,6,7]",
        ""
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 10-100 <= matrix[i][j] <= 100"
    ]
},
{
    "id": "55",
    "title": "Jump Game",
    "question": "You are given an integer array nums.\n You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.",
    "examples": [
        "Input: nums = [2,3,1,1,4]",
        "Output: true",
        "Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.",
        "Input: nums = [3,2,1,0,4]",
        "Output: false",
        "Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1040 <= nums[i] <= 105"
    ]
},
{
    "id": "56",
    "title": "Merge Intervals",
    "question": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "examples": [
        "Input: intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "Output: [[1,6],[8,10],[15,18]]",
        "Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].",
        "Input: intervals = [[1,4],[4,5]]",
        "Output: [[1,5]]",
        "Explanation: Intervals [1,4] and [4,5] are considered overlapping.",
        ""
    ],
    "constraints": [
        "1 <= intervals. length <= 104intervals[i]. length == 20 <= starti <= endi <= 104"
    ]
},
{
    "id": "57",
    "title": "Insert Interval",
    "question": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti.\n You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\nReturn intervals after the insertion.",
    "examples": [
        "Input: intervals = [[1,3],[6,9]], newInterval = [2,5]",
        "Output: [[1,5],[6,9]]",
        "Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
        "Output: [[1,2],[3,10],[12,16]]",
        "Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]. Input: intervals = [], newInterval = [5,7]",
        "Output: [[5,7]]",
        "Input: intervals = [[1,5]], newInterval = [2,3]",
        "Output: [[1,5]]",
        "Input: intervals = [[1,5]], newInterval = [2,7]",
        "Output: [[1,7]]",
        ""
    ],
    "constraints": [
        "0 <= intervals. length <= 104intervals[i]. length == 20 <= starti <= endi <= 105intervals is sorted by starti in ascending order. newInterval. length == 20 <= start <= end <= 105"
    ]
},
{
    "id": "59",
    "title": "Spiral Matrix II",
    "question": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "examples": [
        "Input: n = 3",
        "Output: [[1,2,3],[8,9,4],[7,6,5]]",
        "Input: n = 1",
        "Output: [[1]]",
        ""
    ],
    "constraints": [
        "1 <= n <= 20"
    ]
},
{
    "id": "61",
    "title": "Rotate List",
    "question": "Given the head of a linked list, rotate the list to the right by k places.",
    "examples": [
        "Input: head = [1,2,3,4,5], k = 2",
        "Output: [4,5,1,2,3]",
        "Input: head = [0,1,2], k = 4",
        "Output: [2,0,1]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [0",
        " 500].-100 <= Node. val <= 1000 <= k <= 2 * 109"
    ]
},
{
    "id": "172",
    "title": "Factorial Trailing Zeroes",
    "question": "Given an integer n, return the number of trailing zeroes in n!.\nFollow up: Could you write a solution that works in logarithmic time complexity?",
    "examples": [
        "Input: n = 3",
        "Output: 0",
        "Explanation: 3! = 6, no trailing zero.",
        "Input: n = 5",
        "Output: 1",
        "Explanation: 5! = 120, one trailing zero.",
        "Input: n = 0",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 <= n <= 104"
    ]
},
{
    "id": "62",
    "title": "Unique Paths",
    "question": "A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time.\n The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nHow many possible unique paths are there?",
    "examples": [
        "Input: m = 3, n = 7",
        "Output: 28",
        "Input: m = 3, n = 2",
        "Output: 3",
        "Explanation:",
        "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:",
        "1. Right -> Down -> Down",
        "2. Down -> Down -> Right",
        "3. Down -> Right -> Down",
        "Input: m = 7, n = 3",
        "Output: 28",
        "Input: m = 3, n = 3",
        "Output: 6",
        ""
    ],
    "constraints": [
        "1 <= m",
        " n <= 100It's guaranteed that the answer will be less than or equal to 2 * 109."
    ]
},
{
    "id": "63",
    "title": "Unique Paths II",
    "question": "A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time.\n The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nNow consider if some obstacles are added to the grids.\n How many unique paths would there be?An obstacle and space is marked as 1 and 0 respectively in the grid.",
    "examples": [
        "Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
        "Output: 2",
        "Explanation: There is one obstacle in the middle of the 3x3 grid above.",
        "There are two ways to reach the bottom-right corner:",
        "1. Right -> Right -> Down -> Down",
        "2. Down -> Down -> Right -> Right",
        "Input: obstacleGrid = [[0,1],[0,0]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "m == obstacleGrid. lengthn == obstacleGrid[i]. length1 <= m",
        " n <= 100obstacleGrid[i][j] is 0 or 1."
    ]
},
{
    "id": "64",
    "title": "Minimum Path Sum",
    "question": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.",
    "examples": [
        "Input: grid = [[1,3,1],[1,5,1],[4,2,1]]",
        "Output: 7",
        "Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.",
        "Input: grid = [[1,2,3],[4,5,6]]",
        "Output: 12",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 2000 <= grid[i][j] <= 100"
    ]
},
{
    "id": "71",
    "title": "Simplify Path",
    "question": "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\nIn a Unix-style file system, a period '.\n' refers to the current directory, a double period '.\n.\n' refers to the directory up a level, and any multiple consecutive slashes (i.\ne.\n '//') are treated as a single slash '/'.\n For this problem, any other format of periods such as '.\n.\n.\n' are treated as file/directory names.\nThe canonical path should have the following format:Return the simplified canonical path.",
    "examples": [
        "Input: path = \"/home/\"",
        "Output: \"/home\"",
        "Explanation: Note that there is no trailing slash after the last directory name.",
        "Input: path = \"/../\"",
        "Output: \"/\"",
        "Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.",
        "Input: path = \"/home//foo/\"",
        "Output: \"/home/foo\"",
        "Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.",
        "Input: path = \"/a/./b/../../c/\"",
        "Output: \"/c\"",
        ""
    ],
    "constraints": [
        "The path starts with a single slash '/'. Any two directories are separated by a single slash '/'. The path does not end with a trailing '/'. The path only contains the directories on the path from the root directory to the target file or directory (i. e.",
        " no period '.' or double period '..')1 <= path. length <= 3000path consists of English letters",
        " digits",
        " period '.'",
        " slash '/' or '_'. path is a valid absolute Unix path."
    ]
},
{
    "id": "73",
    "title": "Set Matrix Zeroes",
    "question": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's, and return the matrix.\nYou must do it in place.\n   Follow up:",
    "examples": [
        "Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]",
        "Output: [[1,0,1],[0,0,0],[1,0,1]]",
        "Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
        "Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
        ""
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[0]. length1 <= m",
        " n <= 200-231 <= matrix[i][j] <= 231 - 1A straightforward solution using O(mn) space is probably a bad idea. A simple improvement uses O(m + n) space",
        " but still not the best solution. Could you devise a constant space solution?"
    ]
},
{
    "id": "74",
    "title": "Search a 2D Matrix",
    "question": "Write an efficient algorithm that searches for a value in an m x n matrix.\n This matrix has the following properties:",
    "examples": [
        "Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
        "Output: true",
        "Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
        "Output: false",
        ""
    ],
    "constraints": [
        "Integers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row. m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 100-104 <= matrix[i][j]",
        " target <= 104"
    ]
},
{
    "id": "75",
    "title": "Sort Colors",
    "question": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\nYou must solve this problem without using the library's sort function.\n   Follow up: Could you come up with a one-pass algorithm using only constant extra space?",
    "examples": [
        "Input: nums = [2,0,2,1,1,0]",
        "Output: [0,0,1,1,2,2]",
        "Input: nums = [2,0,1]",
        "Output: [0,1,2]",
        "Input: nums = [0]",
        "Output: [0]",
        "Input: nums = [1]",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 300nums[i] is 0",
        " 1",
        " or 2."
    ]
},
{
    "id": "77",
    "title": "Combinations",
    "question": "Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].\nYou may return the answer in any order.",
    "examples": [
        "Input: n = 4, k = 2",
        "Output:",
        "[",
        "  [2,4],",
        "  [3,4],",
        "  [2,3],",
        "  [1,2],",
        "  [1,3],",
        "  [1,4],",
        "]",
        "Input: n = 1, k = 1",
        "Output: [[1]]",
        ""
    ],
    "constraints": [
        "1 <= n <= 201 <= k <= n"
    ]
},
{
    "id": "78",
    "title": "Subsets",
    "question": "Given an integer array nums of unique elements, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets.\n Return the solution in any order.",
    "examples": [
        "Input: nums = [1,2,3]",
        "Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
        "Input: nums = [0]",
        "Output: [[],[0]]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10-10 <= nums[i] <= 10All the numbers of nums are unique."
    ]
},
{
    "id": "79",
    "title": "Word Search",
    "question": "Given an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.\n The same letter cell may not be used more than once.\n   Follow up: Could you use search pruning to make your solution faster with a larger board?",
    "examples": [
        "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
        "Output: true",
        "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
        "Output: true",
        "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "m == board. lengthn = board[i]. length1 <= m",
        " n <= 61 <= word. length <= 15board and word consists of only lowercase and uppercase English letters."
    ]
},
{
    "id": "190",
    "title": "Reverse Bits",
    "question": "Reverse bits of a given 32 bits unsigned integer.\nNote:Follow up:If this function is called many times, how would you optimize it?",
    "examples": [
        "Input: n = 00000010100101000001111010011100",
        "Output:    964176192 (00111001011110000010100101000000)",
        "Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.",
        "Input: n = 11111111111111111111111111111101",
        "Output:   3221225471 (10111111111111111111111111111111)",
        "Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.",
        ""
    ],
    "constraints": [
        "Note that in some languages such as Java",
        " there is no unsigned integer type. In this case",
        " both input and output will be given as a signed integer type. They should not affect your implementation",
        " as the integer's internal binary representation is the same",
        " whether it is signed or unsigned. In Java",
        " the compiler represents the signed integers using 2's complement notation. Therefore",
        " in Example 2 above",
        " the input represents the signed integer -3 and the output represents the signed integer -1073741825. The input must be a binary string of length 32"
    ]
},
{
    "id": "80",
    "title": "Remove Duplicates from Sorted Array II",
    "question": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice.\n The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums.\n More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result.\n It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array.\n You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:The judge will test your solution with the following code:If all assertions pass, then your solution will be accepted.",
    "examples": [
        "int[] nums = [...]; // Input array",
        "int[] expectedNums = [...]; // The expected answer with correct length",
        "",
        "int k = removeDuplicates(nums); // Calls your implementation",
        "",
        "assert k == expectedNums. length;",
        "for (int i = 0; i < k; i++) {",
        "    assert nums[i] == expectedNums[i];",
        "}",
        "Input: nums = [1,1,1,2,2,3]",
        "Output: 5, nums = [1,1,2,2,3,_]",
        "Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.",
        "It does not matter what you leave beyond the returned k (hence they are underscores).",
        "Input: nums = [0,0,1,1,1,1,2,3,3]",
        "Output: 7, nums = [0,0,1,1,2,3,3,_,_]",
        "Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.",
        "It does not matter what you leave beyond the returned k (hence they are underscores).",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 3 * 104-104 <= nums[i] <= 104nums is sorted in non-decreasing order."
    ]
},
{
    "id": "81",
    "title": "Search in Rotated Sorted Array II",
    "question": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.\nlength) such that the resulting array is [nums[k], nums[k+1], .\n.\n.\n, nums[n-1], nums[0], nums[1], .\n.\n.\n, nums[k-1]] (0-indexed).\n For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\nYou must decrease the overall operation steps as much as possible.\n   Follow up: This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates.\n Would this affect the runtime complexity? How and why?",
    "examples": [
        "Input: nums = [2,5,6,0,0,1,2], target = 0",
        "Output: true",
        "Input: nums = [2,5,6,0,0,1,2], target = 3",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5000-104 <= nums[i] <= 104nums is guaranteed to be rotated at some pivot.-104 <= target <= 104"
    ]
},
{
    "id": "82",
    "title": "Remove Duplicates from Sorted List II",
    "question": "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\n Return the linked list sorted as well.",
    "examples": [
        "Input: head = [1,2,3,3,4,4,5]",
        "Output: [1,2,5]",
        "Input: head = [1,1,1,2,3]",
        "Output: [2,3]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [0",
        " 300].-100 <= Node. val <= 100The list is guaranteed to be sorted in ascending order."
    ]
},
{
    "id": "86",
    "title": "Partition List",
    "question": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.",
    "examples": [
        "Input: head = [1,4,3,2,5,2], x = 3",
        "Output: [1,2,2,4,3,5]",
        "Input: head = [2,1], x = 2",
        "Output: [1,2]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [0",
        " 200].-100 <= Node. val <= 100-200 <= x <= 200"
    ]
},
{
    "id": "89",
    "title": "Gray Code",
    "question": "An n-bit gray code sequence is a sequence of 2n integers where:Given an integer n, return any valid n-bit gray code sequence.",
    "examples": [
        "Input: n = 2",
        "Output: [0,1,3,2]",
        "Explanation:",
        "The binary representation of [0,1,3,2] is [00,01,11,10].",
        "- 00 and 01 differ by one bit",
        "- 01 and 11 differ by one bit",
        "- 11 and 10 differ by one bit",
        "- 10 and 00 differ by one bit",
        "[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].",
        "- 00 and 10 differ by one bit",
        "- 10 and 11 differ by one bit",
        "- 11 and 01 differ by one bit",
        "- 01 and 00 differ by one bit",
        "Input: n = 1",
        "Output: [0,1]",
        ""
    ],
    "constraints": [
        "Every integer is in the inclusive range [0",
        " 2n - 1]",
        "The first integer is 0",
        "An integer appears no more than once in the sequence",
        "The binary representation of every pair of adjacent integers differs by exactly one bit",
        " andThe binary representation of the first and last integers differs by exactly one bit. 1 <= n <= 16"
    ]
},
{
    "id": "90",
    "title": "Subsets II",
    "question": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets.\n Return the solution in any order.",
    "examples": [
        "Input: nums = [1,2,2]",
        "Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]",
        "Input: nums = [0]",
        "Output: [[],[0]]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10-10 <= nums[i] <= 10"
    ]
},
{
    "id": "91",
    "title": "Decode Ways",
    "question": "A message containing letters from A-Z can be encoded into numbers using the following mapping:To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways).\n For example, \"11106\" can be mapped into:Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\nGiven a string s containing only digits, return the number of ways to decode it.\nThe answer is guaranteed to fit in a 32-bit integer.",
    "examples": [
        "'A' -> \"1\"",
        "'B' -> \"2\"",
        "...",
        "'Z' -> \"26\"",
        "Input: s = \"12\"",
        "Output: 2",
        "Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).",
        "Input: s = \"226\"",
        "Output: 3",
        "Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).",
        "Input: s = \"0\"",
        "Output: 0",
        "Explanation: There is no character that is mapped to a number starting with 0.",
        "The only valid mappings with 0 are 'J' -> \"10\" and 'T' -> \"20\", neither of which start with 0.",
        "Hence, there are no valid ways to decode this since all digits need to be mapped.",
        "Input: s = \"06\"",
        "Output: 0",
        "Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").",
        ""
    ],
    "constraints": [
        "\"AAJF\" with the grouping (1 1 10 6)\"KJF\" with the grouping (11 10 6)1 <= s. length <= 100s contains only digits and may contain leading zero(s)."
    ]
},
{
    "id": "92",
    "title": "Reverse Linked List II",
    "question": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.",
    "examples": [
        "Input: head = [1,2,3,4,5], left = 2, right = 4",
        "Output: [1,4,3,2,5]",
        "Input: head = [5], left = 1, right = 1",
        "Output: [5]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is n. 1 <= n <= 500-500 <= Node. val <= 5001 <= left <= right <= n"
    ]
},
{
    "id": "93",
    "title": "Restore IP Addresses",
    "question": "Given a string s containing only digits, return all possible valid IP addresses that can be obtained from s.\n You can return them in any order.\nA valid IP address consists of exactly four integers, each integer is between 0 and 255, separated by single dots and cannot have leading zeros.\n For example, \"0.\n1.\n2.\n201\" and \"192.\n168.\n1.\n1\" are valid IP addresses and \"0.\n011.\n255.\n245\", \"192.\n168.\n1.\n312\" and \"192.\n168@1.\n1\" are invalid IP addresses.",
    "examples": [
        "Input: s = \"25525511135\"",
        "Output: [\"255. 255. 11. 135\",\"255. 255. 111. 35\"]",
        "Input: s = \"0000\"",
        "Output: [\"0. 0. 0. 0\"]",
        "Input: s = \"1111\"",
        "Output: [\"1. 1. 1. 1\"]",
        "Input: s = \"010010\"",
        "Output: [\"0. 10. 0. 10\",\"0. 100. 1. 0\"]",
        "Input: s = \"101023\"",
        "Output: [\"1. 0. 10. 23\",\"1. 0. 102. 3\",\"10. 1. 0. 23\",\"10. 10. 2. 3\",\"101. 0. 2. 3\"]",
        ""
    ],
    "constraints": [
        "0 <= s. length <= 3000s consists of digits only."
    ]
},
{
    "id": "95",
    "title": "Unique Binary Search Trees II",
    "question": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n.\n Return the answer in any order.",
    "examples": [
        "Input: n = 3",
        "Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
        "Input: n = 1",
        "Output: [[1]]",
        ""
    ],
    "constraints": [
        "1 <= n <= 8"
    ]
},
{
    "id": "191",
    "title": "Number of 1 Bits",
    "question": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\nNote:",
    "examples": [
        "Input: n = 00000000000000000000000000001011",
        "Output: 3",
        "Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.",
        "Input: n = 00000000000000000000000010000000",
        "Output: 1",
        "Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.",
        "Input: n = 11111111111111111111111111111101",
        "Output: 31",
        "Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.",
        ""
    ],
    "constraints": [
        "Note that in some languages",
        " such as Java",
        " there is no unsigned integer type. In this case",
        " the input will be given as a signed integer type. It should not affect your implementation",
        " as the integer's internal binary representation is the same",
        " whether it is signed or unsigned. In Java",
        " the compiler represents the signed integers using 2's complement notation. Therefore",
        " in Example 3",
        " the input represents the signed integer. -3. The input must be a binary string of length 32."
    ]
},
{
    "id": "96",
    "title": "Unique Binary Search Trees",
    "question": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.",
    "examples": [
        "Input: n = 3",
        "Output: 5",
        "Input: n = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= n <= 19"
    ]
},
{
    "id": "97",
    "title": "Interleaving String",
    "question": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:Note: a + b is the concatenation of strings a and b.\n   Follow up: Could you solve it using only O(s2.\nlength) additional memory space?",
    "examples": [
        "Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"",
        "Output: true",
        "Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"",
        "Output: false",
        "Input: s1 = \"\", s2 = \"\", s3 = \"\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "s = s1 + s2 + ... + snt = t1 + t2 + ... + tm|n - m| <= 1The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... 0 <= s1. length",
        " s2. length <= 1000 <= s3. length <= 200s1",
        " s2",
        " and s3 consist of lowercase English letters."
    ]
},
{
    "id": "98",
    "title": "Validate Binary Search Tree",
    "question": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:",
    "examples": [
        "Input: root = [2,1,3]",
        "Output: true",
        "Input: root = [5,1,4,null,null,3,6]",
        "Output: false",
        "Explanation: The root node's value is 5 but its right child's value is 4.",
        ""
    ],
    "constraints": [
        "The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees. The number of nodes in the tree is in the range [1",
        " 104].-231 <= Node. val <= 231 - 1"
    ]
},
{
    "id": "99",
    "title": "Recover Binary Search Tree",
    "question": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake.\n Recover the tree without changing its structure.",
    "examples": [
        "Input: root = [1,3,null,null,2]",
        "Output: [3,1,null,null,2]",
        "Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.",
        "Input: root = [3,1,4,null,null,2]",
        "Output: [2,1,4,null,null,3]",
        "Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [2",
        " 1000].-231 <= Node. val <= 231 - 1"
    ]
},
{
    "id": "102",
    "title": "Binary Tree Level Order Traversal",
    "question": "Given the root of a binary tree, return the level order traversal of its nodes' values.\n (i.\ne.\n, from left to right, level by level).",
    "examples": [
        "Input: root = [3,9,20,null,null,15,7]",
        "Output: [[3],[9,20],[15,7]]",
        "Input: root = [1]",
        "Output: [[1]]",
        "Input: root = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 2000].-1000 <= Node. val <= 1000"
    ]
},
{
    "id": "103",
    "title": "Binary Tree Zigzag Level Order Traversal",
    "question": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values.\n (i.\ne.\n, from left to right, then right to left for the next level and alternate between).",
    "examples": [
        "Input: root = [3,9,20,null,null,15,7]",
        "Output: [[3],[20,9],[15,7]]",
        "Input: root = [1]",
        "Output: [[1]]",
        "Input: root = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 2000].-100 <= Node. val <= 100"
    ]
},
{
    "id": "105",
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "question": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
    "examples": [
        "Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]",
        "Output: [3,9,20,null,null,15,7]",
        "Input: preorder = [-1], inorder = [-1]",
        "Output: [-1]",
        ""
    ],
    "constraints": [
        "1 <= preorder. length <= 3000inorder. length == preorder. length-3000 <= preorder[i]",
        " inorder[i] <= 3000preorder and inorder consist of unique values. Each value of inorder also appears in preorder. preorder is guaranteed to be the preorder traversal of the tree. inorder is guaranteed to be the inorder traversal of the tree."
    ]
},
{
    "id": "106",
    "title": "Construct Binary Tree from Inorder and Postorder Traversal",
    "question": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.",
    "examples": [
        "Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]",
        "Output: [3,9,20,null,null,15,7]",
        "Input: inorder = [-1], postorder = [-1]",
        "Output: [-1]",
        ""
    ],
    "constraints": [
        "1 <= inorder. length <= 3000postorder. length == inorder. length-3000 <= inorder[i]",
        " postorder[i] <= 3000inorder and postorder consist of unique values. Each value of postorder also appears in inorder. inorder is guaranteed to be the inorder traversal of the tree. postorder is guaranteed to be the postorder traversal of the tree."
    ]
},
{
    "id": "107",
    "title": "Binary Tree Level Order Traversal II",
    "question": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values.\n (i.\ne.\n, from left to right, level by level from leaf to root).",
    "examples": [
        "Input: root = [3,9,20,null,null,15,7]",
        "Output: [[15,7],[9,20],[3]]",
        "Input: root = [1]",
        "Output: [[1]]",
        "Input: root = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 2000].-1000 <= Node. val <= 1000"
    ]
},
{
    "id": "109",
    "title": "Convert Sorted List to Binary Search Tree",
    "question": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.",
    "examples": [
        "Input: head = [-10,-3,0,5,9]",
        "Output: [0,-3,9,-10,null,5]",
        "Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.",
        "Input: head = []",
        "Output: []",
        "Input: head = [0]",
        "Output: [0]",
        "Input: head = [1,3]",
        "Output: [3,1]",
        ""
    ],
    "constraints": [
        "The number of nodes in head is in the range [0",
        " 2 * 104].-105 <= Node. val <= 105"
    ]
},
{
    "id": "202",
    "title": "Happy Number",
    "question": "Write an algorithm to determine if a number n is happy.\nA happy number is a number defined by the following process:Return true if n is a happy number, and false if not.",
    "examples": [
        "Input: n = 19",
        "Output: true",
        "Explanation:",
        "12 + 92 = 82",
        "82 + 22 = 68",
        "62 + 82 = 100",
        "12 + 02 + 02 = 1",
        "Input: n = 2",
        "Output: false",
        ""
    ],
    "constraints": [
        "Starting with any positive integer",
        " replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay)",
        " or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. 1 <= n <= 231 - 1"
    ]
},
{
    "id": "113",
    "title": "Path Sum II",
    "question": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum.\n Each path should be returned as a list of the node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node.\n A leaf is a node with no children.",
    "examples": [
        "Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
        "Output: [[5,4,11,2],[5,8,4,5]]",
        "Explanation: There are two paths whose sum equals targetSum:",
        "5 + 4 + 11 + 2 = 22",
        "5 + 8 + 4 + 5 = 22",
        "Input: root = [1,2,3], targetSum = 5",
        "Output: []",
        "Input: root = [1,2], targetSum = 0",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 5000].-1000 <= Node. val <= 1000-1000 <= targetSum <= 1000"
    ]
},
{
    "id": "114",
    "title": "Flatten Binary Tree to Linked List",
    "question": "Given the root of a binary tree, flatten the tree into a \"linked list\":",
    "examples": [
        "Input: root = [1,2,5,3,4,null,6]",
        "Output: [1,null,2,null,3,null,4,null,5,null,6]",
        "Input: root = []",
        "Output: []",
        "Input: root = [0]",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. The \"linked list\" should be in the same order as a pre-order traversal of the binary tree. The number of nodes in the tree is in the range [0",
        " 2000].-100 <= Node. val <= 100"
    ]
},
{
    "id": "116",
    "title": "Populating Next Right Pointers in Each Node",
    "question": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children.\n The binary tree has the following definition:Populate each next pointer to point to its next right node.\n If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\n   Follow-up:",
    "examples": [
        "struct Node {",
        "  int val;",
        "  Node *left;",
        "  Node *right;",
        "  Node *next;",
        "}",
        "Input: root = [1,2,3,4,5,6,7]",
        "Output: [1,#,2,3,#,4,5,6,7,#]",
        "Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",
        "Input: root = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 212 - 1].-1000 <= Node. val <= 1000You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem."
    ]
},
{
    "id": "117",
    "title": "Populating Next Right Pointers in Each Node II",
    "question": "Given a binary treePopulate each next pointer to point to its next right node.\n If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\n   Follow-up:",
    "examples": [
        "struct Node {",
        "  int val;",
        "  Node *left;",
        "  Node *right;",
        "  Node *next;",
        "}",
        "Input: root = [1,2,3,4,5,null,7]",
        "Output: [1,#,2,3,#,4,5,7,#]",
        "Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",
        "Input: root = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 6000].-100 <= Node. val <= 100You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem."
    ]
},
{
    "id": "120",
    "title": "Triangle",
    "question": "Given a triangle array, return the minimum path sum from top to bottom.\nFor each step, you may move to an adjacent number of the row below.\n More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.",
    "examples": [
        "Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]",
        "Output: 11",
        "Explanation: The triangle looks like:",
        "   2",
        "  3 4",
        " 6 5 7",
        "4 1 8 3",
        "The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).",
        "Input: triangle = [[-10]]",
        "Output: -10",
        ""
    ],
    "constraints": [
        "1 <= triangle. length <= 200triangle[0]. length == 1triangle[i]. length == triangle[i - 1]. length + 1-104 <= triangle[i][j] <= 104"
    ]
},
{
    "id": "128",
    "title": "Longest Consecutive Sequence",
    "question": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in O(n) time.",
    "examples": [
        "Input: nums = [100,4,200,1,3,2]",
        "Output: 4",
        "Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.",
        "Input: nums = [0,3,7,2,5,8,4,6,0,1]",
        "Output: 9",
        ""
    ],
    "constraints": [
        "0 <= nums. length <= 105-109 <= nums[i] <= 109"
    ]
},
{
    "id": "129",
    "title": "Sum Root to Leaf Numbers",
    "question": "You are given the root of a binary tree containing digits from 0 to 9 only.\nEach root-to-leaf path in the tree represents a number.\nReturn the total sum of all root-to-leaf numbers.\n Test cases are generated so that the answer will fit in a 32-bit integer.\nA leaf node is a node with no children.",
    "examples": [
        "Input: root = [1,2,3]",
        "Output: 25",
        "Explanation:",
        "The root-to-leaf path 1->2 represents the number 12.",
        "The root-to-leaf path 1->3 represents the number 13.",
        "Therefore, sum = 12 + 13 = 25.",
        "Input: root = [4,9,0,5,1]",
        "Output: 1026",
        "Explanation:",
        "The root-to-leaf path 4->9->5 represents the number 495.",
        "The root-to-leaf path 4->9->1 represents the number 491.",
        "The root-to-leaf path 4->0 represents the number 40.",
        "Therefore, sum = 495 + 491 + 40 = 1026.",
        ""
    ],
    "constraints": [
        "For example",
        " the root-to-leaf path 1 -> 2 -> 3 represents the number 123. The number of nodes in the tree is in the range [1",
        " 1000]. 0 <= Node. val <= 9The depth of the tree will not exceed 10."
    ]
},
{
    "id": "130",
    "title": "Surrounded Regions",
    "question": "Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.\nA region is captured by flipping all 'O's into 'X's in that surrounded region.",
    "examples": [
        "Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
        "Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
        "Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.",
        "Input: board = [[\"X\"]]",
        "Output: [[\"X\"]]",
        ""
    ],
    "constraints": [
        "m == board. lengthn == board[i]. length1 <= m",
        " n <= 200board[i][j] is 'X' or 'O'."
    ]
},
{
    "id": "131",
    "title": "Palindrome Partitioning",
    "question": "Given a string s, partition s such that every substring of the partition is a palindrome.\n Return all possible palindrome partitioning of s.\nA palindrome string is a string that reads the same backward as forward.",
    "examples": [
        "Input: s = \"aab\"",
        "Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]",
        "Input: s = \"a\"",
        "Output: [[\"a\"]]",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 16s contains only lowercase English letters."
    ]
},
{
    "id": "133",
    "title": "Clone Graph",
    "question": "Given a reference of a node in a connected undirected graph.\nReturn a deep copy (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\n Test case format:For simplicity, each node's value is the same as the node's index (1-indexed).\n For example, the first node with val == 1, the second node with val == 2, and so on.\n The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph.\n Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1.\n You must return the copy of the given node as a reference to the cloned graph.",
    "examples": [
        "class Node {",
        "    public int val;",
        "    public List<Node> neighbors;",
        "}",
        "Input: adjList = [[2,4],[1,3],[2,4],[1,3]]",
        "Output: [[2,4],[1,3],[2,4],[1,3]]",
        "Explanation: There are 4 nodes in the graph.",
        "1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).",
        "2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).",
        "3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).",
        "4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).",
        "Input: adjList = [[]]",
        "Output: [[]]",
        "Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.",
        "Input: adjList = []",
        "Output: []",
        "Explanation: This an empty graph, it does not have any nodes.",
        "Input: adjList = [[2],[1]]",
        "Output: [[2],[1]]",
        ""
    ],
    "constraints": [
        "The number of nodes in the graph is in the range [0",
        " 100]. 1 <= Node. val <= 100Node. val is unique for each node. There are no repeated edges and no self-loops in the graph. The Graph is connected and all nodes can be visited starting from the given node."
    ]
},
{
    "id": "203",
    "title": "Remove Linked List Elements",
    "question": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.\nval == val, and return the new head.",
    "examples": [
        "Input: head = [1,2,6,3,4,5,6], val = 6",
        "Output: [1,2,3,4,5]",
        "Input: head = [], val = 1",
        "Output: []",
        "Input: head = [7,7,7,7], val = 7",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [0",
        " 104]. 1 <= Node. val <= 500 <= val <= 50"
    ]
},
{
    "id": "134",
    "title": "Gas Station",
    "question": "There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station.\n You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1.\n If there exists a solution, it is guaranteed to be unique",
    "examples": [
        "Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]",
        "Output: 3",
        "Explanation:",
        "Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4",
        "Travel to station 4. Your tank = 4 - 1 + 5 = 8",
        "Travel to station 0. Your tank = 8 - 2 + 1 = 7",
        "Travel to station 1. Your tank = 7 - 3 + 2 = 6",
        "Travel to station 2. Your tank = 6 - 4 + 3 = 5",
        "Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.",
        "Therefore, return 3 as the starting index.",
        "Input: gas = [2,3,4], cost = [3,4,3]",
        "Output: -1",
        "Explanation:",
        "You can't start at station 0 or 1, as there is not enough gas to travel to the next station.",
        "Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4",
        "Travel to station 0. Your tank = 4 - 3 + 2 = 3",
        "Travel to station 1. Your tank = 3 - 3 + 3 = 3",
        "You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.",
        "Therefore, you can't travel around the circuit once no matter where you start.",
        ""
    ],
    "constraints": [
        "gas. length == ncost. length == n1 <= n <= 1040 <= gas[i]",
        " cost[i] <= 104"
    ]
},
{
    "id": "137",
    "title": "Single Number II",
    "question": "Given an integer array nums where every element appears three times except for one, which appears exactly once.\n Find the single element and return it.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.",
    "examples": [
        "Input: nums = [2,2,3,2]",
        "Output: 3",
        "Input: nums = [0,1,0,1,0,1,99]",
        "Output: 99",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 3 * 104-231 <= nums[i] <= 231 - 1Each element in nums appears exactly three times except for one element which appears once."
    ]
},
{
    "id": "138",
    "title": "Copy List with Random Pointer",
    "question": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\nConstruct a deep copy of the list.\n The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node.\n Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state.\n None of the pointers in the new list should point to nodes in the original list.\nFor example, if there are two nodes X and Y in the original list, where X.\nrandom --> Y, then for the corresponding two nodes x and y in the copied list, x.\nrandom --> y.\nReturn the head of the copied linked list.\nThe linked list is represented in the input/output as a list of n nodes.\n Each node is represented as a pair of [val, random_index] where:Your code will only be given the head of the original linked list.",
    "examples": [
        "Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]",
        "Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]",
        "Input: head = [[1,1],[2,1]]",
        "Output: [[1,1],[2,1]]",
        "Input: head = [[3,null],[3,0],[3,null]]",
        "Output: [[3,null],[3,0],[3,null]]",
        "Input: head = []",
        "Output: []",
        "Explanation: The given linked list is empty (null pointer), so return null.",
        ""
    ],
    "constraints": [
        "val: an integer representing Node. valrandom_index: the index of the node (range from 0 to n-1) that the random pointer points to",
        " or null if it does not point to any node. 0 <= n <= 1000-10000 <= Node. val <= 10000Node. random is null or is pointing to some node in the linked list."
    ]
},
{
    "id": "139",
    "title": "Word Break",
    "question": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.",
    "examples": [
        "Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]",
        "Output: true",
        "Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".",
        "Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]",
        "Output: true",
        "Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".",
        "Note that you are allowed to reuse a dictionary word.",
        "Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 3001 <= wordDict. length <= 10001 <= wordDict[i]. length <= 20s and wordDict[i] consist of only lowercase English letters. All the strings of wordDict are unique."
    ]
},
{
    "id": "142",
    "title": "Linked List Cycle II",
    "question": "Given the head of a linked list, return the node where the cycle begins.\n If there is no cycle, return null.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.\n Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed).\n It is -1 if there is no cycle.\n Note that pos is not passed as a parameter.\nDo not modify the linked list.\n   Follow up: Can you solve it using O(1) (i.\ne.\n constant) memory?",
    "examples": [
        "Input: head = [3,2,0,-4], pos = 1",
        "Output: tail connects to node index 1",
        "Explanation: There is a cycle in the linked list, where tail connects to the second node.",
        "Input: head = [1,2], pos = 0",
        "Output: tail connects to node index 0",
        "Explanation: There is a cycle in the linked list, where tail connects to the first node.",
        "Input: head = [1], pos = -1",
        "Output: no cycle",
        "Explanation: There is no cycle in the linked list.",
        ""
    ],
    "constraints": [
        "The number of the nodes in the list is in the range [0",
        " 104].-105 <= Node. val <= 105pos is -1 or a valid index in the linked-list."
    ]
},
{
    "id": "143",
    "title": "Reorder List",
    "question": "You are given the head of a singly linked-list.\n The list can be represented as:Reorder the list to be on the following form:You may not modify the values in the list's nodes.\n Only nodes themselves may be changed.",
    "examples": [
        "L0 → L1 → … → Ln - 1 → Ln",
        "L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …",
        "Input: head = [1,2,3,4]",
        "Output: [1,4,2,3]",
        "Input: head = [1,2,3,4,5]",
        "Output: [1,5,2,4,3]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [1",
        " 5 * 104]. 1 <= Node. val <= 1000"
    ]
},
{
    "id": "146",
    "title": "LRU Cache",
    "question": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:The functions get and put must each run in O(1) average time complexity.",
    "examples": [
        "Input",
        "[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]",
        "[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]",
        "Output",
        "[null, null, null, 1, null, -1, null, -1, 3, 4]",
        "",
        "Explanation",
        "LRUCache lRUCache = new LRUCache(2);",
        "lRUCache. put(1, 1); // cache is {1=1}",
        "lRUCache. put(2, 2); // cache is {1=1, 2=2}",
        "lRUCache. get(1);    // return 1",
        "lRUCache. put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}",
        "lRUCache. get(2);    // returns -1 (not found)",
        "lRUCache. put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}",
        "lRUCache. get(1);    // return -1 (not found)",
        "lRUCache. get(3);    // return 3",
        "lRUCache. get(4);    // return 4",
        ""
    ],
    "constraints": [
        "LRUCache(int capacity) Initialize the LRU cache with positive size capacity. int get(int key) Return the value of the key if the key exists",
        " otherwise return -1. void put(int key",
        " int value) Update the value of the key if the key exists. Otherwise",
        " add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation",
        " evict the least recently used key. 1 <= capacity <= 30000 <= key <= 1040 <= value <= 105At most 2 * 105 calls will be made to get and put."
    ]
},
{
    "id": "147",
    "title": "Insertion Sort List",
    "question": "Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\nThe steps of the insertion sort algorithm:The following is a graphical example of the insertion sort algorithm.\n The partially sorted list (black) initially contains only the first element in the list.\n One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.",
    "examples": [
        "Input: head = [4,2,1,3]",
        "Output: [1,2,3,4]",
        "Input: head = [-1,5,3,4,0]",
        "Output: [-1,0,3,4,5]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [1",
        " 5000].-5000 <= Node. val <= 5000"
    ]
},
{
    "id": "148",
    "title": "Sort List",
    "question": "Given the head of a linked list, return the list after sorting it in ascending order.\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.\ne.\n constant space)?",
    "examples": [
        "Input: head = [4,2,1,3]",
        "Output: [1,2,3,4]",
        "Input: head = [-1,5,3,4,0]",
        "Output: [-1,0,3,4,5]",
        "Input: head = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [0",
        " 5 * 104].-105 <= Node. val <= 105"
    ]
},
{
    "id": "150",
    "title": "Evaluate Reverse Polish Notation",
    "question": "Evaluate the value of an arithmetic expression in Reverse Polish Notation.\nValid operators are +, -, *, and /.\n Each operand may be an integer or another expression.\nNote that division between two integers should truncate toward zero.\nIt is guaranteed that the given RPN expression is always valid.\n That means the expression would always evaluate to a result, and there will not be any division by zero operation.",
    "examples": [
        "Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]",
        "Output: 9",
        "Explanation: ((2 + 1) * 3) = 9",
        "Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]",
        "Output: 6",
        "Explanation: (4 + (13 / 5)) = 6",
        "Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]",
        "Output: 22",
        "Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5",
        "= ((10 * (6 / (12 * -11))) + 17) + 5",
        "= ((10 * (6 / -132)) + 17) + 5",
        "= ((10 * 0) + 17) + 5",
        "= (0 + 17) + 5",
        "= 17 + 5",
        "= 22",
        ""
    ],
    "constraints": [
        "1 <= tokens. length <= 104tokens[i] is either an operator: \"+\"",
        " \"-\"",
        " \"*\"",
        " or \"/\"",
        " or an integer in the range [-200",
        " 200]."
    ]
},
{
    "id": "204",
    "title": "Count Primes",
    "question": "Count the number of prime numbers less than a non-negative number, n.",
    "examples": [
        "Input: n = 10",
        "Output: 4",
        "Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.",
        "Input: n = 0",
        "Output: 0",
        "Input: n = 1",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 <= n <= 5 * 106"
    ]
},
{
    "id": "151",
    "title": "Reverse Words in a String",
    "question": "Given an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters.\n The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words.\n The returned string should only have a single space separating the words.\n Do not include any extra spaces.\n   Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?",
    "examples": [
        "Input: s = \"the sky is blue\"",
        "Output: \"blue is sky the\"",
        "Input: s = \"  hello world  \"",
        "Output: \"world hello\"",
        "Explanation: Your reversed string should not contain leading or trailing spaces.",
        "Input: s = \"a good   example\"",
        "Output: \"example good a\"",
        "Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.",
        "Input: s = \"  Bob    Loves  Alice   \"",
        "Output: \"Alice Loves Bob\"",
        "Input: s = \"Alice does not even like bob\"",
        "Output: \"bob like even not does Alice\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s contains English letters (upper-case and lower-case)",
        " digits",
        " and spaces ' '. There is at least one word in s."
    ]
},
{
    "id": "152",
    "title": "Maximum Product Subarray",
    "question": "Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\nIt is guaranteed that the answer will fit in a 32-bit integer.\nA subarray is a contiguous subsequence of the array.",
    "examples": [
        "Input: nums = [2,3,-2,4]",
        "Output: 6",
        "Explanation: [2,3] has the largest product 6.",
        "Input: nums = [-2,0,-1]",
        "Output: 0",
        "Explanation: The result cannot be 2, because [-2,-1] is not a subarray.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2 * 104-10 <= nums[i] <= 10The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."
    ]
},
{
    "id": "153",
    "title": "Find Minimum in Rotated Sorted Array",
    "question": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times.\n For example, the array nums = [0,1,2,4,5,6,7] might become:Notice that rotating an array [a[0], a[1], a[2], .\n.\n.\n, a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], .\n.\n.\n, a[n-2]].\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\nYou must write an algorithm that runs in O(log n) time.",
    "examples": [
        "Input: nums = [3,4,5,1,2]",
        "Output: 1",
        "Explanation: The original array was [1,2,3,4,5] rotated 3 times.",
        "Input: nums = [4,5,6,7,0,1,2]",
        "Output: 0",
        "Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.",
        "Input: nums = [11,13,15,17]",
        "Output: 11",
        "Explanation: The original array was [11,13,15,17] and it was rotated 4 times. ",
        ""
    ],
    "constraints": [
        "[4",
        "5",
        "6",
        "7",
        "0",
        "1",
        "2] if it was rotated 4 times.[0",
        "1",
        "2",
        "4",
        "5",
        "6",
        "7] if it was rotated 7 times. n == nums. length1 <= n <= 5000-5000 <= nums[i] <= 5000All the integers of nums are unique. nums is sorted and rotated between 1 and n times."
    ]
},
{
    "id": "162",
    "title": "Find Peak Element",
    "question": "A peak element is an element that is strictly greater than its neighbors.\nGiven an integer array nums, find a peak element, and return its index.\n If the array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that nums[-1] = nums[n] = -∞.\nYou must write an algorithm that runs in O(log n) time.",
    "examples": [
        "Input: nums = [1,2,3,1]",
        "Output: 2",
        "Explanation: 3 is a peak element and your function should return the index number 2. Input: nums = [1,2,1,3,5,6,4]",
        "Output: 5",
        "Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."
    ],
    "constraints": [
        "1 <= nums. length <= 1000-231 <= nums[i] <= 231 - 1nums[i] != nums[i + 1] for all valid i."
    ]
},
{
    "id": "165",
    "title": "Compare Version Numbers",
    "question": "Given two version numbers, version1 and version2, compare them.\nVersion numbers consist of one or more revisions joined by a dot '.\n'.\n Each revision consists of digits and may contain leading zeros.\n Every revision contains at least one character.\n Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on.\n For example 2.\n5.\n33 and 0.\n1 are valid version numbers.\nTo compare version numbers, compare their revisions in left-to-right order.\n Revisions are compared using their integer value ignoring any leading zeros.\n This means that revisions 1 and 001 are considered equal.\n If a version number does not specify a revision at an index, then treat the revision as 0.\n For example, version 1.\n0 is less than version 1.\n1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.\nReturn the following:",
    "examples": [
        "Input: version1 = \"1. 01\", version2 = \"1. 001\"",
        "Output: 0",
        "Explanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".",
        "Input: version1 = \"1. 0\", version2 = \"1. 0. 0\"",
        "Output: 0",
        "Explanation: version1 does not specify revision 2, which means it is treated as \"0\".",
        "Input: version1 = \"0. 1\", version2 = \"1. 1\"",
        "Output: -1",
        "Explanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.",
        "Input: version1 = \"1. 0. 1\", version2 = \"1\"",
        "Output: 1",
        "Input: version1 = \"7. 5. 2. 4\", version2 = \"7. 5. 3\"",
        "Output: -1",
        ""
    ],
    "constraints": [
        "If version1 < version2",
        " return -1. If version1 > version2",
        " return 1. Otherwise",
        " return 0. 1 <= version1. length",
        " version2. length <= 500version1 and version2 only contain digits and '.'. version1 and version2 are valid version numbers. All the given revisions in version1 and version2 can be stored in a 32-bit integer."
    ]
},
{
    "id": "166",
    "title": "Fraction to Recurring Decimal",
    "question": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\nIf the fractional part is repeating, enclose the repeating part in parentheses.\nIf multiple answers are possible, return any of them.\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.",
    "examples": [
        "Input: numerator = 1, denominator = 2",
        "Output: \"0. 5\"",
        "Input: numerator = 2, denominator = 1",
        "Output: \"2\"",
        "Input: numerator = 2, denominator = 3",
        "Output: \"0.(6)\"",
        "Input: numerator = 4, denominator = 333",
        "Output: \"0.(012)\"",
        "Input: numerator = 1, denominator = 5",
        "Output: \"0. 2\"",
        ""
    ],
    "constraints": [
        "-231 <= numerator",
        " denominator <= 231 - 1denominator != 0"
    ]
},
{
    "id": "173",
    "title": "Binary Search Tree Iterator",
    "question": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid.\n That is, there will be at least a next number in the in-order traversal when next() is called.\n   Follow up:",
    "examples": [
        "Input",
        "[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]",
        "[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]",
        "Output",
        "[null, 3, 7, true, 9, true, 15, true, 20, false]",
        "",
        "Explanation",
        "BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);",
        "bSTIterator. next();    // return 3",
        "bSTIterator. next();    // return 7",
        "bSTIterator. hasNext(); // return True",
        "bSTIterator. next();    // return 9",
        "bSTIterator. hasNext(); // return True",
        "bSTIterator. next();    // return 15",
        "bSTIterator. hasNext(); // return True",
        "bSTIterator. next();    // return 20",
        "bSTIterator. hasNext(); // return False",
        ""
    ],
    "constraints": [
        "BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST. boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer",
        " otherwise returns false. int next() Moves the pointer to the right",
        " then returns the number at the pointer. The number of nodes in the tree is in the range [1",
        " 105]. 0 <= Node. val <= 106At most 105 calls will be made to hasNext",
        " and next. Could you implement next() and hasNext() to run in average O(1) time and use O(h) memory",
        " where h is the height of the tree?"
    ]
},
{
    "id": "179",
    "title": "Largest Number",
    "question": "Given a list of non-negative integers nums, arrange them such that they form the largest number.\nNote: The result may be very large, so you need to return a string instead of an integer.",
    "examples": [
        "Input: nums = [10,2]",
        "Output: \"210\"",
        "Input: nums = [3,30,34,5,9]",
        "Output: \"9534330\"",
        "Input: nums = [1]",
        "Output: \"1\"",
        "Input: nums = [10]",
        "Output: \"10\"",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1000 <= nums[i] <= 109"
    ]
},
{
    "id": "187",
    "title": "Repeated DNA Sequences",
    "question": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.\n You may return the answer in any order.",
    "examples": [
        "Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"",
        "Output: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]",
        "Input: s = \"AAAAAAAAAAAAA\"",
        "Output: [\"AAAAAAAAAA\"]",
        ""
    ],
    "constraints": [
        "For example",
        " \"ACGAATTCCG\" is a DNA sequence. 1 <= s. length <= 105s[i] is either 'A'",
        " 'C'",
        " 'G'",
        " or 'T'."
    ]
},
{
    "id": "189",
    "title": "Rotate Array",
    "question": "Given an array, rotate the array to the right by k steps, where k is non-negative.\n   Follow up:",
    "examples": [
        "Input: nums = [1,2,3,4,5,6,7], k = 3",
        "Output: [5,6,7,1,2,3,4]",
        "Explanation:",
        "rotate 1 steps to the right: [7,1,2,3,4,5,6]",
        "rotate 2 steps to the right: [6,7,1,2,3,4,5]",
        "rotate 3 steps to the right: [5,6,7,1,2,3,4]",
        "Input: nums = [-1,-100,3,99], k = 2",
        "Output: [3,99,-1,-100]",
        "Explanation: ",
        "rotate 1 steps to the right: [99,-1,-100,3]",
        "rotate 2 steps to the right: [3,99,-1,-100]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105-231 <= nums[i] <= 231 - 10 <= k <= 105Try to come up with as many solutions as you can. There are at least three different ways to solve this problem. Could you do it in-place with O(1) extra space?"
    ]
},
{
    "id": "205",
    "title": "Isomorphic Strings",
    "question": "Given two strings s and t, determine if they are isomorphic.\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\nAll occurrences of a character must be replaced with another character while preserving the order of characters.\n No two characters may map to the same character, but a character may map to itself.",
    "examples": [
        "Input: s = \"egg\", t = \"add\"",
        "Output: true",
        "Input: s = \"foo\", t = \"bar\"",
        "Output: false",
        "Input: s = \"paper\", t = \"title\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 5 * 104t. length == s. lengths and t consist of any valid ascii character."
    ]
},
{
    "id": "198",
    "title": "House Robber",
    "question": "You are a professional robber planning to rob houses along a street.\n Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
    "examples": [
        "Input: nums = [1,2,3,1]",
        "Output: 4",
        "Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).",
        "Total amount you can rob = 1 + 3 = 4.",
        "Input: nums = [2,7,9,3,1]",
        "Output: 12",
        "Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).",
        "Total amount you can rob = 2 + 9 + 1 = 12.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1000 <= nums[i] <= 400"
    ]
},
{
    "id": "199",
    "title": "Binary Tree Right Side View",
    "question": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.",
    "examples": [
        "Input: root = [1,2,3,null,5,null,4]",
        "Output: [1,3,4]",
        "Input: root = [1,null,3]",
        "Output: [1,3]",
        "Input: root = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 100].-100 <= Node. val <= 100"
    ]
},
{
    "id": "200",
    "title": "Number of Islands",
    "question": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.\n You may assume all four edges of the grid are all surrounded by water.",
    "examples": [
        "Input: grid = [",
        "  [\"1\",\"1\",\"1\",\"1\",\"0\"],",
        "  [\"1\",\"1\",\"0\",\"1\",\"0\"],",
        "  [\"1\",\"1\",\"0\",\"0\",\"0\"],",
        "  [\"0\",\"0\",\"0\",\"0\",\"0\"]",
        "]",
        "Output: 1",
        "Input: grid = [",
        "  [\"1\",\"1\",\"0\",\"0\",\"0\"],",
        "  [\"1\",\"1\",\"0\",\"0\",\"0\"],",
        "  [\"0\",\"0\",\"1\",\"0\",\"0\"],",
        "  [\"0\",\"0\",\"0\",\"1\",\"1\"]",
        "]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 300grid[i][j] is '0' or '1'."
    ]
},
{
    "id": "201",
    "title": "Bitwise AND of Numbers Range",
    "question": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.",
    "examples": [
        "Input: left = 5, right = 7",
        "Output: 4",
        "Input: left = 0, right = 0",
        "Output: 0",
        "Input: left = 1, right = 2147483647",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 <= left <= right <= 231 - 1"
    ]
},
{
    "id": "207",
    "title": "Course Schedule",
    "question": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1.\n You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\nReturn true if you can finish all courses.\n Otherwise, return false.",
    "examples": [
        "Input: numCourses = 2, prerequisites = [[1,0]]",
        "Output: true",
        "Explanation: There are a total of 2 courses to take. ",
        "To take course 1 you should have finished course 0. So it is possible.",
        "Input: numCourses = 2, prerequisites = [[1,0],[0,1]]",
        "Output: false",
        "Explanation: There are a total of 2 courses to take. ",
        "To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.",
        ""
    ],
    "constraints": [
        "For example",
        " the pair [0",
        " 1]",
        " indicates that to take course 0 you have to first take course 1. 1 <= numCourses <= 1050 <= prerequisites. length <= 5000prerequisites[i]. length == 20 <= ai",
        " bi < numCoursesAll the pairs prerequisites[i] are unique."
    ]
},
{
    "id": "208",
    "title": "Implement Trie (Prefix Tree)",
    "question": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings.\n There are various applications of this data structure, such as autocomplete and spellchecker.\nImplement the Trie class:",
    "examples": [
        "Input",
        "[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]",
        "[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]",
        "Output",
        "[null, null, true, false, true, null, true]",
        "",
        "Explanation",
        "Trie trie = new Trie();",
        "trie. insert(\"apple\");",
        "trie. search(\"apple\");   // return True",
        "trie. search(\"app\");     // return False",
        "trie. startsWith(\"app\"); // return True",
        "trie. insert(\"app\");",
        "trie. search(\"app\");     // return True",
        ""
    ],
    "constraints": [
        "Trie() Initializes the trie object. void insert(String word) Inserts the string word into the trie. boolean search(String word) Returns true if the string word is in the trie (i. e.",
        " was inserted before)",
        " and false otherwise. boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix",
        " and false otherwise. 1 <= word. length",
        " prefix. length <= 2000word and prefix consist only of lowercase English letters. At most 3 * 104 calls in total will be made to insert",
        " search",
        " and startsWith."
    ]
},
{
    "id": "209",
    "title": "Minimum Size Subarray Sum",
    "question": "Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, .\n.\n.\n, numsr-1, numsr] of which the sum is greater than or equal to target.\n If there is no such subarray, return 0 instead.",
    "examples": [
        "Input: target = 7, nums = [2,3,1,2,4,3]",
        "Output: 2",
        "Explanation: The subarray [4,3] has the minimal length under the problem constraint.",
        "Input: target = 4, nums = [1,4,4]",
        "Output: 1",
        "Input: target = 11, nums = [1,1,1,1,1,1,1,1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= target <= 1091 <= nums. length <= 1051 <= nums[i] <= 105"
    ]
},
{
    "id": "210",
    "title": "Course Schedule II",
    "question": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1.\n You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\nReturn the ordering of courses you should take to finish all courses.\n If there are many valid answers, return any of them.\n If it is impossible to finish all courses, return an empty array.",
    "examples": [
        "Input: numCourses = 2, prerequisites = [[1,0]]",
        "Output: [0,1]",
        "Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].",
        "Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]",
        "Output: [0,2,1,3]",
        "Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.",
        "So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].",
        "Input: numCourses = 1, prerequisites = []",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "For example",
        " the pair [0",
        " 1]",
        " indicates that to take course 0 you have to first take course 1. 1 <= numCourses <= 20000 <= prerequisites. length <= numCourses * (numCourses - 1)prerequisites[i]. length == 20 <= ai",
        " bi < numCoursesai != biAll the pairs [ai",
        " bi] are distinct."
    ]
},
{
    "id": "211",
    "title": "Design Add and Search Words Data Structure",
    "question": "Design a data structure that supports adding new words and finding if a string matches any previously added string.\nImplement the WordDictionary class: Example:",
    "examples": [
        "Input",
        "[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]",
        "[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\". ad\"],[\"b..\"]]",
        "Output",
        "[null,null,null,null,false,true,true,true]",
        "",
        "Explanation",
        "WordDictionary wordDictionary = new WordDictionary();",
        "wordDictionary. addWord(\"bad\");",
        "wordDictionary. addWord(\"dad\");",
        "wordDictionary. addWord(\"mad\");",
        "wordDictionary. search(\"pad\"); // return False",
        "wordDictionary. search(\"bad\"); // return True",
        "wordDictionary. search(\". ad\"); // return True",
        "wordDictionary. search(\"b..\"); // return True",
        ""
    ],
    "constraints": [
        "WordDictionary() Initializes the object. void addWord(word) Adds word to the data structure",
        " it can be matched later. bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter. 1 <= word. length <= 500word in addWord consists lower-case English letters. word in search consist of  '.' or lower-case English letters. At most 50000 calls will be made to addWord and search."
    ]
},
{
    "id": "213",
    "title": "House Robber II",
    "question": "You are a professional robber planning to rob houses along a street.\n Each house has a certain amount of money stashed.\n All houses at this place are arranged in a circle.\n That means the first house is the neighbor of the last one.\n Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
    "examples": [
        "Input: nums = [2,3,2]",
        "Output: 3",
        "Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.",
        "Input: nums = [1,2,3,1]",
        "Output: 4",
        "Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).",
        "Total amount you can rob = 1 + 3 = 4.",
        "Input: nums = [1,2,3]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1000 <= nums[i] <= 1000"
    ]
},
{
    "id": "206",
    "title": "Reverse Linked List",
    "question": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n   Follow up: A linked list can be reversed either iteratively or recursively.\n Could you implement both?",
    "examples": [
        "Input: head = [1,2,3,4,5]",
        "Output: [5,4,3,2,1]",
        "Input: head = [1,2]",
        "Output: [2,1]",
        "Input: head = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is the range [0",
        " 5000].-5000 <= Node. val <= 5000"
    ]
},
{
    "id": "215",
    "title": "Kth Largest Element in an Array",
    "question": "Given an integer array nums and an integer k, return the kth largest element in the array.\nNote that it is the kth largest element in the sorted order, not the kth distinct element.",
    "examples": [
        "Input: nums = [3,2,1,5,6,4], k = 2",
        "Output: 5",
        "Input: nums = [3,2,3,1,2,4,5,5,6], k = 4",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= k <= nums. length <= 104-104 <= nums[i] <= 104"
    ]
},
{
    "id": "216",
    "title": "Combination Sum III",
    "question": "Find all valid combinations of k numbers that sum up to n such that the following conditions are true:Return a list of all possible valid combinations.\n The list must not contain the same combination twice, and the combinations may be returned in any order.",
    "examples": [
        "Input: k = 3, n = 7",
        "Output: [[1,2,4]]",
        "Explanation:",
        "1 + 2 + 4 = 7",
        "There are no other valid combinations. Input: k = 3, n = 9",
        "Output: [[1,2,6],[1,3,5],[2,3,4]]",
        "Explanation:",
        "1 + 2 + 6 = 9",
        "1 + 3 + 5 = 9",
        "2 + 3 + 4 = 9",
        "There are no other valid combinations.",
        "Input: k = 4, n = 1",
        "Output: []",
        "Explanation: There are no valid combinations.",
        "Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.",
        "Input: k = 3, n = 2",
        "Output: []",
        "Explanation: There are no valid combinations.",
        "Input: k = 9, n = 45",
        "Output: [[1,2,3,4,5,6,7,8,9]]",
        "Explanation:",
        "1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45",
        "There are no other valid combinations.",
        ""
    ],
    "constraints": [
        "Only numbers 1 through 9 are used. Each number is used at most once. 2 <= k <= 91 <= n <= 60"
    ]
},
{
    "id": "220",
    "title": "Contains Duplicate III",
    "question": "Given an integer array nums and two integers k and t, return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.",
    "examples": [
        "Input: nums = [1,2,3,1], k = 3, t = 0",
        "Output: true",
        "Input: nums = [1,0,1,1], k = 1, t = 2",
        "Output: true",
        "Input: nums = [1,5,9,1,5,9], k = 2, t = 3",
        "Output: false",
        ""
    ],
    "constraints": [
        "0 <= nums. length <= 2 * 104-231 <= nums[i] <= 231 - 10 <= k <= 1040 <= t <= 231 - 1"
    ]
},
{
    "id": "221",
    "title": "Maximal Square",
    "question": "Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
    "examples": [
        "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "Output: 4",
        "Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]",
        "Output: 1",
        "Input: matrix = [[\"0\"]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 300matrix[i][j] is '0' or '1'."
    ]
},
{
    "id": "222",
    "title": "Count Complete Tree Nodes",
    "question": "Given the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible.\n It can have between 1 and 2h nodes inclusive at the last level h.\nDesign an algorithm that runs in less than O(n) time complexity.",
    "examples": [
        "Input: root = [1,2,3,4,5,6]",
        "Output: 6",
        "Input: root = []",
        "Output: 0",
        "Input: root = [1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 5 * 104]. 0 <= Node. val <= 5 * 104The tree is guaranteed to be complete."
    ]
},
{
    "id": "223",
    "title": "Rectangle Area",
    "question": "Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).",
    "examples": [
        "Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2",
        "Output: 45",
        "Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2",
        "Output: 16",
        ""
    ],
    "constraints": [
        "-104 <= ax1",
        " ay1",
        " ax2",
        " ay2",
        " bx1",
        " by1",
        " bx2",
        " by2 <= 104"
    ]
},
{
    "id": "227",
    "title": "Basic Calculator II",
    "question": "Given a string s which represents an expression, evaluate this expression and return its value.\n The integer division should truncate toward zero.\nYou may assume that the given expression is always valid.\n All intermediate results will be in the range of [-231, 231 - 1].\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().",
    "examples": [
        "Input: s = \"3+2*2\"",
        "Output: 7",
        "Input: s = \" 3/2 \"",
        "Output: 1",
        "Input: s = \" 3+5 / 2 \"",
        "Output: 5",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 3 * 105s consists of integers and operators ('+'",
        " '-'",
        " '*'",
        " '/') separated by some number of spaces. s represents a valid expression. All the integers in the expression are non-negative integers in the range [0",
        " 231 - 1]. The answer is guaranteed to fit in a 32-bit integer."
    ]
},
{
    "id": "229",
    "title": "Majority Element II",
    "question": "Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.\nFollow-up: Could you solve the problem in linear time and in O(1) space?",
    "examples": [
        "Input: nums = [3,2,3]",
        "Output: [3]",
        "Input: nums = [1]",
        "Output: [1]",
        "Input: nums = [1,2]",
        "Output: [1,2]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5 * 104-109 <= nums[i] <= 109"
    ]
},
{
    "id": "230",
    "title": "Kth Smallest Element in a BST",
    "question": "Given the root of a binary search tree, and an integer k, return the kth (1-indexed) smallest element in the tree.",
    "examples": [
        "Input: root = [3,1,4,null,2], k = 1",
        "Output: 1",
        "Input: root = [5,3,6,2,4,null,null,1], k = 3",
        "Output: 3",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is n. 1 <= k <= n <= 1040 <= Node. val <= 104"
    ]
},
{
    "id": "236",
    "title": "Lowest Common Ancestor of a Binary Tree",
    "question": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\n”",
    "examples": [
        "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "Output: 3",
        "Explanation: The LCA of nodes 5 and 1 is 3.",
        "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
        "Output: 5",
        "Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.",
        "Input: root = [1,2], p = 1, q = 2",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [2",
        " 105].-109 <= Node. val <= 109All Node. val are unique. p != qp and q will exist in the tree."
    ]
},
{
    "id": "20",
    "title": "Valid Parentheses",
    "question": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:",
    "examples": [
        "Input: s = \"()\"",
        "Output: true",
        "Input: s = \"()[]{}\"",
        "Output: true",
        "Input: s = \"(]\"",
        "Output: false",
        "Input: s = \"([)]\"",
        "Output: false",
        "Input: s = \"{[]}\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s consists of parentheses only '()[]{}'."
    ]
},
{
    "id": "217",
    "title": "Contains Duplicate",
    "question": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
    "examples": [
        "Input: nums = [1,2,3,1]",
        "Output: true",
        "Input: nums = [1,2,3,4]",
        "Output: false",
        "Input: nums = [1,1,1,3,3,4,3,2,4,2]",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105-109 <= nums[i] <= 109"
    ]
},
{
    "id": "238",
    "title": "Product of Array Except Self",
    "question": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in O(n) time and without using the division operation.\n   Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.\n)",
    "examples": [
        "Input: nums = [1,2,3,4]",
        "Output: [24,12,8,6]",
        "Input: nums = [-1,1,0,-3,3]",
        "Output: [0,0,9,0,0]",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 105-30 <= nums[i] <= 30The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."
    ]
},
{
    "id": "240",
    "title": "Search a 2D Matrix II",
    "question": "Write an efficient algorithm that searches for a target value in an m x n integer matrix.\n The matrix has the following properties:",
    "examples": [
        "Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5",
        "Output: true",
        "Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20",
        "Output: false",
        ""
    ],
    "constraints": [
        "Integers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom. m == matrix. lengthn == matrix[i]. length1 <= n",
        " m <= 300-109 <= matrix[i][j] <= 109All the integers in each row are sorted in ascending order. All the integers in each column are sorted in ascending order.-109 <= target <= 109"
    ]
},
{
    "id": "241",
    "title": "Different Ways to Add Parentheses",
    "question": "Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators.\n You may return the answer in any order.",
    "examples": [
        "Input: expression = \"2-1-1\"",
        "Output: [0,2]",
        "Explanation:",
        "((2-1)-1) = 0 ",
        "(2-(1-1)) = 2",
        "Input: expression = \"2*3-4*5\"",
        "Output: [-34,-14,-10,-10,10]",
        "Explanation:",
        "(2*(3-(4*5))) = -34 ",
        "((2*3)-(4*5)) = -14 ",
        "((2*(3-4))*5) = -10 ",
        "(2*((3-4)*5)) = -10 ",
        "(((2*3)-4)*5) = 10",
        ""
    ],
    "constraints": [
        "1 <= expression. length <= 20expression consists of digits and the operator '+'",
        " '-'",
        " and '*'."
    ]
},
{
    "id": "260",
    "title": "Single Number III",
    "question": "Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice.\n Find the two elements that appear only once.\n You can return the answer in any order.\nYou must write an algorithm that runs in linear runtime complexity and uses only constant extra space.",
    "examples": [
        "Input: nums = [1,2,1,3,2,5]",
        "Output: [3,5]",
        "Explanation:  [5, 3] is also a valid answer.",
        "Input: nums = [-1,0]",
        "Output: [-1,0]",
        "Input: nums = [0,1]",
        "Output: [1,0]",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 3 * 104-231 <= nums[i] <= 231 - 1Each integer in nums will appear twice",
        " only two integers will appear once."
    ]
},
{
    "id": "264",
    "title": "Ugly Number II",
    "question": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return the nth ugly number.",
    "examples": [
        "Input: n = 10",
        "Output: 12",
        "Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.",
        "Input: n = 1",
        "Output: 1",
        "Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.",
        ""
    ],
    "constraints": [
        "1 <= n <= 1690"
    ]
},
{
    "id": "274",
    "title": "H-Index",
    "question": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n − h papers have no more than h citations each.\nIf there are several possible values for h, the maximum one is taken as the h-index.",
    "examples": [
        "Input: citations = [3,0,6,1,5]",
        "Output: 3",
        "Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.",
        "Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.",
        "Input: citations = [1,3,1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "n == citations. length1 <= n <= 50000 <= citations[i] <= 1000"
    ]
},
{
    "id": "275",
    "title": "H-Index II",
    "question": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in an ascending order, return compute the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n − h papers have no more than h citations each.\nIf there are several possible values for h, the maximum one is taken as the h-index.\nYou must write an algorithm that runs in logarithmic time.",
    "examples": [
        "Input: citations = [0,1,3,5,6]",
        "Output: 3",
        "Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.",
        "Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.",
        "Input: citations = [1,2,100]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "n == citations. length1 <= n <= 1050 <= citations[i] <= 1000citations is sorted in ascending order."
    ]
},
{
    "id": "279",
    "title": "Perfect Squares",
    "question": "Given an integer n, return the least number of perfect square numbers that sum to n.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself.\n For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.",
    "examples": [
        "Input: n = 12",
        "Output: 3",
        "Explanation: 12 = 4 + 4 + 4.",
        "Input: n = 13",
        "Output: 2",
        "Explanation: 13 = 4 + 9.",
        ""
    ],
    "constraints": [
        "1 <= n <= 104"
    ]
},
{
    "id": "284",
    "title": "Peeking Iterator",
    "question": "Design an iterator that supports the peek operation on a list in addition to the hasNext and the next operations.\nImplement the PeekingIterator class:",
    "examples": [
        "Input",
        "[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]",
        "[[[1, 2, 3]], [], [], [], [], []]",
        "Output",
        "[null, 1, 2, 2, 3, false]",
        "",
        "Explanation",
        "PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]",
        "peekingIterator. next();    // return 1, the pointer moves to the next element [1,2,3].",
        "peekingIterator. peek();    // return 2, the pointer does not move [1,2,3].",
        "peekingIterator. next();    // return 2, the pointer moves to the next element [1,2,3]",
        "peekingIterator. next();    // return 3, the pointer moves to the next element [1,2,3]",
        "peekingIterator. hasNext(); // return False",
        ""
    ],
    "constraints": [
        "PeekingIterator(int[] nums) Initializes the object with the given integer array nums. int next() Returns the next element in the array and moves the pointer to the next element. bool hasNext() Returns true if there are still elements in the array. int peek() Returns the next element in the array without moving the pointer. 1 <= nums. length <= 10001 <= nums[i] <= 1000All the calls to next and peek are valid. At most 1000 calls will be made to next",
        " hasNext",
        " and peek."
    ]
},
{
    "id": "287",
    "title": "Find the Duplicate Number",
    "question": "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one repeated number in nums, return this repeated number.\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n   Follow up:",
    "examples": [
        "Input: nums = [1,3,4,2,2]",
        "Output: 2",
        "Input: nums = [3,1,3,4,2]",
        "Output: 3",
        "Input: nums = [1,1]",
        "Output: 1",
        "Input: nums = [1,1,2]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= n <= 105nums. length == n + 11 <= nums[i] <= nAll the integers in nums appear only once except for precisely one integer which appears two or more times. How can we prove that at least one duplicate number must exist in nums?Can you solve the problem in linear runtime complexity?"
    ]
},
{
    "id": "219",
    "title": "Contains Duplicate II",
    "question": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.",
    "examples": [
        "Input: nums = [1,2,3,1], k = 3",
        "Output: true",
        "Input: nums = [1,0,1,1], k = 1",
        "Output: true",
        "Input: nums = [1,2,3,1,2,3], k = 2",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105-109 <= nums[i] <= 1090 <= k <= 105"
    ]
},
{
    "id": "289",
    "title": "Game of Life",
    "question": "According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\n\"The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0).\n Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously.\n Given the current state of the m x n grid board, return the next state.\n   Follow up:",
    "examples": [
        "Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
        "Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]",
        "Input: board = [[1,1],[1,0]]",
        "Output: [[1,1],[1,1]]",
        ""
    ],
    "constraints": [
        "m == board. lengthn == board[i]. length1 <= m",
        " n <= 25board[i][j] is 0 or 1. Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells. In this question",
        " we represent the board using a 2D array. In principle",
        " the board is infinite",
        " which would cause problems when the active area encroaches upon the border of the array (i. e.",
        " live cells reach the border). How would you address these problems?"
    ]
},
{
    "id": "299",
    "title": "Bulls and Cows",
    "question": "You are playing the Bulls and Cows game with your friend.\nYou write down a secret number and ask your friend to guess what the number is.\n When your friend makes a guess, you provide a hint with the following info:Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.\nThe hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows.\n Note that both secret and guess may contain duplicate digits.",
    "examples": [
        "Input: secret = \"1807\", guess = \"7810\"",
        "Output: \"1A3B\"",
        "Explanation: Bulls are connected with a '|' and cows are underlined:",
        "\"1807\"",
        "  |",
        "\"7810\"Input: secret = \"1123\", guess = \"0111\"",
        "Output: \"1A1B\"",
        "Explanation: Bulls are connected with a '|' and cows are underlined:",
        "\"1123\"        \"1123\"",
        "  |      or     |",
        "\"0111\"        \"0111\"",
        "Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.",
        "Input: secret = \"1\", guess = \"0\"",
        "Output: \"0A0B\"",
        "Input: secret = \"1\", guess = \"1\"",
        "Output: \"1A0B\"",
        ""
    ],
    "constraints": [
        "The number of \"bulls\"",
        " which are digits in the guess that are in the correct position. The number of \"cows\"",
        " which are digits in the guess that are in your secret number but are located in the wrong position. Specifically",
        " the non-bull digits in the guess that could be rearranged such that they become bulls. 1 <= secret. length",
        " guess. length <= 1000secret. length == guess. lengthsecret and guess consist of digits only."
    ]
},
{
    "id": "300",
    "title": "Longest Increasing Subsequence",
    "question": "Given an integer array nums, return the length of the longest strictly increasing subsequence.\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.\n For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\n   Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?",
    "examples": [
        "Input: nums = [10,9,2,5,3,7,101,18]",
        "Output: 4",
        "Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.",
        "Input: nums = [0,1,0,3,2,3]",
        "Output: 4",
        "Input: nums = [7,7,7,7,7,7,7]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2500-104 <= nums[i] <= 104"
    ]
},
{
    "id": "304",
    "title": "Range Sum Query 2D - Immutable",
    "question": "Given a 2D matrix matrix, handle multiple queries of the following type:Implement the NumMatrix class:",
    "examples": [
        "Input",
        "[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]",
        "[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]",
        "Output",
        "[null, 8, 11, 12]",
        "",
        "Explanation",
        "NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);",
        "numMatrix. sumRegion(2, 1, 4, 3); // return 8 (i. e sum of the red rectangle)",
        "numMatrix. sumRegion(1, 1, 2, 2); // return 11 (i. e sum of the green rectangle)",
        "numMatrix. sumRegion(1, 2, 2, 4); // return 12 (i. e sum of the blue rectangle)",
        ""
    ],
    "constraints": [
        "Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1",
        " col1) and lower right corner (row2",
        " col2). NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix. int sumRegion(int row1",
        " int col1",
        " int row2",
        " int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1",
        " col1) and lower right corner (row2",
        " col2). m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 200-105 <= matrix[i][j] <= 1050 <= row1 <= row2 < m0 <= col1 <= col2 < nAt most 104 calls will be made to sumRegion."
    ]
},
{
    "id": "306",
    "title": "Additive Number",
    "question": "Additive number is a string whose digits can form additive sequence.\nA valid additive sequence should contain at least three numbers.\n Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\nGiven a string containing only digits '0'-'9', write a function to determine if it's an additive number.\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\n  Follow up:\nHow would you handle overflow for very large input integers?",
    "examples": [
        "Input: \"112358\"",
        "Output: true",
        "Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. ",
        "             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8",
        "Input: \"199100199\"",
        "Output: true",
        "Explanation: The additive sequence is: 1, 99, 100, 199. ",
        "             1 + 99 = 100, 99 + 100 = 199",
        ""
    ],
    "constraints": [
        "num consists only of digits '0'-'9'. 1 <= num. length <= 35"
    ]
},
{
    "id": "307",
    "title": "Range Sum Query - Mutable",
    "question": "Given an integer array nums, handle multiple queries of the following types:Implement the NumArray class:",
    "examples": [
        "Input",
        "[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]",
        "[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]",
        "Output",
        "[null, 9, null, 8]",
        "",
        "Explanation",
        "NumArray numArray = new NumArray([1, 3, 5]);",
        "numArray. sumRange(0, 2); // return 1 + 3 + 5 = 9",
        "numArray. update(1, 2);   // nums = [1, 2, 5]",
        "numArray. sumRange(0, 2); // return 1 + 2 + 5 = 8",
        ""
    ],
    "constraints": [
        "NumArray(int[] nums) Initializes the object with the integer array nums. void update(int index",
        " int val) Updates the value of nums[index] to be val. int sumRange(int left",
        " int right) Returns the sum of the elements of nums between indices left and right inclusive (i. e. nums[left] + nums[left + 1] + ... + nums[right]). 1 <= nums. length <= 3 * 104-100 <= nums[i] <= 1000 <= index < nums. length-100 <= val <= 1000 <= left <= right < nums. lengthAt most 3 * 104 calls will be made to update and sumRange."
    ]
},
{
    "id": "309",
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "question": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve.\n You may complete as many transactions as you like (i.\ne.\n, buy one and sell one share of the stock multiple times) with the following restrictions:Note: You may not engage in multiple transactions simultaneously (i.\ne.\n, you must sell the stock before you buy again).",
    "examples": [
        "Input: prices = [1,2,3,0,2]",
        "Output: 3",
        "Explanation: transactions = [buy, sell, cooldown, buy, sell]",
        "Input: prices = [1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "After you sell your stock",
        " you cannot buy stock on the next day (i. e.",
        " cooldown one day). 1 <= prices. length <= 50000 <= prices[i] <= 1000"
    ]
},
{
    "id": "310",
    "title": "Minimum Height Trees",
    "question": "A tree is an undirected graph in which any two vertices are connected by exactly one path.\n In other words, any connected graph without simple cycles is a tree.\nGiven a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root.\n When you select a node x as the root, the result tree has height h.\n Among all possible rooted trees, those with minimum height (i.\ne.\n min(h))  are called minimum height trees (MHTs).\nReturn a list of all MHTs' root labels.\n You can return the answer in any order.\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.",
    "examples": [
        "Input: n = 4, edges = [[1,0],[1,2],[1,3]]",
        "Output: [1]",
        "Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.",
        "Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]",
        "Output: [3,4]",
        "Input: n = 1, edges = []",
        "Output: [0]",
        "Input: n = 2, edges = [[0,1]]",
        "Output: [0,1]",
        ""
    ],
    "constraints": [
        "1 <= n <= 2 * 104edges. length == n - 10 <= ai",
        " bi < nai != biAll the pairs (ai",
        " bi) are distinct. The given input is guaranteed to be a tree and there will be no repeated edges."
    ]
},
{
    "id": "313",
    "title": "Super Ugly Number",
    "question": "A super ugly number is a positive integer whose prime factors are in the array primes.\nGiven an integer n and an array of integers primes, return the nth super ugly number.\nThe nth super ugly number is guaranteed to fit in a 32-bit signed integer.",
    "examples": [
        "Input: n = 12, primes = [2,7,13,19]",
        "Output: 32",
        "Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].",
        "Input: n = 1, primes = [2,3,5]",
        "Output: 1",
        "Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].",
        ""
    ],
    "constraints": [
        "1 <= n <= 1061 <= primes. length <= 1002 <= primes[i] <= 1000primes[i] is guaranteed to be a prime number. All the values of primes are unique and sorted in ascending order."
    ]
},
{
    "id": "316",
    "title": "Remove Duplicate Letters",
    "question": "Given a string s, remove duplicate letters so that every letter appears once and only once.\n You must make sure your result is the smallest in lexicographical order among all possible results.\n   Note: This question is the same as 1081: https://leetcode.\ncom/problems/smallest-subsequence-of-distinct-characters/",
    "examples": [
        "Input: s = \"bcabc\"",
        "Output: \"abc\"",
        "Input: s = \"cbacdcbc\"",
        "Output: \"acdb\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s consists of lowercase English letters."
    ]
},
{
    "id": "225",
    "title": "Implement Stack using Queues",
    "question": "Implement a last-in-first-out (LIFO) stack using only two queues.\n The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\nImplement the MyStack class:Notes:   Follow-up: Can you implement the stack using only one queue?",
    "examples": [
        "Input",
        "[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]",
        "[[], [1], [2], [], [], []]",
        "Output",
        "[null, null, null, 2, 2, false]",
        "",
        "Explanation",
        "MyStack myStack = new MyStack();",
        "myStack. push(1);",
        "myStack. push(2);",
        "myStack. top(); // return 2",
        "myStack. pop(); // return 2",
        "myStack. empty(); // return False",
        ""
    ],
    "constraints": [
        "void push(int x) Pushes element x to the top of the stack. int pop() Removes the element on the top of the stack and returns it. int top() Returns the element on the top of the stack. boolean empty() Returns true if the stack is empty",
        " false otherwise. You must use only standard operations of a queue",
        " which means that only push to back",
        " peek/pop from front",
        " size and is empty operations are valid. Depending on your language",
        " the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations. 1 <= x <= 9At most 100 calls will be made to push",
        " pop",
        " top",
        " and empty. All the calls to pop and top are valid."
    ]
},
{
    "id": "318",
    "title": "Maximum Product of Word Lengths",
    "question": "Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters.\n If no such two words exist, return 0.",
    "examples": [
        "Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]",
        "Output: 16",
        "Explanation: The two words can be \"abcw\", \"xtfn\".",
        "Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]",
        "Output: 4",
        "Explanation: The two words can be \"ab\", \"cd\".",
        "Input: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
        "Output: 0",
        "Explanation: No such pair of words.",
        ""
    ],
    "constraints": [
        "2 <= words. length <= 10001 <= words[i]. length <= 1000words[i] consists only of lowercase English letters."
    ]
},
{
    "id": "319",
    "title": "Bulb Switcher",
    "question": "There are n bulbs that are initially off.\n You first turn on all the bulbs, then you turn off every second bulb.\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on).\n For the ith round, you toggle every i bulb.\n For the nth round, you only toggle the last bulb.\nReturn the number of bulbs that are on after n rounds.",
    "examples": [
        "Input: n = 3",
        "Output: 1",
        "Explanation: At first, the three bulbs are [off, off, off].",
        "After the first round, the three bulbs are [on, on, on].",
        "After the second round, the three bulbs are [on, off, on].",
        "After the third round, the three bulbs are [on, off, off]. ",
        "So you should return 1 because there is only one bulb is on. Input: n = 0",
        "Output: 0",
        "Input: n = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "0 <= n <= 109"
    ]
},
{
    "id": "322",
    "title": "Coin Change",
    "question": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount.\n If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.",
    "examples": [
        "Input: coins = [1,2,5], amount = 11",
        "Output: 3",
        "Explanation: 11 = 5 + 5 + 1",
        "Input: coins = [2], amount = 3",
        "Output: -1",
        "Input: coins = [1], amount = 0",
        "Output: 0",
        "Input: coins = [1], amount = 1",
        "Output: 1",
        "Input: coins = [1], amount = 2",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= coins. length <= 121 <= coins[i] <= 231 - 10 <= amount <= 104"
    ]
},
{
    "id": "324",
    "title": "Wiggle Sort II",
    "question": "Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3].\n.\n.\n.\nYou may assume the input array always has a valid answer.",
    "examples": [
        "Input: nums = [1,5,1,1,6,4]",
        "Output: [1,6,1,5,1,4]",
        "Explanation: [1,4,1,5,1,6] is also accepted.",
        "Input: nums = [1,3,2,2,3,1]",
        "Output: [2,3,1,3,1,2]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5 * 1040 <= nums[i] <= 5000It is guaranteed that there will be an answer for the given input nums."
    ]
},
{
    "id": "328",
    "title": "Odd Even Linked List",
    "question": "Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\nThe first node is considered odd, and the second node is even, and so on.\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\nYou must solve the problem in O(1) extra space complexity and O(n) time complexity.",
    "examples": [
        "Input: head = [1,2,3,4,5]",
        "Output: [1,3,5,2,4]",
        "Input: head = [2,1,3,5,6,4,7]",
        "Output: [2,3,6,7,1,5,4]",
        ""
    ],
    "constraints": [
        "n == number of nodes in the linked list0 <= n <= 104-106 <= Node. val <= 106"
    ]
},
{
    "id": "331",
    "title": "Verify Preorder Serialization of a Binary Tree",
    "question": "One way to serialize a binary tree is to use preorder traversal.\n When we encounter a non-null node, we record the node's value.\n If it is a null node, we record using a sentinel value such as '#'.\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\nYou may assume that the input format is always valid.\nNote: You are not allowed to reconstruct the tree.",
    "examples": [
        "Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"",
        "Output: true",
        "Input: preorder = \"1,#\"",
        "Output: false",
        "Input: preorder = \"9,#,#,1\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "For example",
        " it could never contain two consecutive commas",
        " such as \"1",
        "",
        "3\". 1 <= preorder. length <= 104preorder consist of integers in the range [0",
        " 100] and '#' separated by commas '",
        "'."
    ]
},
{
    "id": "332",
    "title": "Reconstruct Itinerary",
    "question": "You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight.\n Reconstruct the itinerary in order and return it.\nAll of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\".\n If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\nYou may assume all tickets form at least one valid itinerary.\n You must use all the tickets once and only once.",
    "examples": [
        "Input: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]",
        "Output: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]",
        "Input: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]",
        "Output: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]",
        "Explanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.",
        ""
    ],
    "constraints": [
        "For example",
        " the itinerary [\"JFK\"",
        " \"LGA\"] has a smaller lexical order than [\"JFK\"",
        " \"LGB\"]. 1 <= tickets. length <= 300tickets[i]. length == 2fromi. length == 3toi. length == 3fromi and toi consist of uppercase English letters. fromi != toi"
    ]
},
{
    "id": "334",
    "title": "Increasing Triplet Subsequence",
    "question": "Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k].\n If no such indices exists, return false.",
    "examples": [
        "Input: nums = [1,2,3,4,5]",
        "Output: true",
        "Explanation: Any triplet where i < j < k is valid.",
        "Input: nums = [5,4,3,2,1]",
        "Output: false",
        "Explanation: No triplet exists.",
        "Input: nums = [2,1,5,0,4,6]",
        "Output: true",
        "Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5 * 105-231 <= nums[i] <= 231 - 1"
    ]
},
{
    "id": "337",
    "title": "House Robber III",
    "question": "The thief has found himself a new place for his thievery again.\n There is only one entrance to this area, called root.\nBesides the root, each house has one and only one parent house.\n After a tour, the smart thief realized that all houses in this place form a binary tree.\n It will automatically contact the police if two directly-linked houses were broken into on the same night.\nGiven the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.",
    "examples": [
        "Input: root = [3,2,3,null,3,null,1]",
        "Output: 7",
        "Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.",
        "Input: root = [3,4,5,1,3,null,1]",
        "Output: 9",
        "Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104]. 0 <= Node. val <= 104"
    ]
},
{
    "id": "341",
    "title": "Flatten Nested List Iterator",
    "question": "You are given a nested list of integers nestedList.\n Each element is either an integer or a list whose elements may also be integers or other lists.\n Implement an iterator to flatten it.\nImplement the NestedIterator class:Your code will be tested with the following pseudocode:If res matches the expected flattened list, then your code will be judged as correct.",
    "examples": [
        "initialize iterator with nestedList",
        "res = []",
        "while iterator. hasNext()",
        "    append iterator. next() to the end of res",
        "return res",
        "Input: nestedList = [[1,1],2,[1,1]]",
        "Output: [1,1,2,1,1]",
        "Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].",
        "Input: nestedList = [1,[4,[6]]]",
        "Output: [1,4,6]",
        "Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].",
        ""
    ],
    "constraints": [
        "NestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList. int next() Returns the next integer in the nested list. boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise. 1 <= nestedList. length <= 500The values of the integers in the nested list is in the range [-106",
        " 106]."
    ]
},
{
    "id": "226",
    "title": "Invert Binary Tree",
    "question": "Given the root of a binary tree, invert the tree, and return its root.",
    "examples": [
        "Input: root = [4,2,7,1,3,6,9]",
        "Output: [4,7,2,9,6,3,1]",
        "Input: root = [2,1,3]",
        "Output: [2,3,1]",
        "Input: root = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 100].-100 <= Node. val <= 100"
    ]
},
{
    "id": "343",
    "title": "Integer Break",
    "question": "Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\nReturn the maximum product you can get.",
    "examples": [
        "Input: n = 2",
        "Output: 1",
        "Explanation: 2 = 1 + 1, 1 × 1 = 1.",
        "Input: n = 10",
        "Output: 36",
        "Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.",
        ""
    ],
    "constraints": [
        "2 <= n <= 58"
    ]
},
{
    "id": "347",
    "title": "Top K Frequent Elements",
    "question": "Given an integer array nums and an integer k, return the k most frequent elements.\n You may return the answer in any order.\n   Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.",
    "examples": [
        "Input: nums = [1,1,1,2,2,3], k = 2",
        "Output: [1,2]",
        "Input: nums = [1], k = 1",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105k is in the range [1",
        " the number of unique elements in the array]. It is guaranteed that the answer is unique."
    ]
},
{
    "id": "355",
    "title": "Design Twitter",
    "question": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\nImplement the Twitter class:",
    "examples": [
        "Input",
        "[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]",
        "[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]",
        "Output",
        "[null, null, [5], null, null, [6, 5], null, [5]]",
        "",
        "Explanation",
        "Twitter twitter = new Twitter();",
        "twitter. postTweet(1, 5); // User 1 posts a new tweet (id = 5).",
        "twitter. getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]",
        "twitter. follow(1, 2);    // User 1 follows user 2.",
        "twitter. postTweet(2, 6); // User 2 posts a new tweet (id = 6).",
        "twitter. getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.",
        "twitter. unfollow(1, 2);  // User 1 unfollows user 2.",
        "twitter. getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.",
        ""
    ],
    "constraints": [
        "Twitter() Initializes your twitter object. void postTweet(int userId",
        " int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId. List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent. void follow(int followerId",
        " int followeeId) The user with ID followerId started following the user with ID followeeId. void unfollow(int followerId",
        " int followeeId) The user with ID followerId started unfollowing the user with ID followeeId. 1 <= userId",
        " followerId",
        " followeeId <= 5000 <= tweetId <= 104All the tweets have unique IDs. At most 3 * 104 calls will be made to postTweet",
        " getNewsFeed",
        " follow",
        " and unfollow."
    ]
},
{
    "id": "357",
    "title": "Count Numbers with Unique Digits",
    "question": "Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.",
    "examples": [
        "Input: n = 2",
        "Output: 91",
        "Explanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99",
        "Input: n = 0",
        "Output: 1",
        ""
    ],
    "constraints": [
        "0 <= n <= 8"
    ]
},
{
    "id": "365",
    "title": "Water and Jug Problem",
    "question": "You are given two jugs with capacities jug1Capacity and jug2Capacity liters.\n There is an infinite amount of water supply available.\n Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.\nIf targetCapacity liters of water are measurable, you must have targetCapacity liters of water contained within one or both buckets by the end.\nOperations allowed:",
    "examples": [
        "Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4",
        "Output: true",
        "Explanation: The famous Die Hard example ",
        "Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5",
        "Output: false",
        "Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3",
        "Output: true",
        ""
    ],
    "constraints": [
        "Fill any of the jugs with water. Empty any of the jugs. Pour water from one jug into another till the other jug is completely full",
        " or the first jug itself is empty. 1 <= jug1Capacity",
        " jug2Capacity",
        " targetCapacity <= 106"
    ]
},
{
    "id": "368",
    "title": "Largest Divisible Subset",
    "question": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:If there are multiple solutions, return any of them.",
    "examples": [
        "Input: nums = [1,2,3]",
        "Output: [1,2]",
        "Explanation: [1,3] is also accepted.",
        "Input: nums = [1,2,4,8]",
        "Output: [1,2,4,8]",
        ""
    ],
    "constraints": [
        "answer[i] % answer[j] == 0",
        " oranswer[j] % answer[i] == 01 <= nums. length <= 10001 <= nums[i] <= 2 * 109All the integers in nums are unique."
    ]
},
{
    "id": "371",
    "title": "Sum of Two Integers",
    "question": "Given two integers a and b, return the sum of the two integers without using the operators + and -.",
    "examples": [
        "Input: a = 1, b = 2",
        "Output: 3",
        "Input: a = 2, b = 3",
        "Output: 5",
        ""
    ],
    "constraints": [
        "-1000 <= a",
        " b <= 1000"
    ]
},
{
    "id": "372",
    "title": "Super Pow",
    "question": "Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.",
    "examples": [
        "Input: a = 2, b = [3]",
        "Output: 8",
        "Input: a = 2, b = [1,0]",
        "Output: 1024",
        "Input: a = 1, b = [4,3,3,8,5,2]",
        "Output: 1",
        "Input: a = 2147483647, b = [2,0,0]",
        "Output: 1198",
        ""
    ],
    "constraints": [
        "1 <= a <= 231 - 11 <= b. length <= 20000 <= b[i] <= 9b doesn't contain leading zeros."
    ]
},
{
    "id": "373",
    "title": "Find K Pairs with Smallest Sums",
    "question": "You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.\nDefine a pair (u, v) which consists of one element from the first array and one element from the second array.\nReturn the k pairs (u1, v1), (u2, v2), .\n.\n.\n, (uk, vk) with the smallest sums.",
    "examples": [
        "Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3",
        "Output: [[1,2],[1,4],[1,6]]",
        "Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]",
        "Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2",
        "Output: [[1,1],[1,1]]",
        "Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]",
        "Input: nums1 = [1,2], nums2 = [3], k = 3",
        "Output: [[1,3],[2,3]]",
        "Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]",
        ""
    ],
    "constraints": [
        "1 <= nums1. length",
        " nums2. length <= 105-109 <= nums1[i]",
        " nums2[i] <= 109nums1 and nums2 both are sorted in ascending order. 1 <= k <= 1000"
    ]
},
{
    "id": "375",
    "title": "Guess Number Higher or Lower II",
    "question": "We are playing the Guessing Game.\n The game will work as follows:Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.",
    "examples": [
        "Input: n = 10",
        "Output: 16",
        "Explanation: The winning strategy is as follows:",
        "- The range is [1,10]. Guess 7.",
        "    - If this is my number, your total is $0. Otherwise, you pay $7.",
        "    - If my number is higher, the range is [8,10]. Guess 9.",
        "        - If this is my number, your total is $7. Otherwise, you pay $9.",
        "        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.",
        "        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.",
        "    - If my number is lower, the range is [1,6]. Guess 3.",
        "        - If this is my number, your total is $7. Otherwise, you pay $3.",
        "        - If my number is higher, the range is [4,6]. Guess 5.",
        "            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.",
        "            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.",
        "            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.",
        "        - If my number is lower, the range is [1,2]. Guess 1.",
        "            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.",
        "            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.",
        "The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.",
        "Input: n = 1",
        "Output: 0",
        "Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.",
        "Input: n = 2",
        "Output: 1",
        "Explanation: There are two possible numbers, 1 and 2.",
        "- Guess 1.",
        "    - If this is my number, your total is $0. Otherwise, you pay $1.",
        "    - If my number is higher, it must be 2. Guess 2. Your total is $1.",
        "The worst case is that you pay $1.",
        ""
    ],
    "constraints": [
        "1 <= n <= 200"
    ]
},
{
    "id": "228",
    "title": "Summary Ranges",
    "question": "You are given a sorted unique integer array nums.\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly.\n That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\nEach range [a,b] in the list should be output as:",
    "examples": [
        "Input: nums = [0,1,2,4,5,7]",
        "Output: [\"0->2\",\"4->5\",\"7\"]",
        "Explanation: The ranges are:",
        "[0,2] --> \"0->2\"",
        "[4,5] --> \"4->5\"",
        "[7,7] --> \"7\"",
        "Input: nums = [0,2,3,4,6,8,9]",
        "Output: [\"0\",\"2->4\",\"6\",\"8->9\"]",
        "Explanation: The ranges are:",
        "[0,0] --> \"0\"",
        "[2,4] --> \"2->4\"",
        "[6,6] --> \"6\"",
        "[8,9] --> \"8->9\"",
        "Input: nums = []",
        "Output: []",
        "Input: nums = [-1]",
        "Output: [\"-1\"]",
        "Input: nums = [0]",
        "Output: [\"0\"]",
        ""
    ],
    "constraints": [
        "\"a->b\" if a != b\"a\" if a == b0 <= nums. length <= 20-231 <= nums[i] <= 231 - 1All the values of nums are unique. nums is sorted in ascending order."
    ]
},
{
    "id": "376",
    "title": "Wiggle Subsequence",
    "question": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative.\n The first difference (if one exists) may be either positive or negative.\n A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\nGiven an integer array nums, return the length of the longest wiggle subsequence of nums.\n   Follow up: Could you solve this in O(n) time?",
    "examples": [
        "Input: nums = [1,7,4,9,2,5]",
        "Output: 6",
        "Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).",
        "Input: nums = [1,17,5,10,13,15,10,5,16,8]",
        "Output: 7",
        "Explanation: There are several subsequences that achieve this length.",
        "One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).",
        "Input: nums = [1,2,3,4,5,6,7,8,9]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "For example",
        " [1",
        " 7",
        " 4",
        " 9",
        " 2",
        " 5] is a wiggle sequence because the differences (6",
        " -3",
        " 5",
        " -7",
        " 3) alternate between positive and negative. In contrast",
        " [1",
        " 4",
        " 7",
        " 2",
        " 5] and [1",
        " 7",
        " 4",
        " 5",
        " 5] are not wiggle sequences. The first is not because its first two differences are positive",
        " and the second is not because its last difference is zero. 1 <= nums. length <= 10000 <= nums[i] <= 1000"
    ]
},
{
    "id": "377",
    "title": "Combination Sum IV",
    "question": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.\nThe answer is guaranteed to fit in a 32-bit integer.\n   Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?",
    "examples": [
        "Input: nums = [1,2,3], target = 4",
        "Output: 7",
        "Explanation:",
        "The possible combination ways are:",
        "(1, 1, 1, 1)",
        "(1, 1, 2)",
        "(1, 2, 1)",
        "(1, 3)",
        "(2, 1, 1)",
        "(2, 2)",
        "(3, 1)",
        "Note that different sequences are counted as different combinations.",
        "Input: nums = [9], target = 3",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2001 <= nums[i] <= 1000All the elements of nums are unique. 1 <= target <= 1000"
    ]
},
{
    "id": "378",
    "title": "Kth Smallest Element in a Sorted Matrix",
    "question": "Given an n x n matrix where each of the rows and columns are sorted in ascending order, return the kth smallest element in the matrix.\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.",
    "examples": [
        "Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8",
        "Output: 13",
        "Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13",
        "Input: matrix = [[-5]], k = 1",
        "Output: -5",
        ""
    ],
    "constraints": [
        "n == matrix. lengthn == matrix[i]. length1 <= n <= 300-109 <= matrix[i][j] <= 109All the rows and columns of matrix are guaranteed to be sorted in non-decreasing order. 1 <= k <= n2"
    ]
},
{
    "id": "380",
    "title": "Insert Delete GetRandom O(1)",
    "question": "Implement the RandomizedSet class:You must implement the functions of the class such that each function works in average O(1) time complexity.",
    "examples": [
        "Input",
        "[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]",
        "[[], [1], [2], [2], [], [1], [2], []]",
        "Output",
        "[null, true, false, true, 2, true, false, 2]",
        "",
        "Explanation",
        "RandomizedSet randomizedSet = new RandomizedSet();",
        "randomizedSet. insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.",
        "randomizedSet. remove(2); // Returns false as 2 does not exist in the set.",
        "randomizedSet. insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].",
        "randomizedSet. getRandom(); // getRandom() should return either 1 or 2 randomly.",
        "randomizedSet. remove(1); // Removes 1 from the set, returns true. Set now contains [2].",
        "randomizedSet. insert(2); // 2 was already in the set, so return false.",
        "randomizedSet. getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.",
        ""
    ],
    "constraints": [
        "RandomizedSet() Initializes the RandomizedSet object. bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present",
        " false otherwise. bool remove(int val) Removes an item val from the set if present. Returns true if the item was present",
        " false otherwise. int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.-231 <= val <= 231 - 1At most 2 * 105 calls will be made to insert",
        " remove",
        " and getRandom. There will be at least one element in the data structure when getRandom is called."
    ]
},
{
    "id": "382",
    "title": "Linked List Random Node",
    "question": "Given a singly linked list, return a random node's value from the linked list.\n Each node must have the same probability of being chosen.\nImplement the Solution class:   Follow up:",
    "examples": [
        "Input",
        "[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]",
        "[[[1, 2, 3]], [], [], [], [], []]",
        "Output",
        "[null, 1, 3, 2, 2, 3]",
        "",
        "Explanation",
        "Solution solution = new Solution([1, 2, 3]);",
        "solution. getRandom(); // return 1",
        "solution. getRandom(); // return 3",
        "solution. getRandom(); // return 2",
        "solution. getRandom(); // return 2",
        "solution. getRandom(); // return 3",
        "// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.",
        ""
    ],
    "constraints": [
        "Solution(ListNode head) Initializes the object with the integer array nums. int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be choosen. The number of nodes in the linked list will be in the range [1",
        " 104].-104 <= Node. val <= 104At most 104 calls will be made to getRandom. What if the linked list is extremely large and its length is unknown to you?Could you solve this efficiently without using extra space?"
    ]
},
{
    "id": "384",
    "title": "Shuffle an Array",
    "question": "Given an integer array nums, design an algorithm to randomly shuffle the array.\n All permutations of the array should be equally likely as a result of the shuffling.\nImplement the Solution class:",
    "examples": [
        "Input",
        "[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]",
        "[[[1, 2, 3]], [], [], []]",
        "Output",
        "[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]",
        "",
        "Explanation",
        "Solution solution = new Solution([1, 2, 3]);",
        "solution. shuffle();    // Shuffle the array [1,2,3] and return its result.",
        "                       // Any permutation of [1,2,3] must be equally likely to be returned.",
        "                       // Example: return [3, 1, 2]",
        "solution. reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]",
        "solution. shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]",
        "",
        ""
    ],
    "constraints": [
        "Solution(int[] nums) Initializes the object with the integer array nums. int[] reset() Resets the array to its original configuration and returns it. int[] shuffle() Returns a random shuffling of the array. 1 <= nums. length <= 200-106 <= nums[i] <= 106All the elements of nums are unique. At most 5 * 104 calls in total will be made to reset and shuffle."
    ]
},
{
    "id": "385",
    "title": "Mini Parser",
    "question": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.\nEach element is either an integer or a list whose elements may also be integers or other lists.",
    "examples": [
        "Input: s = \"324\"",
        "Output: 324",
        "Explanation: You should return a NestedInteger object which contains a single integer 324.",
        "Input: s = \"[123,[456,[789]]]\"",
        "Output: [123,[456,[789]]]",
        "Explanation: Return a NestedInteger object containing a nested list with 2 elements:",
        "1. An integer containing value 123.",
        "2. A nested list containing two elements:",
        "    i.  An integer containing value 456.",
        "    ii. A nested list with one element:",
        "         a. An integer containing value 789",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 5 * 104s consists of digits",
        " square brackets \"[]\"",
        " negative sign '-'",
        " and commas '",
        "'. s is the serialization of valid NestedInteger."
    ]
},
{
    "id": "386",
    "title": "Lexicographical Numbers",
    "question": "Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\nYou must write an algorithm that runs in O(n) time and uses O(1) extra space.",
    "examples": [
        "Input: n = 13",
        "Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]",
        "Input: n = 2",
        "Output: [1,2]",
        ""
    ],
    "constraints": [
        "1 <= n <= 5 * 104"
    ]
},
{
    "id": "388",
    "title": "Longest Absolute File Path",
    "question": "Suppose we have a file system that stores both files and directories.\n An example of one system is represented in the following picture:Here, we have dir as the only directory in the root.\n dir contains two subdirectories, subdir1 and subdir2.\n subdir1 contains a file file1.\next and subdirectory subsubdir1.\n subdir2 contains a subdirectory subsubdir2, which contains a file file2.\next.\nIn text form, it looks like this (with ⟶ representing the tab character):If we were to write this representation in code, it will look like this: \"dir\\n\\tsubdir1\\n\\t\\tfile1.\next\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.\next\".\n Note that the '\\n' and '\\t' are the new-line and tab characters.\nEvery file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s.\n Using the above example, the absolute path to file2.\next is \"dir/subdir2/subsubdir2/file2.\next\".\n Each directory name consists of letters, digits, and/or spaces.\n Each file name is of the form name.\nextension, where name and extension consist of letters, digits, and/or spaces.\nGiven a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system.\n If there is no file in the system, return 0.",
    "examples": [
        "dir",
        "⟶ subdir1",
        "⟶ ⟶ file1. ext",
        "⟶ ⟶ subsubdir1",
        "⟶ subdir2",
        "⟶ ⟶ subsubdir2",
        "⟶ ⟶ ⟶ file2. ext",
        "Input: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile. ext\"",
        "Output: 20",
        "Explanation: We have only one file, and the absolute path is \"dir/subdir2/file. ext\" of length 20.",
        "Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1. ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2. ext\"",
        "Output: 32",
        "Explanation: We have two files:",
        "\"dir/subdir1/file1. ext\" of length 21",
        "\"dir/subdir2/subsubdir2/file2. ext\" of length 32.",
        "We return 32 since it is the longest absolute path to a file.",
        "Input: input = \"a\"",
        "Output: 0",
        "Explanation: We do not have any files, just a single directory named \"a\".",
        "Input: input = \"file1. txt\\nfile2. txt\\nlongfile. txt\"",
        "Output: 12",
        "Explanation: There are 3 files at the root directory.",
        "Since the absolute path for anything at the root directory is just the name itself, the answer is \"longfile. txt\" with length 12.",
        ""
    ],
    "constraints": [
        "1 <= input. length <= 104input may contain lowercase or uppercase English letters",
        " a new line character '\\n'",
        " a tab character '\\t'",
        " a dot '.'",
        " a space ' '",
        " and digits."
    ]
},
{
    "id": "390",
    "title": "Elimination Game",
    "question": "You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order.\n Apply the following algorithm on arr:Given the integer n, return the last number that remains in arr.",
    "examples": [
        "Input: n = 9",
        "Output: 6",
        "Explanation:",
        "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "arr = [2, 4, 6, 8]",
        "arr = [2, 6]",
        "arr = [6]",
        "Input: n = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "Starting from left to right",
        " remove the first number and every other number afterward until you reach the end of the list. Repeat the previous step again",
        " but this time from right to left",
        " remove the rightmost number and every other number from the remaining numbers. Keep repeating the steps again",
        " alternating left to right and right to left",
        " until a single number remains. 1 <= n <= 109"
    ]
},
{
    "id": "231",
    "title": "Power of Two",
    "question": "Given an integer n, return true if it is a power of two.\n Otherwise, return false.\nAn integer n is a power of two, if there exists an integer x such that n == 2x.",
    "examples": [
        "Input: n = 1",
        "Output: true",
        "Explanation: 20 = 1",
        "Input: n = 16",
        "Output: true",
        "Explanation: 24 = 16",
        "Input: n = 3",
        "Output: false",
        "Input: n = 4",
        "Output: true",
        "Input: n = 5",
        "Output: false",
        ""
    ],
    "constraints": [
        "-231 <= n <= 231 - 1"
    ]
},
{
    "id": "393",
    "title": "UTF-8 Validation",
    "question": "Given an integer array data representing the data, return whether it is a valid UTF-8 encoding.\nA character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:This is how the UTF-8 encoding would work:Note: The input is an array of integers.\n Only the least significant 8 bits of each integer is used to store the data.\n This means each integer represents only 1 byte of data.",
    "examples": [
        "   Char. number range  |        UTF-8 octet sequence",
        "      (hexadecimal)    |              (binary)",
        "   --------------------+---------------------------------------------",
        "   0000 0000-0000 007F | 0xxxxxxx",
        "   0000 0080-0000 07FF | 110xxxxx 10xxxxxx",
        "   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx",
        "   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx",
        "Input: data = [197,130,1]",
        "Output: true",
        "Explanation: data represents the octet sequence: 11000101 10000010 00000001.",
        "It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.",
        "Input: data = [235,140,4]",
        "Output: false",
        "Explanation: data represented the octet sequence: 11101011 10001100 00000100.",
        "The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.",
        "The next byte is a continuation byte which starts with 10 and that's correct.",
        "But the second continuation byte does not start with 10, so it is invalid.",
        ""
    ],
    "constraints": [
        "1 <= data. length <= 2 * 1040 <= data[i] <= 255"
    ]
},
{
    "id": "394",
    "title": "Decode String",
    "question": "Given an encoded string, return its decoded string.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times.\n Note that k is guaranteed to be a positive integer.\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.\nFurthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k.\n For example, there won't be input like 3a or 2[4].",
    "examples": [
        "Input: s = \"3[a]2[bc]\"",
        "Output: \"aaabcbc\"",
        "Input: s = \"3[a2[c]]\"",
        "Output: \"accaccacc\"",
        "Input: s = \"2[abc]3[cd]ef\"",
        "Output: \"abcabccdcdcdef\"",
        "Input: s = \"abc3[cd]xyz\"",
        "Output: \"abccdcdcdxyz\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 30s consists of lowercase English letters",
        " digits",
        " and square brackets '[]'. s is guaranteed to be a valid input. All the integers in s are in the range [1",
        " 300]."
    ]
},
{
    "id": "395",
    "title": "Longest Substring with At Least K Repeating Characters",
    "question": "Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.",
    "examples": [
        "Input: s = \"aaabb\", k = 3",
        "Output: 3",
        "Explanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.",
        "Input: s = \"ababbc\", k = 2",
        "Output: 5",
        "Explanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s consists of only lowercase English letters. 1 <= k <= 105"
    ]
},
{
    "id": "396",
    "title": "Rotate Function",
    "question": "You are given an integer array nums of length n.\nAssume arrk to be an array obtained by rotating nums by k positions clock-wise.\n We define the rotation function F on nums as follow:Return the maximum value of F(0), F(1), .\n.\n.\n, F(n-1).\nThe test cases are generated so that the answer fits in a 32-bit integer.",
    "examples": [
        "Input: nums = [4,3,2,6]",
        "Output: 26",
        "Explanation:",
        "F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25",
        "F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16",
        "F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23",
        "F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26",
        "So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.",
        "Input: nums = [100]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1]. n == nums. length1 <= n <= 105-100 <= nums[i] <= 100"
    ]
},
{
    "id": "397",
    "title": "Integer Replacement",
    "question": "Given a positive integer n, you can apply one of the following operations:Return the minimum number of operations needed for n to become 1.",
    "examples": [
        "Input: n = 8",
        "Output: 3",
        "Explanation: 8 -> 4 -> 2 -> 1",
        "Input: n = 7",
        "Output: 4",
        "Explanation: 7 -> 8 -> 4 -> 2 -> 1",
        "or 7 -> 6 -> 3 -> 2 -> 1",
        "Input: n = 4",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= n <= 231 - 1"
    ]
},
{
    "id": "398",
    "title": "Random Pick Index",
    "question": "Given an integer array nums with possible duplicates, randomly output the index of a given target number.\n You can assume that the given target number must exist in the array.\nImplement the Solution class:",
    "examples": [
        "Input",
        "[\"Solution\", \"pick\", \"pick\", \"pick\"]",
        "[[[1, 2, 3, 3, 3]], [3], [1], [3]]",
        "Output",
        "[null, 4, 0, 2]",
        "",
        "Explanation",
        "Solution solution = new Solution([1, 2, 3, 3, 3]);",
        "solution. pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.",
        "solution. pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.",
        "solution. pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.",
        ""
    ],
    "constraints": [
        "Solution(int[] nums) Initializes the object with the array nums. int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's",
        " then each index should have an equal probability of returning. 1 <= nums. length <= 2 * 104-231 <= nums[i] <= 231 - 1target is an integer from nums. At most 104 calls will be made to pick."
    ]
},
{
    "id": "399",
    "title": "Evaluate Division",
    "question": "You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i].\n Each Ai or Bi is a string that represents a single variable.\nYou are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.\nReturn the answers to all queries.\n If a single answer cannot be determined, return -1.\n0.\nNote: The input is always valid.\n You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.",
    "examples": [
        "Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2. 0,3. 0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]",
        "Output: [6. 00000,0. 50000,-1. 00000,1. 00000,-1. 00000]",
        "Explanation: ",
        "Given: a / b = 2. 0, b / c = 3. 0",
        "queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?",
        "return: [6. 0, 0. 5, -1. 0, 1. 0, -1. 0 ]",
        "Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1. 5,2. 5,5. 0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]",
        "Output: [3. 75000,0. 40000,5. 00000,0. 20000]",
        "Input: equations = [[\"a\",\"b\"]], values = [0. 5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]",
        "Output: [0. 50000,2. 00000,-1. 00000,-1. 00000]",
        ""
    ],
    "constraints": [
        "1 <= equations. length <= 20equations[i]. length == 21 <= Ai. length",
        " Bi. length <= 5values. length == equations. length0. 0 < values[i] <= 20. 01 <= queries. length <= 20queries[i]. length == 21 <= Cj. length",
        " Dj. length <= 5Ai",
        " Bi",
        " Cj",
        " Dj consist of lower case English letters and digits."
    ]
},
{
    "id": "400",
    "title": "Nth Digit",
    "question": "Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, .\n.\n.\n].",
    "examples": [
        "Input: n = 3",
        "Output: 3",
        "Input: n = 11",
        "Output: 0",
        "Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.",
        ""
    ],
    "constraints": [
        "1 <= n <= 231 - 1"
    ]
},
{
    "id": "402",
    "title": "Remove K Digits",
    "question": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.",
    "examples": [
        "Input: num = \"1432219\", k = 3",
        "Output: \"1219\"",
        "Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.",
        "Input: num = \"10200\", k = 1",
        "Output: \"200\"",
        "Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.",
        "Input: num = \"10\", k = 2",
        "Output: \"0\"",
        "Explanation: Remove all the digits from the number and it is left with nothing which is 0.",
        ""
    ],
    "constraints": [
        "1 <= k <= num. length <= 105num consists of only digits. num does not have any leading zeros except for the zero itself."
    ]
},
{
    "id": "406",
    "title": "Queue Reconstruction by Height",
    "question": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order).\n Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\nReconstruct and return the queue that is represented by the input array people.\n The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).",
    "examples": [
        "Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
        "Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]",
        "Explanation:",
        "Person 0 has height 5 with no other people taller or the same height in front.",
        "Person 1 has height 7 with no other people taller or the same height in front.",
        "Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.",
        "Person 3 has height 6 with one person taller or the same height in front, which is person 1.",
        "Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.",
        "Person 5 has height 7 with one person taller or the same height in front, which is person 1.",
        "Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.",
        "Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]",
        "Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]",
        ""
    ],
    "constraints": [
        "1 <= people. length <= 20000 <= hi <= 1060 <= ki < people. lengthIt is guaranteed that the queue can be reconstructed."
    ]
},
{
    "id": "232",
    "title": "Implement Queue using Stacks",
    "question": "Implement a first in first out (FIFO) queue using only two stacks.\n The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\nImplement the MyQueue class:Notes:   Follow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.",
    "examples": [
        "Input",
        "[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]",
        "[[], [1], [2], [], [], []]",
        "Output",
        "[null, null, null, 1, 1, false]",
        "",
        "Explanation",
        "MyQueue myQueue = new MyQueue();",
        "myQueue. push(1); // queue is: [1]",
        "myQueue. push(2); // queue is: [1, 2] (leftmost is front of the queue)",
        "myQueue. peek(); // return 1",
        "myQueue. pop(); // return 1, queue is [2]",
        "myQueue. empty(); // return false",
        ""
    ],
    "constraints": [
        "void push(int x) Pushes element x to the back of the queue. int pop() Removes the element from the front of the queue and returns it. int peek() Returns the element at the front of the queue. boolean empty() Returns true if the queue is empty",
        " false otherwise. You must use only standard operations of a stack",
        " which means only push to top",
        " peek/pop from top",
        " size",
        " and is empty operations are valid. Depending on your language",
        " the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations. 1 <= x <= 9At most 100 calls will be made to push",
        " pop",
        " peek",
        " and empty. All the calls to pop and peek are valid."
    ]
},
{
    "id": "413",
    "title": "Arithmetic Slices",
    "question": "An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\nA subarray is a contiguous subsequence of the array.",
    "examples": [
        "Input: nums = [1,2,3,4]",
        "Output: 3",
        "Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.",
        "Input: nums = [1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "For example",
        " [1",
        "3",
        "5",
        "7",
        "9]",
        " [7",
        "7",
        "7",
        "7]",
        " and [3",
        "-1",
        "-5",
        "-9] are arithmetic sequences. 1 <= nums. length <= 5000-1000 <= nums[i] <= 1000"
    ]
},
{
    "id": "416",
    "title": "Partition Equal Subset Sum",
    "question": "Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.",
    "examples": [
        "Input: nums = [1,5,11,5]",
        "Output: true",
        "Explanation: The array can be partitioned as [1, 5, 5] and [11].",
        "Input: nums = [1,2,3,5]",
        "Output: false",
        "Explanation: The array cannot be partitioned into equal sum subsets.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2001 <= nums[i] <= 100"
    ]
},
{
    "id": "417",
    "title": "Pacific Atlantic Water Flow",
    "question": "There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean.\n The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\nThe island is partitioned into a grid of square cells.\n You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height.\n Water can flow from any cell adjacent to an ocean into the ocean.\nReturn a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.",
    "examples": [
        "Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
        "Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]",
        "Input: heights = [[2,1],[1,2]]",
        "Output: [[0,0],[0,1],[1,0],[1,1]]",
        ""
    ],
    "constraints": [
        "m == heights. lengthn == heights[r]. length1 <= m",
        " n <= 2000 <= heights[r][c] <= 105"
    ]
},
{
    "id": "419",
    "title": "Battleships in a Board",
    "question": "Given an m x n matrix board where each cell is a battleship 'X' or empty '.\n', return the number of the battleships on board.\nBattleships can only be placed horizontally or vertically on board.\n In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size.\n At least one horizontal or vertical cell separates between two battleships (i.\ne.\n, there are no adjacent battleships).\n   Follow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?",
    "examples": [
        "Input: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]",
        "Output: 2",
        "Input: board = [[\".\"]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "m == board. lengthn == board[i]. length1 <= m",
        " n <= 200board[i][j] is either '.' or 'X'."
    ]
},
{
    "id": "421",
    "title": "Maximum XOR of Two Numbers in an Array",
    "question": "Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.",
    "examples": [
        "Input: nums = [3,10,5,25,2,8]",
        "Output: 28",
        "Explanation: The maximum result is 5 XOR 25 = 28. Input: nums = [0]",
        "Output: 0",
        "Input: nums = [2,4]",
        "Output: 6",
        "Input: nums = [8,10,2]",
        "Output: 10",
        "Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]",
        "Output: 127",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2 * 1050 <= nums[i] <= 231 - 1"
    ]
},
{
    "id": "423",
    "title": "Reconstruct Original Digits from English",
    "question": "Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.",
    "examples": [
        "Input: s = \"owoztneoer\"",
        "Output: \"012\"",
        "Input: s = \"fviefuro\"",
        "Output: \"45\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s[i] is one of the characters [\"e\"",
        "\"g\"",
        "\"f\"",
        "\"i\"",
        "\"h\"",
        "\"o\"",
        "\"n\"",
        "\"s\"",
        "\"r\"",
        "\"u\"",
        "\"t\"",
        "\"w\"",
        "\"v\"",
        "\"x\"",
        "\"z\"]. s is guaranteed to be valid."
    ]
},
{
    "id": "424",
    "title": "Longest Repeating Character Replacement",
    "question": "You are given a string s and an integer k.\n You can choose any character of the string and change it to any other uppercase English character.\n You can perform this operation at most k times.\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.",
    "examples": [
        "Input: s = \"ABAB\", k = 2",
        "Output: 4",
        "Explanation: Replace the two 'A's with two 'B's or vice versa.",
        "Input: s = \"AABABBA\", k = 1",
        "Output: 4",
        "Explanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".",
        "The substring \"BBBB\" has the longest repeating letters, which is 4.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s consists of only uppercase English letters. 0 <= k <= s. length"
    ]
},
{
    "id": "427",
    "title": "Construct Quad Tree",
    "question": "Given a n * n matrix grid of 0's and 1's only.\n We want to represent the grid with a Quad-Tree.\nReturn the root of the Quad-Tree representing the grid.\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\nA Quad-Tree is a tree data structure in which each internal node has exactly four children.\n Besides, each node has two attributes:We can construct a Quad-Tree from a two-dimensional area using the following steps:If you want to know more about the Quad-Tree, you can refer to the wiki.\nQuad-Tree format:The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\nIt is very similar to the serialization of the binary tree.\n The only difference is that the node is represented as a list [isLeaf, val].\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.",
    "examples": [
        "class Node {",
        "    public boolean val;",
        "    public boolean isLeaf;",
        "    public Node topLeft;",
        "    public Node topRight;",
        "    public Node bottomLeft;",
        "    public Node bottomRight;",
        "}Input: grid = [[0,1],[1,0]]",
        "Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]",
        "Explanation: The explanation of this example is shown below:",
        "Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.",
        "",
        "Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]",
        "Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
        "Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.",
        "The topLeft, bottomLeft and bottomRight each has the same value.",
        "The topRight have different values so we divide it into 4 sub-grids where each has the same value.",
        "Explanation is shown in the photo below:",
        "",
        "Input: grid = [[1,1],[1,1]]",
        "Output: [[1,1]]",
        "Input: grid = [[0]]",
        "Output: [[1,0]]",
        "Input: grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]",
        "Output: [[0,1],[1,1],[1,0],[1,0],[1,1]]",
        ""
    ],
    "constraints": [
        "val: True if the node represents a grid of 1's or False if the node represents a grid of 0's. isLeaf: True if the node is leaf node on the tree or False if the node has the four children. n == grid. length == grid[i]. lengthn == 2^x where 0 <= x <= 6"
    ]
},
{
    "id": "429",
    "title": "N-ary Tree Level Order Traversal",
    "question": "Given an n-ary tree, return the level order traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).",
    "examples": [
        "Input: root = [1,null,3,2,4,null,5,6]",
        "Output: [[1],[3,2,4],[5,6]]",
        "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]",
        ""
    ],
    "constraints": [
        "The height of the n-ary tree is less than or equal to 1000The total number of nodes is between [0",
        " 104]"
    ]
},
{
    "id": "430",
    "title": "Flatten a Multilevel Doubly Linked List",
    "question": "You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list.\n These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.\nFlatten the list so that all the nodes appear in a single-level, doubly linked list.\n You are given the head of the first level of the list.\n  How multilevel linked list is represented in test case:We use the multilevel linked list from Example 1 above:The serialization of each level is as follows:To serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level.\n The serialization becomes:Merging the serialization of each level and removing trailing nulls we obtain:",
    "examples": [
        "Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]",
        "Output: [1,2,3,7,8,11,12,9,10,4,5,6]",
        "Explanation:",
        "",
        "The multilevel linked list in the input is as follows:",
        "",
        "",
        "",
        "After flattening the multilevel linked list it becomes:",
        "",
        "",
        "Input: head = [1,2,null,3]",
        "Output: [1,3,2]",
        "Explanation:",
        "",
        "The input multilevel linked list is as follows:",
        "",
        "  1---2---NULL",
        "  |",
        "  3---NULL",
        "Input: head = []",
        "Output: []",
        " 1---2---3---4---5---6--NULL",
        "         |",
        "         7---8---9---10--NULL",
        "             |",
        "             11--12--NULL[1,2,3,4,5,6,null]",
        "[7,8,9,10,null]",
        "[11,12,null]",
        "[1,2,3,4,5,6,null]",
        "[null,null,7,8,9,10,null]",
        "[null,11,12,null]",
        "[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]"
    ],
    "constraints": [
        "The number of Nodes will not exceed 1000. 1 <= Node. val <= 105"
    ]
},
{
    "id": "234",
    "title": "Palindrome Linked List",
    "question": "Given the head of a singly linked list, return true if it is a palindrome.",
    "examples": [
        "Input: head = [1,2,2,1]",
        "Output: true",
        "Input: head = [1,2]",
        "Output: false",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [1",
        " 105]. 0 <= Node. val <= 9"
    ]
},
{
    "id": "433",
    "title": "Minimum Genetic Mutation",
    "question": "A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.\nSuppose we need to investigate a mutation from a gene string start to a gene string end where one mutation is defined as one single character changed in the gene string.\nThere is also a gene bank bank that records all the valid gene mutations.\n A gene must be in bank to make it a valid gene string.\nGiven the two gene strings start and end and the gene bank bank, return the minimum number of mutations needed to mutate from start to end.\n If there is no such a mutation, return -1.\nNote that the starting point is assumed to be valid, so it might not be included in the bank.",
    "examples": [
        "Input: start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]",
        "Output: 1",
        "Input: start = \"AACCGGTT\", end = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]",
        "Output: 2",
        "Input: start = \"AAAAACCC\", end = \"AACCCCCC\", bank = [\"AAAACCCC\",\"AAACCCCC\",\"AACCCCCC\"]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "For example",
        " \"AACCGGTT\" --> \"AACCGGTA\" is one mutation. start. length == 8end. length == 80 <= bank. length <= 10bank[i]. length == 8start",
        " end",
        " and bank[i] consist of only the characters ['A'",
        " 'C'",
        " 'G'",
        " 'T']."
    ]
},
{
    "id": "435",
    "title": "Non-overlapping Intervals",
    "question": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",
    "examples": [
        "Input: intervals = [[1,2],[2,3],[3,4],[1,3]]",
        "Output: 1",
        "Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.",
        "Input: intervals = [[1,2],[1,2],[1,2]]",
        "Output: 2",
        "Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.",
        "Input: intervals = [[1,2],[2,3]]",
        "Output: 0",
        "Explanation: You don't need to remove any of the intervals since they're already non-overlapping.",
        ""
    ],
    "constraints": [
        "1 <= intervals. length <= 105intervals[i]. length == 2-5 * 104 <= starti < endi <= 5 * 104"
    ]
},
{
    "id": "436",
    "title": "Find Right Interval",
    "question": "You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.\nThe right interval for an interval i is an interval j such that startj >= endi and startj is minimized.\nReturn an array of right interval indices for each interval i.\n If no right interval exists for interval i, then put -1 at index i.",
    "examples": [
        "Input: intervals = [[1,2]]",
        "Output: [-1]",
        "Explanation: There is only one interval in the collection, so it outputs -1.",
        "Input: intervals = [[3,4],[2,3],[1,2]]",
        "Output: [-1,0,1]",
        "Explanation: There is no right interval for [3,4].",
        "The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.",
        "The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.",
        "Input: intervals = [[1,4],[2,3],[3,4]]",
        "Output: [-1,2,-1]",
        "Explanation: There is no right interval for [1,4] and [3,4].",
        "The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.",
        ""
    ],
    "constraints": [
        "1 <= intervals. length <= 2 * 104intervals[i]. length == 2-106 <= starti <= endi <= 106The start point of each interval is unique."
    ]
},
{
    "id": "437",
    "title": "Path Sum III",
    "question": "Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.\ne.\n, traveling only from parent nodes to child nodes).",
    "examples": [
        "Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8",
        "Output: 3",
        "Explanation: The paths that sum to 8 are shown.",
        "Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
        "Output: 3",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 1000].-109 <= Node. val <= 109-1000 <= targetSum <= 1000"
    ]
},
{
    "id": "438",
    "title": "Find All Anagrams in a String",
    "question": "Given two strings s and p, return an array of all the start indices of p's anagrams in s.\n You may return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "examples": [
        "Input: s = \"cbaebabacd\", p = \"abc\"",
        "Output: [0,6]",
        "Explanation:",
        "The substring with start index = 0 is \"cba\", which is an anagram of \"abc\".",
        "The substring with start index = 6 is \"bac\", which is an anagram of \"abc\".",
        "Input: s = \"abab\", p = \"ab\"",
        "Output: [0,1,2]",
        "Explanation:",
        "The substring with start index = 0 is \"ab\", which is an anagram of \"ab\".",
        "The substring with start index = 1 is \"ba\", which is an anagram of \"ab\".",
        "The substring with start index = 2 is \"ab\", which is an anagram of \"ab\".",
        ""
    ],
    "constraints": [
        "1 <= s. length",
        " p. length <= 3 * 104s and p consist of lowercase English letters."
    ]
},
{
    "id": "442",
    "title": "Find All Duplicates in an Array",
    "question": "Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.\nYou must write an algorithm that runs in O(n) time and uses only constant extra space.",
    "examples": [
        "Input: nums = [4,3,2,7,8,2,3,1]",
        "Output: [2,3]",
        "Input: nums = [1,1,2]",
        "Output: [1]",
        "Input: nums = [1]",
        "Output: []",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 1051 <= nums[i] <= nEach element in nums appears once or twice."
    ]
},
{
    "id": "443",
    "title": "String Compression",
    "question": "Given an array of characters chars, compress it using the following algorithm:Begin with an empty string s.\n For each group of consecutive repeating characters in chars:The compressed string s should not be returned separately, but instead, be stored in the input character array chars.\n Note that group lengths that are 10 or longer will be split into multiple characters in chars.\nAfter you are done modifying the input array, return the new length of the array.",
    "examples": [
        "Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]",
        "Output: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]",
        "Explanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".",
        "Input: chars = [\"a\"]",
        "Output: Return 1, and the first character of the input array should be: [\"a\"]",
        "Explanation: The only group is \"a\", which remains uncompressed since it's a single character.",
        "Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]",
        "Output: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].",
        "Explanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\". Input: chars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]",
        "Output: Return 6, and the first 6 characters of the input array should be: [\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"].",
        "Explanation: The groups are \"aaa\", \"bb\", and \"aa\". This compresses to \"a3b2a2\". Note that each group is independent even if two groups have the same character.",
        ""
    ],
    "constraints": [
        "If the group's length is 1",
        " append the character to s. Otherwise",
        " append the character followed by the group's length. 1 <= chars. length <= 2000chars[i] is a lowercase English letter",
        " uppercase English letter",
        " digit",
        " or symbol."
    ]
},
{
    "id": "445",
    "title": "Add Two Numbers II",
    "question": "You are given two non-empty linked lists representing two non-negative integers.\n The most significant digit comes first and each of their nodes contains a single digit.\n Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n   Follow up: Could you solve it without reversing the input lists?",
    "examples": [
        "Input: l1 = [7,2,4,3], l2 = [5,6,4]",
        "Output: [7,8,0,7]",
        "Input: l1 = [2,4,3], l2 = [5,6,4]",
        "Output: [8,0,7]",
        "Input: l1 = [0], l2 = [0]",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "The number of nodes in each linked list is in the range [1",
        " 100]. 0 <= Node. val <= 9It is guaranteed that the list represents a number that does not have leading zeros."
    ]
},
{
    "id": "447",
    "title": "Number of Boomerangs",
    "question": "You are given n points in the plane that are all distinct, where points[i] = [xi, yi].\n A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\nReturn the number of boomerangs.",
    "examples": [
        "Input: points = [[0,0],[1,0],[2,0]]",
        "Output: 2",
        "Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].",
        "Input: points = [[1,1],[2,2],[3,3]]",
        "Output: 2",
        "Input: points = [[1,1]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "n == points. length1 <= n <= 500points[i]. length == 2-104 <= xi",
        " yi <= 104All the points are unique."
    ]
},
{
    "id": "449",
    "title": "Serialize and Deserialize BST",
    "question": "Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary search tree.\n There is no restriction on how your serialization/deserialization algorithm should work.\n You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\nThe encoded string should be as compact as possible.",
    "examples": [
        "Input: root = [2,1,3]",
        "Output: [2,1,3]",
        "Input: root = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 104]. 0 <= Node. val <= 104The input tree is guaranteed to be a binary search tree."
    ]
},
{
    "id": "235",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "question": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\n”",
    "examples": [
        "Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8",
        "Output: 6",
        "Explanation: The LCA of nodes 2 and 8 is 6.",
        "Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4",
        "Output: 2",
        "Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.",
        "Input: root = [2,1], p = 2, q = 1",
        "Output: 2",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [2",
        " 105].-109 <= Node. val <= 109All Node. val are unique. p != qp and q will exist in the BST."
    ]
},
{
    "id": "450",
    "title": "Delete Node in a BST",
    "question": "Given a root node reference of a BST and a key, delete the node with the given key in the BST.\n Return the root node reference (possibly updated) of the BST.\nBasically, the deletion can be divided into two stages:Follow up: Can you solve it with time complexity O(height of tree)?",
    "examples": [
        "Input: root = [5,3,6,2,4,null,7], key = 3",
        "Output: [5,4,6,2,null,null,7]",
        "Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.",
        "One valid answer is [5,4,6,2,null,null,7], shown in the above BST.",
        "Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.",
        "",
        "Input: root = [5,3,6,2,4,null,7], key = 0",
        "Output: [5,3,6,2,4,null,7]",
        "Explanation: The tree does not contain a node with value = 0.",
        "Input: root = [], key = 0",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 104].-105 <= Node. val <= 105Each node has a unique value. root is a valid binary search tree.-105 <= key <= 105"
    ]
},
{
    "id": "451",
    "title": "Sort Characters By Frequency",
    "question": "Given a string s, sort it in decreasing order based on the frequency of characters, and return the sorted string.",
    "examples": [
        "Input: s = \"tree\"",
        "Output: \"eert\"",
        "Explanation: 'e' appears twice while 'r' and 't' both appear once.",
        "So 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.",
        "Input: s = \"cccaaa\"",
        "Output: \"aaaccc\"",
        "Explanation: Both 'c' and 'a' appear three times, so \"aaaccc\" is also a valid answer.",
        "Note that \"cacaca\" is incorrect, as the same characters must be together.",
        "Input: s = \"Aabb\"",
        "Output: \"bbAa\"",
        "Explanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.",
        "Note that 'A' and 'a' are treated as two different characters.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 5 * 105s consists of English letters and digits."
    ]
},
{
    "id": "452",
    "title": "Minimum Number of Arrows to Burst Balloons",
    "question": "There are some spherical balloons spread in two-dimensional space.\n For each balloon, provided input is the start and end coordinates of the horizontal diameter.\n Since it's horizontal, y-coordinates don't matter, and hence the x-coordinates of start and end of the diameter suffice.\n The start is always smaller than the end.\nAn arrow can be shot up exactly vertically from different points along the x-axis.\n A balloon with xstart and xend bursts by an arrow shot at x if xstart ≤ x ≤ xend.\n There is no limit to the number of arrows that can be shot.\n An arrow once shot keeps traveling up infinitely.\nGiven an array points where points[i] = [xstart, xend], return the minimum number of arrows that must be shot to burst all balloons.",
    "examples": [
        "Input: points = [[10,16],[2,8],[1,6],[7,12]]",
        "Output: 2",
        "Explanation: One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).",
        "Input: points = [[1,2],[3,4],[5,6],[7,8]]",
        "Output: 4",
        "Input: points = [[1,2],[2,3],[3,4],[4,5]]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= points. length <= 105points[i]. length == 2-231 <= xstart < xend <= 231 - 1"
    ]
},
{
    "id": "454",
    "title": "4Sum II",
    "question": "Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:",
    "examples": [
        "Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]",
        "Output: 2",
        "Explanation:",
        "The two tuples are:",
        "1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0",
        "2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0",
        "Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "0 <= i",
        " j",
        " k",
        " l < nnums1[i] + nums2[j] + nums3[k] + nums4[l] == 0n == nums1. lengthn == nums2. lengthn == nums3. lengthn == nums4. length1 <= n <= 200-228 <= nums1[i]",
        " nums2[i]",
        " nums3[i]",
        " nums4[i] <= 228"
    ]
},
{
    "id": "456",
    "title": "132 Pattern",
    "question": "Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\nReturn true if there is a 132 pattern in nums, otherwise, return false.",
    "examples": [
        "Input: nums = [1,2,3,4]",
        "Output: false",
        "Explanation: There is no 132 pattern in the sequence.",
        "Input: nums = [3,1,4,2]",
        "Output: true",
        "Explanation: There is a 132 pattern in the sequence: [1, 4, 2].",
        "Input: nums = [-1,3,2,0]",
        "Output: true",
        "Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 2 * 105-109 <= nums[i] <= 109"
    ]
},
{
    "id": "457",
    "title": "Circular Array Loop",
    "question": "You are playing a game involving a circular array of non-zero integers nums.\n Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\nA cycle in the array consists of a sequence of indices seq of length k where:Return true if there is a cycle in nums, or false otherwise.\n   Follow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?",
    "examples": [
        "Input: nums = [2,-1,1,2,2]",
        "Output: true",
        "Explanation:",
        "There is a cycle from index 0 -> 2 -> 3 -> 0 -> ...",
        "The cycle's length is 3.",
        "Input: nums = [-1,2]",
        "Output: false",
        "Explanation:",
        "The sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.",
        "By definition the sequence's length must be strictly greater than 1 to be a cycle.",
        "Input: nums = [-2,1,-1,-2,-2]",
        "Output: false",
        "Explanation:",
        "The sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.",
        "Every nums[seq[j]] must be either all positive or all negative.",
        ""
    ],
    "constraints": [
        "If nums[i] is positive",
        " move nums[i] steps forward",
        " andIf nums[i] is negative",
        " move nums[i] steps backward. Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ... Every nums[seq[j]] is either all positive or all negative. k > 11 <= nums. length <= 5000-1000 <= nums[i] <= 1000nums[i] != 0"
    ]
},
{
    "id": "462",
    "title": "Minimum Moves to Equal Array Elements II",
    "question": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\nIn one move, you can increment or decrement an element of the array by 1.\nTest cases are designed so that the answer will fit in a 32-bit integer.",
    "examples": [
        "Input: nums = [1,2,3]",
        "Output: 2",
        "Explanation:",
        "Only two moves are needed (remember each move increments or decrements one element):",
        "[1,2,3]  =>  [2,2,3]  =>  [2,2,2]",
        "Input: nums = [1,10,2,9]",
        "Output: 16",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= nums. length <= 105-109 <= nums[i] <= 109"
    ]
},
{
    "id": "464",
    "title": "Can I Win",
    "question": "In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10.\n The player who first causes the running total to reach or exceed 100 wins.\nWhat if we change the game so that players cannot re-use integers?For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\nGiven two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false.\n Assume both players play optimally.",
    "examples": [
        "Input: maxChoosableInteger = 10, desiredTotal = 11",
        "Output: false",
        "Explanation:",
        "No matter which integer the first player choose, the first player will lose.",
        "The first player can choose an integer from 1 up to 10.",
        "If the first player choose 1, the second player can only choose integers from 2 up to 10.",
        "The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.",
        "Same with other integers chosen by the first player, the second player will always win.",
        "Input: maxChoosableInteger = 10, desiredTotal = 0",
        "Output: true",
        "Input: maxChoosableInteger = 10, desiredTotal = 1",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= maxChoosableInteger <= 200 <= desiredTotal <= 300"
    ]
},
{
    "id": "467",
    "title": "Unique Substrings in Wraparound String",
    "question": "We define the string s to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so s will look like this:Given a string p, return the number of unique non-empty substrings of p are present in s.",
    "examples": [
        "Input: p = \"a\"",
        "Output: 1",
        "Explanation: Only the substring \"a\" of p is in s.",
        "Input: p = \"cac\"",
        "Output: 2",
        "Explanation: There are two substrings (\"a\", \"c\") of p in s.",
        "Input: p = \"zab\"",
        "Output: 6",
        "Explanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of p in s.",
        ""
    ],
    "constraints": [
        "\"... zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\". 1 <= p. length <= 105p consists of lowercase English letters."
    ]
},
{
    "id": "468",
    "title": "Validate IP Address",
    "question": "Given a string IP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\nA valid IPv4 address is an IP in the form \"x1.\nx2.\nx3.\nx4\" where 0 <= xi <= 255 and xi cannot contain leading zeros.\n For example, \"192.\n168.\n1.\n1\" and \"192.\n168.\n1.\n0\" are valid IPv4 addresses but \"192.\n168.\n01.\n1\", while \"192.\n168.\n1.\n00\" and \"192.\n168@1.\n1\" are invalid IPv4 addresses.\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:For example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.",
    "examples": [
        "Input: IP = \"172. 16. 254. 1\"",
        "Output: \"IPv4\"",
        "Explanation: This is a valid IPv4 address, return \"IPv4\".",
        "Input: IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"",
        "Output: \"IPv6\"",
        "Explanation: This is a valid IPv6 address, return \"IPv6\".",
        "Input: IP = \"256. 256. 256. 256\"",
        "Output: \"Neither\"",
        "Explanation: This is neither a IPv4 address nor a IPv6 address.",
        "Input: IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334:\"",
        "Output: \"Neither\"",
        "Input: IP = \"1e1. 4. 5. 6\"",
        "Output: \"Neither\"",
        ""
    ],
    "constraints": [
        "1 <= xi. length <= 4xi is a hexadecimal string which may contain digits",
        " lower-case English letter ('a' to 'f') and upper-case English letters ('A' to 'F'). Leading zeros are allowed in xi. IP consists only of English letters",
        " digits and the characters '.' and ':'."
    ]
},
{
    "id": "237",
    "title": "Delete Node in a Linked List",
    "question": "Write a function to delete a node in a singly-linked list.\n You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.\nIt is guaranteed that the node to be deleted is not a tail node in the list.",
    "examples": [
        "Input: head = [4,5,1,9], node = 5",
        "Output: [4,1,9]",
        "Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.",
        "Input: head = [4,5,1,9], node = 1",
        "Output: [4,5,9]",
        "Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.",
        "Input: head = [1,2,3,4], node = 3",
        "Output: [1,2,4]",
        "Input: head = [0,1], node = 0",
        "Output: [1]",
        "Input: head = [-3,5,-99], node = -3",
        "Output: [5,-99]",
        ""
    ],
    "constraints": [
        "The number of the nodes in the given list is in the range [2",
        " 1000].-1000 <= Node. val <= 1000The value of each node in the list is unique. The node to be deleted is in the list and is not a tail node"
    ]
},
{
    "id": "470",
    "title": "Implement Rand10() Using Rand7()",
    "question": "Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10].\n You can only call the API rand7(), and you shouldn't call any other API.\n Please do not use a language's built-in random API.\nEach test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing.\n Note that this is not an argument passed to rand10().\nFollow up:",
    "examples": [
        "Input: n = 1",
        "Output: [2]",
        "Input: n = 2",
        "Output: [2,8]",
        "Input: n = 3",
        "Output: [3,8,10]",
        ""
    ],
    "constraints": [
        "What is the expected value for the number of calls to rand7() function?Could you minimize the number of calls to rand7()?1 <= n <= 105"
    ]
},
{
    "id": "473",
    "title": "Matchsticks to Square",
    "question": "You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick.\n You want to use all the matchsticks to make one square.\n You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\nReturn true if you can make this square and false otherwise.",
    "examples": [
        "Input: matchsticks = [1,1,2,2,2]",
        "Output: true",
        "Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.",
        "Input: matchsticks = [3,3,3,3,4]",
        "Output: false",
        "Explanation: You cannot find a way to form a square with all the matchsticks.",
        ""
    ],
    "constraints": [
        "1 <= matchsticks. length <= 151 <= matchsticks[i] <= 108"
    ]
},
{
    "id": "474",
    "title": "Ones and Zeroes",
    "question": "You are given an array of binary strings strs and two integers m and n.\nReturn the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\nA set x is a subset of a set y if all elements of x are also elements of y.",
    "examples": [
        "Input: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3",
        "Output: 4",
        "Explanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.",
        "Other valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.",
        "{\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.",
        "Input: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1",
        "Output: 2",
        "Explanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.",
        ""
    ],
    "constraints": [
        "1 <= strs. length <= 6001 <= strs[i]. length <= 100strs[i] consists only of digits '0' and '1'. 1 <= m",
        " n <= 100"
    ]
},
{
    "id": "475",
    "title": "Heaters",
    "question": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\n Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\nNotice that all the heaters follow your radius standard, and the warm radius will the same.",
    "examples": [
        "Input: houses = [1,2,3], heaters = [2]",
        "Output: 1",
        "Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.",
        "Input: houses = [1,2,3,4], heaters = [1,4]",
        "Output: 1",
        "Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.",
        "Input: houses = [1,5], heaters = [2]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= houses. length",
        " heaters. length <= 3 * 1041 <= houses[i]",
        " heaters[i] <= 109"
    ]
},
{
    "id": "477",
    "title": "Total Hamming Distance",
    "question": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.",
    "examples": [
        "Input: nums = [4,14,2]",
        "Output: 6",
        "Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just",
        "showing the four bits relevant in this case).",
        "The answer will be:",
        "HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.",
        "Input: nums = [4,14,4]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1040 <= nums[i] <= 109The answer for the given input will fit in a 32-bit integer."
    ]
},
{
    "id": "478",
    "title": "Generate Random Point in a Circle",
    "question": "Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\nImplement the Solution class:",
    "examples": [
        "Input",
        "[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]",
        "[[1. 0, 0. 0, 0. 0], [], [], []]",
        "Output",
        "[null, [-0. 02493, -0. 38077], [0. 82314, 0. 38945], [0. 36572, 0. 17248]]",
        "",
        "Explanation",
        "Solution solution = new Solution(1. 0, 0. 0, 0. 0);",
        "solution. randPoint(); // return [-0. 02493, -0. 38077]",
        "solution. randPoint(); // return [0. 82314, 0. 38945]",
        "solution. randPoint(); // return [0. 36572, 0. 17248]",
        ""
    ],
    "constraints": [
        "Solution(double radius",
        " double x_center",
        " double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center",
        " y_center). randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x",
        " y]. 0 < radius <= 108-107 <= x_center",
        " y_center <= 107At most 3 * 104 calls will be made to randPoint."
    ]
},
{
    "id": "481",
    "title": "Magical String",
    "question": "A magical string s consists of only '1' and '2' and obeys the following rules:The first few elements of s is s = \"1221121221221121122……\".\n If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 .\n.\n.\n.\n.\n.\n\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 .\n.\n.\n.\n.\n.\n\".\n You can see that the occurrence sequence is s itself.\nGiven an integer n, return the number of 1's in the first n number in the magical string s.",
    "examples": [
        "Input: n = 6",
        "Output: 3",
        "Explanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.",
        "Input: n = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself. 1 <= n <= 105"
    ]
},
{
    "id": "486",
    "title": "Predict the Winner",
    "question": "You are given an integer array nums.\n Two players are playing a game with this array: player 1 and player 2.\nPlayer 1 and player 2 take turns, with player 1 starting first.\n Both players start the game with a score of 0.\n At each turn, the player takes one of the numbers from either end of the array (i.\ne.\n, nums[0] or nums[nums.\nlength - 1]) which reduces the size of the array by 1.\n The player adds the chosen number to their score.\n The game ends when there are no more elements in the array.\nReturn true if Player 1 can win the game.\n If the scores of both players are equal, then player 1 is still the winner, and you should also return true.\n You may assume that both players are playing optimally.",
    "examples": [
        "Input: nums = [1,5,2]",
        "Output: false",
        "Explanation: Initially, player 1 can choose between 1 and 2. ",
        "If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). ",
        "So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. ",
        "Hence, player 1 will never be the winner and you need to return false.",
        "Input: nums = [1,5,233,7]",
        "Output: true",
        "Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.",
        "Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 200 <= nums[i] <= 107"
    ]
},
{
    "id": "491",
    "title": "Increasing Subsequences",
    "question": "Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements.\n You may return the answer in any order.\nThe given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence.",
    "examples": [
        "Input: nums = [4,6,7,7]",
        "Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]",
        "Input: nums = [4,4,3,2,1]",
        "Output: [[4,4]]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 15-100 <= nums[i] <= 100"
    ]
},
{
    "id": "494",
    "title": "Target Sum",
    "question": "You are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\nReturn the number of different expressions that you can build, which evaluates to target.",
    "examples": [
        "Input: nums = [1,1,1,1,1], target = 3",
        "Output: 5",
        "Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.",
        "-1 + 1 + 1 + 1 + 1 = 3",
        "+1 - 1 + 1 + 1 + 1 = 3",
        "+1 + 1 - 1 + 1 + 1 = 3",
        "+1 + 1 + 1 - 1 + 1 = 3",
        "+1 + 1 + 1 + 1 - 1 = 3",
        "Input: nums = [1], target = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "For example",
        " if nums = [2",
        " 1]",
        " you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\". 1 <= nums. length <= 200 <= nums[i] <= 10000 <= sum(nums[i]) <= 1000-1000 <= target <= 1000"
    ]
},
{
    "id": "21",
    "title": "Merge Two Sorted Lists",
    "question": "Merge two sorted linked lists and return it as a sorted list.\n The list should be made by splicing together the nodes of the first two lists.",
    "examples": [
        "Input: l1 = [1,2,4], l2 = [1,3,4]",
        "Output: [1,1,2,3,4,4]",
        "Input: l1 = [], l2 = []",
        "Output: []",
        "Input: l1 = [], l2 = [0]",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "The number of nodes in both lists is in the range [0",
        " 50].-100 <= Node. val <= 100Both l1 and l2 are sorted in non-decreasing order."
    ]
},
{
    "id": "242",
    "title": "Valid Anagram",
    "question": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n   Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?",
    "examples": [
        "Input: s = \"anagram\", t = \"nagaram\"",
        "Output: true",
        "Input: s = \"rat\", t = \"car\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= s. length",
        " t. length <= 5 * 104s and t consist of lowercase English letters."
    ]
},
{
    "id": "497",
    "title": "Random Point in Non-overlapping Rectangles",
    "question": "You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle.\n Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles.\n A point on the perimeter of a rectangle is included in the space covered by the rectangle.\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\nNote that an integer point is a point that has integer coordinates.\nImplement the Solution class:",
    "examples": [
        "Input",
        "[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]",
        "[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]",
        "Output",
        "[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]",
        "",
        "Explanation",
        "Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);",
        "solution. pick(); // return [1, -2]",
        "solution. pick(); // return [1, -1]",
        "solution. pick(); // return [-1, -2]",
        "solution. pick(); // return [-2, -2]",
        "solution. pick(); // return [0, 0]",
        ""
    ],
    "constraints": [
        "Solution(int[][] rects) Initializes the object with the given rectangles rects. int[] pick() Returns a random integer point [u",
        " v] inside the space covered by one of the given rectangles. 1 <= rects. length <= 100rects[i]. length == 4-109 <= ai < xi <= 109-109 <= bi < yi <= 109xi - ai <= 2000yi - bi <= 2000All the rectangles do not overlap. At most 104 calls will be made to pick."
    ]
},
{
    "id": "498",
    "title": "Diagonal Traverse",
    "question": "Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.",
    "examples": [
        "Input: mat = [[1,2,3],[4,5,6],[7,8,9]]",
        "Output: [1,2,4,7,5,3,6,8,9]",
        "Input: mat = [[1,2],[3,4]]",
        "Output: [1,2,3,4]",
        ""
    ],
    "constraints": [
        "m == mat. lengthn == mat[i]. length1 <= m",
        " n <= 1041 <= m * n <= 104-105 <= mat[i][j] <= 105"
    ]
},
{
    "id": "503",
    "title": "Next Greater Element II",
    "question": "Given a circular integer array nums (i.\ne.\n, the next element of nums[nums.\nlength - 1] is nums[0]), return the next greater number for every element in nums.\nThe next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number.\n If it doesn't exist, return -1 for this number.",
    "examples": [
        "Input: nums = [1,2,1]",
        "Output: [2,-1,2]",
        "Explanation: The first 1's next greater number is 2; ",
        "The number 2 can't find next greater number. ",
        "The second 1's next greater number needs to search circularly, which is also 2.",
        "Input: nums = [1,2,3,4,3]",
        "Output: [2,3,4,-1,4]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-109 <= nums[i] <= 109"
    ]
},
{
    "id": "508",
    "title": "Most Frequent Subtree Sum",
    "question": "Given the root of a binary tree, return the most frequent subtree sum.\n If there is a tie, return all the values with the highest frequency in any order.\nThe subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).",
    "examples": [
        "Input: root = [5,2,-3]",
        "Output: [2,-3,4]",
        "Input: root = [5,2,-5]",
        "Output: [2]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104].-105 <= Node. val <= 105"
    ]
},
{
    "id": "513",
    "title": "Find Bottom Left Tree Value",
    "question": "Given the root of a binary tree, return the leftmost value in the last row of the tree.",
    "examples": [
        "Input: root = [2,1,3]",
        "Output: 1",
        "Input: root = [1,2,3,4,null,5,6,null,null,7]",
        "Output: 7",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104].-231 <= Node. val <= 231 - 1"
    ]
},
{
    "id": "515",
    "title": "Find Largest Value in Each Tree Row",
    "question": "Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).",
    "examples": [
        "Input: root = [1,3,2,5,3,null,9]",
        "Output: [1,3,9]",
        "Input: root = [1,2,3]",
        "Output: [1,3]",
        "Input: root = [1]",
        "Output: [1]",
        "Input: root = [1,null,2]",
        "Output: [1,2]",
        "Input: root = []",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree will be in the range [0",
        " 104].-231 <= Node. val <= 231 - 1"
    ]
},
{
    "id": "516",
    "title": "Longest Palindromic Subsequence",
    "question": "Given a string s, find the longest palindromic subsequence's length in s.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
        "Input: s = \"bbbab\"",
        "Output: 4",
        "Explanation: One possible longest palindromic subsequence is \"bbbb\".",
        "Input: s = \"cbbd\"",
        "Output: 2",
        "Explanation: One possible longest palindromic subsequence is \"bb\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s consists only of lowercase English letters."
    ]
},
{
    "id": "518",
    "title": "Coin Change 2",
    "question": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the number of combinations that make up that amount.\n If that amount of money cannot be made up by any combination of the coins, return 0.\nYou may assume that you have an infinite number of each kind of coin.\nThe answer is guaranteed to fit into a signed 32-bit integer.",
    "examples": [
        "Input: amount = 5, coins = [1,2,5]",
        "Output: 4",
        "Explanation: there are four ways to make up the amount:",
        "5=5",
        "5=2+2+1",
        "5=2+1+1+1",
        "5=1+1+1+1+1",
        "Input: amount = 3, coins = [2]",
        "Output: 0",
        "Explanation: the amount of 3 cannot be made up just with coins of 2.",
        "Input: amount = 10, coins = [10]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= coins. length <= 3001 <= coins[i] <= 5000All the values of coins are unique. 0 <= amount <= 5000"
    ]
},
{
    "id": "519",
    "title": "Random Flip Matrix",
    "question": "There is an m x n binary grid matrix with all the values set 0 initially.\n Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1.\n All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.\nOptimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.\nImplement the Solution class:",
    "examples": [
        "Input",
        "[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]",
        "[[3, 1], [], [], [], [], []]",
        "Output",
        "[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]",
        "",
        "Explanation",
        "Solution solution = new Solution(3, 1);",
        "solution. flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.",
        "solution. flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]",
        "solution. flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.",
        "solution. reset(); // All the values are reset to 0 and can be returned.",
        "solution. flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.",
        ""
    ],
    "constraints": [
        "Solution(int m",
        " int n) Initializes the object with the size of the binary matrix m and n. int[] flip() Returns a random index [i",
        " j] of the matrix where matrix[i][j] == 0 and flips it to 1. void reset() Resets all the values of the matrix to be 0. 1 <= m",
        " n <= 104There will be at least one free cell for each call to flip. At most 1000 calls will be made to flip and reset."
    ]
},
{
    "id": "522",
    "title": "Longest Uncommon Subsequence II",
    "question": "Given an array of strings strs, return the length of the longest uncommon subsequence between them.\n If the longest uncommon subsequence does not exist, return -1.\nAn uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.",
    "examples": [
        "Input: strs = [\"aba\",\"cdc\",\"eae\"]",
        "Output: 3",
        "Input: strs = [\"aaa\",\"aaa\",\"aa\"]",
        "Output: -1",
        ""
    ],
    "constraints": [
        "For example",
        " \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\"",
        " \"aeb\"",
        " and \"\" (empty string). 1 <= strs. length <= 501 <= strs[i]. length <= 10strs[i] consists of lowercase English letters."
    ]
},
{
    "id": "257",
    "title": "Binary Tree Paths",
    "question": "Given the root of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.",
    "examples": [
        "Input: root = [1,2,3,null,5]",
        "Output: [\"1->2->5\",\"1->3\"]",
        "Input: root = [1]",
        "Output: [\"1\"]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 100].-100 <= Node. val <= 100"
    ]
},
{
    "id": "523",
    "title": "Continuous Subarray Sum",
    "question": "Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.\nAn integer x is a multiple of k if there exists an integer n such that x = n * k.\n 0 is always a multiple of k.",
    "examples": [
        "Input: nums = [23,2,4,6,7], k = 6",
        "Output: true",
        "Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.",
        "Input: nums = [23,2,6,4,7], k = 6",
        "Output: true",
        "Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.",
        "42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.",
        "Input: nums = [23,2,6,4,7], k = 13",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1050 <= nums[i] <= 1090 <= sum(nums[i]) <= 231 - 11 <= k <= 231 - 1"
    ]
},
{
    "id": "524",
    "title": "Longest Word in Dictionary through Deleting",
    "question": "Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters.\n If there is more than one possible result, return the longest word with the smallest lexicographical order.\n If there is no possible result, return the empty string.",
    "examples": [
        "Input: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]",
        "Output: \"apple\"",
        "Input: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]",
        "Output: \"a\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 10001 <= dictionary. length <= 10001 <= dictionary[i]. length <= 1000s and dictionary[i] consist of lowercase English letters."
    ]
},
{
    "id": "525",
    "title": "Contiguous Array",
    "question": "Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.",
    "examples": [
        "Input: nums = [0,1]",
        "Output: 2",
        "Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.",
        "Input: nums = [0,1,0]",
        "Output: 2",
        "Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105nums[i] is either 0 or 1."
    ]
},
{
    "id": "526",
    "title": "Beautiful Arrangement",
    "question": "Suppose you have n integers labeled 1 through n.\n A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:Given an integer n, return the number of the beautiful arrangements that you can construct.",
    "examples": [
        "Input: n = 2",
        "Output: 2",
        "Explanation: ",
        "The first beautiful arrangement is [1,2]:",
        "    - perm[1] = 1 is divisible by i = 1",
        "    - perm[2] = 2 is divisible by i = 2",
        "The second beautiful arrangement is [2,1]:",
        "    - perm[1] = 2 is divisible by i = 1",
        "    - i = 2 is divisible by perm[2] = 1",
        "Input: n = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "perm[i] is divisible by i. i is divisible by perm[i]. 1 <= n <= 15"
    ]
},
{
    "id": "528",
    "title": "Random Pick with Weight",
    "question": "You are given an array of positive integers w where w[i] describes the weight of ith index (0-indexed).\nWe need to call the function pickIndex() which randomly returns an integer in the range [0, w.\nlength - 1].\n pickIndex() should return the integer proportional to its weight in the w array.\n For example, for w = [1, 3], the probability of picking the index 0 is 1 / (1 + 3) = 0.\n25 (i.\ne 25%) while the probability of picking the index 1 is 3 / (1 + 3) = 0.\n75 (i.\ne 75%).\nMore formally, the probability of picking index i is w[i] / sum(w).",
    "examples": [
        "Input",
        "[\"Solution\",\"pickIndex\"]",
        "[[[1]],[]]",
        "Output",
        "[null,0]",
        "",
        "Explanation",
        "Solution solution = new Solution([1]);",
        "solution. pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.",
        "Input",
        "[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]",
        "[[[1,3]],[],[],[],[],[]]",
        "Output",
        "[null,1,1,1,1,0]",
        "",
        "Explanation",
        "Solution solution = new Solution([1, 3]);",
        "solution. pickIndex(); // return 1. It's returning the second element (index = 1) that has probability of 3/4.",
        "solution. pickIndex(); // return 1",
        "solution. pickIndex(); // return 1",
        "solution. pickIndex(); // return 1",
        "solution. pickIndex(); // return 0. It's returning the first element (index = 0) that has probability of 1/4.",
        "",
        "Since this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :",
        "[null,1,1,1,1,0]",
        "[null,1,1,1,1,1]",
        "[null,1,1,1,0,0]",
        "[null,1,1,1,0,1]",
        "[null,1,0,1,0,0]",
        "......",
        "and so on.",
        ""
    ],
    "constraints": [
        "1 <= w. length <= 100001 <= w[i] <= 10^5pickIndex will be called at most 10000 times."
    ]
},
{
    "id": "529",
    "title": "Minesweeper",
    "question": "Let's play the minesweeper game (Wikipedia, online game)!You are given an m x n char matrix board representing the game board where:You are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').\nReturn the board after revealing this position according to the following rules:",
    "examples": [
        "Input: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]",
        "Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
        "Input: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]",
        "Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
        ""
    ],
    "constraints": [
        "'M' represents an unrevealed mine",
        "'E' represents an unrevealed empty square",
        "'B' represents a revealed blank square that has no adjacent mines (i. e.",
        " above",
        " below",
        " left",
        " right",
        " and all 4 diagonals)",
        "digit ('1' to '8') represents how many mines are adjacent to this revealed square",
        " and'X' represents a revealed mine. m == board. lengthn == board[i]. length1 <= m",
        " n <= 50board[i][j] is either 'M'",
        " 'E'",
        " 'B'",
        " or a digit from '1' to '8'. click. length == 20 <= clickr < m0 <= clickc < nboard[clickr][clickc] is either 'M' or 'E'."
    ]
},
{
    "id": "532",
    "title": "K-diff Pairs in an Array",
    "question": "Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:Notice that |val| denotes the absolute value of val.",
    "examples": [
        "Input: nums = [3,1,4,1,5], k = 2",
        "Output: 2",
        "Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).",
        "Although we have two 1s in the input, we should only return the number of unique pairs.",
        "Input: nums = [1,2,3,4,5], k = 1",
        "Output: 4",
        "Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).",
        "Input: nums = [1,3,1,5,4], k = 0",
        "Output: 1",
        "Explanation: There is one 0-diff pair in the array, (1, 1).",
        "Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3",
        "Output: 2",
        "Input: nums = [-1,-2,-3], k = 1",
        "Output: 2",
        ""
    ],
    "constraints": [
        "0 <= i < j < nums. length|nums[i] - nums[j]| == k1 <= nums. length <= 104-107 <= nums[i] <= 1070 <= k <= 107"
    ]
},
{
    "id": "535",
    "title": "Encode and Decode TinyURL",
    "question": "TinyURL is a URL shortening service where you enter a URL such as https://leetcode.\ncom/problems/design-tinyurl and it returns a short URL such as http://tinyurl.\ncom/4e9iAk.\n Design a class to encode a URL and decode a tiny URL.\nThere is no restriction on how your encode/decode algorithm should work.\n You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\nImplement the Solution class:",
    "examples": [
        "Input: url = \"https://leetcode. com/problems/design-tinyurl\"",
        "Output: \"https://leetcode. com/problems/design-tinyurl\"",
        "",
        "Explanation:",
        "Solution obj = new Solution();",
        "string tiny = obj. encode(url); // returns the encoded tiny url.",
        "string ans = obj. decode(tiny); // returns the original url after deconding it.",
        ""
    ],
    "constraints": [
        "Solution() Initializes the object of the system. String encode(String longUrl) Returns a tiny URL for the given longUrl. String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object. 1 <= url. length <= 104url is guranteed to be a valid URL."
    ]
},
{
    "id": "537",
    "title": "Complex Number Multiplication",
    "question": "A complex number can be represented as a string on the form \"real+imaginaryi\" where:Given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.",
    "examples": [
        "Input: num1 = \"1+1i\", num2 = \"1+1i\"",
        "Output: \"0+2i\"",
        "Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.",
        "Input: num1 = \"1+-1i\", num2 = \"1+-1i\"",
        "Output: \"0+-2i\"",
        "Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.",
        ""
    ],
    "constraints": [
        "real is the real part and is an integer in the range [-100",
        " 100]. imaginary is the imaginary part and is an integer in the range [-100",
        " 100]. i2 == -1. num1 and num2 are valid complex numbers."
    ]
},
{
    "id": "538",
    "title": "Convert BST to Greater Tree",
    "question": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\nAs a reminder, a binary search tree is a tree that satisfies these constraints:Note: This question is the same as 1038: https://leetcode.\ncom/problems/binary-search-tree-to-greater-sum-tree/",
    "examples": [
        "Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
        "Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
        "Input: root = [0,null,1]",
        "Output: [1,null,1]",
        "Input: root = [1,0,2]",
        "Output: [3,3,2]",
        "Input: root = [3,2,4,1]",
        "Output: [7,9,4,10]",
        ""
    ],
    "constraints": [
        "The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees. The number of nodes in the tree is in the range [0",
        " 104].-104 <= Node. val <= 104All the values in the tree are unique. root is guaranteed to be a valid binary search tree."
    ]
},
{
    "id": "258",
    "title": "Add Digits",
    "question": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\n   Follow up: Could you do it without any loop/recursion in O(1) runtime?",
    "examples": [
        "Input: num = 38",
        "Output: 2",
        "Explanation: The process is",
        "38 --> 3 + 8 --> 11",
        "11 --> 1 + 1 --> 2 ",
        "Since 2 has only one digit, return it.",
        "Input: num = 0",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 <= num <= 231 - 1"
    ]
},
{
    "id": "539",
    "title": "Minimum Time Difference",
    "question": "",
    "examples": [
        "Input: timePoints = [\"23:59\",\"00:00\"]",
        "Output: 1",
        "Input: timePoints = [\"00:00\",\"23:59\",\"00:00\"]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "2 <= timePoints <= 2 * 104timePoints[i] is in the format \"HH:MM\"."
    ]
},
{
    "id": "540",
    "title": "Single Element in a Sorted Array",
    "question": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\n Find this single element that appears only once.\nFollow up: Your solution should run in O(log n) time and O(1) space.",
    "examples": [
        "Input: nums = [1,1,2,3,3,4,4,8,8]",
        "Output: 2",
        "Input: nums = [3,3,7,7,10,11,11]",
        "Output: 10",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10^50 <= nums[i] <= 10^5"
    ]
},
{
    "id": "542",
    "title": "01 Matrix",
    "question": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.",
    "examples": [
        "Input: mat = [[0,0,0],[0,1,0],[0,0,0]]",
        "Output: [[0,0,0],[0,1,0],[0,0,0]]",
        "Input: mat = [[0,0,0],[0,1,0],[1,1,1]]",
        "Output: [[0,0,0],[0,1,0],[1,2,1]]",
        ""
    ],
    "constraints": [
        "m == mat. lengthn == mat[i]. length1 <= m",
        " n <= 1041 <= m * n <= 104mat[i][j] is either 0 or 1. There is at least one 0 in mat."
    ]
},
{
    "id": "547",
    "title": "Number of Provinces",
    "question": "There are n cities.\n Some of them are connected, while some are not.\n If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\nReturn the total number of provinces.",
    "examples": [
        "Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]",
        "Output: 2",
        "Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= n <= 200n == isConnected. lengthn == isConnected[i]. lengthisConnected[i][j] is 1 or 0. isConnected[i][i] == 1isConnected[i][j] == isConnected[j][i]"
    ]
},
{
    "id": "553",
    "title": "Optimal Division",
    "question": "You are given an integer array nums.\n The adjacent integers in nums will perform the float division.\nHowever, you can add any number of parenthesis at any position to change the priority of operations.\n You want to add these parentheses such the value of the expression after the evaluation is maximum.\nReturn the corresponding expression that has the maximum value in string format.\nNote: your expression should not contain redundant parenthesis.",
    "examples": [
        "Input: nums = [1000,100,10,2]",
        "Output: \"1000/(100/10/2)\"",
        "Explanation:",
        "1000/(100/10/2) = 1000/((100/10)/2) = 200",
        "However, the bold parenthesis in \"1000/((100/10)/2)\" are redundant, since they don't influence the operation priority. So you should return \"1000/(100/10/2)\".",
        "Other cases:",
        "1000/(100/10)/2 = 50",
        "1000/(100/(10/2)) = 50",
        "1000/100/10/2 = 0. 5",
        "1000/100/(10/2) = 2",
        "Input: nums = [2,3,4]",
        "Output: \"2/(3/4)\"",
        "Input: nums = [2]",
        "Output: \"2\"",
        ""
    ],
    "constraints": [
        "For example",
        " for nums = [2",
        "3",
        "4]",
        " we will evaluate the expression \"2/3/4\". 1 <= nums. length <= 102 <= nums[i] <= 1000There is only one optimal division for the given iput."
    ]
},
{
    "id": "554",
    "title": "Brick Wall",
    "question": "There is a rectangular brick wall in front of you with n rows of bricks.\n The ith row has some number of bricks each of the same height (i.\ne.\n, one unit) but they can be of different widths.\n The total width of each row is the same.\nDraw a vertical line from the top to the bottom and cross the least bricks.\n If your line goes through the edge of a brick, then the brick is not considered as crossed.\n You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\nGiven the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.",
    "examples": [
        "Input: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]",
        "Output: 2",
        "Input: wall = [[1],[1],[1]]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "n == wall. length1 <= n <= 1041 <= wall[i]. length <= 1041 <= sum(wall[i]. length) <= 2 * 104sum(wall[i]) is the same for each row i. 1 <= wall[i][j] <= 231 - 1"
    ]
},
{
    "id": "556",
    "title": "Next Greater Element III",
    "question": "Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n.\n If no such positive integer exists, return -1.\nNote that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.",
    "examples": [
        "Input: n = 12",
        "Output: 21",
        "Input: n = 21",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= n <= 231 - 1"
    ]
},
{
    "id": "558",
    "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
    "question": "A Binary Matrix is a matrix in which all the elements are either 0 or 1.\nGiven quadTree1 and quadTree2.\n quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix.\n Return a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\nA Quad-Tree is a tree data structure in which each internal node has exactly four children.\n Besides, each node has two attributes:We can construct a Quad-Tree from a two-dimensional area using the following steps:If you want to know more about the Quad-Tree, you can refer to the wiki.\nQuad-Tree format:The input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\nIt is very similar to the serialization of the binary tree.\n The only difference is that the node is represented as a list [isLeaf, val].\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.",
    "examples": [
        "class Node {",
        "    public boolean val;",
        "    public boolean isLeaf;",
        "    public Node topLeft;",
        "    public Node topRight;",
        "    public Node bottomLeft;",
        "    public Node bottomRight;",
        "}Input: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]",
        ", quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
        "Output: [[0,0],[1,1],[1,1],[1,1],[1,0]]",
        "Explanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.",
        "If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.",
        "Notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.",
        "",
        "Input: quadTree1 = [[1,0]]",
        ", quadTree2 = [[1,0]]",
        "Output: [[1,0]]",
        "Explanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.",
        "The resulting matrix is of size 1*1 with also zero.",
        "Input: quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]",
        ", quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]",
        "Output: [[1,1]]",
        "Input: quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]",
        ", quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]",
        "Output: [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]",
        "Input: quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
        ", quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]",
        "Output: [[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]",
        ""
    ],
    "constraints": [
        "val: True if the node represents a grid of 1's or False if the node represents a grid of 0's. isLeaf: True if the node is leaf node on the tree or False if the node has the four children. quadTree1 and quadTree2 are both valid Quad-Trees each representing a n * n grid. n == 2^x where 0 <= x <= 9."
    ]
},
{
    "id": "560",
    "title": "Subarray Sum Equals K",
    "question": "Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.",
    "examples": [
        "Input: nums = [1,1,1], k = 2",
        "Output: 2",
        "Input: nums = [1,2,3], k = 3",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2 * 104-1000 <= nums[i] <= 1000-107 <= k <= 107"
    ]
},
{
    "id": "565",
    "title": "Array Nesting",
    "question": "You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].\nYou should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], .\n.\n.\n } subjected to the following rule:Return the longest length of a set s[k].",
    "examples": [
        "Input: nums = [5,4,0,3,1,6,2]",
        "Output: 4",
        "Explanation: ",
        "nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.",
        "One of the longest sets s[k]:",
        "s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}",
        "Input: nums = [0,1,2]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The first element in s[k] starts with the selection of the element nums[k] of index = k. The next element in s[k] should be nums[nums[k]]",
        " and then nums[nums[nums[k]]]",
        " and so on. We stop adding right before a duplicate element occurs in s[k]. 1 <= nums. length <= 1050 <= nums[i] < nums. lengthAll the values of nums are unique."
    ]
},
{
    "id": "263",
    "title": "Ugly Number",
    "question": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return true if n is an ugly number.",
    "examples": [
        "Input: n = 6",
        "Output: true",
        "Explanation: 6 = 2 × 3Input: n = 8",
        "Output: true",
        "Explanation: 8 = 2 × 2 × 2",
        "Input: n = 14",
        "Output: false",
        "Explanation: 14 is not ugly since it includes the prime factor 7.",
        "Input: n = 1",
        "Output: true",
        "Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.",
        ""
    ],
    "constraints": [
        "-231 <= n <= 231 - 1"
    ]
},
{
    "id": "567",
    "title": "Permutation in String",
    "question": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\nIn other words, return true if one of s1's permutations is the substring of s2.",
    "examples": [
        "Input: s1 = \"ab\", s2 = \"eidbaooo\"",
        "Output: true",
        "Explanation: s2 contains one permutation of s1 (\"ba\").",
        "Input: s1 = \"ab\", s2 = \"eidboaoo\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= s1. length",
        " s2. length <= 104s1 and s2 consist of lowercase English letters."
    ]
},
{
    "id": "576",
    "title": "Out of Boundary Paths",
    "question": "There is an m x n grid with a ball.\n The ball is initially at the position [startRow, startColumn].\n You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary).\n You can apply at most maxMove moves to the ball.\nGiven the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary.\n Since the answer can be very large, return it modulo 109 + 7.",
    "examples": [
        "Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0",
        "Output: 6",
        "Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1",
        "Output: 12",
        ""
    ],
    "constraints": [
        "1 <= m",
        " n <= 500 <= maxMove <= 500 <= startRow < m0 <= startColumn < n"
    ]
},
{
    "id": "581",
    "title": "Shortest Unsorted Continuous Subarray",
    "question": "Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\nReturn the shortest such subarray and output its length.",
    "examples": [
        "Input: nums = [2,6,4,8,10,9,15]",
        "Output: 5",
        "Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.",
        "Input: nums = [1,2,3,4]",
        "Output: 0",
        "Input: nums = [1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-105 <= nums[i] <= 105"
    ]
},
{
    "id": "583",
    "title": "Delete Operation for Two Strings",
    "question": "Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.\nIn one step, you can delete exactly one character in either string.",
    "examples": [
        "Input: word1 = \"sea\", word2 = \"eat\"",
        "Output: 2",
        "Explanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".",
        "Input: word1 = \"leetcode\", word2 = \"etco\"",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= word1. length",
        " word2. length <= 500word1 and word2 consist of only lowercase English letters."
    ]
},
{
    "id": "592",
    "title": "Fraction Addition and Subtraction",
    "question": "Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.\nThe final result should be an irreducible fraction.\n If your final result is an integer, say 2, you need to change it to the format of a fraction that has a denominator 1.\n So in this case, 2 should be converted to 2/1.",
    "examples": [
        "Input: expression = \"-1/2+1/2\"",
        "Output: \"0/1\"",
        "Input: expression = \"-1/2+1/2+1/3\"",
        "Output: \"1/3\"",
        "Input: expression = \"1/3-1/2\"",
        "Output: \"-1/6\"",
        "Input: expression = \"5/3+1/3\"",
        "Output: \"2/1\"",
        ""
    ],
    "constraints": [
        "The input string only contains '0' to '9'",
        " '/'",
        " '+' and '-'. So does the output. Each fraction (input and output) has the format ±numerator/denominator. If the first input fraction or the output is positive",
        " then '+' will be omitted. The input only contains valid irreducible fractions",
        " where the numerator and denominator of each fraction will always be in the range [1",
        " 10]. If the denominator is 1",
        " it means this fraction is actually an integer in a fraction format defined above. The number of given fractions will be in the range [1",
        " 10]. The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int."
    ]
},
{
    "id": "593",
    "title": "Valid Square",
    "question": "Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.\nThe coordinate of a point pi is represented as [xi, yi].\n The input is not given in any order.\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).",
    "examples": [
        "Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]",
        "Output: true",
        "Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]",
        "Output: false",
        "Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]",
        "Output: true",
        ""
    ],
    "constraints": [
        "p1. length == p2. length == p3. length == p4. length == 2-104 <= xi",
        " yi <= 104"
    ]
},
{
    "id": "609",
    "title": "Find Duplicate File in System",
    "question": "Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths.\n You may return the answer in any order.\nA group of duplicate files consists of at least two files that have the same content.\nA single directory info string in the input list has the following format:It means there are n files (f1.\ntxt, f2.\ntxt .\n.\n.\n fn.\ntxt) with content (f1_content, f2_content .\n.\n.\n fn_content) respectively in the directory \"root/d1/d2/.\n.\n.\n/dm\".\n Note that n >= 1 and m >= 0.\n If m = 0, it means the directory is just the root directory.\nThe output is a list of groups of duplicate file paths.\n For each group, it contains all the file paths of the files that have the same content.\n A file path is a string that has the following format:   Follow up:",
    "examples": [
        "Input: paths = [\"root/a 1. txt(abcd) 2. txt(efgh)\",\"root/c 3. txt(abcd)\",\"root/c/d 4. txt(efgh)\",\"root 4. txt(efgh)\"]",
        "Output: [[\"root/a/2. txt\",\"root/c/d/4. txt\",\"root/4. txt\"],[\"root/a/1. txt\",\"root/c/3. txt\"]]",
        "Input: paths = [\"root/a 1. txt(abcd) 2. txt(efgh)\",\"root/c 3. txt(abcd)\",\"root/c/d 4. txt(efgh)\"]",
        "Output: [[\"root/a/2. txt\",\"root/c/d/4. txt\"],[\"root/a/1. txt\",\"root/c/3. txt\"]]",
        ""
    ],
    "constraints": [
        "\"root/d1/d2/.../dm f1. txt(f1_content) f2. txt(f2_content) ... fn. txt(fn_content)\"\"directory_path/file_name. txt\"1 <= paths. length <= 2 * 1041 <= paths[i]. length <= 30001 <= sum(paths[i]. length) <= 5 * 105paths[i] consist of English letters",
        " digits",
        " '/'",
        " '.'",
        " '('",
        " ')'",
        " and ' '. You may assume no files or directories share the same name in the same directory. You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info. Imagine you are given a real file system",
        " how will you search files? DFS or BFS?If the file content is very large (GB level)",
        " how will you modify your solution?If you can only read the file by 1kb each time",
        " how will you modify your solution?What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?How to make sure the duplicated files you find are not false positive?"
    ]
},
{
    "id": "611",
    "title": "Valid Triangle Number",
    "question": "Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.",
    "examples": [
        "Input: nums = [2,2,3,4]",
        "Output: 3",
        "Explanation: Valid combinations are: ",
        "2,3,4 (using the first 2)",
        "2,3,4 (using the second 2)",
        "2,2,3",
        "Input: nums = [4,2,3,4]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10000 <= nums[i] <= 1000"
    ]
},
{
    "id": "621",
    "title": "Task Scheduler",
    "question": "Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task.\n Tasks could be done in any order.\n Each task is done in one unit of time.\n For each unit of time, the CPU could complete either one task or just be idle.\nHowever, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.\nReturn the least number of units of times that the CPU will take to finish all the given tasks.",
    "examples": [
        "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2",
        "Output: 8",
        "Explanation: ",
        "A -> B -> idle -> A -> B -> idle -> A -> B",
        "There is at least 2 units of time between any two same tasks.",
        "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0",
        "Output: 6",
        "Explanation: On this case any permutation of size 6 would work since n = 0.",
        "[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]",
        "[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]",
        "[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]",
        "...",
        "And so on.",
        "Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2",
        "Output: 16",
        "Explanation: ",
        "One possible solution is",
        "A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A",
        ""
    ],
    "constraints": [
        "1 <= task. length <= 104tasks[i] is upper-case English letter. The integer n is in the range [0",
        " 100]."
    ]
},
{
    "id": "622",
    "title": "Design Circular Queue",
    "question": "Design your implementation of the circular queue.\n The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle.\n It is also called \"Ring Buffer\".\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue.\n In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue.\n But using the circular queue, we can use the space to store new values.\nImplementation the MyCircularQueue class:You must solve the problem without using the built-in queue data structure in your programming language.",
    "examples": [
        "Input",
        "[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]",
        "[[3], [1], [2], [3], [4], [], [], [], [4], []]",
        "Output",
        "[null, true, true, true, false, 3, true, true, true, 4]",
        "",
        "Explanation",
        "MyCircularQueue myCircularQueue = new MyCircularQueue(3);",
        "myCircularQueue. enQueue(1); // return True",
        "myCircularQueue. enQueue(2); // return True",
        "myCircularQueue. enQueue(3); // return True",
        "myCircularQueue. enQueue(4); // return False",
        "myCircularQueue. Rear();     // return 3",
        "myCircularQueue. isFull();   // return True",
        "myCircularQueue. deQueue();  // return True",
        "myCircularQueue. enQueue(4); // return True",
        "myCircularQueue. Rear();     // return 4",
        ""
    ],
    "constraints": [
        "MyCircularQueue(k) Initializes the object with the size of the queue to be k. int Front() Gets the front item from the queue. If the queue is empty",
        " return -1. int Rear() Gets the last item from the queue. If the queue is empty",
        " return -1. boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful. boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful. boolean isEmpty() Checks whether the circular queue is empty or not. boolean isFull() Checks whether the circular queue is full or not. 1 <= k <= 10000 <= value <= 1000At most 3000 calls will be made to enQueue",
        " deQueue",
        " Front",
        " Rear",
        " isEmpty",
        " and isFull."
    ]
},
{
    "id": "268",
    "title": "Missing Number",
    "question": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?",
    "examples": [
        "Input: nums = [3,0,1]",
        "Output: 2",
        "Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.",
        "Input: nums = [0,1]",
        "Output: 2",
        "Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.",
        "Input: nums = [9,6,4,2,3,5,7,0,1]",
        "Output: 8",
        "Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.",
        "Input: nums = [0]",
        "Output: 1",
        "Explanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 1040 <= nums[i] <= nAll the numbers of nums are unique."
    ]
},
{
    "id": "623",
    "title": "Add One Row to Tree",
    "question": "Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.\nNote that the root node is at depth 1.\nThe adding rule is:",
    "examples": [
        "Input: root = [4,2,6,3,1,5], val = 1, depth = 2",
        "Output: [4,1,1,2,null,null,6,3,1,5]",
        "Input: root = [4,2,null,3,1], val = 1, depth = 3",
        "Output: [4,2,null,1,1,3,null,null,1]",
        ""
    ],
    "constraints": [
        "Given the integer depth",
        " for each not null tree node cur at the depth depth - 1",
        " create two tree nodes with value val as cur's left subtree root and right subtree root. cur's original left subtree should be the left subtree of the new left subtree root. cur's original right subtree should be the right subtree of the new right subtree root. If depth == 1 that means there is no depth depth - 1 at all",
        " then create a tree node with value val as the new root of the whole original tree",
        " and the original tree is the new root's left subtree. The number of nodes in the tree is in the range [1",
        " 104]. The depth of the tree is in the range [1",
        " 104].-100 <= Node. val <= 100-105 <= val <= 1051 <= depth <= the depth of tree + 1"
    ]
},
{
    "id": "633",
    "title": "Sum of Square Numbers",
    "question": "Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.",
    "examples": [
        "Input: c = 5",
        "Output: true",
        "Explanation: 1 * 1 + 2 * 2 = 5",
        "Input: c = 3",
        "Output: false",
        "Input: c = 4",
        "Output: true",
        "Input: c = 2",
        "Output: true",
        "Input: c = 1",
        "Output: true",
        ""
    ],
    "constraints": [
        "0 <= c <= 231 - 1"
    ]
},
{
    "id": "636",
    "title": "Exclusive Time of Functions",
    "question": "On a single-threaded CPU, we execute a program containing n functions.\n Each function has a unique ID between 0 and n-1.\nFunction calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack.\n The function whose ID is at the top of the stack is the current function being executed.\n Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\nYou are given a list logs, where logs[i] represents the ith log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\".\n For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2.\n Note that a function can be called multiple times, possibly recursively.\nA function's exclusive time is the sum of execution times for all function calls in the program.\n For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.\nReturn the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.",
    "examples": [
        "Input: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]",
        "Output: [3,4]",
        "Explanation:",
        "Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.",
        "Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.",
        "Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.",
        "So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.",
        "Input: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]",
        "Output: [8]",
        "Explanation:",
        "Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.",
        "Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.",
        "Function 0 (initial call) resumes execution then immediately calls itself again.",
        "Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.",
        "Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.",
        "So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.",
        "Input: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]",
        "Output: [7,1]",
        "Explanation:",
        "Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.",
        "Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.",
        "Function 0 (initial call) resumes execution then immediately calls function 1.",
        "Function 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6.",
        "Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.",
        "So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.",
        "Input: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:7\",\"1:end:7\",\"0:end:8\"]",
        "Output: [8,1]",
        "Input: n = 1, logs = [\"0:start:0\",\"0:end:0\"]",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "1 <= n <= 1001 <= logs. length <= 5000 <= function_id < n0 <= timestamp <= 109No two start events will happen at the same timestamp. No two end events will happen at the same timestamp. Each function has an \"end\" log for each \"start\" log."
    ]
},
{
    "id": "638",
    "title": "Shopping Offers",
    "question": "In LeetCode Store, there are n items to sell.\n Each item has a price.\n However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\nYou are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.\nYou are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.\ne.\n, the last integer in the array) is the price of the ith offer.\nReturn the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers.\n You are not allowed to buy more items than you want, even if that would lower the overall price.\n You could use any of the special offers as many times as you want.",
    "examples": [
        "Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]",
        "Output: 14",
        "Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. ",
        "In special offer 1, you can pay $5 for 3A and 0B",
        "In special offer 2, you can pay $10 for 1A and 2B. ",
        "You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.",
        "Input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]",
        "Output: 11",
        "Explanation: The price of A is $2, and $3 for B, $4 for C. ",
        "You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. ",
        "You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. ",
        "You cannot add more items, though only $9 for 2A ,2B and 1C.",
        ""
    ],
    "constraints": [
        "n == price. lengthn == needs. length1 <= n <= 60 <= price[i] <= 100 <= needs[i] <= 101 <= special. length <= 100special[i]. length == n + 10 <= special[i][j] <= 50"
    ]
},
{
    "id": "640",
    "title": "Solve the Equation",
    "question": "Solve a given equation and return the value of 'x' in the form of a string \"x=#value\".\n The equation contains only '+', '-' operation, the variable 'x' and its coefficient.\n You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation.\nIf there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.",
    "examples": [
        "Input: equation = \"x+5-3+x=6+x-2\"",
        "Output: \"x=2\"",
        "Input: equation = \"x=x\"",
        "Output: \"Infinite solutions\"",
        "Input: equation = \"2x=x\"",
        "Output: \"x=0\"",
        "Input: equation = \"2x+3x-6x=x+2\"",
        "Output: \"x=-1\"",
        "Input: equation = \"x=x+2\"",
        "Output: \"No solution\"",
        ""
    ],
    "constraints": [
        "3 <= equation. length <= 1000equation has exactly one '='. equation consists of integers with an absolute value in the range [0",
        " 100] without any leading zeros",
        " and the variable 'x'."
    ]
},
{
    "id": "641",
    "title": "Design Circular Deque",
    "question": "Design your implementation of the circular double-ended queue (deque).\nImplement the MyCircularDeque class:",
    "examples": [
        "Input",
        "[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]",
        "[[3], [1], [2], [3], [4], [], [], [], [4], []]",
        "Output",
        "[null, true, true, true, false, 2, true, true, true, 4]",
        "",
        "Explanation",
        "MyCircularDeque myCircularDeque = new MyCircularDeque(3);",
        "myCircularDeque. insertLast(1);  // return True",
        "myCircularDeque. insertLast(2);  // return True",
        "myCircularDeque. insertFront(3); // return True",
        "myCircularDeque. insertFront(4); // return False, the queue is full.",
        "myCircularDeque. getRear();      // return 2",
        "myCircularDeque. isFull();       // return True",
        "myCircularDeque. deleteLast();   // return True",
        "myCircularDeque. insertFront(4); // return True",
        "myCircularDeque. getFront();     // return 4",
        ""
    ],
    "constraints": [
        "MyCircularDeque(int k) Initializes the deque with a maximum size of k. boolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful",
        " or false otherwise. boolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful",
        " or false otherwise. boolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful",
        " or false otherwise. boolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful",
        " or false otherwise. int getFront() Returns the front item from the Deque. Returns -1 if the deque is empty. int getRear() Returns the last item from Deque. Returns -1 if the deque is empty. boolean isEmpty() Returns true if the deque is empty",
        " or false otherwise. boolean isFull() Returns true if the deque is full",
        " or false otherwise. 1 <= k <= 10000 <= value <= 1000At most 2000 calls will be made to insertFront",
        " insertLast",
        " deleteFront",
        " deleteLast",
        " getFront",
        " getRear",
        " isEmpty",
        " isFull."
    ]
},
{
    "id": "646",
    "title": "Maximum Length of Pair Chain",
    "question": "You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.\nA pair p2 = [c, d] follows a pair p1 = [a, b] if b < c.\n A chain of pairs can be formed in this fashion.\nReturn the length longest chain which can be formed.\nYou do not need to use up all the given intervals.\n You can select pairs in any order.",
    "examples": [
        "Input: pairs = [[1,2],[2,3],[3,4]]",
        "Output: 2",
        "Explanation: The longest chain is [1,2] -> [3,4].",
        "Input: pairs = [[1,2],[7,8],[4,5]]",
        "Output: 3",
        "Explanation: The longest chain is [1,2] -> [4,5] -> [7,8].",
        ""
    ],
    "constraints": [
        "n == pairs. length1 <= n <= 1000-1000 <= lefti < righti < 1000"
    ]
},
{
    "id": "647",
    "title": "Palindromic Substrings",
    "question": "Given a string s, return the number of palindromic substrings in it.\nA string is a palindrome when it reads the same backward as forward.\nA substring is a contiguous sequence of characters within the string.",
    "examples": [
        "Input: s = \"abc\"",
        "Output: 3",
        "Explanation: Three palindromic strings: \"a\", \"b\", \"c\".",
        "Input: s = \"aaa\"",
        "Output: 6",
        "Explanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s consists of lowercase English letters."
    ]
},
{
    "id": "648",
    "title": "Replace Words",
    "question": "In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor.\n For example, when the root \"an\" is followed by the successor word \"other\", we can form a new word \"another\".\nGiven a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it.\n If a successor can be replaced by more than one root, replace it with the root that has the shortest length.\nReturn the sentence after the replacement.",
    "examples": [
        "Input: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"",
        "Output: \"the cat was rat by the bat\"",
        "Input: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"",
        "Output: \"a a b c\"",
        "Input: dictionary = [\"a\", \"aa\", \"aaa\", \"aaaa\"], sentence = \"a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa\"",
        "Output: \"a a a a a a a a bbb baba a\"",
        "Input: dictionary = [\"catt\",\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"",
        "Output: \"the cat was rat by the bat\"",
        "Input: dictionary = [\"ac\",\"ab\"], sentence = \"it is abnormal that this solution is accepted\"",
        "Output: \"it is ab that this solution is ac\"",
        ""
    ],
    "constraints": [
        "1 <= dictionary. length <= 10001 <= dictionary[i]. length <= 100dictionary[i] consists of only lower-case letters. 1 <= sentence. length <= 10^6sentence consists of only lower-case letters and spaces. The number of words in sentence is in the range [1",
        " 1000]The length of each word in sentence is in the range [1",
        " 1000]Each two consecutive words in sentence will be separated by exactly one space. sentence does not have leading or trailing spaces."
    ]
},
{
    "id": "649",
    "title": "Dota2 Senate",
    "question": "In the world of Dota2, there are two parties: the Radiant and the Dire.\nThe Dota2 senate consists of senators coming from two parties.\n Now the Senate wants to decide on a change in the Dota2 game.\n The voting for this change is a round-based procedure.\n In each round, each senator can exercise one of the two rights:Given a string senate representing each senator's party belonging.\n The character 'R' and 'D' represent the Radiant party and the Dire party.\n Then if there are n senators, the size of the given string will be n.\nThe round-based procedure starts from the first senator to the last senator in the given order.\n This procedure will last until the end of voting.\n All the senators who have lost their rights will be skipped during the procedure.\nSuppose every senator is smart enough and will play the best strategy for his own party.\n Predict which party will finally announce the victory and change the Dota2 game.\n The output should be \"Radiant\" or \"Dire\".",
    "examples": [
        "Input: senate = \"RD\"",
        "Output: \"Radiant\"",
        "Explanation: ",
        "The first senator comes from Radiant and he can just ban the next senator's right in round 1. ",
        "And the second senator can't exercise any rights anymore since his right has been banned. ",
        "And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.",
        "Input: senate = \"RDD\"",
        "Output: \"Dire\"",
        "Explanation: ",
        "The first senator comes from Radiant and he can just ban the next senator's right in round 1. ",
        "And the second senator can't exercise any rights anymore since his right has been banned. ",
        "And the third senator comes from Dire and he can ban the first senator's right in round 1. ",
        "And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.",
        ""
    ],
    "constraints": [
        "Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds. Announce the victory: If this senator found the senators who still have rights to vote are all from the same party",
        " he can announce the victory and decide on the change in the game. n == senate. length1 <= n <= 104senate[i] is either 'R' or 'D'."
    ]
},
{
    "id": "278",
    "title": "First Bad Version",
    "question": "You are a product manager and currently leading a team to develop a new product.\n Unfortunately, the latest version of your product fails the quality check.\n Since each version is developed based on the previous version, all the versions after a bad version are also bad.\nSuppose you have n versions [1, 2, .\n.\n.\n, n] and you want to find out the first bad one, which causes all the following ones to be bad.\nYou are given an API bool isBadVersion(version) which returns whether version is bad.\n Implement a function to find the first bad version.\n You should minimize the number of calls to the API.",
    "examples": [
        "Input: n = 5, bad = 4",
        "Output: 4",
        "Explanation:",
        "call isBadVersion(3) -> false",
        "call isBadVersion(5) -> true",
        "call isBadVersion(4) -> true",
        "Then 4 is the first bad version.",
        "Input: n = 1, bad = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= bad <= n <= 231 - 1"
    ]
},
{
    "id": "650",
    "title": "2 Keys Keyboard",
    "question": "There is only one character 'A' on the screen of a notepad.\n You can perform two operations on this notepad for each step:Given an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.",
    "examples": [
        "Input: n = 3",
        "Output: 3",
        "Explanation: Intitally, we have one character 'A'.",
        "In step 1, we use Copy All operation.",
        "In step 2, we use Paste operation to get 'AA'.",
        "In step 3, we use Paste operation to get 'AAA'.",
        "Input: n = 1",
        "Output: 0",
        ""
    ],
    "constraints": [
        "Copy All: You can copy all the characters present on the screen (a partial copy is not allowed). Paste: You can paste the characters which are copied last time. 1 <= n <= 1000"
    ]
},
{
    "id": "652",
    "title": "Find Duplicate Subtrees",
    "question": "Given the root of a binary tree, return all duplicate subtrees.\nFor each kind of duplicate subtrees, you only need to return the root node of any one of them.\nTwo trees are duplicate if they have the same structure with the same node values.",
    "examples": [
        "Input: root = [1,2,3,4,null,2,4,null,null,4]",
        "Output: [[2,4],[4]]",
        "Input: root = [2,1,1]",
        "Output: [[1]]",
        "Input: root = [2,2,2,3,null,3,null]",
        "Output: [[2,3],[3]]",
        ""
    ],
    "constraints": [
        "The number of the nodes in the tree will be in the range [1",
        " 10^4]-200 <= Node. val <= 200"
    ]
},
{
    "id": "654",
    "title": "Maximum Binary Tree",
    "question": "You are given an integer array nums with no duplicates.\n A maximum binary tree can be built recursively from nums using the following algorithm:Return the maximum binary tree built from nums.",
    "examples": [
        "Input: nums = [3,2,1,6,0,5]",
        "Output: [6,3,5,null,2,0,null,null,1]",
        "Explanation: The recursive calls are as follow:",
        "- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].",
        "    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].",
        "        - Empty array, so no child.",
        "        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].",
        "            - Empty array, so no child.",
        "            - Only one element, so child is a node with value 1.",
        "    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].",
        "        - Only one element, so child is a node with value 0.",
        "        - Empty array, so no child.",
        "Input: nums = [3,2,1]",
        "Output: [3,null,2,null,1]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10000 <= nums[i] <= 1000All integers in nums are unique."
    ]
},
{
    "id": "655",
    "title": "Print Binary Tree",
    "question": "Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree.\n The formatted layout matrix should be constructed using the following rules:Return the constructed matrix res.",
    "examples": [
        "Input: root = [1,2]",
        "Output: ",
        "[[\"\",\"1\",\"\"],",
        " [\"2\",\"\",\"\"]]",
        "Input: root = [1,2,3,null,4]",
        "Output: ",
        "[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],",
        " [\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],",
        " [\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]",
        ""
    ],
    "constraints": [
        "The height of the tree is height and the number of rows m should be equal to height + 1. The number of columns n should be equal to 2height+1 - 1. Place the root node in the middle of the top row (more formally",
        " at location res[0][(n-1)/2]). For each node that has been placed in the matrix at position res[r][c]",
        " place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1]. Continue this process until all the nodes in the tree have been placed. Any empty cells should contain the empty string \"\". The number of nodes in the tree is in the range [1",
        " 210].-99 <= Node. val <= 99The depth of the tree will be in the range [1",
        " 10]."
    ]
},
{
    "id": "658",
    "title": "Find K Closest Elements",
    "question": "Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array.\n The result should also be sorted in ascending order.\nAn integer a is closer to x than an integer b if:",
    "examples": [
        "Input: arr = [1,2,3,4,5], k = 4, x = 3",
        "Output: [1,2,3,4]",
        "Input: arr = [1,2,3,4,5], k = 4, x = -1",
        "Output: [1,2,3,4]",
        ""
    ],
    "constraints": [
        "|a - x| < |b - x|",
        " or|a - x| == |b - x| and a < b1 <= k <= arr. length1 <= arr. length <= 104arr is sorted in ascending order.-104 <= arr[i]",
        " x <= 104"
    ]
},
{
    "id": "659",
    "title": "Split Array into Consecutive Subsequences",
    "question": "You are given an integer array nums that is sorted in non-decreasing order.\nDetermine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:Return true if you can split nums according to the above conditions, or false otherwise.\nA subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements.\n (i.\ne.\n, [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).",
    "examples": [
        "Input: nums = [1,2,3,3,4,5]",
        "Output: true",
        "Explanation: nums can be split into the following subsequences:",
        "[1,2,3,3,4,5] --> 1, 2, 3",
        "[1,2,3,3,4,5] --> 3, 4, 5",
        "Input: nums = [1,2,3,3,4,4,5,5]",
        "Output: true",
        "Explanation: nums can be split into the following subsequences:",
        "[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5",
        "[1,2,3,3,4,4,5,5] --> 3, 4, 5",
        "Input: nums = [1,2,3,4,4,5]",
        "Output: false",
        "Explanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.",
        ""
    ],
    "constraints": [
        "Each subsequence is a consecutive increasing sequence (i. e. each integer is exactly one more than the previous integer). All subsequences have a length of 3 or more. 1 <= nums. length <= 104-1000 <= nums[i] <= 1000nums is sorted in non-decreasing order."
    ]
},
{
    "id": "662",
    "title": "Maximum Width of Binary Tree",
    "question": "Given the root of a binary tree, return the maximum width of the given tree.\nThe maximum width of a tree is the maximum width among all levels.\nThe width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes are also counted into the length calculation.\nIt is guaranteed that the answer will in the range of 32-bit signed integer.",
    "examples": [
        "Input: root = [1,3,2,5,3,null,9]",
        "Output: 4",
        "Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).",
        "Input: root = [1,3,null,5,3]",
        "Output: 2",
        "Explanation: The maximum width existing in the third level with the length 2 (5,3).",
        "Input: root = [1,3,2,5]",
        "Output: 2",
        "Explanation: The maximum width existing in the second level with the length 2 (3,2).",
        "Input: root = [1,3,2,5,null,null,9,6,null,null,7]",
        "Output: 8",
        "Explanation: The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 3000].-100 <= Node. val <= 100"
    ]
},
{
    "id": "665",
    "title": "Non-decreasing Array",
    "question": "Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.\nWe define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).",
    "examples": [
        "Input: nums = [4,2,3]",
        "Output: true",
        "Explanation: You could modify the first 4 to 1 to get a non-decreasing array.",
        "Input: nums = [4,2,1]",
        "Output: false",
        "Explanation: You can't get a non-decreasing array by modify at most one element.",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 104-105 <= nums[i] <= 105"
    ]
},
{
    "id": "667",
    "title": "Beautiful Arrangement II",
    "question": "Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:Return the list answer.\n If there multiple valid answers, return any of them.",
    "examples": [
        "Input: n = 3, k = 1",
        "Output: [1,2,3]",
        "Explanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1",
        "Input: n = 3, k = 2",
        "Output: [1,3,2]",
        "Explanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.",
        ""
    ],
    "constraints": [
        "Suppose this list is answer = [a1",
        " a2",
        " a3",
        " ... ",
        " an]",
        " then the list [|a1 - a2|",
        " |a2 - a3|",
        " |a3 - a4|",
        " ... ",
        " |an-1 - an|] has exactly k distinct integers. 1 <= k < n <= 104"
    ]
},
{
    "id": "669",
    "title": "Trim a Binary Search Tree",
    "question": "Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high].\n Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.\ne.\n, any node's descendant should remain a descendant).\n It can be proven that there is a unique answer.\nReturn the root of the trimmed binary search tree.\n Note that the root may change depending on the given bounds.",
    "examples": [
        "Input: root = [1,0,2], low = 1, high = 2",
        "Output: [1,null,2]",
        "Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3",
        "Output: [3,2,null,1]",
        "Input: root = [1], low = 1, high = 2",
        "Output: [1]",
        "Input: root = [1,null,2], low = 1, high = 3",
        "Output: [1,null,2]",
        "Input: root = [1,null,2], low = 2, high = 4",
        "Output: [2]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree in the range [1",
        " 104]. 0 <= Node. val <= 104The value of each node in the tree is unique. root is guaranteed to be a valid binary search tree. 0 <= low <= high <= 104"
    ]
},
{
    "id": "283",
    "title": "Move Zeroes",
    "question": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\nNote that you must do this in-place without making a copy of the array.",
    "examples": [
        "Input: nums = [0,1,0,3,12]",
        "Output: [1,3,12,0,0]",
        "Input: nums = [0]",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-231 <= nums[i] <= 231 - 1"
    ]
},
{
    "id": "670",
    "title": "Maximum Swap",
    "question": "You are given an integer num.\n You can swap two digits at most once to get the maximum valued number.\nReturn the maximum valued number you can get.",
    "examples": [
        "Input: num = 2736",
        "Output: 7236",
        "Explanation: Swap the number 2 and the number 7.",
        "Input: num = 9973",
        "Output: 9973",
        "Explanation: No swap.",
        ""
    ],
    "constraints": [
        "0 <= num <= 108"
    ]
},
{
    "id": "672",
    "title": "Bulb Switcher II",
    "question": "There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall.\n Each of the four buttons has a different functionality where:You will press one of the four mentioned buttons exactly presses times.\nGiven the two integers n and presses, return the number of different statuses after pressing the four buttons exactly presses times.",
    "examples": [
        "Input: n = 1, presses = 1",
        "Output: 2",
        "Explanation: Status can be: [on], [off].",
        "Input: n = 2, presses = 1",
        "Output: 3",
        "Explanation: Status can be: [on, off], [off, on], [off, off].",
        "Input: n = 3, presses = 1",
        "Output: 4",
        "Explanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].",
        ""
    ],
    "constraints": [
        "Button 1: Flips the status of all the bulbs. Button 2: Flips the status of all the bulbs with even labels (i. e.",
        " 2",
        " 4",
        " ...). Button 3: Flips the status of all the bulbs with odd labels (i. e.",
        " 1",
        " 3",
        " ...). Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0",
        " 1",
        " 2",
        " ... (i. e.",
        " 1",
        " 4",
        " 7",
        " 10",
        " ...). 1 <= n <= 10000 <= presses <= 1000"
    ]
},
{
    "id": "673",
    "title": "Number of Longest Increasing Subsequence",
    "question": "Given an integer array nums, return the number of longest increasing subsequences.\nNotice that the sequence has to be strictly increasing.",
    "examples": [
        "Input: nums = [1,3,5,4,7]",
        "Output: 2",
        "Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].",
        "Input: nums = [2,2,2,2,2]",
        "Output: 5",
        "Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.",
        "",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 2000-106 <= nums[i] <= 106"
    ]
},
{
    "id": "676",
    "title": "Implement Magic Dictionary",
    "question": "Design a data structure that is initialized with a list of different words.\n Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\nImplement the MagicDictionary class:",
    "examples": [
        "Input",
        "[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]",
        "[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]",
        "Output",
        "[null, null, false, true, false, false]",
        "",
        "Explanation",
        "MagicDictionary magicDictionary = new MagicDictionary();",
        "magicDictionary. buildDict([\"hello\", \"leetcode\"]);",
        "magicDictionary. search(\"hello\"); // return False",
        "magicDictionary. search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True",
        "magicDictionary. search(\"hell\"); // return False",
        "magicDictionary. search(\"leetcoded\"); // return False",
        ""
    ],
    "constraints": [
        "MagicDictionary() Initializes the object. void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary. bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure",
        " otherwise returns false. 1 <= dictionary. length <= 1001 <= dictionary[i]. length <= 100dictionary[i] consists of only lower-case English letters. All the strings in dictionary are distinct. 1 <= searchWord. length <= 100searchWord consists of only lower-case English letters. buildDict will be called only once before search. At most 100 calls will be made to search."
    ]
},
{
    "id": "677",
    "title": "Map Sum Pairs",
    "question": "Design a map that allows you to do the following:Implement the MapSum class:",
    "examples": [
        "Input",
        "[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]",
        "[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]",
        "Output",
        "[null, null, 3, null, 5]",
        "",
        "Explanation",
        "MapSum mapSum = new MapSum();",
        "mapSum. insert(\"apple\", 3);  ",
        "mapSum. sum(\"ap\");           // return 3 (apple = 3)",
        "mapSum. insert(\"app\", 2);    ",
        "mapSum. sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)",
        ""
    ],
    "constraints": [
        "Maps a string key to a given value. Returns the sum of the values that have a key with a prefix equal to a given string. MapSum() Initializes the MapSum object. void insert(String key",
        " int val) Inserts the key-val pair into the map. If the key already existed",
        " the original key-value pair will be overridden to the new one. int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix. 1 <= key. length",
        " prefix. length <= 50key and prefix consist of only lowercase English letters. 1 <= val <= 1000At most 50 calls will be made to insert and sum."
    ]
},
{
    "id": "678",
    "title": "Valid Parenthesis String",
    "question": "Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.\nThe following rules define a valid string:",
    "examples": [
        "Input: s = \"()\"",
        "Output: true",
        "Input: s = \"(*)\"",
        "Output: true",
        "Input: s = \"(*))\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "Any left parenthesis '(' must have a corresponding right parenthesis ')'. Any right parenthesis ')' must have a corresponding left parenthesis '('. Left parenthesis '(' must go before the corresponding right parenthesis ')'.'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string \"\". 1 <= s. length <= 100s[i] is '('",
        " ')' or '*'."
    ]
},
{
    "id": "684",
    "title": "Redundant Connection",
    "question": "In this problem, a tree is an undirected graph that is connected and has no cycles.\nYou are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added.\n The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.\n The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.\nReturn an edge that can be removed so that the resulting graph is a tree of n nodes.\n If there are multiple answers, return the answer that occurs last in the input.",
    "examples": [
        "Input: edges = [[1,2],[1,3],[2,3]]",
        "Output: [2,3]",
        "Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]",
        "Output: [1,4]",
        ""
    ],
    "constraints": [
        "n == edges. length3 <= n <= 1000edges[i]. length == 21 <= ai < bi <= edges. lengthai != biThere are no repeated edges. The given graph is connected."
    ]
},
{
    "id": "686",
    "title": "Repeated String Match",
    "question": "Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it.\n If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.\nNotice: string \"abc\" repeated 0 times is \"\",  repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".",
    "examples": [
        "Input: a = \"abcd\", b = \"cdabcdab\"",
        "Output: 3",
        "Explanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it.",
        "Input: a = \"a\", b = \"aa\"",
        "Output: 2",
        "Input: a = \"a\", b = \"a\"",
        "Output: 1",
        "Input: a = \"abc\", b = \"wxyz\"",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= a. length <= 1041 <= b. length <= 104a and b consist of lower-case English letters."
    ]
},
{
    "id": "687",
    "title": "Longest Univalue Path",
    "question": "Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value.\n This path may or may not pass through the root.\nThe length of the path between two nodes is represented by the number of edges between them.",
    "examples": [
        "Input: root = [5,4,5,1,1,5]",
        "Output: 2",
        "Input: root = [1,4,5,4,4,5]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [0",
        " 104].-1000 <= Node. val <= 1000The depth of the tree will not exceed 1000."
    ]
},
{
    "id": "688",
    "title": "Knight Probability in Chessboard",
    "question": "On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves.\n The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).\nA chess knight has eight possible moves it can make, as illustrated below.\n Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\nThe knight continues moving until it has made exactly k moves or has moved off the chessboard.\nReturn the probability that the knight remains on the board after it has stopped moving.",
    "examples": [
        "Input: n = 3, k = 2, row = 0, column = 0",
        "Output: 0. 06250",
        "Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.",
        "From each of those positions, there are also two moves that will keep the knight on the board.",
        "The total probability the knight stays on the board is 0. 0625.",
        "Input: n = 1, k = 0, row = 0, column = 0",
        "Output: 1. 00000",
        ""
    ],
    "constraints": [
        "1 <= n <= 250 <= k <= 1000 <= row",
        " column <= n"
    ]
},
{
    "id": "290",
    "title": "Word Pattern",
    "question": "Given a pattern and a string s, find if s follows the same pattern.\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.",
    "examples": [
        "Input: pattern = \"abba\", s = \"dog cat cat dog\"",
        "Output: true",
        "Input: pattern = \"abba\", s = \"dog cat cat fish\"",
        "Output: false",
        "Input: pattern = \"aaaa\", s = \"dog cat cat dog\"",
        "Output: false",
        "Input: pattern = \"abba\", s = \"dog dog dog dog\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= pattern. length <= 300pattern contains only lower-case English letters. 1 <= s. length <= 3000s contains only lower-case English letters and spaces ' '. s does not contain any leading or trailing spaces. All the words in s are separated by a single space."
    ]
},
{
    "id": "692",
    "title": "Top K Frequent Words",
    "question": "Given an array of strings words and an integer k, return the k most frequent strings.\nReturn the answer sorted by the frequency from highest to lowest.\n Sort the words with the same frequency by their lexicographical order.\n   Follow-up: Could you solve it in O(n log(k)) time and O(n) extra space?",
    "examples": [
        "Input: words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2",
        "Output: [\"i\",\"love\"]",
        "Explanation: \"i\" and \"love\" are the two most frequent words.",
        "Note that \"i\" comes before \"love\" due to a lower alphabetical order.",
        "Input: words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4",
        "Output: [\"the\",\"is\",\"sunny\",\"day\"]",
        "Explanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 5001 <= words[i] <= 10words[i] consists of lowercase English letters. k is in the range [1",
        " The number of unique words[i]]"
    ]
},
{
    "id": "695",
    "title": "Max Area of Island",
    "question": "You are given an m x n binary matrix grid.\n An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.\n) You may assume all four edges of the grid are surrounded by water.\nThe area of an island is the number of cells with a value 1 in the island.\nReturn the maximum area of an island in grid.\n If there is no island, return 0.",
    "examples": [
        "Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]",
        "Output: 6",
        "Explanation: The answer is not 11, because the island must be connected 4-directionally.",
        "Input: grid = [[0,0,0,0,0,0,0,0]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 50grid[i][j] is either 0 or 1."
    ]
},
{
    "id": "698",
    "title": "Partition to K Equal Sum Subsets",
    "question": "Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.",
    "examples": [
        "Input: nums = [4,3,2,3,5,2,1], k = 4",
        "Output: true",
        "Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.",
        "Input: nums = [1,2,3,4], k = 3",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= k <= nums. length <= 161 <= nums[i] <= 104The frequency of each element is in the range [1",
        " 4]."
    ]
},
{
    "id": "701",
    "title": "Insert into a Binary Search Tree",
    "question": "You are given the root node of a binary search tree (BST) and a value to insert into the tree.\n Return the root node of the BST after the insertion.\n It is guaranteed that the new value does not exist in the original BST.\nNotice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion.\n You can return any of them.",
    "examples": [
        "Input: root = [4,2,7,1,3], val = 5",
        "Output: [4,2,7,1,3,5]",
        "Explanation: Another accepted tree is:",
        "",
        "Input: root = [40,20,60,10,30,50,70], val = 25",
        "Output: [40,20,60,10,30,50,70,null,null,25]",
        "Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5",
        "Output: [4,2,7,1,3,5]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree will be in the range [0",
        " 104].-108 <= Node. val <= 108All the values Node. val are unique.-108 <= val <= 108It's guaranteed that val does not exist in the original BST."
    ]
},
{
    "id": "707",
    "title": "Design Linked List",
    "question": "Design your implementation of the linked list.\n You can choose to use a singly or doubly linked list.\n\nA node in a singly linked list should have two attributes: val and next.\n val is the value of the current node, and next is a pointer/reference to the next node.\n\nIf you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list.\n Assume all nodes in the linked list are 0-indexed.\nImplement the MyLinkedList class:",
    "examples": [
        "Input",
        "[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]",
        "[[], [1], [3], [1, 2], [1], [1], [1]]",
        "Output",
        "[null, null, null, null, 2, null, 3]",
        "",
        "Explanation",
        "MyLinkedList myLinkedList = new MyLinkedList();",
        "myLinkedList. addAtHead(1);",
        "myLinkedList. addAtTail(3);",
        "myLinkedList. addAtIndex(1, 2);    // linked list becomes 1->2->3",
        "myLinkedList. get(1);              // return 2",
        "myLinkedList. deleteAtIndex(1);    // now the linked list is 1->3",
        "myLinkedList. get(1);              // return 3",
        ""
    ],
    "constraints": [
        "MyLinkedList() Initializes the MyLinkedList object. int get(int index) Get the value of the indexth node in the linked list. If the index is invalid",
        " return -1. void addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion",
        " the new node will be the first node of the linked list. void addAtTail(int val) Append a node of value val as the last element of the linked list. void addAtIndex(int index",
        " int val) Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list",
        " the node will be appended to the end of the linked list. If index is greater than the length",
        " the node will not be inserted. void deleteAtIndex(int index) Delete the indexth node in the linked list",
        " if the index is valid. 0 <= index",
        " val <= 1000Please do not use the built-in LinkedList library. At most 2000 calls will be made to get",
        " addAtHead",
        " addAtTail",
        " addAtIndex and deleteAtIndex."
    ]
},
{
    "id": "712",
    "title": "Minimum ASCII Delete Sum for Two Strings",
    "question": "Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.",
    "examples": [
        "Input: s1 = \"sea\", s2 = \"eat\"",
        "Output: 231",
        "Explanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.",
        "Deleting \"t\" from \"eat\" adds 116 to the sum.",
        "At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.",
        "Input: s1 = \"delete\", s2 = \"leet\"",
        "Output: 403",
        "Explanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",",
        "adds 100[d] + 101[e] + 101[e] to the sum.",
        "Deleting \"e\" from \"leet\" adds 101[e] to the sum.",
        "At the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.",
        "If instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.",
        ""
    ],
    "constraints": [
        "1 <= s1. length",
        " s2. length <= 1000s1 and s2 consist of lowercase English letters."
    ]
},
{
    "id": "713",
    "title": "Subarray Product Less Than K",
    "question": "Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.",
    "examples": [
        "Input: nums = [10,5,2,6], k = 100",
        "Output: 8",
        "Explanation: The 8 subarrays that have product less than 100 are:",
        "[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]",
        "Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.",
        "Input: nums = [1,2,3], k = 0",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 3 * 1041 <= nums[i] <= 10000 <= k <= 106"
    ]
},
{
    "id": "714",
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "question": "You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.\nFind the maximum profit you can achieve.\n You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\nNote: You may not engage in multiple transactions simultaneously (i.\ne.\n, you must sell the stock before you buy again).",
    "examples": [
        "Input: prices = [1,3,2,8,4,9], fee = 2",
        "Output: 8",
        "Explanation: The maximum profit can be achieved by:",
        "- Buying at prices[0] = 1",
        "- Selling at prices[3] = 8",
        "- Buying at prices[4] = 4",
        "- Selling at prices[5] = 9",
        "The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.",
        "Input: prices = [1,3,7,5,10,3], fee = 3",
        "Output: 6",
        ""
    ],
    "constraints": [
        "1 <= prices. length <= 5 * 1041 <= prices[i] < 5 * 1040 <= fee < 5 * 104"
    ]
},
{
    "id": "718",
    "title": "Maximum Length of Repeated Subarray",
    "question": "Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.",
    "examples": [
        "Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]",
        "Output: 3",
        "Explanation: The repeated subarray with maximum length is [3,2,1].",
        "Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]",
        "Output: 5",
        ""
    ],
    "constraints": [
        "1 <= nums1. length",
        " nums2. length <= 10000 <= nums1[i]",
        " nums2[i] <= 100"
    ]
},
{
    "id": "720",
    "title": "Longest Word in Dictionary",
    "question": "Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order.\n If there is no answer, return the empty string.",
    "examples": [
        "Input: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]",
        "Output: \"world\"",
        "Explanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".",
        "Input: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]",
        "Output: \"apple\"",
        "Explanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".",
        ""
    ],
    "constraints": [
        "1 <= words. length <= 10001 <= words[i]. length <= 30words[i] consists of lowercase English letters."
    ]
},
{
    "id": "292",
    "title": "Nim Game",
    "question": "You are playing the following Nim Game with your friend:Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.",
    "examples": [
        "Input: n = 4",
        "Output: false",
        "Explanation: These are the possible outcomes:",
        "1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.",
        "2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.",
        "3. You remove 3 stones. Your friend removes the last stone. Your friend wins.",
        "In all outcomes, your friend wins.",
        "Input: n = 1",
        "Output: true",
        "Input: n = 2",
        "Output: true",
        ""
    ],
    "constraints": [
        "Initially",
        " there is a heap of stones on the table. You and your friend will alternate taking turns",
        " and you go first. On each turn",
        " the person whose turn it is will remove 1 to 3 stones from the heap. The one who removes the last stone is the winner. 1 <= n <= 231 - 1"
    ]
},
{
    "id": "721",
    "title": "Accounts Merge",
    "question": "Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\nNow, we would like to merge these accounts.\n Two accounts definitely belong to the same person if there is some common email to both accounts.\n Note that even if two accounts have the same name, they may belong to different people as people could have the same name.\n A person can have any number of accounts initially, but all of their accounts definitely have the same name.\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order.\n The accounts themselves can be returned in any order.",
    "examples": [
        "Input: accounts = [[\"John\",\"johnsmith@mail. com\",\"john_newyork@mail. com\"],[\"John\",\"johnsmith@mail. com\",\"john00@mail. com\"],[\"Mary\",\"mary@mail. com\"],[\"John\",\"johnnybravo@mail. com\"]]",
        "Output: [[\"John\",\"john00@mail. com\",\"john_newyork@mail. com\",\"johnsmith@mail. com\"],[\"Mary\",\"mary@mail. com\"],[\"John\",\"johnnybravo@mail. com\"]]",
        "Explanation:",
        "The first and third John's are the same person as they have the common email \"johnsmith@mail. com\".",
        "The second John and Mary are different people as none of their email addresses are used by other accounts.",
        "We could return these lists in any order, for example the answer [['Mary', 'mary@mail. com'], ['John', 'johnnybravo@mail. com'], ",
        "['John', 'john00@mail. com', 'john_newyork@mail. com', 'johnsmith@mail. com']] would still be accepted.",
        "Input: accounts = [[\"Gabe\",\"Gabe0@m. co\",\"Gabe3@m. co\",\"Gabe1@m. co\"],[\"Kevin\",\"Kevin3@m. co\",\"Kevin5@m. co\",\"Kevin0@m. co\"],[\"Ethan\",\"Ethan5@m. co\",\"Ethan4@m. co\",\"Ethan0@m. co\"],[\"Hanzo\",\"Hanzo3@m. co\",\"Hanzo1@m. co\",\"Hanzo0@m. co\"],[\"Fern\",\"Fern5@m. co\",\"Fern1@m. co\",\"Fern0@m. co\"]]",
        "Output: [[\"Ethan\",\"Ethan0@m. co\",\"Ethan4@m. co\",\"Ethan5@m. co\"],[\"Gabe\",\"Gabe0@m. co\",\"Gabe1@m. co\",\"Gabe3@m. co\"],[\"Hanzo\",\"Hanzo0@m. co\",\"Hanzo1@m. co\",\"Hanzo3@m. co\"],[\"Kevin\",\"Kevin0@m. co\",\"Kevin3@m. co\",\"Kevin5@m. co\"],[\"Fern\",\"Fern0@m. co\",\"Fern1@m. co\",\"Fern5@m. co\"]]",
        ""
    ],
    "constraints": [
        "1 <= accounts. length <= 10002 <= accounts[i]. length <= 101 <= accounts[i][j] <= 30accounts[i][0] consists of English letters. accounts[i][j] (for j > 0) is a valid email."
    ]
},
{
    "id": "722",
    "title": "Remove Comments",
    "question": "Given a C++ program, remove comments from it.\n The program source is an array of strings source where source[i] is the ith line of the source code.\n This represents the result of splitting the original source code string by the newline character '\\n'.\nIn C++, there are two types of comments, line comments, and block comments.\nThe first effective comment takes precedence over others.\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\nThere will be no control characters, single quote, or double quote characters.\nAlso, nothing else such as defines or macros will interfere with the comments.\nIt is guaranteed that every open block comment will eventually be closed, so \"/*\" outside of a line or block comment always starts a new comment.\nFinally, implicit newline characters can be deleted by block comments.\n Please see the examples below for details.\nAfter removing the comments from the source code, return the source code in the same format.",
    "examples": [
        "Input: source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]",
        "Output: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]",
        "Explanation: The line by line code is visualized as below:",
        "/*Test program */",
        "int main()",
        "{ ",
        "  // variable declaration ",
        "int a, b, c;",
        "/* This is a test",
        "   multiline  ",
        "   comment for ",
        "   testing */",
        "a = b + c;",
        "}",
        "The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.",
        "The line by line output code is visualized as below:",
        "int main()",
        "{ ",
        "  ",
        "int a, b, c;",
        "a = b + c;",
        "}",
        "Input: source = [\"a/*comment\", \"line\", \"more_comment*/b\"]",
        "Output: [\"ab\"]",
        "Explanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].",
        ""
    ],
    "constraints": [
        "The string \"//\" denotes a line comment",
        " which represents that it and the rest of the characters to the right of it in the same line should be ignored. The string \"/*\" denotes a block comment",
        " which represents that all characters until the next (non-overlapping) occurrence of \"*/\" should be ignored. (Here",
        " occurrences happen in reading order: line by line from left to right.) To be clear",
        " the string \"/*/\" does not yet end the block comment",
        " as the ending would be overlapping the beginning. For example",
        " if the string \"//\" occurs in a block comment",
        " it is ignored. Similarly",
        " if the string \"/*\" occurs in a line or block comment",
        " it is also ignored. For example",
        " source = \"string s = \"/* Not a comment. */\";\" will not be a test case. 1 <= source. length <= 1000 <= source[i]. length <= 80source[i] consists of printable ASCII characters. Every open block comment is eventually closed. There are no single-quote or double-quote in the input."
    ]
},
{
    "id": "725",
    "title": "Split Linked List in Parts",
    "question": "Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one.\n This may lead to some parts being null.\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\nReturn an array of the k parts.",
    "examples": [
        "Input: head = [1,2,3], k = 5",
        "Output: [[1],[2],[3],[],[]]",
        "Explanation:",
        "The first element output[0] has output[0]. val = 1, output[0]. next = null.",
        "The last element output[4] is null, but its string representation as a ListNode is [].",
        "Input: head = [1,2,3,4,5,6,7,8,9,10], k = 3",
        "Output: [[1,2,3,4],[5,6,7],[8,9,10]]",
        "Explanation:",
        "The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is in the range [0",
        " 1000]. 0 <= Node. val <= 10001 <= k <= 50"
    ]
},
{
    "id": "729",
    "title": "My Calendar I",
    "question": "You are implementing a program to use as your calendar.\n We can add a new event if adding the event will not cause a double booking.\nA double booking happens when two events have some non-empty intersection (i.\ne.\n, some moment is common to both events.\n).\nThe event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\nImplement the MyCalendar class:",
    "examples": [
        "Input",
        "[\"MyCalendar\", \"book\", \"book\", \"book\"]",
        "[[], [10, 20], [15, 25], [20, 30]]",
        "Output",
        "[null, true, false, true]",
        "",
        "Explanation",
        "MyCalendar myCalendar = new MyCalendar();",
        "myCalendar. book(10, 20); // return True",
        "myCalendar. book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.",
        "myCalendar. book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20."
    ],
    "constraints": [
        "MyCalendar() Initializes the calendar object. boolean book(int start",
        " int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise",
        " return false and do not add the event to the calendar. 0 <= start < end <= 109At most 1000 calls will be made to book."
    ]
},
{
    "id": "731",
    "title": "My Calendar II",
    "question": "You are implementing a program to use as your calendar.\n We can add a new event if adding the event will not cause a triple booking.\nA triple booking happens when three events have some non-empty intersection (i.\ne.\n, some moment is common to all the three events.\n).\nThe event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\nImplement the MyCalendarTwo class:",
    "examples": [
        "Input",
        "[\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]",
        "[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]",
        "Output",
        "[null, true, true, true, false, true, true]",
        "",
        "Explanation",
        "MyCalendarTwo myCalendarTwo = new MyCalendarTwo();",
        "myCalendarTwo. book(10, 20); // return True, The event can be booked. ",
        "myCalendarTwo. book(50, 60); // return True, The event can be booked. ",
        "myCalendarTwo. book(10, 40); // return True, The event can be double booked. ",
        "myCalendarTwo. book(5, 15);  // return False, The event ca not be booked, because it would result in a triple booking.",
        "myCalendarTwo. book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.",
        "myCalendarTwo. book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.",
        ""
    ],
    "constraints": [
        "MyCalendarTwo() Initializes the calendar object. boolean book(int start",
        " int end) Returns true if the event can be added to the calendar successfully without causing a triple booking. Otherwise",
        " return false and do not add the event to the calendar. 0 <= start < end <= 109At most 1000 calls will be made to book."
    ]
},
{
    "id": "735",
    "title": "Asteroid Collision",
    "question": "We are given an array asteroids of integers representing asteroids in a row.\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left).\n Each asteroid moves at the same speed.\nFind out the state of the asteroids after all collisions.\n If two asteroids meet, the smaller one will explode.\n If both are the same size, both will explode.\n Two asteroids moving in the same direction will never meet.",
    "examples": [
        "Input: asteroids = [5,10,-5]",
        "Output: [5,10]",
        "Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.",
        "Input: asteroids = [8,-8]",
        "Output: []",
        "Explanation: The 8 and -8 collide exploding each other.",
        "Input: asteroids = [10,2,-5]",
        "Output: [10]",
        "Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.",
        "Input: asteroids = [-2,-1,1,2]",
        "Output: [-2,-1,1,2]",
        "Explanation: The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other.",
        ""
    ],
    "constraints": [
        "2 <= asteroids. length <= 104-1000 <= asteroids[i] <= 1000asteroids[i] != 0"
    ]
},
{
    "id": "738",
    "title": "Monotone Increasing Digits",
    "question": "An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.\nGiven an integer n, return the largest number that is less than or equal to n with monotone increasing digits.",
    "examples": [
        "Input: n = 10",
        "Output: 9",
        "Input: n = 1234",
        "Output: 1234",
        "Input: n = 332",
        "Output: 299",
        ""
    ],
    "constraints": [
        "0 <= n <= 109"
    ]
},
{
    "id": "739",
    "title": "Daily Temperatures",
    "question": "Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature.\n If there is no future day for which this is possible, keep answer[i] == 0 instead.",
    "examples": [
        "Input: temperatures = [73,74,75,71,69,72,76,73]",
        "Output: [1,1,4,2,1,1,0,0]",
        "Input: temperatures = [30,40,50,60]",
        "Output: [1,1,1,0]",
        "Input: temperatures = [30,60,90]",
        "Output: [1,1,0]",
        ""
    ],
    "constraints": [
        "1 <= temperatures. length <= 10530 <= temperatures[i] <= 100"
    ]
},
{
    "id": "740",
    "title": "Delete and Earn",
    "question": "You are given an integer array nums.\n You want to maximize the number of points you get by performing the following operation any number of times:Return the maximum number of points you can earn by applying the above operation some number of times.",
    "examples": [
        "Input: nums = [3,4,2]",
        "Output: 6",
        "Explanation: You can perform the following operations:",
        "- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].",
        "- Delete 2 to earn 2 points. nums = [].",
        "You earn a total of 6 points.",
        "Input: nums = [2,2,3,3,3,4]",
        "Output: 9",
        "Explanation: You can perform the following operations:",
        "- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].",
        "- Delete a 3 again to earn 3 points. nums = [3].",
        "- Delete a 3 once more to earn 3 points. nums = [].",
        "You earn a total of 9 points."
    ],
    "constraints": [
        "Pick any nums[i] and delete it to earn nums[i] points. Afterwards",
        " you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1. 1 <= nums. length <= 2 * 1041 <= nums[i] <= 104"
    ]
},
{
    "id": "743",
    "title": "Network Delay Time",
    "question": "You are given a network of n nodes, labeled from 1 to n.\n You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\nWe will send a signal from a given node k.\n Return the time it takes for all the n nodes to receive the signal.\n If it is impossible for all the n nodes to receive the signal, return -1.",
    "examples": [
        "Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2",
        "Output: 2",
        "Input: times = [[1,2,1]], n = 2, k = 1",
        "Output: 1",
        "Input: times = [[1,2,1]], n = 2, k = 2",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= k <= n <= 1001 <= times. length <= 6000times[i]. length == 31 <= ui",
        " vi <= nui != vi0 <= wi <= 100All the pairs (ui",
        " vi) are unique. (i. e.",
        " no multiple edges.)"
    ]
},
{
    "id": "303",
    "title": "Range Sum Query - Immutable",
    "question": "Given an integer array nums, handle multiple queries of the following type:Implement the NumArray class:",
    "examples": [
        "Input",
        "[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]",
        "[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]",
        "Output",
        "[null, 1, -1, -3]",
        "",
        "Explanation",
        "NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);",
        "numArray. sumRange(0, 2); // return (-2) + 0 + 3 = 1",
        "numArray. sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1",
        "numArray. sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3",
        ""
    ],
    "constraints": [
        "NumArray(int[] nums) Initializes the object with the integer array nums. int sumRange(int left",
        " int right) Returns the sum of the elements of nums between indices left and right inclusive (i. e. nums[left] + nums[left + 1] + ... + nums[right]). 1 <= nums. length <= 104-105 <= nums[i] <= 1050 <= left <= right < nums. lengthAt most 104 calls will be made to sumRange."
    ]
},
{
    "id": "752",
    "title": "Open the Lock",
    "question": "You have a lock in front of you with 4 circular wheels.\n Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'.\n The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'.\n Each move consists of turning one wheel one slot.\nThe lock initially starts at '0000', a string representing the state of the 4 wheels.\nYou are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\nGiven a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.",
    "examples": [
        "Input: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"",
        "Output: 6",
        "Explanation:",
        "A sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".",
        "Note that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,",
        "because the wheels of the lock become stuck after the display becomes the dead end \"0102\".",
        "Input: deadends = [\"8888\"], target = \"0009\"",
        "Output: 1",
        "Explanation:",
        "We can turn the last wheel in reverse to move from \"0000\" -> \"0009\".",
        "Input: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"",
        "Output: -1",
        "Explanation:",
        "We can't reach the target without getting stuck.",
        "Input: deadends = [\"0000\"], target = \"8888\"",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= deadends. length <= 500deadends[i]. length == 4target. length == 4target will not be in the list deadends. target and deadends[i] consist of digits only."
    ]
},
{
    "id": "754",
    "title": "Reach a Number",
    "question": "You are standing at position 0 on an infinite number line.\n There is a destination at position target.\nYou can make some number of moves numMoves so that:Given the integer target, return the minimum number of moves required (i.\ne.\n, the minimum numMoves) to reach the destination.",
    "examples": [
        "Input: target = 2",
        "Output: 3",
        "Explanation:",
        "On the 1st move, we step from 0 to 1 (1 step).",
        "On the 2nd move, we step from 1 to -1 (2 steps).",
        "On the 3rd move, we step from -1 to 2 (3 steps).",
        "Input: target = 3",
        "Output: 2",
        "Explanation:",
        "On the 1st move, we step from 0 to 1 (1 step).",
        "On the 2nd move, we step from 1 to 3 (2 steps).",
        ""
    ],
    "constraints": [
        "On each move",
        " you can either go left or right. During the ith move (starting from i == 1 to i == numMoves)",
        " you take i steps in the chosen direction.-109 <= target <= 109target != 0"
    ]
},
{
    "id": "756",
    "title": "Pyramid Transition Matrix",
    "question": "We are stacking blocks to form a pyramid.\n Each block has a color which is a one-letter string.\nWe are allowed to place any color block C on top of two adjacent blocks of colors A and B, if and only if ABC is an allowed triple.\nWe start with a bottom row of bottom, represented as a single string.\n We also start with a list of allowed triples allowed.\n Each allowed triple is represented as a string of length 3.\nReturn true if we can build the pyramid all the way to the top, otherwise false.",
    "examples": [
        "Input: bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]",
        "Output: true",
        "Explanation: The allowed stacks are shown on the right.",
        "Starting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"E\" on level 1.",
        "Input: bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]",
        "Output: false",
        "Explanation: The allowed stacks are shown on the right.",
        "Starting from the bottom (level 4), there are multiple ways to build level 3 but trying all the possibilites, you will get always stuck before building level 1.",
        ""
    ],
    "constraints": [
        "2 <= bottom. length <= 60 <= allowed. length <= 216allowed[i]. length == 3The letters in all input strings are from the set {'A'",
        " 'B'",
        " 'C'",
        " 'D'",
        " 'E'",
        " 'F'}. All the values of allowed are unique."
    ]
},
{
    "id": "763",
    "title": "Partition Labels",
    "question": "You are given a string s.\n We want to partition the string into as many parts as possible so that each letter appears in at most one part.\nReturn a list of integers representing the size of these parts.",
    "examples": [
        "Input: s = \"ababcbacadefegdehijhklij\"",
        "Output: [9,7,8]",
        "Explanation:",
        "The partition is \"ababcbaca\", \"defegde\", \"hijhklij\".",
        "This is a partition so that each letter appears in at most one part.",
        "A partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.",
        "Input: s = \"eccbbbbdec\"",
        "Output: [10]",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 500s consists of lowercase English letters."
    ]
},
{
    "id": "764",
    "title": "Largest Plus Sign",
    "question": "You are given an integer n.\n You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines.\n The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.\nReturn the order of the largest axis-aligned plus sign of 1's contained in grid.\n If there is none, return 0.\nAn axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's.\n Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.",
    "examples": [
        "Input: n = 5, mines = [[4,2]]",
        "Output: 2",
        "Explanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.",
        "Input: n = 1, mines = [[0,0]]",
        "Output: 0",
        "Explanation: There is no plus sign, so return 0.",
        ""
    ],
    "constraints": [
        "1 <= n <= 5001 <= mines. length <= 50000 <= xi",
        " yi < nAll the pairs (xi",
        " yi) are unique."
    ]
},
{
    "id": "767",
    "title": "Reorganize String",
    "question": "Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.\nReturn any possible rearrangement of s or return \"\" if not possible.",
    "examples": [
        "Input: s = \"aab\"",
        "Output: \"aba\"",
        "Input: s = \"aaab\"",
        "Output: \"\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 500s consists of lowercase English letters."
    ]
},
{
    "id": "769",
    "title": "Max Chunks To Make Sorted",
    "question": "You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].\nWe split arr into some number of chunks (i.\ne.\n, partitions), and individually sort each chunk.\n After concatenating them, the result should equal the sorted array.\nReturn the largest number of chunks we can make to sort the array.",
    "examples": [
        "Input: arr = [4,3,2,1,0]",
        "Output: 1",
        "Explanation:",
        "Splitting into two or more chunks will not return the required result.",
        "For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.",
        "Input: arr = [1,0,2,3,4]",
        "Output: 4",
        "Explanation:",
        "We can split into two chunks, such as [1, 0], [2, 3, 4].",
        "However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.",
        ""
    ],
    "constraints": [
        "n == arr. length1 <= n <= 100 <= arr[i] < nAll the elements of arr are unique."
    ]
},
{
    "id": "775",
    "title": "Global and Local Inversions",
    "question": "You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].\nThe number of global inversions is the number of the different pairs (i, j) where:The number of local inversions is the number of indices i where:Return true if the number of global inversions is equal to the number of local inversions.",
    "examples": [
        "Input: nums = [1,0,2]",
        "Output: true",
        "Explanation: There is 1 global inversion and 1 local inversion.",
        "Input: nums = [1,2,0]",
        "Output: false",
        "Explanation: There are 2 global inversions and 1 local inversion.",
        ""
    ],
    "constraints": [
        "0 <= i < j < nnums[i] > nums[j]0 <= i < n - 1nums[i] > nums[i + 1]n == nums. length1 <= n <= 1050 <= nums[i] < nAll the integers of nums are unique. nums is a permutation of all the numbers in the range [0",
        " n - 1]."
    ]
},
{
    "id": "777",
    "title": "Swap Adjacent in LR String",
    "question": "In a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\".\n Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.",
    "examples": [
        "Input: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"",
        "Output: true",
        "Explanation: We can transform start to end following these steps:",
        "RXXLRXRXL ->",
        "XRXLRXRXL ->",
        "XRLXRXRXL ->",
        "XRLXXRRXL ->",
        "XRLXXRRLX",
        "Input: start = \"X\", end = \"L\"",
        "Output: false",
        "Input: start = \"LLR\", end = \"RRL\"",
        "Output: false",
        "Input: start = \"XL\", end = \"LX\"",
        "Output: true",
        "Input: start = \"XLLR\", end = \"LXLX\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= start. length <= 104start. length == end. lengthBoth start and end will only consist of characters in 'L'",
        " 'R'",
        " and 'X'."
    ]
},
{
    "id": "779",
    "title": "K-th Symbol in Grammar",
    "question": "We build a table of n rows (1-indexed).\n We start by writing 0 in the 1st row.\n Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.\nGiven two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.",
    "examples": [
        "Input: n = 1, k = 1",
        "Output: 0",
        "Explanation: row 1: 0",
        "Input: n = 2, k = 1",
        "Output: 0",
        "Explanation:",
        "row 1: 0",
        "row 2: 01",
        "Input: n = 2, k = 2",
        "Output: 1",
        "Explanation:",
        "row 1: 0",
        "row 2: 01",
        "Input: n = 3, k = 1",
        "Output: 0",
        "Explanation:",
        "row 1: 0",
        "row 2: 01",
        "row 3: 0110",
        ""
    ],
    "constraints": [
        "For example",
        " for n = 3",
        " the 1st row is 0",
        " the 2nd row is 01",
        " and the 3rd row is 0110. 1 <= n <= 301 <= k <= 2n - 1"
    ]
},
{
    "id": "26",
    "title": "Remove Duplicates from Sorted Array",
    "question": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once.\n The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums.\n More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result.\n It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array.\n You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:The judge will test your solution with the following code:If all assertions pass, then your solution will be accepted.",
    "examples": [
        "int[] nums = [...]; // Input array",
        "int[] expectedNums = [...]; // The expected answer with correct length",
        "",
        "int k = removeDuplicates(nums); // Calls your implementation",
        "",
        "assert k == expectedNums. length;",
        "for (int i = 0; i < k; i++) {",
        "    assert nums[i] == expectedNums[i];",
        "}",
        "Input: nums = [1,1,2]",
        "Output: 2, nums = [1,2,_]",
        "Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.",
        "It does not matter what you leave beyond the returned k (hence they are underscores).",
        "Input: nums = [0,0,1,1,1,2,2,3,3,4]",
        "Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]",
        "Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.",
        "It does not matter what you leave beyond the returned k (hence they are underscores).",
        ""
    ],
    "constraints": [
        "0 <= nums. length <= 3 * 104-100 <= nums[i] <= 100nums is sorted in non-decreasing order."
    ]
},
{
    "id": "326",
    "title": "Power of Three",
    "question": "Given an integer n, return true if it is a power of three.\n Otherwise, return false.\nAn integer n is a power of three, if there exists an integer x such that n == 3x.",
    "examples": [
        "Input: n = 27",
        "Output: true",
        "Input: n = 0",
        "Output: false",
        "Input: n = 9",
        "Output: true",
        "Input: n = 45",
        "Output: false",
        ""
    ],
    "constraints": [
        "-231 <= n <= 231 - 1"
    ]
},
{
    "id": "781",
    "title": "Rabbits in Forest",
    "question": "There is a forest with an unknown number of rabbits.\n We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.\nGiven the array answers, return the minimum number of rabbits that could be in the forest.",
    "examples": [
        "Input: answers = [1,1,2]",
        "Output: 5",
        "Explanation:",
        "The two rabbits that answered \"1\" could both be the same color, say red.",
        "The rabbit that answered \"2\" can't be red or the answers would be inconsistent.",
        "Say the rabbit that answered \"2\" was blue.",
        "Then there should be 2 other blue rabbits in the forest that didn't answer into the array.",
        "The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.",
        "Input: answers = [10,10,10]",
        "Output: 11",
        ""
    ],
    "constraints": [
        "1 <= answers. length <= 10000 <= answers[i] < 1000"
    ]
},
{
    "id": "784",
    "title": "Letter Case Permutation",
    "question": "Given a string s, we can transform every letter individually to be lowercase or uppercase to create another string.\nReturn a list of all possible strings we could create.\n You can return the output in any order.",
    "examples": [
        "Input: s = \"a1b2\"",
        "Output: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]",
        "Input: s = \"3z4\"",
        "Output: [\"3z4\",\"3Z4\"]",
        "Input: s = \"12345\"",
        "Output: [\"12345\"]",
        "Input: s = \"0\"",
        "Output: [\"0\"]",
        ""
    ],
    "constraints": [
        "s will be a string with length between 1 and 12. s will consist only of letters or digits."
    ]
},
{
    "id": "785",
    "title": "Is Graph Bipartite?",
    "question": "There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1.\n You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to.\n More formally, for each v in graph[u], there is an undirected edge between node u and node v.\n The graph has the following properties:A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\nReturn true if and only if it is bipartite.",
    "examples": [
        "Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]",
        "Output: false",
        "Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other. Input: graph = [[1,3],[0,2],[1,3],[0,2]]",
        "Output: true",
        "Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}."
    ],
    "constraints": [
        "There are no self-edges (graph[u] does not contain u). There are no parallel edges (graph[u] does not contain duplicate values). If v is in graph[u]",
        " then u is in graph[v] (the graph is undirected). The graph may not be connected",
        " meaning there may be two nodes u and v such that there is no path between them. graph. length == n1 <= n <= 1000 <= graph[u]. length < n0 <= graph[u][i] <= n - 1graph[u] does not contain u. All the values of graph[u] are unique. If graph[u] contains v",
        " then graph[v] contains u."
    ]
},
{
    "id": "787",
    "title": "Cheapest Flights Within K Stops",
    "question": "There are n cities connected by some number of flights.\n You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops.\n If there is no such route, return -1.",
    "examples": [
        "Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1",
        "Output: 200",
        "Explanation: The graph is shown.",
        "The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.",
        "Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0",
        "Output: 500",
        "Explanation: The graph is shown.",
        "The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.",
        ""
    ],
    "constraints": [
        "1 <= n <= 1000 <= flights. length <= (n * (n - 1) / 2)flights[i]. length == 30 <= fromi",
        " toi < nfromi != toi1 <= pricei <= 104There will not be any multiple flights between two cities. 0 <= src",
        " dst",
        " k < nsrc != dst"
    ]
},
{
    "id": "788",
    "title": "Rotated Digits",
    "question": "An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x.\n Each digit must be rotated - we cannot choose to leave it alone.\nA number is valid if each digit remains a digit after rotation.\n For example:Given an integer n, return the number of good integers in the range [1, n].",
    "examples": [
        "Input: n = 10",
        "Output: 4",
        "Explanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.",
        "Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.",
        "Input: n = 1",
        "Output: 0",
        "Input: n = 2",
        "Output: 1",
        ""
    ],
    "constraints": [
        "0",
        " 1",
        " and 8 rotate to themselves",
        "2 and 5 rotate to each other (in this case they are rotated in a different direction",
        " in other words",
        " 2 or 5 gets mirrored)",
        "6 and 9 rotate to each other",
        " andthe rest of the numbers do not rotate to any other number and become invalid. 1 <= n <= 104"
    ]
},
{
    "id": "789",
    "title": "Escape The Ghosts",
    "question": "You are playing a simplified PAC-MAN game on an infinite 2-D grid.\n You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget], which you are trying to get to.\n There are several ghosts on the map with their starting positions given as an array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost.\n All inputs are integral coordinates.\nEach turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west or stay still.\n All actions happen simultaneously.\nYou escape if and only if you can reach the target before any ghost reaches you.\n If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.\nReturn true if it is possible to escape, otherwise return false.",
    "examples": [
        "Input: ghosts = [[1,0],[0,3]], target = [0,1]",
        "Output: true",
        "Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.",
        "Input: ghosts = [[1,0]], target = [2,0]",
        "Output: false",
        "Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.",
        "Input: ghosts = [[2,0]], target = [1,0]",
        "Output: false",
        "Explanation: The ghost can reach the target at the same time as you.",
        "Input: ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]",
        "Output: false",
        "Input: ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= ghosts. length <= 100ghosts[i]. length == 2-104 <= xi",
        " yi <= 104There can be multiple ghosts in the same location. target. length == 2-104 <= xtarget",
        " ytarget <= 104"
    ]
},
{
    "id": "790",
    "title": "Domino and Tromino Tiling",
    "question": "You have two types of tiles: a 2 x 1 domino shape and a tromino shape.\n You may rotate these shapes.\nGiven an integer n, return the number of ways to tile an 2 x n board.\n Since the answer may be very large, return it modulo 109 + 7.\nIn a tiling, every square must be covered by a tile.\n Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.",
    "examples": [
        "Input: n = 3",
        "Output: 5",
        "Explanation: The five different ways are show above.",
        "Input: n = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= n <= 1000"
    ]
},
{
    "id": "791",
    "title": "Custom Sort String",
    "question": "You are given two strings order and s.\n All the words of order are unique and were sorted in some custom order previously.\nPermute the characters of s so that they match the order that order was sorted.\n More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\nReturn any permutation of s that satisfies this property.",
    "examples": [
        "Input: order = \"cba\", s = \"abcd\"",
        "Output: \"cbad\"",
        "Explanation: ",
        "\"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\". ",
        "Since \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.",
        "Input: order = \"cbafg\", s = \"abcd\"",
        "Output: \"cbad\"",
        ""
    ],
    "constraints": [
        "1 <= order. length <= 261 <= s. length <= 200order and s consist of lowercase English letters. All the characters of order are unique."
    ]
},
{
    "id": "792",
    "title": "Number of Matching Subsequences",
    "question": "Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.",
    "examples": [
        "Input: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]",
        "Output: 3",
        "Explanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".",
        "Input: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "For example",
        " \"ace\" is a subsequence of \"abcde\". 1 <= s. length <= 5 * 1041 <= words. length <= 50001 <= words[i]. length <= 50s and words[i] consist of only lowercase English letters."
    ]
},
{
    "id": "794",
    "title": "Valid Tic-Tac-Toe State",
    "question": "Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\nThe board is a 3 x 3 array that consists of characters ' ', 'X', and 'O'.\n The ' ' character represents an empty square.\nHere are the rules of Tic-Tac-Toe:",
    "examples": [
        "Input: board = [\"O  \",\"   \",\"   \"]",
        "Output: false",
        "Explanation: The first player always plays \"X\".",
        "Input: board = [\"XOX\",\" X \",\"   \"]",
        "Output: false",
        "Explanation: Players take turns making moves.",
        "Input: board = [\"XXX\",\"   \",\"OOO\"]",
        "Output: false",
        "Input: board = [\"XOX\",\"O O\",\"XOX\"]",
        "Output: true",
        ""
    ],
    "constraints": [
        "Players take turns placing characters into empty squares ' '. The first player always places 'X' characters",
        " while the second player always places 'O' characters.'X' and 'O' characters are always placed into empty squares",
        " never filled ones. The game ends when there are three of the same (non-empty) character filling any row",
        " column",
        " or diagonal. The game also ends if all squares are non-empty. No more moves can be played if the game is over. board. length == 3board[i]. length == 3board[i][j] is either 'X'",
        " 'O'",
        " or ' '."
    ]
},
{
    "id": "338",
    "title": "Counting Bits",
    "question": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\n   Follow up:",
    "examples": [
        "Input: n = 2",
        "Output: [0,1,1]",
        "Explanation:",
        "0 --> 0",
        "1 --> 1",
        "2 --> 10",
        "Input: n = 5",
        "Output: [0,1,1,2,1,2]",
        "Explanation:",
        "0 --> 0",
        "1 --> 1",
        "2 --> 10",
        "3 --> 11",
        "4 --> 100",
        "5 --> 101",
        ""
    ],
    "constraints": [
        "0 <= n <= 105It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?Can you do it without using any built-in function (i. e.",
        " like __builtin_popcount in C++)?"
    ]
},
{
    "id": "795",
    "title": "Number of Subarrays with Bounded Maximum",
    "question": "Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].\nThe test cases are generated so that the answer will fit in a 32-bit integer.",
    "examples": [
        "Input: nums = [2,1,4,3], left = 2, right = 3",
        "Output: 3",
        "Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].",
        "Input: nums = [2,9,2,5,6], left = 2, right = 8",
        "Output: 7",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1050 <= nums[i] <= 1090 <= left <= right <= 109"
    ]
},
{
    "id": "797",
    "title": "All Paths From Source to Target",
    "question": "Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.\nThe graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.\ne.\n, there is a directed edge from node i to node graph[i][j]).",
    "examples": [
        "Input: graph = [[1,2],[3],[3],[]]",
        "Output: [[0,1,3],[0,2,3]]",
        "Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.",
        "Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]",
        "Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]",
        "Input: graph = [[1],[]]",
        "Output: [[0,1]]",
        "Input: graph = [[1,2,3],[2],[3],[]]",
        "Output: [[0,1,2,3],[0,2,3],[0,3]]",
        "Input: graph = [[1,3],[2],[3],[]]",
        "Output: [[0,1,2,3],[0,3]]",
        ""
    ],
    "constraints": [
        "n == graph. length2 <= n <= 150 <= graph[i][j] < ngraph[i][j] != i (i. e.",
        " there will be no self-loops). All the elements of graph[i] are unique. The input graph is guaranteed to be a DAG."
    ]
},
{
    "id": "799",
    "title": "Champagne Tower",
    "question": "We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.\n  Each glass holds one cup of champagne.\nThen, some champagne is poured into the first glass at the top.\n  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\n  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\n  (A glass at the bottom row has its excess champagne fall on the floor.\n)For example, after one cup of champagne is poured, the top most glass is full.\n  After two cups of champagne are poured, the two glasses on the second row are half full.\n  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\n  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\nNow after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.\n)",
    "examples": [
        "Input: poured = 1, query_row = 1, query_glass = 1",
        "Output: 0. 00000",
        "Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.",
        "Input: poured = 2, query_row = 1, query_glass = 1",
        "Output: 0. 50000",
        "Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.",
        "Input: poured = 100000009, query_row = 33, query_glass = 17",
        "Output: 1. 00000",
        ""
    ],
    "constraints": [
        "0 <= poured <= 1090 <= query_glass <= query_row < 100"
    ]
},
{
    "id": "802",
    "title": "Find Eventual Safe States",
    "question": "We start at some node in a directed graph, and every turn, we walk along a directed edge of the graph.\n If we reach a terminal node (that is, it has no outgoing directed edges), we stop.\nWe define a starting node to be safe if we must eventually walk to a terminal node.\n More specifically, there is a natural number k, so that we must have stopped at a terminal node in less than k steps for any choice of where to walk.\nReturn an array containing all the safe nodes of the graph.\n The answer should be sorted in ascending order.\nThe directed graph has n nodes with labels from 0 to n - 1, where n is the length of graph.\n The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph, going from node i to node j.",
    "examples": [
        "Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]",
        "Output: [2,4,5,6]",
        "Explanation: The given graph is shown above.",
        "Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]",
        "Output: [4]",
        ""
    ],
    "constraints": [
        "n == graph. length1 <= n <= 1040 <= graph[i]. length <= ngraph[i] is sorted in a strictly increasing order. The graph may contain self-loops. The number of edges in the graph will be in the range [1",
        " 4 * 104]."
    ]
},
{
    "id": "807",
    "title": "Max Increase to Keep City Skyline",
    "question": "There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism.\n You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.\nA city's skyline is the the outer contour formed by all the building when viewing the side of the city from a distance.\n The skyline from each cardinal direction north, east, south, and west may be different.\nWe are allowed to increase the height of any number of buildings by any amount (the amount can be different per building).\n The height of a 0-height building can also be increased.\n However, increasing the height of a building should not affect the city's skyline from any cardinal direction.\nReturn the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.",
    "examples": [
        "Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]",
        "Output: 35",
        "Explanation: The building heights are shown in the center of the above image.",
        "The skylines when viewed from each cardinal direction are drawn in red.",
        "The grid after increasing the height of buildings without affecting skylines is:",
        "gridNew = [ [8, 4, 8, 7],",
        "            [7, 4, 7, 7],",
        "            [9, 4, 8, 7],",
        "            [3, 3, 3, 3] ]",
        "Input: grid = [[0,0,0],[0,0,0],[0,0,0]]",
        "Output: 0",
        "Explanation: Increasing the height of any building will result in the skyline changing.",
        ""
    ],
    "constraints": [
        "n == grid. lengthn == grid[r]. length2 <= n <= 500 <= grid[r][c] <= 100"
    ]
},
{
    "id": "808",
    "title": "Soup Servings",
    "question": "There are two types of soup: type A and type B.\n Initially, we have n ml of each type of soup.\n There are four kinds of operations:When we serve some soup, we give it to someone, and we no longer have it.\n Each turn, we will choose from the four operations with an equal probability 0.\n25.\n If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible.\n We stop once we no longer have some quantity of both types of soup.\nNote that we do not have an operation where all 100 ml's of soup B are used first.\nReturn the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time.\n Answers within 10-5 of the actual answer will be accepted.",
    "examples": [
        "Input: n = 50",
        "Output: 0. 62500",
        "Explanation: If we choose the first two operations, A will become empty first.",
        "For the third operation, A and B will become empty at the same time.",
        "For the fourth operation, B will become empty first.",
        "So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0. 25 * (1 + 1 + 0. 5 + 0) = 0. 625.",
        "Input: n = 100",
        "Output: 0. 71875",
        ""
    ],
    "constraints": [
        "0 <= n <= 109"
    ]
},
{
    "id": "809",
    "title": "Expressive Words",
    "question": "Sometimes people repeat letters to represent extra feeling.\n For example:In these strings like \"heeellooo\", we have groups of adjacent letters that are all the same: \"h\", \"eee\", \"ll\", \"ooo\".\nYou are given a string s and an array of query strings words.\n A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.\nReturn the number of query strings that are stretchy.",
    "examples": [
        "Input: s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]",
        "Output: 1",
        "Explanation: ",
        "We can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".",
        "We can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.",
        "Input: s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "\"hello\" -> \"heeellooo\"\"hi\" -> \"hiiii\"For example",
        " starting with \"hello\"",
        " we could do an extension on the group \"o\" to get \"hellooo\"",
        " but we cannot get \"helloo\" since the group \"oo\" has a size less than three. Also",
        " we could do another extension like \"ll\" -> \"lllll\" to get \"helllllooo\". If s = \"helllllooo\"",
        " then the query word \"hello\" would be stretchy because of these two extension operations: query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = s. 1 <= s. length",
        " words. length <= 1001 <= words[i]. length <= 100s and words[i] consist of lowercase letters."
    ]
},
{
    "id": "811",
    "title": "Subdomain Visit Count",
    "question": "A website domain \"discuss.\nleetcode.\ncom\" consists of various subdomains.\n At the top level, we have \"com\", at the next level, we have \"leetcode.\ncom\" and at the lowest level, \"discuss.\nleetcode.\ncom\".\n When we visit a domain like \"discuss.\nleetcode.\ncom\", we will also visit the parent domains \"leetcode.\ncom\" and \"com\" implicitly.\nA count-paired domain is a domain that has one of the two formats \"rep d1.\nd2.\nd3\" or \"rep d1.\nd2\" where rep is the number of visits to the domain and d1.\nd2.\nd3 is the domain itself.\nGiven an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input.\n You may return the answer in any order.",
    "examples": [
        "Input: cpdomains = [\"9001 discuss. leetcode. com\"]",
        "Output: [\"9001 leetcode. com\",\"9001 discuss. leetcode. com\",\"9001 com\"]",
        "Explanation: We only have one website domain: \"discuss. leetcode. com\".",
        "As discussed above, the subdomain \"leetcode. com\" and \"com\" will also be visited. So they will all be visited 9001 times.",
        "Input: cpdomains = [\"900 google. mail. com\", \"50 yahoo. com\", \"1 intel. mail. com\", \"5 wiki. org\"]",
        "Output: [\"901 mail. com\",\"50 yahoo. com\",\"900 google. mail. com\",\"5 wiki. org\",\"5 org\",\"1 intel. mail. com\",\"951 com\"]",
        "Explanation: We will visit \"google. mail. com\" 900 times, \"yahoo. com\" 50 times, \"intel. mail. com\" once and \"wiki. org\" 5 times.",
        "For the subdomains, we will visit \"mail. com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.",
        ""
    ],
    "constraints": [
        "For example",
        " \"9001 discuss. leetcode. com\" is a count-paired domain that indicates that discuss. leetcode. com was visited 9001 times. 1 <= cpdomain. length <= 1001 <= cpdomain[i]. length <= 100cpdomain[i] follows either the \"repi d1i. d2i. d3i\" format or the \"repi d1i. d2i\" format. repi is an integer in the range [1",
        " 104]. d1i",
        " d2i",
        " and d3i consist of lowercase English letters."
    ]
},
{
    "id": "813",
    "title": "Largest Sum of Averages",
    "question": "You are given an integer array nums and an integer k.\n You can partition the array into at most k non-empty adjacent subarrays.\n The score of a partition is the sum of the averages of each subarray.\nNote that the partition must use every integer in nums, and that the score is not necessarily an integer.\nReturn the maximum score you can achieve of all the possible partitions.\n Answers within 10-6 of the actual answer will be accepted.",
    "examples": [
        "Input: nums = [9,1,2,3,9], k = 3",
        "Output: 20. 00000",
        "Explanation: ",
        "The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.",
        "We could have also partitioned nums into [9, 1], [2], [3, 9], for example.",
        "That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.",
        "Input: nums = [1,2,3,4,5,6,7], k = 4",
        "Output: 20. 50000",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1001 <= nums[i] <= 1041 <= k <= nums. length"
    ]
},
{
    "id": "814",
    "title": "Binary Tree Pruning",
    "question": "Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.\nA subtree of a node node is node plus every node that is a descendant of node.",
    "examples": [
        "Input: root = [1,null,0,0,1]",
        "Output: [1,null,0,null,1]",
        "Explanation: ",
        "Only the red nodes satisfy the property \"every subtree not containing a 1\".",
        "The diagram on the right represents the answer.",
        "Input: root = [1,0,1,0,0,0,1]",
        "Output: [1,null,1,null,1]",
        "Input: root = [1,1,0,1,1,0,1,0]",
        "Output: [1,1,0,1,1,null,1]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 200]. Node. val is either 0 or 1."
    ]
},
{
    "id": "342",
    "title": "Power of Four",
    "question": "Given an integer n, return true if it is a power of four.\n Otherwise, return false.\nAn integer n is a power of four, if there exists an integer x such that n == 4x.",
    "examples": [
        "Input: n = 16",
        "Output: true",
        "Input: n = 5",
        "Output: false",
        "Input: n = 1",
        "Output: true",
        ""
    ],
    "constraints": [
        "-231 <= n <= 231 - 1"
    ]
},
{
    "id": "816",
    "title": "Ambiguous Coordinates",
    "question": "We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.\n5)\".\n Then, we removed all commas, decimal points, and spaces and ended up with the string s.\nReturn a list of strings representing all possibilities for what our original coordinates could have been.\nOur original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.\n0\", \"0.\n00\", \"1.\n0\", \"001\", \"00.\n01\", or any other number that can be represented with fewer digits.\n Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like \".\n1\".\nThe final answer list can be returned in any order.\n All coordinates in the final answer have exactly one space between them (occurring after the comma.\n)",
    "examples": [
        "Input: s = \"(123)\"",
        "Output: [\"(1, 2. 3)\",\"(1, 23)\",\"(1. 2, 3)\",\"(12, 3)\"]",
        "Input: s = \"(0123)\"",
        "Output: [\"(0, 1. 23)\",\"(0, 12. 3)\",\"(0, 123)\",\"(0. 1, 2. 3)\",\"(0. 1, 23)\",\"(0. 12, 3)\"]",
        "Explanation: 0. 0, 00, 0001 or 00. 01 are not allowed.",
        "Input: s = \"(00011)\"",
        "Output: [\"(0, 0. 011)\",\"(0. 001, 1)\"]",
        "Input: s = \"(100)\"",
        "Output: [\"(10, 0)\"]",
        "Explanation: 1. 0 is not allowed.",
        ""
    ],
    "constraints": [
        "For example",
        " \"(1",
        " 3)\" becomes s = \"(13)\" and \"(2",
        " 0. 5)\" becomes s = \"(205)\". 4 <= s. length <= 12s[0] == '(' and s[s. length - 1] == ')'. The rest of s are digits."
    ]
},
{
    "id": "817",
    "title": "Linked List Components",
    "question": "You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.\nReturn the number of connected components in nums where two values are connected if they appear consecutively in the linked list.",
    "examples": [
        "Input: head = [0,1,2,3], nums = [0,1,3]",
        "Output: 2",
        "Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.",
        "Input: head = [0,1,2,3,4], nums = [0,3,1,4]",
        "Output: 2",
        "Explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.",
        ""
    ],
    "constraints": [
        "The number of nodes in the linked list is n. 1 <= n <= 1040 <= Node. val < nAll the values Node. val are unique. 1 <= nums. length <= n0 <= nums[i] <= nAll the values of nums are unique."
    ]
},
{
    "id": "820",
    "title": "Short Encoding of Words",
    "question": "A valid encoding of an array of words is any reference string s and array of indices indices such that:Given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.",
    "examples": [
        "Input: words = [\"time\", \"me\", \"bell\"]",
        "Output: 10",
        "Explanation: A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].",
        "words[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"",
        "words[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"",
        "words[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\"",
        "Input: words = [\"t\"]",
        "Output: 2",
        "Explanation: A valid encoding would be s = \"t#\" and indices = [0].",
        ""
    ],
    "constraints": [
        "words. length == indices. lengthThe reference string s ends with the '#' character. For each index indices[i]",
        " the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i]. 1 <= words. length <= 20001 <= words[i]. length <= 7words[i] consists of only lowercase letters."
    ]
},
{
    "id": "822",
    "title": "Card Flipping Game",
    "question": "You are given n cards, with a positive integer printed on the front and back of each card (possibly different).\n You can flip any number of cards (possibly zero).\nAfter choosing the front and the back of each card, you will pick each card, and if the integer printed on the back of this card is not printed on the front of any other card, then this integer is good.\nYou are given two integer array fronts and backs where fronts[i] and backs[i] are the integers printer on the front and the back of the ith card respectively.\nReturn the smallest good and integer after flipping the cards.\n If there are no good integers, return 0.\nNote that a flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.",
    "examples": [
        "Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]",
        "Output: 2",
        "Explanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].",
        "We choose the second card, which has the number 2 on the back, and it is not on the front of any card, so 2 is good.",
        "Input: fronts = [1], backs = [1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "n == fronts. lengthn == backs. length1 <= n <= 10001 <= fronts[i]",
        " backs[i] <= 2000"
    ]
},
{
    "id": "823",
    "title": "Binary Trees With Factors",
    "question": "Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.\nWe make a binary tree using these integers, and each number may be used for any number of times.\n Each non-leaf node's value should be equal to the product of the values of its children.\nReturn the number of binary trees we can make.\n The answer may be too large so return the answer modulo 109 + 7.",
    "examples": [
        "Input: arr = [2,4]",
        "Output: 3",
        "Explanation: We can make these trees: [2], [4], [4, 2, 2]Input: arr = [2,4,5,10]",
        "Output: 7",
        "Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]."
    ],
    "constraints": [
        "1 <= arr. length <= 10002 <= arr[i] <= 109All the values of arr are unique."
    ]
},
{
    "id": "825",
    "title": "Friends Of Appropriate Ages",
    "question": "There are n persons on a social media website.\n You are given an integer array ages where ages[i] is the age of the ith person.\nA Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:Otherwise, x will send a friend request to y.\nNote that if x sends a request to y, y will not necessarily send a request to x.\n Also, a person will not send a friend request to themself.\nReturn the total number of friend requests made.",
    "examples": [
        "Input: ages = [16,16]",
        "Output: 2",
        "Explanation: 2 people friend request each other.",
        "Input: ages = [16,17,18]",
        "Output: 2",
        "Explanation: Friend requests are made 17 -> 16, 18 -> 17.",
        "Input: ages = [20,30,100,110,120]",
        "Output: 3",
        "Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.",
        ""
    ],
    "constraints": [
        "age[y] <= 0. 5 * age[x] + 7age[y] > age[x]age[y] > 100 && age[x] < 100n == ages. length1 <= n <= 2 * 1041 <= ages[i] <= 120"
    ]
},
{
    "id": "826",
    "title": "Most Profit Assigning Work",
    "question": "You have n jobs and m workers.\n You are given three arrays: difficulty, profit, and worker where:Every worker can be assigned at most one job, but one job can be completed multiple times.\nReturn the maximum profit we can achieve after assigning the workers to the jobs.",
    "examples": [
        "Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]",
        "Output: 100",
        "Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.",
        "Input: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "difficulty[i] and profit[i] are the difficulty and the profit of the ith job",
        " andworker[j] is the ability of jth worker (i. e.",
        " the jth worker can only complete a job with difficulty at most worker[j]). For example",
        " if three workers attempt the same job that pays $1",
        " then the total profit will be $3. If a worker cannot complete any job",
        " their profit is $0. n == difficulty. lengthn == profit. lengthm == worker. length1 <= n",
        " m <= 1041 <= difficulty[i]",
        " profit[i]",
        " worker[i] <= 105"
    ]
},
{
    "id": "831",
    "title": "Masking Personal Information",
    "question": "You are given a personal information string s, representing either an email address or a phone number.\n Return the masked personal information using the below rules.\nEmail address:An email address is:To mask an email:Phone number:A phone number is formatted as follows:To mask a phone number:",
    "examples": [
        "Input: s = \"LeetCode@LeetCode. com\"",
        "Output: \"l*****e@leetcode. com\"",
        "Explanation: s is an email address.",
        "The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.",
        "Input: s = \"AB@qq. com\"",
        "Output: \"a*****b@qq. com\"",
        "Explanation: s is an email address.",
        "The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.",
        "Note that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle.",
        "Input: s = \"1(234)567-890\"",
        "Output: \"***-***-7890\"",
        "Explanation: s is a phone number.",
        "There are 10 digits, so the local number is 10 digits and the country code is 0 digits.",
        "Thus, the resulting masked number is \"***-***-7890\".",
        "Input: s = \"86-(10)12345678\"",
        "Output: \"+**-***-***-5678\"",
        "Explanation: s is a phone number.",
        "There are 12 digits, so the local number is 10 digits and the country code is 2 digits.",
        "Thus, the resulting masked number is \"+**-***-***-7890\".",
        ""
    ],
    "constraints": [
        "A name consisting of uppercase and lowercase English letters",
        " followed byThe '@' symbol",
        " followed byThe domain consisting of uppercase and lowercase English letters with a dot '.' somewhere in the middle (not the first or last character). The uppercase letters in the name and domain must be converted to lowercase letters. The middle letters of the name (i. e.",
        " all but the first and last letters) must be replaced by 5 asterisks \"*****\". The phone number contains 10-13 digits. The last 10 digits make up the local number. The remaining 0-3 digits",
        " in the beginning",
        " make up the country code. Separation characters from the set {'+'",
        " '-'",
        " '('",
        " ')'",
        " ' '} separate the above digits in some way. Remove all separation characters. The masked phone number should have the form:\n\t\n\"***-***-XXXX\" if the country code has 0 digits.\n\"+*-***-***-XXXX\" if the country code has 1 digit.\n\"+**-***-***-XXXX\" if the country code has 2 digits.\n\"+***-***-***-XXXX\" if the country code has 3 digits.\n\n\"***-***-XXXX\" if the country code has 0 digits.\"+*-***-***-XXXX\" if the country code has 1 digit.\"+**-***-***-XXXX\" if the country code has 2 digits.\"+***-***-***-XXXX\" if the country code has 3 digits.\"XXXX\" is the last 4 digits of the local number. s is either a valid email or a phone number. If s is an email:\n\t\n8 <= s. length <= 40\ns consists of uppercase and lowercase English letters and exactly one '@' symbol and '.' symbol.\n\n8 <= s. length <= 40s consists of uppercase and lowercase English letters and exactly one '@' symbol and '.' symbol. If s is a phone number:\n\t\n10 <= s. length <= 20\ns consists of digits",
        " spaces",
        " and the symbols '('",
        " ')'",
        " '-'",
        " and '+'.\n\n10 <= s. length <= 20s consists of digits",
        " spaces",
        " and the symbols '('",
        " ')'",
        " '-'",
        " and '+'."
    ]
},
{
    "id": "833",
    "title": "Find And Replace in String",
    "question": "You are given a 0-indexed string s that you must perform k replacement operations on.\n The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.\nTo complete the ith replacement operation:For example, if s = \"abcd\", indices[i] = 0, sources[i] = \"ab\", and targets[i] = \"eee\", then the result of this replacement will be \"eeecd\".\nAll replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other.\n The testcases will be generated such that the replacements will not overlap.\nReturn the resulting string after performing all replacement operations on s.\nA substring is a contiguous sequence of characters in a string.",
    "examples": [
        "Input: s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]",
        "Output: \"eeebffff\"",
        "Explanation:",
        "\"a\" occurs at index 0 in s, so we replace it with \"eee\".",
        "\"cd\" occurs at index 2 in s, so we replace it with \"ffff\".",
        "Input: s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]",
        "Output: \"eeecd\"",
        "Explanation:",
        "\"ab\" occurs at index 0 in s, so we replace it with \"eee\".",
        "\"ec\" does not occur at index 2 in s, so we do nothing.",
        ""
    ],
    "constraints": [
        "For example",
        " a testcase with s = \"abc\"",
        " indices = [0",
        " 1]",
        " and sources = [\"ab\"",
        "\"bc\"] will not be generated because the \"ab\" and \"bc\" replacements overlap. 1 <= s. length <= 1000k == indices. length == sources. length == targets. length1 <= k <= 1000 <= indexes[i] < s. length1 <= sources[i]. length",
        " targets[i]. length <= 50s consists of only lowercase English letters. sources[i] and targets[i] consist of only lowercase English letters."
    ]
},
{
    "id": "835",
    "title": "Image Overlap",
    "question": "You are given two images, img1 and img2, represented as binary, square matrices of size n x n.\n A binary matrix has only 0s and 1s as values.\nWe translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units.\n We then place it on top of the other image.\n We can then calculate the overlap by counting the number of positions that have a 1 in both images.\nNote also that a translation does not include any kind of rotation.\n Any 1 bits that are translated outside of the matrix borders are erased.\nReturn the largest possible overlap.",
    "examples": [
        "Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]",
        "Output: 3",
        "Explanation: We translate img1 to right by 1 unit and down by 1 unit.",
        "",
        "The number of positions that have a 1 in both images is 3 (shown in red).",
        "",
        "Input: img1 = [[1]], img2 = [[1]]",
        "Output: 1",
        "Input: img1 = [[0]], img2 = [[0]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "n == img1. length == img1[i]. lengthn == img2. length == img2[i]. length1 <= n <= 30img1[i][j] is either 0 or 1. img2[i][j] is either 0 or 1."
    ]
},
{
    "id": "344",
    "title": "Reverse String",
    "question": "Write a function that reverses a string.\n The input string is given as an array of characters s.\n   Follow up: Do not allocate extra space for another array.\n You must do this by modifying the input array in-place with O(1) extra memory.",
    "examples": [
        "Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]",
        "Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]",
        "Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]",
        "Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s[i] is a printable ascii character."
    ]
},
{
    "id": "837",
    "title": "New 21 Game",
    "question": "Alice plays the following game, loosely based on the card game \"21\".\nAlice starts with 0 points and draws numbers while she has less than k points.\n During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer.\n Each draw is independent and the outcomes have equal probabilities.\nAlice stops drawing numbers when she gets k or more points.\nReturn the probability that Alice has n or fewer points.\nAnswers within 10-5 of the actual answer are considered accepted.",
    "examples": [
        "Input: n = 10, k = 1, maxPts = 10",
        "Output: 1. 00000",
        "Explanation: Alice gets a single card, then stops.",
        "Input: n = 6, k = 1, maxPts = 10",
        "Output: 0. 60000",
        "Explanation: Alice gets a single card, then stops.",
        "In 6 out of 10 possibilities, she is at or below 6 points.",
        "Input: n = 21, k = 17, maxPts = 10",
        "Output: 0. 73278",
        ""
    ],
    "constraints": [
        "0 <= k <= n <= 1041 <= maxPts <= 104"
    ]
},
{
    "id": "838",
    "title": "Push Dominoes",
    "question": "There are n dominoes in a line, and we place each domino vertically upright.\n In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left.\n Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\nYou are given a string dominoes representing the initial state where:Return a string representing the final state.",
    "examples": [
        "Input: dominoes = \"RR. L\"",
        "Output: \"RR. L\"",
        "Explanation: The first domino expends no additional force on the second domino.",
        "Input: dominoes = \". L. R... LR.. L..\"",
        "Output: \"LL. RR. LLRRLL..\"",
        ""
    ],
    "constraints": [
        "dominoes[i] = 'L'",
        " if the ith domino has been pushed to the left",
        "dominoes[i] = 'R'",
        " if the ith domino has been pushed to the right",
        " anddominoes[i] = '.'",
        " if the ith domino has not been pushed. n == dominoes. length1 <= n <= 105dominoes[i] is either 'L'",
        " 'R'",
        " or '.'."
    ]
},
{
    "id": "840",
    "title": "Magic Squares In Grid",
    "question": "A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.\nGiven a row x col grid of integers, how many 3 x 3 \"magic square\" subgrids are there?  (Each subgrid is contiguous).",
    "examples": [
        "Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]",
        "Output: 1",
        "Explanation: ",
        "The following subgrid is a 3 x 3 magic square:",
        "",
        "while this one is not:",
        "",
        "In total, there is only one magic square inside the given grid.",
        "Input: grid = [[8]]",
        "Output: 0",
        "Input: grid = [[4,4],[3,3]]",
        "Output: 0",
        "Input: grid = [[4,7,8],[9,5,1],[2,3,6]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "row == grid. lengthcol == grid[i]. length1 <= row",
        " col <= 100 <= grid[i][j] <= 15"
    ]
},
{
    "id": "841",
    "title": "Keys and Rooms",
    "question": "There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0.\n Your goal is to visit all the rooms.\n However, you cannot enter a locked room without having its key.\nWhen you visit a room, you may find a set of distinct keys in it.\n Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\nGiven an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.",
    "examples": [
        "Input: rooms = [[1],[2],[3],[]]",
        "Output: true",
        "Explanation: ",
        "We visit room 0 and pick up key 1.",
        "We then visit room 1 and pick up key 2.",
        "We then visit room 2 and pick up key 3.",
        "We then visit room 3.",
        "Since we were able to visit every room, we return true.",
        "Input: rooms = [[1,3],[3,0,1],[2],[0]]",
        "Output: false",
        "Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.",
        ""
    ],
    "constraints": [
        "n == rooms. length2 <= n <= 10000 <= rooms[i]. length <= 10001 <= sum(rooms[i]. length) <= 30000 <= rooms[i][j] < nAll the values of rooms[i] are unique."
    ]
},
{
    "id": "842",
    "title": "Split Array into Fibonacci Sequence",
    "question": "You are given a string of digits num, such as \"123456579\".\n We can split it into a Fibonacci-like sequence [123, 456, 579].\nFormally, a Fibonacci-like sequence is a list f of non-negative integers such that:Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\nReturn any Fibonacci-like sequence split from num, or return [] if it cannot be done.",
    "examples": [
        "Input: num = \"123456579\"",
        "Output: [123,456,579]",
        "Input: num = \"11235813\"",
        "Output: [1,1,2,3,5,8,13]",
        "Input: num = \"112358130\"",
        "Output: []",
        "Explanation: The task is impossible.",
        "Input: num = \"0123\"",
        "Output: []",
        "Explanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.",
        "Input: num = \"1101111\"",
        "Output: [11,0,11,11]",
        "Explanation: The output [11, 0, 11, 11] would also be accepted.",
        ""
    ],
    "constraints": [
        "0 <= f[i] < 231",
        " (that is",
        " each integer fits in a 32-bit signed integer type)",
        "f. length >= 3",
        " andf[i] + f[i + 1] == f[i + 2] for all 0 <= i < f. length - 2. 1 <= num. length <= 200num contains only digits."
    ]
},
{
    "id": "845",
    "title": "Longest Mountain in Array",
    "question": "You may recall that an array arr is a mountain array if and only if:Given an integer array arr, return the length of the longest subarray, which is a mountain.\n Return 0 if there is no mountain subarray.\n   Follow up:",
    "examples": [
        "Input: arr = [2,1,4,7,3,2,5]",
        "Output: 5",
        "Explanation: The largest mountain is [1,4,7,3,2] which has length 5.",
        "Input: arr = [2,2,2]",
        "Output: 0",
        "Explanation: There is no mountain.",
        ""
    ],
    "constraints": [
        "arr. length >= 3There exists some index i (0-indexed) with 0 < i < arr. length - 1 such that:\n\t\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr. length - 1]\n\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]arr[i] > arr[i + 1] > ... > arr[arr. length - 1]1 <= arr. length <= 1040 <= arr[i] <= 104Can you solve it using only one pass?Can you solve it in O(1) space?"
    ]
},
{
    "id": "846",
    "title": "Hand of Straights",
    "question": "Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.\nGiven an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.\n   Note: This question is the same as 1296: https://leetcode.\ncom/problems/divide-array-in-sets-of-k-consecutive-numbers/",
    "examples": [
        "Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3",
        "Output: true",
        "Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]",
        "Input: hand = [1,2,3,4,5], groupSize = 4",
        "Output: false",
        "Explanation: Alice's hand can not be rearranged into groups of 4.",
        "",
        ""
    ],
    "constraints": [
        "1 <= hand. length <= 1040 <= hand[i] <= 1091 <= groupSize <= hand. length"
    ]
},
{
    "id": "848",
    "title": "Shifting Letters",
    "question": "You are given a string s of lowercase English letters and an integer array shifts of the same length.\nCall the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').\nNow for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.\nReturn the final string after all such shifts to s are applied.",
    "examples": [
        "Input: s = \"abc\", shifts = [3,5,9]",
        "Output: \"rpl\"",
        "Explanation: We start with \"abc\".",
        "After shifting the first 1 letters of s by 3, we have \"dbc\".",
        "After shifting the first 2 letters of s by 5, we have \"igc\".",
        "After shifting the first 3 letters of s by 9, we have \"rpl\", the answer.",
        "Input: s = \"aaa\", shifts = [1,2,3]",
        "Output: \"gfd\"",
        ""
    ],
    "constraints": [
        "For example",
        " shift('a') = 'b'",
        " shift('t') = 'u'",
        " and shift('z') = 'a'. 1 <= s. length <= 105s consists of lowercase English letters. shifts. length == s. length0 <= shifts[i] <= 109"
    ]
},
{
    "id": "849",
    "title": "Maximize Distance to Closest Person",
    "question": "You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).\nThere is at least one empty seat, and at least one person sitting.\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\n Return that maximum distance to the closest person.",
    "examples": [
        "Input: seats = [1,0,0,0,1,0,1]",
        "Output: 2",
        "Explanation: ",
        "If Alex sits in the second open seat (i. e. seats[2]), then the closest person has distance 2.",
        "If Alex sits in any other open seat, the closest person has distance 1.",
        "Thus, the maximum distance to the closest person is 2.",
        "Input: seats = [1,0,0,0]",
        "Output: 3",
        "Explanation: ",
        "If Alex sits in the last seat (i. e. seats[3]), the closest person is 3 seats away.",
        "This is the maximum distance possible, so the answer is 3.",
        "Input: seats = [0,1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "2 <= seats. length <= 2 * 104seats[i] is 0 or 1. At least one seat is empty. At least one seat is occupied."
    ]
},
{
    "id": "851",
    "title": "Loud and Rich",
    "question": "There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\nYou are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person.\n All the given data in richer are logically correct (i.\ne.\n, the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\nReturn an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.",
    "examples": [
        "Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]",
        "Output: [5,5,2,5,4,5,6,7]",
        "Explanation: ",
        "answer[0] = 5.",
        "Person 5 has more money than 3, which has more money than 1, which has more money than 0.",
        "The only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.",
        "answer[7] = 7.",
        "Among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.",
        "The other answers can be filled out with similar reasoning.",
        "Input: richer = [], quiet = [0]",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "n == quiet. length1 <= n <= 5000 <= quiet[i] < nAll the values of quiet are unique. 0 <= richer. length <= n * (n - 1) / 20 <= ai",
        " bi < nai != biAll the pairs of richer are unique. The observations in richer are all logically consistent."
    ]
},
{
    "id": "345",
    "title": "Reverse Vowels of a String",
    "question": "Given a string s, reverse only all the vowels in the string and return it.\nThe vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both cases.",
    "examples": [
        "Input: s = \"hello\"",
        "Output: \"holle\"",
        "Input: s = \"leetcode\"",
        "Output: \"leotcede\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 3 * 105s consist of printable ASCII characters."
    ]
},
{
    "id": "853",
    "title": "Car Fleet",
    "question": "There are n cars going to the same destination along a one-lane road.\n The destination is target miles away.\nYou are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour).\nA car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.\nThe distance between these two cars is ignored (i.\ne.\n, they are assumed to have the same position).\nA car fleet is some non-empty set of cars driving at the same position and same speed.\n Note that a single car is also a car fleet.\nIf a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.\nReturn the number of car fleets that will arrive at the destination.",
    "examples": [
        "Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]",
        "Output: 3",
        "Explanation: ",
        "The cars starting at 10 and 8 become a fleet, meeting each other at 12.",
        "The car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.",
        "The cars starting at 5 and 3 become a fleet, meeting each other at 6.",
        "Note that no other cars meet these fleets before the destination, so the answer is 3.",
        "Input: target = 10, position = [3], speed = [3]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "n == position. length == speed. length1 <= n <= 1050 < target <= 1060 <= position[i] < targetAll the values of position are unique. 0 < speed[i] <= 106"
    ]
},
{
    "id": "855",
    "title": "Exam Room",
    "question": "There is an exam room with n seats in a single row labeled from 0 to n - 1.\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person.\n If there are multiple such seats, they sit in the seat with the lowest number.\n If no one is in the room, then the student sits at seat number 0.\nDesign a class that simulates the mentioned exam room.\nImplement the ExamRoom class:",
    "examples": [
        "Input",
        "[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]",
        "[[10], [], [], [], [], [4], []]",
        "Output",
        "[null, 0, 9, 4, 2, null, 5]",
        "",
        "Explanation",
        "ExamRoom examRoom = new ExamRoom(10);",
        "examRoom. seat(); // return 0, no one is in the room, then the student sits at seat number 0.",
        "examRoom. seat(); // return 9, the student sits at the last seat number 9.",
        "examRoom. seat(); // return 4, the student sits at the last seat number 4.",
        "examRoom. seat(); // return 2, the student sits at the last seat number 2.",
        "examRoom. leave(4);",
        "examRoom. seat(); // return 5, the student sits at the last seat number 5.",
        "",
        ""
    ],
    "constraints": [
        "ExamRoom(int n) Initializes the object of the exam room with the number of the seats n. int seat() Returns the label of the seat at which the next student will set. void leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p. 1 <= n <= 109It is guaranteed that there is a student sitting at seat p. At most 104 calls will be made to seat and leave."
    ]
},
{
    "id": "856",
    "title": "Score of Parentheses",
    "question": "Given a balanced parentheses string s, return the score of the string.\nThe score of a balanced parentheses string is based on the following rule:",
    "examples": [
        "Input: s = \"()\"",
        "Output: 1",
        "Input: s = \"(())\"",
        "Output: 2",
        "Input: s = \"()()\"",
        "Output: 2",
        "Input: s = \"(()(()))\"",
        "Output: 6",
        ""
    ],
    "constraints": [
        "\"()\" has score 1. AB has score A + B",
        " where A and B are balanced parentheses strings.(A) has score 2 * A",
        " where A is a balanced parentheses string. 2 <= s. length <= 50s consists of only '(' and ')'. s is a balanced parentheses string."
    ]
},
{
    "id": "858",
    "title": "Mirror Reflection",
    "question": "There is a special square room with mirrors on each of the four walls.\n Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\nThe square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\nGiven the two integers p and q, return the number of the receptor that the ray meets first.\nThe test cases are guaranteed so that the ray will meet a receptor eventually.",
    "examples": [
        "Input: p = 2, q = 1",
        "Output: 2",
        "Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.",
        "Input: p = 3, q = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= q <= p <= 1000"
    ]
},
{
    "id": "861",
    "title": "Score After Flipping Matrix",
    "question": "You are given an m x n binary matrix grid.\nA move consists of choosing any row or column and toggling each value in that row or column (i.\ne.\n, changing all 0's to 1's, and all 1's to 0's).\nEvery row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\nReturn the highest possible score after making any number of moves (including zero moves).",
    "examples": [
        "Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]",
        "Output: 39",
        "Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39",
        "Input: grid = [[0]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 20grid[i][j] is either 0 or 1."
    ]
},
{
    "id": "863",
    "title": "All Nodes Distance K in Binary Tree",
    "question": "Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.\nYou can return the answer in any order.",
    "examples": [
        "Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2",
        "Output: [7,4,1]",
        "Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.",
        "Input: root = [1], target = 1, k = 3",
        "Output: []",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 500]. 0 <= Node. val <= 500All the values Node. val are unique. target is the value of one of the nodes in the tree. 0 <= k <= 1000"
    ]
},
{
    "id": "865",
    "title": "Smallest Subtree with all the Deepest Nodes",
    "question": "Given the root of a binary tree, the depth of each node is the shortest distance to the root.\nReturn the smallest subtree such that it contains all the deepest nodes in the original tree.\nA node is called the deepest if it has the largest depth possible among any node in the entire tree.\nThe subtree of a node is tree consisting of that node, plus the set of all descendants of that node.\nNote: This question is the same as 1123: https://leetcode.\ncom/problems/lowest-common-ancestor-of-deepest-leaves/",
    "examples": [
        "Input: root = [3,5,1,6,2,0,8,null,null,7,4]",
        "Output: [2,7,4]",
        "Explanation: We return the node with value 2, colored in yellow in the diagram.",
        "The nodes coloured in blue are the deepest nodes of the tree.",
        "Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.",
        "Input: root = [1]",
        "Output: [1]",
        "Explanation: The root is the deepest node in the tree.",
        "Input: root = [0,1,3,null,2]",
        "Output: [2]",
        "Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree will be in the range [1",
        " 500]. 0 <= Node. val <= 500The values of the nodes in the tree are unique."
    ]
},
{
    "id": "866",
    "title": "Prime Palindrome",
    "question": "Given an integer n, return the smallest prime palindrome greater than or equal to n.\nAn integer is prime if it has exactly two divisors: 1 and itself.\n Note that 1 is not a prime number.\nAn integer is a palindrome if it reads the same from left to right as it does from right to left.\nThe test cases are generated so that the answer always exists and is in the range [2, 2 * 108].",
    "examples": [
        "Input: n = 6",
        "Output: 7",
        "Input: n = 8",
        "Output: 11",
        "Input: n = 13",
        "Output: 101",
        ""
    ],
    "constraints": [
        "For example",
        " 2",
        " 3",
        " 5",
        " 7",
        " 11",
        " and 13 are all primes. For example",
        " 101 and 12321 are palindromes. 1 <= n <= 108"
    ]
},
{
    "id": "869",
    "title": "Reordered Power of 2",
    "question": "You are given an integer n.\n We reorder the digits in any order (including the original order) such that the leading digit is not zero.\nReturn true if and only if we can do this so that the resulting number is a power of two.",
    "examples": [
        "Input: n = 1",
        "Output: true",
        "Input: n = 10",
        "Output: false",
        "Input: n = 16",
        "Output: true",
        "Input: n = 24",
        "Output: false",
        "Input: n = 46",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= n <= 109"
    ]
},
{
    "id": "870",
    "title": "Advantage Shuffle",
    "question": "You are given two integer arrays nums1 and nums2 both of the same length.\n The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].\nReturn any permutation of nums1 that maximizes its advantage with respect to nums2.",
    "examples": [
        "Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]",
        "Output: [2,11,7,15]",
        "Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]",
        "Output: [24,32,8,12]",
        ""
    ],
    "constraints": [
        "1 <= nums1. length <= 105nums2. length == nums1. length0 <= nums1[i]",
        " nums2[i] <= 109"
    ]
},
{
    "id": "349",
    "title": "Intersection of Two Arrays",
    "question": "Given two integer arrays nums1 and nums2, return an array of their intersection.\n Each element in the result must be unique and you may return the result in any order.",
    "examples": [
        "Input: nums1 = [1,2,2,1], nums2 = [2,2]",
        "Output: [2]",
        "Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        "Output: [9,4]",
        "Explanation: [4,9] is also accepted.",
        ""
    ],
    "constraints": [
        "1 <= nums1. length",
        " nums2. length <= 10000 <= nums1[i]",
        " nums2[i] <= 1000"
    ]
},
{
    "id": "873",
    "title": "Length of Longest Fibonacci Subsequence",
    "question": "A sequence x1, x2, .\n.\n.\n, xn is Fibonacci-like if:Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr.\n If one does not exist, return 0.\nA subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements.\n For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].",
    "examples": [
        "Input: arr = [1,2,3,4,5,6,7,8]",
        "Output: 5",
        "Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8]. Input: arr = [1,3,7,11,12,14,18]",
        "Output: 3",
        "Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]."
    ],
    "constraints": [
        "n >= 3xi + xi+1 == xi+2 for all i + 2 <= n3 <= arr. length <= 10001 <= arr[i] < arr[i + 1] <= 109"
    ]
},
{
    "id": "875",
    "title": "Koko Eating Bananas",
    "question": "Koko loves to eat bananas.\n There are n piles of bananas, the ith pile has piles[i] bananas.\n The guards have gone and will come back in h hours.\nKoko can decide her bananas-per-hour eating speed of k.\n Each hour, she chooses some pile of bananas and eats k bananas from that pile.\n If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\nReturn the minimum integer k such that she can eat all the bananas within h hours.",
    "examples": [
        "Input: piles = [3,6,7,11], h = 8",
        "Output: 4",
        "Input: piles = [30,11,23,4,20], h = 5",
        "Output: 30",
        "Input: piles = [30,11,23,4,20], h = 6",
        "Output: 23",
        ""
    ],
    "constraints": [
        "1 <= piles. length <= 104piles. length <= h <= 1091 <= piles[i] <= 109"
    ]
},
{
    "id": "877",
    "title": "Stone Game",
    "question": "Alice and Bob play a game with piles of stones.\n There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].\nThe objective of the game is to end with the most stones.\n The total number of stones across all the piles is odd, so there are no ties.\nAlice and Bob take turns, with Alice starting first.\n Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row.\n This continues until there are no more piles left, at which point the person with the most stones wins.\nAssuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.",
    "examples": [
        "Input: piles = [5,3,4,5]",
        "Output: true",
        "Explanation: ",
        "Alice starts first, and can only take the first 5 or the last 5.",
        "Say she takes the first 5, so that the row becomes [3, 4, 5].",
        "If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.",
        "If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.",
        "This demonstrated that taking the first 5 was a winning move for Alice, so we return true.",
        "Input: piles = [3,7,2,3]",
        "Output: true",
        ""
    ],
    "constraints": [
        "2 <= piles. length <= 500piles. length is even. 1 <= piles[i] <= 500sum(piles[i]) is odd."
    ]
},
{
    "id": "880",
    "title": "Decoded String at Index",
    "question": "You are given an encoded string s.\n To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:Given an integer k, return the kth letter (1-indexed) in the decoded string.",
    "examples": [
        "Input: s = \"leet2code3\", k = 10",
        "Output: \"o\"",
        "Explanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".",
        "The 10th letter in the string is \"o\".",
        "Input: s = \"ha22\", k = 5",
        "Output: \"h\"",
        "Explanation: The decoded string is \"hahahaha\".",
        "The 5th letter is \"h\".",
        "Input: s = \"a2345678999999999999999\", k = 1",
        "Output: \"a\"",
        "Explanation: The decoded string is \"a\" repeated 8301530446056247680 times.",
        "The 1st letter is \"a\".",
        ""
    ],
    "constraints": [
        "If the character read is a letter",
        " that letter is written onto the tape. If the character read is a digit d",
        " the entire current tape is repeatedly written d - 1 more times in total. 2 <= s. length <= 100s consists of lowercase English letters and digits 2 through 9. s starts with a letter. 1 <= k <= 109It is guaranteed that k is less than or equal to the length of the decoded string. The decoded string is guaranteed to have less than 263 letters."
    ]
},
{
    "id": "881",
    "title": "Boats to Save People",
    "question": "You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit.\n Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.\nReturn the minimum number of boats to carry every given person.",
    "examples": [
        "Input: people = [1,2], limit = 3",
        "Output: 1",
        "Explanation: 1 boat (1, 2)",
        "Input: people = [3,2,2,1], limit = 3",
        "Output: 3",
        "Explanation: 3 boats (1, 2), (2) and (3)",
        "Input: people = [3,5,3,4], limit = 5",
        "Output: 4",
        "Explanation: 4 boats (3), (3), (4), (5)",
        ""
    ],
    "constraints": [
        "1 <= people. length <= 5 * 1041 <= people[i] <= limit <= 3 * 104"
    ]
},
{
    "id": "885",
    "title": "Spiral Matrix III",
    "question": "You start at the cell (rStart, cStart) of an rows x cols grid facing east.\n The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\nYou will walk in a clockwise spiral shape to visit every position in this grid.\n Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.\n).\n Eventually, we reach all rows * cols spaces of the grid.\nReturn an array of coordinates representing the positions of the grid in the order you visited them.",
    "examples": [
        "Input: rows = 1, cols = 4, rStart = 0, cStart = 0",
        "Output: [[0,0],[0,1],[0,2],[0,3]]",
        "Input: rows = 5, cols = 6, rStart = 1, cStart = 4",
        "Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]",
        ""
    ],
    "constraints": [
        "1 <= rows",
        " cols <= 1000 <= rStart < rows0 <= cStart < cols"
    ]
},
{
    "id": "886",
    "title": "Possible Bipartition",
    "question": "We want to split a group of n people (labeled from 1 to n) into two groups of any size.\n Each person may dislike some other people, and they should not go into the same group.\nGiven the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.",
    "examples": [
        "Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]",
        "Output: true",
        "Explanation: group1 [1,4] and group2 [2,3].",
        "Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]",
        "Output: false",
        "Input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= n <= 20000 <= dislikes. length <= 104dislikes[i]. length == 21 <= dislikes[i][j] <= nai < biAll the pairs of dislikes are unique."
    ]
},
{
    "id": "889",
    "title": "Construct Binary Tree from Preorder and Postorder Traversal",
    "question": "Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.\nIf there exist multiple answers, you can return any of them.",
    "examples": [
        "Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]",
        "Output: [1,2,3,4,5,6,7]",
        "Input: preorder = [1], postorder = [1]",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "1 <= preorder. length <= 301 <= preorder[i] <= preorder. lengthAll the values of preorder are unique. postorder. length == preorder. length1 <= postorder[i] <= postorder. lengthAll the values of postorder are unique. It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree."
    ]
},
{
    "id": "890",
    "title": "Find and Replace Pattern",
    "question": "Given a list of strings words and a string pattern, return a list of words[i] that match pattern.\n You may return the answer in any order.\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.",
    "examples": [
        "Input: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"",
        "Output: [\"mee\",\"aqq\"]",
        "Explanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. ",
        "\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.",
        "Input: words = [\"a\",\"b\",\"c\"], pattern = \"a\"",
        "Output: [\"a\",\"b\",\"c\"]",
        ""
    ],
    "constraints": [
        "1 <= pattern. length <= 201 <= words. length <= 50words[i]. length == pattern. lengthpattern and words[i] are lowercase English letters."
    ]
},
{
    "id": "893",
    "title": "Groups of Special-Equivalent Strings",
    "question": "You are given an array of strings of the same length words.\nIn one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].\nTwo strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].\nA group of special-equivalent strings from words is a non-empty subset of words such that:Return the number of groups of special-equivalent strings from words.",
    "examples": [
        "Input: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]",
        "Output: 3",
        "Explanation: ",
        "One group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.",
        "The other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].",
        "Note that in particular, \"zzxy\" is not special equivalent to \"zzyx\".",
        "Input: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "For example",
        " words[i] = \"zzxy\" and words[j] = \"xyzz\" are special-equivalent because we may make the moves \"zzxy\" -> \"xzzy\" -> \"xyzz\". Every pair of strings in the group are special equivalent",
        " andThe group is the largest size possible (i. e.",
        " there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group). 1 <= words. length <= 10001 <= words[i]. length <= 20words[i] consist of lowercase English letters. All the strings are of the same length."
    ]
},
{
    "id": "350",
    "title": "Intersection of Two Arrays II",
    "question": "Given two integer arrays nums1 and nums2, return an array of their intersection.\n Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n   Follow up:",
    "examples": [
        "Input: nums1 = [1,2,2,1], nums2 = [2,2]",
        "Output: [2,2]",
        "Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        "Output: [4,9]",
        "Explanation: [9,4] is also accepted.",
        ""
    ],
    "constraints": [
        "1 <= nums1. length",
        " nums2. length <= 10000 <= nums1[i]",
        " nums2[i] <= 1000What if the given array is already sorted? How would you optimize your algorithm?What if nums1's size is small compared to nums2's size? Which algorithm is better?What if elements of nums2 are stored on disk",
        " and the memory is limited such that you cannot load all elements into the memory at once?"
    ]
},
{
    "id": "894",
    "title": "All Possible Full Binary Trees",
    "question": "Given an integer n, return a list of all possible full binary trees with n nodes.\n Each node of each tree in the answer must have Node.\nval == 0.\nEach element of the answer is the root node of one possible tree.\n You may return the final list of trees in any order.\nA full binary tree is a binary tree where each node has exactly 0 or 2 children.",
    "examples": [
        "Input: n = 7",
        "Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]",
        "Input: n = 3",
        "Output: [[0,0,0]]",
        ""
    ],
    "constraints": [
        "1 <= n <= 20"
    ]
},
{
    "id": "898",
    "title": "Bitwise ORs of Subarrays",
    "question": "We have an array arr of non-negative integers.\nFor every (contiguous) subarray sub = [arr[i], arr[i + 1], .\n.\n.\n, arr[j]] (with i <= j), we take the bitwise OR of all the elements in sub, obtaining a result arr[i] | arr[i + 1] | .\n.\n.\n | arr[j].\nReturn the number of possible results.\n Results that occur more than once are only counted once in the final answer",
    "examples": [
        "Input: arr = [0]",
        "Output: 1",
        "Explanation: There is only one possible result: 0.",
        "Input: arr = [1,1,2]",
        "Output: 3",
        "Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].",
        "These yield the results 1, 1, 2, 1, 3, 3.",
        "There are 3 unique values, so the answer is 3.",
        "Input: arr = [1,2,4]",
        "Output: 6",
        "Explanation: The possible results are 1, 2, 3, 4, 6, and 7.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5 * 1040 <= nums[i] <= 109"
    ]
},
{
    "id": "900",
    "title": "RLE Iterator",
    "question": "We can use run-length encoding (i.\ne.\n, RLE) to encode a sequence of integers.\n In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.\nGiven a run-length encoded array, design an iterator that iterates through it.\nImplement the RLEIterator class:",
    "examples": [
        "Input",
        "[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]",
        "[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]",
        "Output",
        "[null, 8, 8, 5, -1]",
        "",
        "Explanation",
        "RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].",
        "rLEIterator. next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].",
        "rLEIterator. next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].",
        "rLEIterator. next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].",
        "rLEIterator. next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,",
        "but the second term did not exist. Since the last term exhausted does not exist, we return -1.",
        ""
    ],
    "constraints": [
        "For example",
        " the sequence arr = [8",
        "8",
        "8",
        "5",
        "5] can be encoded to be encoding = [3",
        "8",
        "2",
        "5]. encoding = [3",
        "8",
        "0",
        "9",
        "2",
        "5] and encoding = [2",
        "8",
        "1",
        "8",
        "2",
        "5] are also valid RLE of arr. RLEIterator(int[] encoded) Initializes the object with the encoded array encoded. int next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust",
        " return -1 instead. 2 <= encoding. length <= 1000encoding. length is even. 0 <= encoding[i] <= 1091 <= n <= 109At most 1000 calls will be made to next."
    ]
},
{
    "id": "901",
    "title": "Online Stock Span",
    "question": "Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.\nThe span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backward) for which the stock price was less than or equal to today's price.\nImplement the StockSpanner class:",
    "examples": [
        "Input",
        "[\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]",
        "[[], [100], [80], [60], [70], [60], [75], [85]]",
        "Output",
        "[null, 1, 1, 1, 2, 1, 4, 6]",
        "",
        "Explanation",
        "StockSpanner stockSpanner = new StockSpanner();",
        "stockSpanner. next(100); // return 1",
        "stockSpanner. next(80);  // return 1",
        "stockSpanner. next(60);  // return 1",
        "stockSpanner. next(70);  // return 2",
        "stockSpanner. next(60);  // return 1",
        "stockSpanner. next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.",
        "stockSpanner. next(85);  // return 6",
        ""
    ],
    "constraints": [
        "For example",
        " if the price of a stock over the next 7 days were [100",
        "80",
        "60",
        "70",
        "60",
        "75",
        "85]",
        " then the stock spans would be [1",
        "1",
        "1",
        "2",
        "1",
        "4",
        "6]. StockSpanner() Initializes the object of the class. int next(int price) Returns the span of the stock's price given that today's price is price. 1 <= price <= 105At most 104 calls will be made to next."
    ]
},
{
    "id": "904",
    "title": "Fruit Into Baskets",
    "question": "You are visiting a farm that has a single row of fruit trees arranged from left to right.\n The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.\nYou want to collect as much fruit as possible.\n However, the owner has some strict rules that you must follow:Given the integer array fruits, return the maximum number of fruits you can pick.",
    "examples": [
        "Input: fruits = [1,2,1]",
        "Output: 3",
        "Explanation: We can pick from all 3 trees.",
        "Input: fruits = [0,1,2,2]",
        "Output: 3",
        "Explanation: We can pick from trees [1,2,2].",
        "If we had started at the first tree, we would only pick from trees [0,1].",
        "Input: fruits = [1,2,3,2,2]",
        "Output: 4",
        "Explanation: We can pick from trees [2,3,2,2].",
        "If we had started at the first tree, we would only pick from trees [1,2].",
        "Input: fruits = [3,3,3,1,2,1,1,2,3,3,4]",
        "Output: 5",
        "Explanation: We can pick from trees [1,2,1,1,2].",
        ""
    ],
    "constraints": [
        "You only have two baskets",
        " and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold. Starting from any tree of your choice",
        " you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets. Once you reach a tree with fruit that cannot fit in your baskets",
        " you must stop. 1 <= fruits. length <= 1050 <= fruits[i] < fruits. length"
    ]
},
{
    "id": "907",
    "title": "Sum of Subarray Minimums",
    "question": "Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr.\n Since the answer may be large, return the answer modulo 109 + 7.",
    "examples": [
        "Input: arr = [3,1,2,4]",
        "Output: 17",
        "Explanation: ",
        "Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. ",
        "Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.",
        "Sum is 17.",
        "Input: arr = [11,81,94,43,3]",
        "Output: 444",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 3 * 1041 <= arr[i] <= 3 * 104"
    ]
},
{
    "id": "909",
    "title": "Snakes and Ladders",
    "question": "You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.\ne.\n board[n - 1][0]) and alternating direction each row.\nYou start on square 1 of the board.\n In each move, starting from square curr, do the following:A board square on row r and column c has a snake or ladder if board[r][c] != -1.\n The destination of that snake or ladder is board[r][c].\n Squares 1 and n2 do not have a snake or ladder.\nNote that you only take a snake or ladder at most once per move.\n If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.\nReturn the least number of moves required to reach the square n2.\n If it is not possible to reach the square, return -1.",
    "examples": [
        "Input: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]",
        "Output: 4",
        "Explanation: ",
        "In the beginning, you start at square 1 (at row 5, column 0).",
        "You decide to move to square 2 and must take the ladder to square 15.",
        "You then decide to move to square 17 and must take the snake to square 13.",
        "You then decide to move to square 14 and must take the ladder to square 35.",
        "You then decide to move to square 36, ending the game.",
        "This is the lowest possible number of moves to reach the last square, so return 4.",
        "Input: board = [[-1,-1],[-1,3]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "Choose a destination square next with a label in the range [curr + 1",
        " min(curr + 6",
        " n2)].\n\n\t\nThis choice simulates the result of a standard 6-sided die roll: i. e.",
        " there are always at most 6 destinations",
        " regardless of the size of the board.\n\nThis choice simulates the result of a standard 6-sided die roll: i. e.",
        " there are always at most 6 destinations",
        " regardless of the size of the board. If next has a snake or ladder",
        " you must move to the destination of that snake or ladder. Otherwise",
        " you move to next. The game ends when you reach the square n2. For example",
        " suppose the board is [[-1",
        "4]",
        "[-1",
        "3]]",
        " and on the first move",
        " your destination square is 2. You follow the ladder to square 3",
        " but do not follow the subsequent ladder to 4. n == board. length == board[i]. length2 <= n <= 20grid[i][j] is either -1 or in the range [1",
        " n2]. The squares labeled 1 and n2 do not have any ladders or snakes."
    ]
},
{
    "id": "910",
    "title": "Smallest Range II",
    "question": "You are given an integer array nums and an integer k.\nFor each index i where 0 <= i < nums.\nlength, change nums[i] to be either nums[i] + k or nums[i] - k.\nThe score of nums is the difference between the maximum and minimum elements in nums.\nReturn the minimum score of nums after changing the values at each index.",
    "examples": [
        "Input: nums = [1], k = 0",
        "Output: 0",
        "Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.",
        "Input: nums = [0,10], k = 2",
        "Output: 6",
        "Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.",
        "Input: nums = [1,3,6], k = 3",
        "Output: 3",
        "Explanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1040 <= nums[i] <= 1040 <= k <= 104"
    ]
},
{
    "id": "911",
    "title": "Online Election",
    "question": "You are given two integer arrays persons and times.\n In an election, the ith vote was cast for persons[i] at time times[i].\nFor each query at a time t, find the person that was leading the election at time t.\n Votes cast at time t will count towards our query.\n In the case of a tie, the most recent vote (among tied candidates) wins.\nImplement the TopVotedCandidate class:",
    "examples": [
        "Input",
        "[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]",
        "[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]",
        "Output",
        "[null, 0, 1, 1, 0, 0, 1]",
        "",
        "Explanation",
        "TopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);",
        "topVotedCandidate. q(3); // return 0, At time 3, the votes are [0], and 0 is leading.",
        "topVotedCandidate. q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.",
        "topVotedCandidate. q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)",
        "topVotedCandidate. q(15); // return 0",
        "topVotedCandidate. q(24); // return 0",
        "topVotedCandidate. q(8); // return 1",
        "",
        ""
    ],
    "constraints": [
        "TopVotedCandidate(int[] persons",
        " int[] times) Initializes the object with the persons and times arrays. int q(int t) Returns the number of the person that was leading the election at time t according to the mentioned rules. 1 <= persons. length <= 5000times. length == persons. length0 <= persons[i] < persons. length0 <= times[i] <= 109times is sorted in a strictly increasing order. times[0] <= t <= 109At most 104 calls will be made to q."
    ]
},
{
    "id": "912",
    "title": "Sort an Array",
    "question": "Given an array of integers nums, sort the array in ascending order.",
    "examples": [
        "Input: nums = [5,2,3,1]",
        "Output: [1,2,3,5]",
        "Input: nums = [5,1,1,2,0,0]",
        "Output: [0,0,1,1,2,5]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5 * 104-5 * 104 <= nums[i] <= 5 * 104"
    ]
},
{
    "id": "367",
    "title": "Valid Perfect Square",
    "question": "Given a positive integer num, write a function which returns True if num is a perfect square else False.\nFollow up: Do not use any built-in library function such as sqrt.",
    "examples": [
        "Input: num = 16",
        "Output: true",
        "Input: num = 14",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= num <= 2^31 - 1"
    ]
},
{
    "id": "915",
    "title": "Partition Array into Disjoint Intervals",
    "question": "Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:Return the length of left after such a partitioning.\nTest cases are generated such that partitioning exists.",
    "examples": [
        "Input: nums = [5,0,3,8,6]",
        "Output: 3",
        "Explanation: left = [5,0,3], right = [8,6]",
        "Input: nums = [1,1,1,0,6,12]",
        "Output: 4",
        "Explanation: left = [1,1,1,0], right = [6,12]",
        ""
    ],
    "constraints": [
        "Every element in left is less than or equal to every element in right. left and right are non-empty. left has the smallest possible size. 2 <= nums. length <= 1050 <= nums[i] <= 106There is at least one valid answer for the given input."
    ]
},
{
    "id": "916",
    "title": "Word Subsets",
    "question": "You are given two string arrays words1 and words2.\nA string b is a subset of string a if every letter in b occurs in a including multiplicity.\nA string a from words1 is universal if for every string b in words2, b is a subset of a.\nReturn an array of all the universal strings in words1.\n You may return the answer in any order.",
    "examples": [
        "Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]",
        "Output: [\"facebook\",\"google\",\"leetcode\"]",
        "Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]",
        "Output: [\"apple\",\"google\",\"leetcode\"]",
        "Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"oo\"]",
        "Output: [\"facebook\",\"google\"]",
        "Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"lo\",\"eo\"]",
        "Output: [\"google\",\"leetcode\"]",
        "Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"ec\",\"oc\",\"ceo\"]",
        "Output: [\"facebook\",\"leetcode\"]",
        ""
    ],
    "constraints": [
        "For example",
        " \"wrr\" is a subset of \"warrior\" but is not a subset of \"world\". 1 <= words1. length",
        " words2. length <= 1041 <= words1[i]. length",
        " words2[i]. length <= 10words1[i] and words2[i] consist only of lowercase English letters. All the strings of words1 are unique."
    ]
},
{
    "id": "918",
    "title": "Maximum Sum Circular Subarray",
    "question": "Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.\nA circular array means the end of the array connects to the beginning of the array.\n Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].\nA subarray may only include each element of the fixed buffer nums at most once.\n Formally, for a subarray nums[i], nums[i + 1], .\n.\n.\n, nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.",
    "examples": [
        "Input: nums = [1,-2,3,-2]",
        "Output: 3",
        "Explanation: Subarray [3] has maximum sum 3",
        "Input: nums = [5,-3,5]",
        "Output: 10",
        "Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10",
        "Input: nums = [3,-1,2,-1]",
        "Output: 4",
        "Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4",
        "Input: nums = [3,-2,2,-3]",
        "Output: 3",
        "Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3",
        "Input: nums = [-2,-3,-1]",
        "Output: -1",
        "Explanation: Subarray [-1] has maximum sum -1",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 3 * 104-3 * 104 <= nums[i] <= 3 * 104"
    ]
},
{
    "id": "919",
    "title": "Complete Binary Tree Inserter",
    "question": "A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\nDesign an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\nImplement the CBTInserter class:",
    "examples": [
        "Input",
        "[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]",
        "[[[1, 2]], [3], [4], []]",
        "Output",
        "[null, 1, 2, [1, 2, 3, 4]]",
        "",
        "Explanation",
        "CBTInserter cBTInserter = new CBTInserter([1, 2]);",
        "cBTInserter. insert(3);  // return 1",
        "cBTInserter. insert(4);  // return 2",
        "cBTInserter. get_root(); // return [1, 2, 3, 4]",
        ""
    ],
    "constraints": [
        "CBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree. int insert(int v) Inserts a TreeNode into the tree with value Node. val == val so that the tree remains complete",
        " and returns the value of the parent of the inserted TreeNode. TreeNode get_root() Returns the root node of the tree. The number of nodes in the tree will be in the range [1",
        " 1000]. 0 <= Node. val <= 5000root is a complete binary tree. 0 <= val <= 5000At most 104 calls will be made to insert and get_root."
    ]
},
{
    "id": "921",
    "title": "Minimum Add to Make Parentheses Valid",
    "question": "A parentheses string is valid if and only if:You are given a parentheses string s.\n In one move, you can insert a parenthesis at any position of the string.\nReturn the minimum number of moves required to make s valid.",
    "examples": [
        "Input: s = \"())\"",
        "Output: 1",
        "Input: s = \"(((\"",
        "Output: 3",
        "Input: s = \"()\"",
        "Output: 0",
        "Input: s = \"()))((\"",
        "Output: 4",
        ""
    ],
    "constraints": [
        "It is the empty string",
        "It can be written as AB (A concatenated with B)",
        " where A and B are valid strings",
        " orIt can be written as (A)",
        " where A is a valid string. For example",
        " if s = \"()))\"",
        " you can insert an opening parenthesis to be \"(()))\" or a closing parenthesis to be \"())))\". 1 <= s. length <= 1000s[i] is either '(' or ')'."
    ]
},
{
    "id": "923",
    "title": "3Sum With Multiplicity",
    "question": "Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.\nAs the answer can be very large, return it modulo 109 + 7.",
    "examples": [
        "Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8",
        "Output: 20",
        "Explanation: ",
        "Enumerating by the values (arr[i], arr[j], arr[k]):",
        "(1, 2, 5) occurs 8 times;",
        "(1, 3, 4) occurs 8 times;",
        "(2, 2, 4) occurs 2 times;",
        "(2, 3, 3) occurs 2 times.",
        "Input: arr = [1,1,2,2,2,2], target = 5",
        "Output: 12",
        "Explanation: ",
        "arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:",
        "We choose one 1 from [1,1] in 2 ways,",
        "and two 2s from [2,2,2,2] in 6 ways.",
        ""
    ],
    "constraints": [
        "3 <= arr. length <= 30000 <= arr[i] <= 1000 <= target <= 300"
    ]
},
{
    "id": "926",
    "title": "Flip String to Monotone Increasing",
    "question": "A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).\nYou are given a binary string s.\n You can flip s[i] changing it from 0 to 1 or from 1 to 0.\nReturn the minimum number of flips to make s monotone increasing.",
    "examples": [
        "Input: s = \"00110\"",
        "Output: 1",
        "Explanation: We flip the last digit to get 00111.",
        "Input: s = \"010110\"",
        "Output: 2",
        "Explanation: We flip to get 011111, or alternatively 000111.",
        "Input: s = \"00011000\"",
        "Output: 2",
        "Explanation: We flip to get 00000000.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s[i] is either '0' or '1'."
    ]
},
{
    "id": "930",
    "title": "Binary Subarrays With Sum",
    "question": "Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.\nA subarray is a contiguous part of the array.",
    "examples": [
        "Input: nums = [1,0,1,0,1], goal = 2",
        "Output: 4",
        "Explanation: The 4 subarrays are bolded and underlined below:",
        "[1,0,1,0,1]",
        "[1,0,1,0,1]",
        "[1,0,1,0,1]",
        "[1,0,1,0,1]",
        "Input: nums = [0,0,0,0,0], goal = 0",
        "Output: 15",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 3 * 104nums[i] is either 0 or 1. 0 <= goal <= nums. length"
    ]
},
{
    "id": "931",
    "title": "Minimum Falling Path Sum",
    "question": "Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right.\n Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).",
    "examples": [
        "Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]",
        "Output: 13",
        "Explanation: There are two falling paths with a minimum sum underlined below:",
        "[[2,1,3],      [[2,1,3],",
        " [6,5,4],       [6,5,4],",
        " [7,8,9]]       [7,8,9]]",
        "Input: matrix = [[-19,57],[-40,-5]]",
        "Output: -59",
        "Explanation: The falling path with a minimum sum is underlined below:",
        "[[-19,57],",
        " [-40,-5]]",
        "Input: matrix = [[-48]]",
        "Output: -48",
        ""
    ],
    "constraints": [
        "n == matrix. lengthn == matrix[i]. length1 <= n <= 100-100 <= matrix[i][j] <= 100"
    ]
},
{
    "id": "932",
    "title": "Beautiful Array",
    "question": "An array nums of length n is beautiful if:Given the integer n, return any beautiful array nums of length n.\n There will be at least one valid answer for the given n.",
    "examples": [
        "Input: n = 4",
        "Output: [2,1,4,3]",
        "Input: n = 5",
        "Output: [3,1,2,5,4]",
        ""
    ],
    "constraints": [
        "nums is a permutation of the integers in the range [1",
        " n]. For every 0 <= i < j < n",
        " there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j]. 1 <= n <= 1000"
    ]
},
{
    "id": "374",
    "title": "Guess Number Higher or Lower",
    "question": "We are playing the Guess Game.\n The game is as follows:I pick a number from 1 to n.\n You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API int guess(int num), which returns 3 possible results:Return the number that I picked.",
    "examples": [
        "Input: n = 10, pick = 6",
        "Output: 6",
        "Input: n = 1, pick = 1",
        "Output: 1",
        "Input: n = 2, pick = 1",
        "Output: 1",
        "Input: n = 2, pick = 2",
        "Output: 2",
        ""
    ],
    "constraints": [
        "-1: The number I picked is lower than your guess (i. e. pick < num). 1: The number I picked is higher than your guess (i. e. pick > num). 0: The number I picked is equal to your guess (i. e. pick == num). 1 <= n <= 231 - 11 <= pick <= n"
    ]
},
{
    "id": "934",
    "title": "Shortest Bridge",
    "question": "In a given 2D binary array grid, there are two islands.\n  (An island is a 4-directionally connected group of 1s not connected to any other 1s.\n)Now, we may change 0s to 1s so as to connect the two islands together to form 1 island.\nReturn the smallest number of 0s that must be flipped.\n  (It is guaranteed that the answer is at least 1.\n)",
    "examples": [
        "Input: grid = [[0,1],[1,0]]",
        "Output: 1",
        "Input: grid = [[0,1,0],[0,0,0],[0,0,1]]",
        "Output: 2",
        "Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "2 <= grid. length == grid[0]. length <= 100grid[i][j] == 0 or grid[i][j] == 1"
    ]
},
{
    "id": "935",
    "title": "Knight Dialer",
    "question": "The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L).\n The possible movements of chess knight are shown in this diagaram:A chess knight can move as indicated in the chess diagram below:We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.\ne.\n blue cell).\nGiven an integer n, return how many distinct phone numbers of length n we can dial.\nYou are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n.\n All jumps should be valid knight jumps.\nAs the answer may be very large, return the answer modulo 109 + 7.",
    "examples": [
        "Input: n = 1",
        "Output: 10",
        "Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.",
        "Input: n = 2",
        "Output: 20",
        "Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]",
        "Input: n = 3",
        "Output: 46",
        "Input: n = 4",
        "Output: 104",
        "Input: n = 3131",
        "Output: 136006598",
        "Explanation: Please take care of the mod.",
        ""
    ],
    "constraints": [
        "1 <= n <= 5000"
    ]
},
{
    "id": "939",
    "title": "Minimum Area Rectangle",
    "question": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes.\n If there is not any such rectangle, return 0.",
    "examples": [
        "Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]",
        "Output: 4",
        "Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= points. length <= 500points[i]. length == 20 <= xi",
        " yi <= 4 * 104All the given points are unique."
    ]
},
{
    "id": "945",
    "title": "Minimum Increment to Make Array Unique",
    "question": "You are given an integer array nums.\n In one move, you can pick an index i where 0 <= i < nums.\nlength and increment nums[i] by 1.\nReturn the minimum number of moves to make every value in nums unique.",
    "examples": [
        "Input: nums = [1,2,2]",
        "Output: 1",
        "Explanation: After 1 move, the array could be [1, 2, 3].",
        "Input: nums = [3,2,1,2,1,7]",
        "Output: 6",
        "Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].",
        "It can be shown with 5 or less moves that it is impossible for the array to have all unique values.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1050 <= nums[i] <= 105"
    ]
},
{
    "id": "946",
    "title": "Validate Stack Sequences",
    "question": "Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.",
    "examples": [
        "Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]",
        "Output: true",
        "Explanation: We might do the following sequence:",
        "push(1), push(2), push(3), push(4),",
        "pop() -> 4,",
        "push(5),",
        "pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1",
        "Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]",
        "Output: false",
        "Explanation: 1 cannot be popped before 2.",
        ""
    ],
    "constraints": [
        "1 <= pushed. length <= 10000 <= pushed[i] <= 1000All the elements of pushed are unique. popped. length == pushed. lengthpopped is a permutation of pushed."
    ]
},
{
    "id": "947",
    "title": "Most Stones Removed with Same Row or Column",
    "question": "On a 2D plane, we place n stones at some integer coordinate points.\n Each coordinate point may have at most one stone.\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\nGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.",
    "examples": [
        "Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]",
        "Output: 5",
        "Explanation: One way to remove 5 stones is as follows:",
        "1. Remove stone [2,2] because it shares the same row as [2,1].",
        "2. Remove stone [2,1] because it shares the same column as [0,1].",
        "3. Remove stone [1,2] because it shares the same row as [1,0].",
        "4. Remove stone [1,0] because it shares the same column as [0,0].",
        "5. Remove stone [0,1] because it shares the same row as [0,0].",
        "Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.",
        "Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]",
        "Output: 3",
        "Explanation: One way to make 3 moves is as follows:",
        "1. Remove stone [2,2] because it shares the same row as [2,0].",
        "2. Remove stone [2,0] because it shares the same column as [0,0].",
        "3. Remove stone [0,2] because it shares the same row as [0,0].",
        "Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.",
        "Input: stones = [[0,0]]",
        "Output: 0",
        "Explanation: [0,0] is the only stone on the plane, so you cannot remove it.",
        ""
    ],
    "constraints": [
        "1 <= stones. length <= 10000 <= xi",
        " yi <= 104No two stones are at the same coordinate point."
    ]
},
{
    "id": "948",
    "title": "Bag of Tokens",
    "question": "You have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).\nYour goal is to maximize your total score by potentially playing each token in one of two ways:Each token may be played at most once and in any order.\n You do not have to play all the tokens.\nReturn the largest possible score you can achieve after playing any number of tokens.",
    "examples": [
        "Input: tokens = [100], power = 50",
        "Output: 0",
        "Explanation: Playing the only token in the bag is impossible because you either have too little power or too little score.",
        "Input: tokens = [100,200], power = 150",
        "Output: 1",
        "Explanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.",
        "There is no need to play the 1st token since you cannot play it face up to add to your score.",
        "Input: tokens = [100,200,300,400], power = 200",
        "Output: 2",
        "Explanation: Play the tokens in this order to get a score of 2:",
        "1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.",
        "2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.",
        "3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.",
        "4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.",
        ""
    ],
    "constraints": [
        "If your current power is at least tokens[i]",
        " you may play the ith token face up",
        " losing tokens[i] power and gaining 1 score. If your current score is at least 1",
        " you may play the ith token face down",
        " gaining tokens[i] power and losing 1 score. 0 <= tokens. length <= 10000 <= tokens[i]",
        " power < 104"
    ]
},
{
    "id": "949",
    "title": "Largest Time for Given Digits",
    "question": "Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.\n24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59.\n The earliest 24-hour time is 00:00, and the latest is 23:59.\nReturn the latest 24-hour time in \"HH:MM\" format.\n  If no valid time can be made, return an empty string.",
    "examples": [
        "Input: arr = [1,2,3,4]",
        "Output: \"23:41\"",
        "Explanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.",
        "Input: arr = [5,5,5,5]",
        "Output: \"\"",
        "Explanation: There are no valid 24-hour times as \"55:55\" is not valid.",
        "Input: arr = [0,0,0,0]",
        "Output: \"00:00\"",
        "Input: arr = [0,0,1,0]",
        "Output: \"10:00\"",
        ""
    ],
    "constraints": [
        "arr. length == 40 <= arr[i] <= 9"
    ]
},
{
    "id": "950",
    "title": "Reveal Cards In Increasing Order",
    "question": "You are given an integer array deck.\n There is a deck of cards where every card has a unique integer.\n The integer on the ith card is deck[i].\nYou can order the deck in any order you want.\n Initially, all the cards start face down (unrevealed) in one deck.\nYou will do the following steps repeatedly until all cards are revealed:Return an ordering of the deck that would reveal the cards in increasing order.\nNote that the first entry in the answer is considered to be the top of the deck.",
    "examples": [
        "Input: deck = [17,13,11,2,3,5,7]",
        "Output: [2,13,3,11,5,17,7]",
        "Explanation: ",
        "We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.",
        "After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.",
        "We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].",
        "We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].",
        "We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].",
        "We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].",
        "We reveal 11, and move 17 to the bottom.  The deck is now [13,17].",
        "We reveal 13, and move 17 to the bottom.  The deck is now [17].",
        "We reveal 17.",
        "Since all the cards revealed are in increasing order, the answer is correct.",
        "Input: deck = [1,1000]",
        "Output: [1,1000]",
        ""
    ],
    "constraints": [
        "1 <= deck. length <= 10001 <= deck[i] <= 106All the values of deck are unique."
    ]
},
{
    "id": "951",
    "title": "Flip Equivalent Binary Trees",
    "question": "For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\nA binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\nGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivelent or false otherwise.",
    "examples": [
        "Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]",
        "Output: true",
        "Explanation: We flipped at nodes with values 1, 3, and 5.",
        "Input: root1 = [], root2 = []",
        "Output: true",
        "Input: root1 = [], root2 = [1]",
        "Output: false",
        "Input: root1 = [0,null,1], root2 = []",
        "Output: false",
        "Input: root1 = [0,null,1], root2 = [0,1]",
        "Output: true",
        ""
    ],
    "constraints": [
        "The number of nodes in each tree is in the range [0",
        " 100]. Each tree will have unique node values in the range [0",
        " 99]."
    ]
},
{
    "id": "383",
    "title": "Ransom Note",
    "question": "Given two stings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.\nEach letter in magazine can only be used once in ransomNote.",
    "examples": [
        "Input: ransomNote = \"a\", magazine = \"b\"",
        "Output: false",
        "Input: ransomNote = \"aa\", magazine = \"ab\"",
        "Output: false",
        "Input: ransomNote = \"aa\", magazine = \"aab\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= ransomNote. length",
        " magazine. length <= 105ransomNote and magazine consist of lowercase English letters."
    ]
},
{
    "id": "954",
    "title": "Array of Doubled Pairs",
    "question": "Given an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.",
    "examples": [
        "Input: arr = [3,1,3,6]",
        "Output: false",
        "Input: arr = [2,1,2,6]",
        "Output: false",
        "Input: arr = [4,-2,2,-4]",
        "Output: true",
        "Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].",
        "Input: arr = [1,2,4,16,8,4]",
        "Output: false",
        ""
    ],
    "constraints": [
        "2 <= arr. length <= 3 * 104arr. length is even.-105 <= arr[i] <= 105"
    ]
},
{
    "id": "955",
    "title": "Delete Columns to Make Sorted II",
    "question": "You are given an array of n strings strs, all of the same length.\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\nFor example, if we have strs = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\", \"vyz\"].\nSuppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.\ne.\n, strs[0] <= strs[1] <= strs[2] <= .\n.\n.\n <= strs[n - 1]).\n Return the minimum possible value of answer.\nlength.",
    "examples": [
        "Input: strs = [\"ca\",\"bb\",\"ac\"]",
        "Output: 1",
        "Explanation: ",
        "After deleting the first column, strs = [\"a\", \"b\", \"c\"].",
        "Now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).",
        "We require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.",
        "Input: strs = [\"xc\",\"yb\",\"za\"]",
        "Output: 0",
        "Explanation: ",
        "strs is already in lexicographic order, so we do not need to delete anything.",
        "Note that the rows of strs are not necessarily in lexicographic order:",
        "i. e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)",
        "Input: strs = [\"zyx\",\"wvu\",\"tsr\"]",
        "Output: 3",
        "Explanation: We have to delete every column.",
        ""
    ],
    "constraints": [
        "n == strs. length1 <= n <= 1001 <= strs[i]. length <= 100strs[i] consists of lowercase English letters."
    ]
},
{
    "id": "957",
    "title": "Prison Cells After N Days",
    "question": "There are 8 prison cells in a row and each cell is either occupied or vacant.\nEach day, whether the cell is occupied or vacant changes according to the following rules:Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.\nYou are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.\nReturn the state of the prison after n days (i.\ne.\n, n such changes described above).",
    "examples": [
        "Input: cells = [0,1,0,1,1,0,0,1], n = 7",
        "Output: [0,0,1,1,0,0,0,0]",
        "Explanation: The following table summarizes the state of the prison on each day:",
        "Day 0: [0, 1, 0, 1, 1, 0, 0, 1]",
        "Day 1: [0, 1, 1, 0, 0, 0, 0, 0]",
        "Day 2: [0, 0, 0, 0, 1, 1, 1, 0]",
        "Day 3: [0, 1, 1, 0, 0, 1, 0, 0]",
        "Day 4: [0, 0, 0, 0, 0, 1, 0, 0]",
        "Day 5: [0, 1, 1, 1, 0, 1, 0, 0]",
        "Day 6: [0, 0, 1, 0, 1, 1, 0, 0]",
        "Day 7: [0, 0, 1, 1, 0, 0, 0, 0]",
        "Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000",
        "Output: [0,0,1,1,1,1,1,0]",
        ""
    ],
    "constraints": [
        "If a cell has two adjacent neighbors that are both occupied or both vacant",
        " then the cell becomes occupied. Otherwise",
        " it becomes vacant. cells. length == 8cells[i] is either 0 or 1. 1 <= n <= 109"
    ]
},
{
    "id": "958",
    "title": "Check Completeness of a Binary Tree",
    "question": "Given the root of a binary tree, determine if it is a complete binary tree.\nIn a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.\n It can have between 1 and 2h nodes inclusive at the last level h.",
    "examples": [
        "Input: root = [1,2,3,4,5,6]",
        "Output: true",
        "Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.",
        "Input: root = [1,2,3,4,5,null,7]",
        "Output: false",
        "Explanation: The node with value 7 isn't as far left as possible.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 100]. 1 <= Node. val <= 1000"
    ]
},
{
    "id": "959",
    "title": "Regions Cut By Slashes",
    "question": "An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\\', or blank space ' '.\n These characters divide the square into contiguous regions.\nGiven the grid grid represented as a string array, return the number of regions.\nNote that backslash characters are escaped, so a '\\' is represented as '\\\\'.",
    "examples": [
        "Input: grid = [\" /\",\"/ \"]",
        "Output: 2",
        "Input: grid = [\" /\",\"  \"]",
        "Output: 1",
        "Input: grid = [\"\\\\/\",\"/\\\\\"]",
        "Output: 4",
        "Explanation: (Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.)",
        "Input: grid = [\"/\\\\\",\"\\\\/\"]",
        "Output: 5",
        "Explanation: (Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.)",
        "Input: grid = [\"//\",\"/ \"]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "n == grid. lengthn == grid[i]. length1 <= n <= 30grid[i][j] is either '/'",
        " '\\'",
        " or ' '."
    ]
},
{
    "id": "962",
    "title": "Maximum Width Ramp",
    "question": "A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j].\n The width of such a ramp is j - i.\nGiven an integer array nums, return the maximum width of a ramp in nums.\n If there is no ramp in nums, return 0.",
    "examples": [
        "Input: nums = [6,0,8,2,1,5]",
        "Output: 4",
        "Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.",
        "Input: nums = [9,8,1,0,1,9,4,0,4,1]",
        "Output: 7",
        "Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 5 * 1040 <= nums[i] <= 5 * 104"
    ]
},
{
    "id": "963",
    "title": "Minimum Area Rectangle II",
    "question": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes.\n If there is not any such rectangle, return 0.\nAnswers within 10-5 of the actual answer will be accepted.",
    "examples": [
        "Input: points = [[1,2],[2,1],[1,0],[0,1]]",
        "Output: 2. 00000",
        "Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.",
        "Input: points = [[0,1],[2,1],[1,1],[1,0],[2,0]]",
        "Output: 1. 00000",
        "Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.",
        "Input: points = [[0,3],[1,2],[3,1],[1,3],[2,1]]",
        "Output: 0",
        "Explanation: There is no possible rectangle to form from these points.",
        "Input: points = [[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]",
        "Output: 2. 00000",
        "Explanation: The minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2.",
        ""
    ],
    "constraints": [
        "1 <= points. length <= 50points[i]. length == 20 <= xi",
        " yi <= 4 * 104All the given points are unique."
    ]
},
{
    "id": "966",
    "title": "Vowel Spellchecker",
    "question": "Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.\nFor a given query word, the spell checker handles two categories of spelling mistakes:In addition, the spell checker operates under the following precedence rules:Given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].",
    "examples": [
        "Input: wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]",
        "Output: [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]",
        "Input: wordlist = [\"yellow\"], queries = [\"YellOw\"]",
        "Output: [\"yellow\"]",
        ""
    ],
    "constraints": [
        "Capitalization: If the query matches a word in the wordlist (case-insensitive)",
        " then the query word is returned with the same case as the case in the wordlist.\n\n\t\nExample: wordlist = [\"yellow\"]",
        " query = \"YellOw\": correct = \"yellow\"\nExample: wordlist = [\"Yellow\"]",
        " query = \"yellow\": correct = \"Yellow\"\nExample: wordlist = [\"yellow\"]",
        " query = \"yellow\": correct = \"yellow\"\n\nExample: wordlist = [\"yellow\"]",
        " query = \"YellOw\": correct = \"yellow\"Example: wordlist = [\"Yellow\"]",
        " query = \"yellow\": correct = \"Yellow\"Example: wordlist = [\"yellow\"]",
        " query = \"yellow\": correct = \"yellow\"Vowel Errors: If after replacing the vowels ('a'",
        " 'e'",
        " 'i'",
        " 'o'",
        " 'u') of the query word with any vowel individually",
        " it matches a word in the wordlist (case-insensitive)",
        " then the query word is returned with the same case as the match in the wordlist.\n\t\nExample: wordlist = [\"YellOw\"]",
        " query = \"yollow\": correct = \"YellOw\"\nExample: wordlist = [\"YellOw\"]",
        " query = \"yeellow\": correct = \"\" (no match)\nExample: wordlist = [\"YellOw\"]",
        " query = \"yllw\": correct = \"\" (no match)\n\nExample: wordlist = [\"YellOw\"]",
        " query = \"yollow\": correct = \"YellOw\"Example: wordlist = [\"YellOw\"]",
        " query = \"yeellow\": correct = \"\" (no match)Example: wordlist = [\"YellOw\"]",
        " query = \"yllw\": correct = \"\" (no match)When the query exactly matches a word in the wordlist (case-sensitive)",
        " you should return the same word back. When the query matches a word up to capitlization",
        " you should return the first such match in the wordlist. When the query matches a word up to vowel errors",
        " you should return the first such match in the wordlist. If the query has no matches in the wordlist",
        " you should return the empty string. 1 <= wordlist. length",
        " queries. length <= 50001 <= wordlist[i]. length",
        " queries[i]. length <= 7wordlist[i] and queries[i] consist only of only English letters."
    ]
},
{
    "id": "967",
    "title": "Numbers With Same Consecutive Differences",
    "question": "Return all non-negative integers of length n such that the absolute difference between every two consecutive digits is k.\nNote that every number in the answer must not have leading zeros.\n For example, 01 has one leading zero and is invalid.\nYou may return the answer in any order.",
    "examples": [
        "Input: n = 3, k = 7",
        "Output: [181,292,707,818,929]",
        "Explanation: Note that 070 is not a valid number, because it has leading zeroes.",
        "Input: n = 2, k = 1",
        "Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]",
        "Input: n = 2, k = 0",
        "Output: [11,22,33,44,55,66,77,88,99]",
        "Input: n = 2, k = 2",
        "Output: [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]",
        ""
    ],
    "constraints": [
        "2 <= n <= 90 <= k <= 9"
    ]
},
{
    "id": "969",
    "title": "Pancake Sorting",
    "question": "Given an array of integers arr, sort the array by performing a series of pancake flips.\nIn one pancake flip we do the following steps:For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.\nReturn an array of the k-values corresponding to a sequence of pancake flips that sort arr.\n Any valid answer that sorts the array within 10 * arr.\nlength flips will be judged as correct.",
    "examples": [
        "Input: arr = [3,2,4,1]",
        "Output: [4,2,4,3]",
        "Explanation: ",
        "We perform 4 pancake flips, with k values 4, 2, 4, and 3.",
        "Starting state: arr = [3, 2, 4, 1]",
        "After 1st flip (k = 4): arr = [1, 4, 2, 3]",
        "After 2nd flip (k = 2): arr = [4, 1, 2, 3]",
        "After 3rd flip (k = 4): arr = [3, 2, 1, 4]",
        "After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.",
        "Input: arr = [1,2,3]",
        "Output: []",
        "Explanation: The input is already sorted, so there is no need to flip anything.",
        "Note that other answers, such as [3, 3], would also be accepted.",
        ""
    ],
    "constraints": [
        "Choose an integer k where 1 <= k <= arr. length. Reverse the sub-array arr[0... k-1] (0-indexed). 1 <= arr. length <= 1001 <= arr[i] <= arr. lengthAll integers in arr are unique (i. e. arr is a permutation of the integers from 1 to arr. length)."
    ]
},
{
    "id": "27",
    "title": "Remove Element",
    "question": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place.\n The relative order of the elements may be changed.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums.\n More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result.\n It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array.\n You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:The judge will test your solution with the following code:If all assertions pass, then your solution will be accepted.",
    "examples": [
        "int[] nums = [...]; // Input array",
        "int val = ...; // Value to remove",
        "int[] expectedNums = [...]; // The expected answer with correct length.",
        "                            // It is sorted with no values equaling val.",
        "",
        "int k = removeElement(nums, val); // Calls your implementation",
        "",
        "assert k == expectedNums. length;",
        "sort(nums, 0, k); // Sort the first k elements of nums",
        "for (int i = 0; i < actualLength; i++) {",
        "    assert nums[i] == expectedNums[i];",
        "}",
        "Input: nums = [3,2,2,3], val = 3",
        "Output: 2, nums = [2,2,_,_]",
        "Explanation: Your function should return k = 2, with the first two elements of nums being 2.",
        "It does not matter what you leave beyond the returned k (hence they are underscores).",
        "Input: nums = [0,1,2,2,3,0,4,2], val = 2",
        "Output: 5, nums = [0,1,4,0,3,_,_,_]",
        "Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.",
        "Note that the five elements can be returned in any order.",
        "It does not matter what you leave beyond the returned k (hence they are underscores).",
        ""
    ],
    "constraints": [
        "0 <= nums. length <= 1000 <= nums[i] <= 500 <= val <= 100"
    ]
},
{
    "id": "387",
    "title": "First Unique Character in a String",
    "question": "Given a string s, find the first non-repeating character in it and return its index.\n If it does not exist, return -1.",
    "examples": [
        "Input: s = \"leetcode\"",
        "Output: 0",
        "Input: s = \"loveleetcode\"",
        "Output: 2",
        "Input: s = \"aabb\"",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s consists of only lowercase English letters."
    ]
},
{
    "id": "970",
    "title": "Powerful Integers",
    "question": "Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.\nAn integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0.\nYou may return the answer in any order.\n In your answer, each value should occur at most once.",
    "examples": [
        "Input: x = 2, y = 3, bound = 10",
        "Output: [2,3,4,5,7,9,10]",
        "Explanation:",
        "2 = 20 + 30",
        "3 = 21 + 30",
        "4 = 20 + 31",
        "5 = 21 + 31",
        "7 = 22 + 31",
        "9 = 23 + 30",
        "10 = 20 + 32",
        "Input: x = 3, y = 5, bound = 15",
        "Output: [2,4,6,8,10,14]",
        ""
    ],
    "constraints": [
        "1 <= x",
        " y <= 1000 <= bound <= 106"
    ]
},
{
    "id": "971",
    "title": "Flip Binary Tree To Match Preorder Traversal",
    "question": "You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n.\n You are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree.\nAny node in the binary tree can be flipped by swapping its left and right subtrees.\n For example, flipping node 1 will have the following effect:Flip the smallest number of nodes so that the pre-order traversal of the tree matches voyage.\nReturn a list of the values of all flipped nodes.\n You may return the answer in any order.\n If it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].",
    "examples": [
        "Input: root = [1,2], voyage = [2,1]",
        "Output: [-1]",
        "Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.",
        "Input: root = [1,2,3], voyage = [1,3,2]",
        "Output: [1]",
        "Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage. Input: root = [1,2,3], voyage = [1,2,3]",
        "Output: []",
        "Explanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is n. n == voyage. length1 <= n <= 1001 <= Node. val",
        " voyage[i] <= nAll the values in the tree are unique. All the values in voyage are unique."
    ]
},
{
    "id": "973",
    "title": "K Closest Points to Origin",
    "question": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).\nThe distance between two points on the X-Y plane is the Euclidean distance (i.\ne.\n, √(x1 - x2)2 + (y1 - y2)2).\nYou may return the answer in any order.\n The answer is guaranteed to be unique (except for the order that it is in).",
    "examples": [
        "Input: points = [[1,3],[-2,2]], k = 1",
        "Output: [[-2,2]]",
        "Explanation:",
        "The distance between (1, 3) and the origin is sqrt(10).",
        "The distance between (-2, 2) and the origin is sqrt(8).",
        "Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.",
        "We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].",
        "Input: points = [[3,3],[5,-1],[-2,4]], k = 2",
        "Output: [[3,3],[-2,4]]",
        "Explanation: The answer [[-2,4],[3,3]] would also be accepted.",
        ""
    ],
    "constraints": [
        "1 <= k <= points. length <= 104-104 < xi",
        " yi < 104"
    ]
},
{
    "id": "974",
    "title": "Subarray Sums Divisible by K",
    "question": "Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.\nA subarray is a contiguous part of an array.",
    "examples": [
        "Input: nums = [4,5,0,-2,-3,1], k = 5",
        "Output: 7",
        "Explanation: There are 7 subarrays with a sum divisible by k = 5:",
        "[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]",
        "Input: nums = [5], k = 9",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 3 * 104-104 <= nums[i] <= 1042 <= k <= 104"
    ]
},
{
    "id": "978",
    "title": "Longest Turbulent Subarray",
    "question": "Given an integer array arr, return the length of a maximum size turbulent subarray of arr.\nA subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.\nMore formally, a subarray [arr[i], arr[i + 1], .\n.\n.\n, arr[j]] of arr is said to be turbulent if and only if:",
    "examples": [
        "Input: arr = [9,4,2,10,7,8,8,1,9]",
        "Output: 5",
        "Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]",
        "Input: arr = [4,8,12,16]",
        "Output: 2",
        "Input: arr = [100]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "For i <= k < j:\n\n\t\narr[k] > arr[k + 1] when k is odd",
        " and\narr[k] < arr[k + 1] when k is even.\n\narr[k] > arr[k + 1] when k is odd",
        " andarr[k] < arr[k + 1] when k is even. Or",
        " for i <= k < j:\n\t\narr[k] > arr[k + 1] when k is even",
        " and\narr[k] < arr[k + 1] when k is odd.\n\narr[k] > arr[k + 1] when k is even",
        " andarr[k] < arr[k + 1] when k is odd. 1 <= arr. length <= 4 * 1040 <= arr[i] <= 109"
    ]
},
{
    "id": "979",
    "title": "Distribute Coins in Binary Tree",
    "question": "You are given the root of a binary tree with n nodes where each node in the tree has node.\nval coins.\n There are n coins in total throughout the whole tree.\nIn one move, we may choose two adjacent nodes and move one coin from one node to another.\n A move may be from parent to child, or from child to parent.\nReturn the minimum number of moves required to make every node have exactly one coin.",
    "examples": [
        "Input: root = [3,0,0]",
        "Output: 2",
        "Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.",
        "Input: root = [0,3,0]",
        "Output: 3",
        "Explanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.",
        "Input: root = [1,0,2]",
        "Output: 2",
        "Input: root = [1,0,0,null,3]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is n. 1 <= n <= 1000 <= Node. val <= nThe sum of all Node. val is n."
    ]
},
{
    "id": "981",
    "title": "Time Based Key-Value Store",
    "question": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.\nImplement the TimeMap class:",
    "examples": [
        "Input",
        "[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]",
        "[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]",
        "Output",
        "[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]",
        "",
        "Explanation",
        "TimeMap timeMap = new TimeMap();",
        "timeMap. set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.",
        "timeMap. get(\"foo\", 1);         // return \"bar\"",
        "timeMap. get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".",
        "timeMap. set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"ba2r\" along with timestamp = 4.",
        "timeMap. get(\"foo\", 4);         // return \"bar2\"",
        "timeMap. get(\"foo\", 5);         // return \"bar2\"",
        ""
    ],
    "constraints": [
        "TimeMap() Initializes the object of the data structure. void set(String key",
        " String value",
        " int timestamp) Stores the key key with the value value at the given time timestamp. String get(String key",
        " int timestamp) Returns a value such that set was called previously",
        " with timestamp_prev <= timestamp. If there are multiple such values",
        " it returns the value associated with the largest timestamp_prev. If there are no values",
        " it returns \"\". 1 <= key. length",
        " value. length <= 100key and value consist of lowercase English letters and digits. 1 <= timestamp <= 107All the timestamps timestamp of set are strictly increasing. At most 2 * 105 calls will be made to set and get."
    ]
},
{
    "id": "983",
    "title": "Minimum Cost For Tickets",
    "question": "You have planned some train traveling one year in advance.\n The days of the year in which you will travel are given as an integer array days.\n Each day is an integer from 1 to 365.\nTrain tickets are sold in three different ways:The passes allow that many days of consecutive travel.\nReturn the minimum number of dollars you need to travel every day in the given list of days.",
    "examples": [
        "Input: days = [1,4,6,7,8,20], costs = [2,7,15]",
        "Output: 11",
        "Explanation: For example, here is one way to buy passes that lets you travel your travel plan:",
        "On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.",
        "On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.",
        "On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.",
        "In total, you spent $11 and covered all the days of your travel.",
        "Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]",
        "Output: 17",
        "Explanation: For example, here is one way to buy passes that lets you travel your travel plan:",
        "On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.",
        "On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.",
        "In total, you spent $17 and covered all the days of your travel.",
        ""
    ],
    "constraints": [
        "a 1-day pass is sold for costs[0] dollars",
        "a 7-day pass is sold for costs[1] dollars",
        " anda 30-day pass is sold for costs[2] dollars. For example",
        " if we get a 7-day pass on day 2",
        " then we can travel for 7 days: 2",
        " 3",
        " 4",
        " 5",
        " 6",
        " 7",
        " and 8. 1 <= days. length <= 3651 <= days[i] <= 365days is in strictly increasing order. costs. length == 31 <= costs[i] <= 1000"
    ]
},
{
    "id": "984",
    "title": "String Without AAA or BBB",
    "question": "Given two integers a and b, return any string s such that:",
    "examples": [
        "Input: a = 1, b = 2",
        "Output: \"abb\"",
        "Explanation: \"abb\", \"bab\" and \"bba\" are all correct answers.",
        "Input: a = 4, b = 1",
        "Output: \"aabaa\"",
        ""
    ],
    "constraints": [
        "s has length a + b and contains exactly a 'a' letters",
        " and exactly b 'b' letters",
        "The substring 'aaa' does not occur in s",
        " andThe substring 'bbb' does not occur in s. 0 <= a",
        " b <= 100It is guaranteed such an s exists for the given a and b."
    ]
},
{
    "id": "985",
    "title": "Sum of Even Numbers After Queries",
    "question": "You are given an integer array nums and an array queries where queries[i] = [vali, indexi].\nFor each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.\nReturn an integer array answer where answer[i] is the answer to the ith query.",
    "examples": [
        "Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]",
        "Output: [8,6,2,4]",
        "Explanation: At the beginning, the array is [1,2,3,4].",
        "After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.",
        "After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.",
        "After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.",
        "After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.",
        "Input: nums = [1], queries = [[4,0]]",
        "Output: [0]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-104 <= nums[i] <= 1041 <= queries. length <= 104-104 <= vali <= 1040 <= indexi < nums. length"
    ]
},
{
    "id": "389",
    "title": "Find the Difference",
    "question": "You are given two strings s and t.\nString t is generated by random shuffling string s and then add one more letter at a random position.\nReturn the letter that was added to t.",
    "examples": [
        "Input: s = \"abcd\", t = \"abcde\"",
        "Output: \"e\"",
        "Explanation: 'e' is the letter that was added.",
        "Input: s = \"\", t = \"y\"",
        "Output: \"y\"",
        "Input: s = \"a\", t = \"aa\"",
        "Output: \"a\"",
        "Input: s = \"ae\", t = \"aea\"",
        "Output: \"a\"",
        ""
    ],
    "constraints": [
        "0 <= s. length <= 1000t. length == s. length + 1s and t consist of lower-case English letters."
    ]
},
{
    "id": "986",
    "title": "Interval List Intersections",
    "question": "You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj].\n Each list of intervals is pairwise disjoint and in sorted order.\nReturn the intersection of these two interval lists.\nA closed interval [a, b] (with a < b) denotes the set of real numbers x with a <= x <= b.\nThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval.\n For example, the intersection of [1, 3] and [2, 4] is [2, 3].",
    "examples": [
        "Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]",
        "Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]",
        "Input: firstList = [[1,3],[5,9]], secondList = []",
        "Output: []",
        "Input: firstList = [], secondList = [[4,8],[10,12]]",
        "Output: []",
        "Input: firstList = [[1,7]], secondList = [[3,10]]",
        "Output: [[3,7]]",
        ""
    ],
    "constraints": [
        "0 <= firstList. length",
        " secondList. length <= 1000firstList. length + secondList. length >= 10 <= starti < endi <= 109endi < starti+10 <= startj < endj <= 109 endj < startj+1"
    ]
},
{
    "id": "988",
    "title": "Smallest String Starting From Leaf",
    "question": "You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.\nReturn the lexicographically smallest string that starts at a leaf of this tree and ends at the root.\nAs a reminder, any shorter prefix of a string is lexicographically smaller.\nA leaf of a node is a node that has no children.",
    "examples": [
        "Input: root = [0,1,2,3,4,3,4]",
        "Output: \"dba\"",
        "Input: root = [25,1,3,1,3,0,2]",
        "Output: \"adz\"",
        "Input: root = [2,2,1,null,1,0,null,0]",
        "Output: \"abc\"",
        ""
    ],
    "constraints": [
        "For example",
        " \"ab\" is lexicographically smaller than \"aba\". The number of nodes in the tree is in the range [1",
        " 8500]. 0 <= Node. val <= 25"
    ]
},
{
    "id": "990",
    "title": "Satisfiability of Equality Equations",
    "question": "You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: \"xi==yi\" or \"xi!=yi\".\nHere, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.\nReturn true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.",
    "examples": [
        "Input: equations = [\"a==b\",\"b!=a\"]",
        "Output: false",
        "Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.",
        "There is no way to assign the variables to satisfy both equations.",
        "Input: equations = [\"b==a\",\"a==b\"]",
        "Output: true",
        "Explanation: We could assign a = 1 and b = 1 to satisfy both equations.",
        "Input: equations = [\"a==b\",\"b==c\",\"a==c\"]",
        "Output: true",
        "Input: equations = [\"a==b\",\"b!=c\",\"c==a\"]",
        "Output: false",
        "Input: equations = [\"c==c\",\"b==d\",\"x!=z\"]",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= equations. length <= 500equations[i]. length == 4equations[i][0] is a lowercase letter. equations[i][1] is either '=' or '!'. equations[i][2] is '='. equations[i][3] is a lowercase letter."
    ]
},
{
    "id": "991",
    "title": "Broken Calculator",
    "question": "There is a broken calculator that has the integer startValue on its display initially.\n In on operation you can:Given two integers startValue and target, return the minimum number of operations needed to display target on the calculator.",
    "examples": [
        "Input: startValue = 2, target = 3",
        "Output: 2",
        "Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.",
        "Input: startValue = 5, target = 8",
        "Output: 2",
        "Explanation: Use decrement and then double {5 -> 4 -> 8}.",
        "Input: startValue = 3, target = 10",
        "Output: 3",
        "Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.",
        "Input: startValue = 1024, target = 1",
        "Output: 1023",
        "Explanation: Use decrement operations 1023 times.",
        ""
    ],
    "constraints": [
        "multiply the number on the display by 2",
        " orsubtract 1 from the number on the display. 1 <= x",
        " y <= 109"
    ]
},
{
    "id": "994",
    "title": "Rotting Oranges",
    "question": "You are given an m x n grid where each cell can have one of three values:Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\nReturn the minimum number of minutes that must elapse until no cell has a fresh orange.\n If this is impossible, return -1.",
    "examples": [
        "Input: grid = [[2,1,1],[1,1,0],[0,1,1]]",
        "Output: 4",
        "Input: grid = [[2,1,1],[0,1,1],[1,0,1]]",
        "Output: -1",
        "Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.",
        "Input: grid = [[0,2]]",
        "Output: 0",
        "Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.",
        ""
    ],
    "constraints": [
        "0 representing an empty cell",
        "1 representing a fresh orange",
        " or2 representing a rotten orange. m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 10grid[i][j] is 0",
        " 1",
        " or 2."
    ]
},
{
    "id": "998",
    "title": "Maximum Binary Tree II",
    "question": "A maximum tree is a tree where every node has a value greater than any other value in its subtree.\nYou are given the root of a maximum binary tree and an integer val.\nJust as in the previous problem, the given tree was constructed from a list a (root = Construct(a)) recursively with the following Construct(a) routine:Note that we were not given a directly, only a root node root = Construct(a).\nSuppose b is a copy of a with the value val appended to it.\n It is guaranteed that b has unique values.\nReturn Construct(b).",
    "examples": [
        "Input: root = [4,1,3,null,null,2], val = 5",
        "Output: [5,4,null,1,3,null,null,2]",
        "Explanation: a = [1,4,2,3], b = [1,4,2,3,5]",
        "Input: root = [5,2,4,null,1], val = 3",
        "Output: [5,2,4,null,1,null,3]",
        "Explanation: a = [2,1,5,4], b = [2,1,5,4,3]",
        "Input: root = [5,2,3,null,1], val = 4",
        "Output: [5,2,4,null,1,3]",
        "Explanation: a = [2,1,5,3], b = [2,1,5,3,4]",
        ""
    ],
    "constraints": [
        "If a is empty",
        " return null. Otherwise",
        " let a[i] be the largest element of a. Create a root node with the value a[i]. The left child of root will be Construct([a[0]",
        " a[1]",
        " ...",
        " a[i - 1]]). The right child of root will be Construct([a[i + 1]",
        " a[i + 2]",
        " ...",
        " a[a. length - 1]]). Return root. The number of nodes in the tree is in the range [1",
        " 100]. 1 <= Node. val <= 100All the values of the tree are unique. 1 <= val <= 100"
    ]
},
{
    "id": "1003",
    "title": "Check If Word Is Valid After Substitutions",
    "question": "Given a string s, determine if it is valid.\nA string s is valid if, starting with an empty string t = \"\", you can transform t into s after performing the following operation any number of times:Return true if s is a valid string, otherwise, return false.",
    "examples": [
        "Input: s = \"aabcbc\"",
        "Output: true",
        "Explanation:",
        "\"\" -> \"abc\" -> \"aabcbc\"",
        "Thus, \"aabcbc\" is valid. Input: s = \"abcabcababcc\"",
        "Output: true",
        "Explanation:",
        "\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"",
        "Thus, \"abcabcababcc\" is valid.",
        "Input: s = \"abccba\"",
        "Output: false",
        "Explanation: It is impossible to get \"abccba\" using the operation.",
        "Input: s = \"cababc\"",
        "Output: false",
        "Explanation: It is impossible to get \"cababc\" using the operation.",
        ""
    ],
    "constraints": [
        "Insert string \"abc\" into any position in t. More formally",
        " t becomes tleft + \"abc\" + tright",
        " where t == tleft + tright. Note that tleft and tright may be empty. 1 <= s. length <= 2 * 104s consists of letters 'a'",
        " 'b'",
        " and 'c'"
    ]
},
{
    "id": "1004",
    "title": "Max Consecutive Ones III",
    "question": "Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.",
    "examples": [
        "Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2",
        "Output: 6",
        "Explanation: [1,1,1,0,0,1,1,1,1,1,1]",
        "Bolded numbers were flipped from 0 to 1. The longest subarray is underlined. Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3",
        "Output: 10",
        "Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]",
        "Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 105nums[i] is either 0 or 1. 0 <= k <= nums. length"
    ]
},
{
    "id": "1006",
    "title": "Clumsy Factorial",
    "question": "The factorial of a positive integer n is the product of all positive integers less than or equal to n.\nWe make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order.\nHowever, these operations are still applied using the usual order of operations of arithmetic.\n We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.\nAdditionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11.\nGiven an integer n, return the clumsy factorial of n.",
    "examples": [
        "Input: n = 4",
        "Output: 7",
        "Explanation: 7 = 4 * 3 / 2 + 1",
        "Input: n = 10",
        "Output: 12",
        "Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1",
        ""
    ],
    "constraints": [
        "For example",
        " factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1. For example",
        " clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1. 1 <= n <= 104"
    ]
},
{
    "id": "1007",
    "title": "Minimum Domino Rotations For Equal Row",
    "question": "In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino.\n (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.\n)We may rotate the ith domino, so that tops[i] and bottoms[i] swap values.\nReturn the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.\nIf it cannot be done, return -1.",
    "examples": [
        "Input: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]",
        "Output: 2",
        "Explanation: ",
        "The first figure represents the dominoes as given by tops and bottoms: before we do any rotations.",
        "If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.",
        "Input: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]",
        "Output: -1",
        "Explanation: ",
        "In this case, it is not possible to rotate the dominoes to make one row of values equal.",
        ""
    ],
    "constraints": [
        "2 <= tops. length <= 2 * 104bottoms. length == tops. length1 <= tops[i]",
        " bottoms[i] <= 6"
    ]
},
{
    "id": "392",
    "title": "Is Subsequence",
    "question": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters.\n (i.\ne.\n, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).",
    "examples": [
        "Input: s = \"abc\", t = \"ahbgdc\"",
        "Output: true",
        "Input: s = \"axc\", t = \"ahbgdc\"",
        "Output: false",
        ""
    ],
    "constraints": [
        "0 <= s. length <= 1000 <= t. length <= 104s and t consist only of lowercase English letters."
    ]
},
{
    "id": "1008",
    "title": "Construct Binary Search Tree from Preorder Traversal",
    "question": "Given an array of integers preorder, which represents the preorder traversal of a BST (i.\ne.\n, binary search tree), construct the tree and return its root.\nIt is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.\nA binary search tree is a binary tree where for every node, any descendant of Node.\nleft has a value strictly less than Node.\nval, and any descendant of Node.\nright has a value strictly greater than Node.\nval.\nA preorder traversal of a binary tree displays the value of the node first, then traverses Node.\nleft, then traverses Node.\nright.",
    "examples": [
        "Input: preorder = [8,5,1,7,10,12]",
        "Output: [8,5,10,1,7,null,12]",
        "Input: preorder = [1,3]",
        "Output: [1,null,3]",
        ""
    ],
    "constraints": [
        "1 <= preorder. length <= 1001 <= preorder[i] <= 108All the values of preorder are unique."
    ]
},
{
    "id": "1010",
    "title": "Pairs of Songs With Total Durations Divisible by 60",
    "question": "You are given a list of songs where the ith song has a duration of time[i] seconds.\nReturn the number of pairs of songs for which their total duration in seconds is divisible by 60.\n Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.",
    "examples": [
        "Input: time = [30,20,150,100,40]",
        "Output: 3",
        "Explanation: Three pairs have a total duration divisible by 60:",
        "(time[0] = 30, time[2] = 150): total duration 180",
        "(time[1] = 20, time[3] = 100): total duration 120",
        "(time[1] = 20, time[4] = 40): total duration 60",
        "Input: time = [60,60,60]",
        "Output: 3",
        "Explanation: All three pairs have a total duration of 120, which is divisible by 60.",
        ""
    ],
    "constraints": [
        "1 <= time. length <= 6 * 1041 <= time[i] <= 500"
    ]
},
{
    "id": "1011",
    "title": "Capacity To Ship Packages Within D Days",
    "question": "A conveyor belt has packages that must be shipped from one port to another within days days.\nThe ith package on the conveyor belt has a weight of weights[i].\n Each day, we load the ship with packages on the conveyor belt (in the order given by weights).\n We may not load more weight than the maximum weight capacity of the ship.\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.",
    "examples": [
        "Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5",
        "Output: 15",
        "Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:",
        "1st day: 1, 2, 3, 4, 5",
        "2nd day: 6, 7",
        "3rd day: 8",
        "4th day: 9",
        "5th day: 10",
        "",
        "Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.",
        "Input: weights = [3,2,2,4,1,4], days = 3",
        "Output: 6",
        "Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:",
        "1st day: 3, 2",
        "2nd day: 2, 4",
        "3rd day: 1, 4",
        "Input: weights = [1,2,3,1,1], days = 4",
        "Output: 3",
        "Explanation:",
        "1st day: 1",
        "2nd day: 2",
        "3rd day: 3",
        "4th day: 1, 1",
        ""
    ],
    "constraints": [
        "1 <= days <= weights. length <= 5 * 1041 <= weights[i] <= 500"
    ]
},
{
    "id": "1014",
    "title": "Best Sightseeing Pair",
    "question": "You are given an integer array values where values[i] represents the value of the ith sightseeing spot.\n Two sightseeing spots i and j have a distance j - i between them.\nThe score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.\nReturn the maximum score of a pair of sightseeing spots.",
    "examples": [
        "Input: values = [8,1,5,2,6]",
        "Output: 11",
        "Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11",
        "Input: values = [1,2]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "2 <= values. length <= 5 * 1041 <= values[i] <= 1000"
    ]
},
{
    "id": "1015",
    "title": "Smallest Integer Divisible by K",
    "question": "Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.\nReturn the length of n.\n If there is no such n, return -1.\nNote: n may not fit in a 64-bit signed integer.",
    "examples": [
        "Input: k = 1",
        "Output: 1",
        "Explanation: The smallest answer is n = 1, which has length 1.",
        "Input: k = 2",
        "Output: -1",
        "Explanation: There is no such positive integer n divisible by 2.",
        "Input: k = 3",
        "Output: 3",
        "Explanation: The smallest answer is n = 111, which has length 3.",
        ""
    ],
    "constraints": [
        "1 <= k <= 105"
    ]
},
{
    "id": "1016",
    "title": "Binary String With Substrings Representing 1 To N",
    "question": "Given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise.\nA substring is a contiguous sequence of characters within a string.",
    "examples": [
        "Input: s = \"0110\", n = 3",
        "Output: true",
        "Input: s = \"0110\", n = 4",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s[i] is either '0' or '1'. 1 <= n <= 109"
    ]
},
{
    "id": "1017",
    "title": "Convert to Base -2",
    "question": "Given an integer n, return a binary string representing its representation in base -2.\nNote that the returned string should not have leading zeros unless the string is \"0\".",
    "examples": [
        "Input: n = 2",
        "Output: \"110\"",
        "Explantion: (-2)2 + (-2)1 = 2",
        "Input: n = 3",
        "Output: \"111\"",
        "Explantion: (-2)2 + (-2)1 + (-2)0 = 3",
        "Input: n = 4",
        "Output: \"100\"",
        "Explantion: (-2)2 = 4",
        ""
    ],
    "constraints": [
        "0 <= n <= 109"
    ]
},
{
    "id": "1019",
    "title": "Next Greater Node In Linked List",
    "question": "You are given the head of a linked list with n nodes.\nFor each node in the list, find the value of the next greater node.\n That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.\nReturn an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed).\n If the ith node does not have a next greater node, set answer[i] = 0.",
    "examples": [
        "Input: head = [2,1,5]",
        "Output: [5,5,0]",
        "Input: head = [2,7,4,3,5]",
        "Output: [7,0,5,5,0]",
        ""
    ],
    "constraints": [
        "The number of nodes in the list is n. 1 <= n <= 1041 <= Node. val <= 109"
    ]
},
{
    "id": "1020",
    "title": "Number of Enclaves",
    "question": "You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.\nA move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.\nReturn the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.",
    "examples": [
        "Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]",
        "Output: 3",
        "Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.",
        "Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]",
        "Output: 0",
        "Explanation: All 1s are either on the boundary or can reach the boundary.",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 500grid[i][j] is either 0 or 1."
    ]
},
{
    "id": "1023",
    "title": "Camelcase Matching",
    "question": "Given an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise.\nA query word queries[i] matches pattern if you can insert lowercase English letters pattern so that it equals the query.\n You may insert each character at any position and you may not insert any characters.",
    "examples": [
        "Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"",
        "Output: [true,false,true,true,false]",
        "Explanation: \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".",
        "\"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".",
        "\"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\".",
        "Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"",
        "Output: [true,false,true,false,false]",
        "Explanation: \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".",
        "\"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\".",
        "Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"",
        "Output: [false,true,false,false,false]",
        "Explanation: \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".",
        ""
    ],
    "constraints": [
        "1 <= pattern. length",
        " queries. length <= 1001 <= queries[i]. length <= 100queries[i] and pattern consist of English letters."
    ]
},
{
    "id": "401",
    "title": "Binary Watch",
    "question": "A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).\n Each LED represents a zero or one, with the least significant bit on the right.\nGiven an integer turnedOn which represents the number of LEDs that are currently on, return all possible times the watch could represent.\n You may return the answer in any order.\nThe hour must not contain a leading zero.\nThe minute must be consist of two digits and may contain a leading zero.",
    "examples": [
        "Input: turnedOn = 1",
        "Output: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]",
        "Input: turnedOn = 9",
        "Output: []",
        ""
    ],
    "constraints": [
        "For example",
        " the below binary watch reads \"4:51\". For example",
        " \"01:00\" is not valid. It should be \"1:00\". For example",
        " \"10:2\" is not valid. It should be \"10:02\". 0 <= turnedOn <= 10"
    ]
},
{
    "id": "1024",
    "title": "Video Stitching",
    "question": "You are given a series of video clips from a sporting event that lasted time seconds.\n These video clips can be overlapping with each other and have varying lengths.\nEach video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.\nWe can cut these clips into segments freely.\nReturn the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time].\n If the task is impossible, return -1.",
    "examples": [
        "Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10",
        "Output: 3",
        "Explanation: ",
        "We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.",
        "Then, we can reconstruct the sporting event as follows:",
        "We cut [1,9] into segments [1,2] + [2,8] + [8,9].",
        "Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].",
        "Input: clips = [[0,1],[1,2]], time = 5",
        "Output: -1",
        "Explanation: We can't cover [0,5] with only [0,1] and [1,2].",
        "Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9",
        "Output: 3",
        "Explanation: We can take clips [0,4], [4,7], and [6,9].",
        "Input: clips = [[0,4],[2,8]], time = 5",
        "Output: 2",
        "Explanation: Notice you can have extra video after the event ends.",
        ""
    ],
    "constraints": [
        "For example",
        " a clip [0",
        " 7] can be cut into segments [0",
        " 1] + [1",
        " 3] + [3",
        " 7]. 1 <= clips. length <= 1000 <= starti <= endi <= 1001 <= time <= 100"
    ]
},
{
    "id": "1026",
    "title": "Maximum Difference Between Node and Ancestor",
    "question": "Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.\nval - b.\nval| and a is an ancestor of b.\nA node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.",
    "examples": [
        "Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]",
        "Output: 7",
        "Explanation: We have various ancestor-node differences, some of which are given below :",
        "|8 - 3| = 5",
        "|3 - 7| = 4",
        "|8 - 1| = 7",
        "|10 - 13| = 3",
        "Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7. Input: root = [1,null,2,null,0,3]",
        "Output: 3",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [2",
        " 5000]. 0 <= Node. val <= 105"
    ]
},
{
    "id": "1027",
    "title": "Longest Arithmetic Subsequence",
    "question": "Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.\nRecall that a subsequence of an array nums is a list nums[i1], nums[i2], .\n.\n.\n, nums[ik] with 0 <= i1 < i2 < .\n.\n.\n < ik <= nums.\nlength - 1, and that a sequence seq is arithmetic if seq[i+1] - seq[i] are all the same value (for 0 <= i < seq.\nlength - 1).",
    "examples": [
        "Input: nums = [3,6,9,12]",
        "Output: 4",
        "Explanation: ",
        "The whole array is an arithmetic sequence with steps of length = 3.",
        "Input: nums = [9,4,7,2,10]",
        "Output: 3",
        "Explanation: ",
        "The longest arithmetic subsequence is [4,7,10].",
        "Input: nums = [20,1,15,3,10,5,8]",
        "Output: 4",
        "Explanation: ",
        "The longest arithmetic subsequence is [20,15,10,5].",
        ""
    ],
    "constraints": [
        "2 <= nums. length <= 10000 <= nums[i] <= 500"
    ]
},
{
    "id": "1029",
    "title": "Two City Scheduling",
    "question": "A company is planning to interview 2n people.\n Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.\nReturn the minimum cost to fly every person to a city such that exactly n people arrive in each city.",
    "examples": [
        "Input: costs = [[10,20],[30,200],[400,50],[30,20]]",
        "Output: 110",
        "Explanation: ",
        "The first person goes to city A for a cost of 10.",
        "The second person goes to city A for a cost of 30.",
        "The third person goes to city B for a cost of 50.",
        "The fourth person goes to city B for a cost of 20.",
        "",
        "The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.",
        "Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]",
        "Output: 1859",
        "Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]",
        "Output: 3086",
        ""
    ],
    "constraints": [
        "2 * n == costs. length2 <= costs. length <= 100costs. length is even. 1 <= aCosti",
        " bCosti <= 1000"
    ]
},
{
    "id": "1031",
    "title": "Maximum Sum of Two Non-Overlapping Subarrays",
    "question": "Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.\nThe array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping.\nA subarray is a contiguous part of an array.",
    "examples": [
        "Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2",
        "Output: 20",
        "Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.",
        "Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2",
        "Output: 29",
        "Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.",
        "Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3",
        "Output: 31",
        "Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.",
        ""
    ],
    "constraints": [
        "1 <= firstLen",
        " secondLen <= 10002 <= firstLen + secondLen <= 1000firstLen + secondLen <= nums. length <= 10000 <= nums[i] <= 1000"
    ]
},
{
    "id": "1033",
    "title": "Moving Stones Until Consecutive",
    "question": "There are three stones in different positions on the X-axis.\n You are given three integers a, b, and c, the positions of the stones.\nIn one move, you pick up a stone at an endpoint (i.\ne.\n, either the lowest or highest position stone), and move it to an unoccupied position between those endpoints.\n Formally, let's say the stones are currently at positions x, y, and z with x < y < z.\n You pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y.\nThe game ends when you cannot make any more moves (i.\ne.\n, the stones are in three consecutive positions).\nReturn an integer array answer of length 2 where:",
    "examples": [
        "Input: a = 1, b = 2, c = 5",
        "Output: [1,2]",
        "Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.",
        "Input: a = 4, b = 3, c = 2",
        "Output: [0,0]",
        "Explanation: We cannot make any moves.",
        "Input: a = 3, b = 5, c = 1",
        "Output: [1,2]",
        "Explanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.",
        ""
    ],
    "constraints": [
        "answer[0] is the minimum number of moves you can play",
        " andanswer[1] is the maximum number of moves you can play. 1 <= a",
        " b",
        " c <= 100a",
        " b",
        " and c have different values."
    ]
},
{
    "id": "1034",
    "title": "Coloring A Border",
    "question": "You are given an m x n integer matrix grid, and three integers row, col, and color.\n Each value in the grid represents the color of the grid square at that location.\nTwo squares belong to the same connected component if they have the same color and are next to each other in any of the 4 directions.\nThe border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).\nYou should color the border of the connected component that contains the square grid[row][col] with color.\nReturn the final grid.",
    "examples": [
        "Input: grid = [[1,1],[1,2]], row = 0, col = 0, color = 3",
        "Output: [[3,3],[3,2]]",
        "Input: grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3",
        "Output: [[1,3,3],[2,3,3]]",
        "Input: grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2",
        "Output: [[2,2,2],[2,1,2],[2,2,2]]",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 501 <= grid[i][j]",
        " color <= 10000 <= row < m0 <= col < n"
    ]
},
{
    "id": "1035",
    "title": "Uncrossed Lines",
    "question": "You are given two integer arrays nums1 and nums2.\n We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.\nWe may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:Note that a connecting line cannot intersect even at the endpoints (i.\ne.\n, each number can only belong to one connecting line).\nReturn the maximum number of connecting lines we can draw in this way.",
    "examples": [
        "Input: nums1 = [1,4,2], nums2 = [1,2,4]",
        "Output: 2",
        "Explanation: We can draw 2 uncrossed lines as in the diagram.",
        "We cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.",
        "Input: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]",
        "Output: 3",
        "Input: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "nums1[i] == nums2[j]",
        " andthe line we draw does not intersect any other connecting (non-horizontal) line. 1 <= nums1. length",
        " nums2. length <= 5001 <= nums1[i]",
        " nums2[j] <= 2000"
    ]
},
{
    "id": "1038",
    "title": "Binary Search Tree to Greater Sum Tree",
    "question": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\nAs a reminder, a binary search tree is a tree that satisfies these constraints:Note: This question is the same as 538: https://leetcode.\ncom/problems/convert-bst-to-greater-tree/",
    "examples": [
        "Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
        "Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
        "Input: root = [0,null,1]",
        "Output: [1,null,1]",
        "Input: root = [1,0,2]",
        "Output: [3,3,2]",
        "Input: root = [3,2,4,1]",
        "Output: [7,9,4,10]",
        ""
    ],
    "constraints": [
        "The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees. The number of nodes in the tree is in the range [1",
        " 100]. 0 <= Node. val <= 100All the values in the tree are unique. root is guaranteed to be a valid binary search tree."
    ]
},
{
    "id": "1039",
    "title": "Minimum Score Triangulation of Polygon",
    "question": "You have a convex n-sided polygon where each vertex has an integer value.\n You are given an integer array values where values[i] is the value of the ith vertex (i.\ne.\n, clockwise order).\nYou will triangulate the polygon into n - 2 triangles.\n For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation.\nReturn the smallest possible total score that you can achieve with some triangulation of the polygon.",
    "examples": [
        "Input: values = [1,2,3]",
        "Output: 6",
        "Explanation: The polygon is already triangulated, and the score of the only triangle is 6.",
        "Input: values = [3,7,4,5]",
        "Output: 144",
        "Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.",
        "The minimum score is 144.",
        "Input: values = [1,3,1,4,1,5]",
        "Output: 13",
        "Explanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.",
        ""
    ],
    "constraints": [
        "n == values. length3 <= n <= 501 <= values[i] <= 100"
    ]
},
{
    "id": "404",
    "title": "Sum of Left Leaves",
    "question": "Given the root of a binary tree, return the sum of all left leaves.",
    "examples": [
        "Input: root = [3,9,20,null,null,15,7]",
        "Output: 24",
        "Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.",
        "Input: root = [1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 1000].-1000 <= Node. val <= 1000"
    ]
},
{
    "id": "1040",
    "title": "Moving Stones Until Consecutive II",
    "question": "There are some stones in different positions on the X-axis.\n You are given an integer array stones, the positions of the stones.\nCall a stone an endpoint stone if it has the smallest or largest position.\n In one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.\nThe game ends when you cannot make any more moves (i.\ne.\n, the stones are in three consecutive positions).\nReturn an integer array answer of length 2 where:",
    "examples": [
        "Input: stones = [7,4,9]",
        "Output: [1,2]",
        "Explanation: We can move 4 -> 8 for one move to finish the game.",
        "Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.",
        "Input: stones = [6,5,4,3,10]",
        "Output: [2,3]",
        "Explanation: We can move 3 -> 8 then 10 -> 7 to finish the game.",
        "Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.",
        "Notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.",
        ""
    ],
    "constraints": [
        "In particular",
        " if the stones are at say",
        " stones = [1",
        "2",
        "5]",
        " you cannot move the endpoint stone at position 5",
        " since moving it to any position (such as 0",
        " or 3) will still keep that stone as an endpoint stone. answer[0] is the minimum number of moves you can play",
        " andanswer[1] is the maximum number of moves you can play. 3 <= stones. length <= 1041 <= stones[i] <= 109All the values of stones are unique."
    ]
},
{
    "id": "1041",
    "title": "Robot Bounded In Circle",
    "question": "On an infinite plane, a robot initially stands at (0, 0) and faces north.\n The robot can receive one of three instructions:The robot performs the instructions given in order, and repeats them forever.\nReturn true if and only if there exists a circle in the plane such that the robot never leaves the circle.",
    "examples": [
        "Input: instructions = \"GGLLGG\"",
        "Output: true",
        "Explanation: The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).",
        "When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin. Input: instructions = \"GG\"",
        "Output: false",
        "Explanation: The robot moves north indefinitely. Input: instructions = \"GL\"",
        "Output: true",
        "Explanation: The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ..."
    ],
    "constraints": [
        "\"G\": go straight 1 unit;\"L\": turn 90 degrees to the left;\"R\": turn 90 degrees to the right. 1 <= instructions. length <= 100instructions[i] is 'G'",
        " 'L' or",
        " 'R'."
    ]
},
{
    "id": "1042",
    "title": "Flower Planting With No Adjacent",
    "question": "You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi.\n In each garden, you want to plant one of 4 types of flowers.\nAll gardens have at most 3 paths coming into or leaving it.\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\nReturn any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden.\n The flower types are denoted 1, 2, 3, or 4.\n It is guaranteed an answer exists.",
    "examples": [
        "Input: n = 3, paths = [[1,2],[2,3],[3,1]]",
        "Output: [1,2,3]",
        "Explanation:",
        "Gardens 1 and 2 have different types.",
        "Gardens 2 and 3 have different types.",
        "Gardens 3 and 1 have different types.",
        "Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].",
        "Input: n = 4, paths = [[1,2],[3,4]]",
        "Output: [1,2,1,2]",
        "Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]",
        "Output: [1,2,3,4]",
        ""
    ],
    "constraints": [
        "1 <= n <= 1040 <= paths. length <= 2 * 104paths[i]. length == 21 <= xi",
        " yi <= nxi != yiEvery garden has at most 3 paths coming into or leaving it."
    ]
},
{
    "id": "1043",
    "title": "Partition Array for Maximum Sum",
    "question": "Given an integer array arr, partition the array into (contiguous) subarrays of length at most k.\n After partitioning, each subarray has their values changed to become the maximum value of that subarray.\nReturn the largest sum of the given array after partitioning.\n Test cases are generated so that the answer fits in a 32-bit integer.",
    "examples": [
        "Input: arr = [1,15,7,9,2,5,10], k = 3",
        "Output: 84",
        "Explanation: arr becomes [15,15,15,9,10,10,10]",
        "Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4",
        "Output: 83",
        "Input: arr = [1], k = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 5000 <= arr[i] <= 1091 <= k <= arr. length"
    ]
},
{
    "id": "1048",
    "title": "Longest String Chain",
    "question": "You are given an array of words where each word consists of lowercase English letters.\nwordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.\nA word chain is a sequence of words [word1, word2, .\n.\n.\n, wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on.\n A single word is trivially a word chain with k == 1.\nReturn the length of the longest possible word chain with words chosen from the given list of words.",
    "examples": [
        "Input: words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]",
        "Output: 4",
        "Explanation: One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"].",
        "Input: words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]",
        "Output: 5",
        "Explanation: All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"].",
        "Input: words = [\"abcd\",\"dbqca\"]",
        "Output: 1",
        "Explanation: The trivial word chain [\"abcd\"] is one of the longest word chains.",
        "[\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed.",
        ""
    ],
    "constraints": [
        "For example",
        " \"abc\" is a predecessor of \"abac\"",
        " while \"cba\" is not a predecessor of \"bcad\". 1 <= words. length <= 10001 <= words[i]. length <= 16words[i] only consists of lowercase English letters."
    ]
},
{
    "id": "1049",
    "title": "Last Stone Weight II",
    "question": "You are given an array of integers stones where stones[i] is the weight of the ith stone.\nWe are playing a game with the stones.\n On each turn, we choose any two stones and smash them together.\n Suppose the stones have weights x and y with x <= y.\n The result of this smash is:At the end of the game, there is at most one stone left.\nReturn the smallest possible weight of the left stone.\n If there are no stones left, return 0.",
    "examples": [
        "Input: stones = [2,7,4,1,8,1]",
        "Output: 1",
        "Explanation:",
        "We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,",
        "we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,",
        "we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,",
        "we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.",
        "Input: stones = [31,26,33,21,40]",
        "Output: 5",
        "Input: stones = [1,2]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "If x == y",
        " both stones are destroyed",
        " andIf x != y",
        " the stone of weight x is destroyed",
        " and the stone of weight y has new weight y - x. 1 <= stones. length <= 301 <= stones[i] <= 100"
    ]
},
{
    "id": "1052",
    "title": "Grumpy Bookstore Owner",
    "question": "There is a bookstore owner that has a store open for n minutes.\n Every minute, some number of customers enter the store.\n You are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute.\nOn some minutes, the bookstore owner is grumpy.\n You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.\nWhen the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.\nThe bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once.\nReturn the maximum number of customers that can be satisfied throughout the day.",
    "examples": [
        "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3",
        "Output: 16",
        "Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. ",
        "The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.",
        "Input: customers = [1], grumpy = [0], minutes = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "n == customers. length == grumpy. length1 <= minutes <= n <= 2 * 1040 <= customers[i] <= 1000grumpy[i] is either 0 or 1."
    ]
},
{
    "id": "1053",
    "title": "Previous Permutation With One Swap",
    "question": "Given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap (A swap exchanges the positions of two numbers arr[i] and arr[j]).\n If it cannot be done, then return the same array.",
    "examples": [
        "Input: arr = [3,2,1]",
        "Output: [3,1,2]",
        "Explanation: Swapping 2 and 1.",
        "Input: arr = [1,1,5]",
        "Output: [1,1,5]",
        "Explanation: This is already the smallest permutation.",
        "Input: arr = [1,9,4,6,7]",
        "Output: [1,7,4,6,9]",
        "Explanation: Swapping 9 and 7.",
        "Input: arr = [3,1,1,3]",
        "Output: [1,3,1,3]",
        "Explanation: Swapping 1 and 3.",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1041 <= arr[i] <= 104"
    ]
},
{
    "id": "1054",
    "title": "Distant Barcodes",
    "question": "In a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i].\nRearrange the barcodes so that no two adjacent barcodes are equal.\n You may return any answer, and it is guaranteed an answer exists.",
    "examples": [
        "Input: barcodes = [1,1,1,2,2,2]",
        "Output: [2,1,2,1,2,1]",
        "Input: barcodes = [1,1,1,1,2,2,3,3]",
        "Output: [1,3,1,3,1,2,1,2]",
        ""
    ],
    "constraints": [
        "1 <= barcodes. length <= 100001 <= barcodes[i] <= 10000"
    ]
},
{
    "id": "1072",
    "title": "Flip Columns For Maximum Number of Equal Rows",
    "question": "You are given an m x n binary matrix matrix.\nYou can choose any number of columns in the matrix and flip every cell in that column (i.\ne.\n, Change the value of the cell from 0 to 1 or vice versa).\nReturn the maximum number of rows that have all values equal after some number of flips.",
    "examples": [
        "Input: matrix = [[0,1],[1,1]]",
        "Output: 1",
        "Explanation: After flipping no values, 1 row has all values equal.",
        "Input: matrix = [[0,1],[1,0]]",
        "Output: 2",
        "Explanation: After flipping values in the first column, both rows have equal values.",
        "Input: matrix = [[0,0,0],[0,0,1],[1,1,0]]",
        "Output: 2",
        "Explanation: After flipping values in the first two columns, the last two rows have equal values.",
        ""
    ],
    "constraints": [
        "m == matrix. lengthn == matrix[i]. length1 <= m",
        " n <= 300matrix[i][j] is either 0 or 1."
    ]
},
{
    "id": "405",
    "title": "Convert a Number to Hexadecimal",
    "question": "Given an integer num, return a string representing its hexadecimal representation.\n For negative integers, two’s complement method is used.\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\nNote: You are not allowed to use any built-in library method to directly solve this problem.",
    "examples": [
        "Input: num = 26",
        "Output: \"1a\"",
        "Input: num = -1",
        "Output: \"ffffffff\"",
        ""
    ],
    "constraints": [
        "-231 <= num <= 231 - 1"
    ]
},
{
    "id": "1073",
    "title": "Adding Two Negabinary Numbers",
    "question": "Given two numbers arr1 and arr2 in base -2, return the result of adding them together.\nEach number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.\n  For example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3.\n  A number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1.\nReturn the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.",
    "examples": [
        "Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]",
        "Output: [1,0,0,0,0]",
        "Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.",
        "Input: arr1 = [0], arr2 = [0]",
        "Output: [0]",
        "Input: arr1 = [0], arr2 = [1]",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "1 <= arr1. length",
        " arr2. length <= 1000arr1[i] and arr2[i] are 0 or 1arr1 and arr2 have no leading zeros"
    ]
},
{
    "id": "1079",
    "title": "Letter Tile Possibilities",
    "question": "You have n  tiles, where each tile has one letter tiles[i] printed on it.\nReturn the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.",
    "examples": [
        "Input: tiles = \"AAB\"",
        "Output: 8",
        "Explanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".",
        "Input: tiles = \"AAABBC\"",
        "Output: 188",
        "Input: tiles = \"V\"",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= tiles. length <= 7tiles consists of uppercase English letters."
    ]
},
{
    "id": "1080",
    "title": "Insufficient Nodes in Root to Leaf Paths",
    "question": "Given the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree.\nA node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit.\nA leaf is a node with no children.",
    "examples": [
        "Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1",
        "Output: [1,2,3,4,null,null,7,8,9,null,14]",
        "Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22",
        "Output: [5,4,8,11,null,17,4,7,null,null,null,5]",
        "Input: root = [1,2,-3,-5,null,4,null], limit = -1",
        "Output: [1,null,-3,4]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 5000].-105 <= Node. val <= 105-109 <= limit <= 109"
    ]
},
{
    "id": "1081",
    "title": "Smallest Subsequence of Distinct Characters",
    "question": "Return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.\nNote: This question is the same as 316: https://leetcode.\ncom/problems/remove-duplicate-letters/",
    "examples": [
        "Input: s = \"bcabc\"",
        "Output: \"abc\"",
        "Input: s = \"cbacdcbc\"",
        "Output: \"acdb\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1000s consists of lowercase English letters."
    ]
},
{
    "id": "1090",
    "title": "Largest Values From Labels",
    "question": "There is a set of n items.\n You are given two integer arrays values and labels where the value and the label of the ith element are values[i] and labels[i] respectively.\n You are also given two integers numWanted and useLimit.\nChoose a subset s of the n elements such that:The score of a subset is the sum of the values in the subset.\nReturn the maximum score of a subset s.",
    "examples": [
        "Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1",
        "Output: 9",
        "Explanation: The subset chosen is the first, third, and fifth items.",
        "Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2",
        "Output: 12",
        "Explanation: The subset chosen is the first, second, and third items.",
        "Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1",
        "Output: 16",
        "Explanation: The subset chosen is the first and fourth items.",
        "Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 2",
        "Output: 24",
        "Explanation: The subset chosen is the first, second, and fourth items.",
        ""
    ],
    "constraints": [
        "The size of the subset s is less than or equal to numWanted. There are at most useLimit items with the same label in s. n == values. length == labels. length1 <= n <= 2 * 1040 <= values[i]",
        " labels[i] <= 2 * 1041 <= numWanted",
        " useLimit <= n"
    ]
},
{
    "id": "1091",
    "title": "Shortest Path in Binary Matrix",
    "question": "Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix.\n If there is no clear path, return -1.\nA clear path in a binary matrix is a path from the top-left cell (i.\ne.\n, (0, 0)) to the bottom-right cell (i.\ne.\n, (n - 1, n - 1)) such that:The length of a clear path is the number of visited cells of this path.",
    "examples": [
        "Input: grid = [[0,1],[1,0]]",
        "Output: 2",
        "Input: grid = [[0,0,0],[1,1,0],[1,1,0]]",
        "Output: 4",
        "Input: grid = [[1,0,0],[1,1,0],[1,1,0]]",
        "Output: -1",
        ""
    ],
    "constraints": [
        "All the visited cells of the path are 0. All the adjacent cells of the path are 8-directionally connected (i. e.",
        " they are different and they share an edge or a corner). n == grid. lengthn == grid[i]. length1 <= n <= 100grid[i][j] is 0 or 1"
    ]
},
{
    "id": "1093",
    "title": "Statistics from a Large Sample",
    "question": "You are given a large sample of integers in the range [0, 255].\n Since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample.\nCalculate the following statistics:Return the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode].\n Answers within 10-5 of the actual answer will be accepted.",
    "examples": [
        "Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "Output: [1. 00000,3. 00000,2. 37500,2. 50000,3. 00000]",
        "Explanation: The sample represented by count is [1,2,2,2,3,3,3,3].",
        "The minimum and maximum are 1 and 3 respectively.",
        "The mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2. 375.",
        "Since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2. 5.",
        "The mode is 3 as it appears the most in the sample.",
        "Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "Output: [1. 00000,4. 00000,2. 18182,2. 00000,1. 00000]",
        "Explanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].",
        "The minimum and maximum are 1 and 4 respectively.",
        "The mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2. 18181818... (for display purposes, the output shows the rounded number 2. 18182).",
        "Since the size of the sample is odd, the median is the middle element 2.",
        "The mode is 1 as it appears the most in the sample.",
        ""
    ],
    "constraints": [
        "minimum: The minimum element in the sample. maximum: The maximum element in the sample. mean: The average of the sample",
        " calculated as the total sum of all elements divided by the total number of elements. median:\n\t\nIf the sample has an odd number of elements",
        " then the median is the middle element once the sample is sorted.\nIf the sample has an even number of elements",
        " then the median is the average of the two middle elements once the sample is sorted.\n\nIf the sample has an odd number of elements",
        " then the median is the middle element once the sample is sorted. If the sample has an even number of elements",
        " then the median is the average of the two middle elements once the sample is sorted. mode: The number that appears the most in the sample. It is guaranteed to be unique. count. length == 2560 <= count[i] <= 1091 <= sum(count) <= 109The mode of the sample that count represents is unique."
    ]
},
{
    "id": "1094",
    "title": "Car Pooling",
    "question": "There is a car with capacity empty seats.\n The vehicle only drives east (i.\ne.\n, it cannot turn around and drive west).\nYou are given the integer capacity and an array trips where trip[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively.\n The locations are given as the number of kilometers due east from the car's initial location.\nReturn true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.",
    "examples": [
        "Input: trips = [[2,1,5],[3,3,7]], capacity = 4",
        "Output: false",
        "Input: trips = [[2,1,5],[3,3,7]], capacity = 5",
        "Output: true",
        "Input: trips = [[2,1,5],[3,5,7]], capacity = 3",
        "Output: true",
        "Input: trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 <= trips. length <= 1000trips[i]. length == 31 <= numPassengersi <= 1000 <= fromi < toi <= 10001 <= capacity <= 105"
    ]
},
{
    "id": "1104",
    "title": "Path In Zigzag Labelled Binary Tree",
    "question": "In an infinite binary tree where every node has two children, the nodes are labelled in row order.\nIn the odd numbered rows (ie.\n, the first, third, fifth,.\n.\n.\n), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,.\n.\n.\n), the labelling is right to left.\nGiven the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.",
    "examples": [
        "Input: label = 14",
        "Output: [1,3,4,14]",
        "Input: label = 26",
        "Output: [1,2,6,10,26]",
        ""
    ],
    "constraints": [
        "1 <= label <= 10^6"
    ]
},
{
    "id": "1105",
    "title": "Filling Bookcase Shelves",
    "question": "You are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book.\n You are also given an integer shelfWidth.\nWe want to place these books in order onto bookcase shelves that have a total width shelfWidth.\nWe choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.\n We repeat this process until there are no more books to place.\nNote that at each step of the above process, the order of the books we place is the same order as the given sequence of books.\nReturn the minimum possible height that the total bookshelf can be after placing shelves in this manner.",
    "examples": [
        "Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4",
        "Output: 6",
        "Explanation:",
        "The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.",
        "Notice that book number 2 does not have to be on the first shelf.",
        "Input: books = [[1,3],[2,4],[3,2]], shelfWidth = 6",
        "Output: 4",
        ""
    ],
    "constraints": [
        "For example",
        " if we have an ordered list of 5 books",
        " we might place the first and second book onto the first shelf",
        " the third book on the second shelf",
        " and the fourth and fifth book on the last shelf. 1 <= books. length <= 10001 <= thicknessi <= shelfWidth <= 10001 <= heighti <= 1000"
    ]
},
{
    "id": "409",
    "title": "Longest Palindrome",
    "question": "Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\nLetters are case sensitive, for example, \"Aa\" is not considered a palindrome here.",
    "examples": [
        "Input: s = \"abccccdd\"",
        "Output: 7",
        "Explanation:",
        "One longest palindrome that can be built is \"dccaccd\", whose length is 7.",
        "Input: s = \"a\"",
        "Output: 1",
        "Input: s = \"bb\"",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 2000s consists of lowercase and/or uppercase English letters only."
    ]
},
{
    "id": "1109",
    "title": "Corporate Flight Bookings",
    "question": "There are n flights that are labeled from 1 to n.\nYou are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.\nReturn an array answer of length n, where answer[i] is the total number of seats reserved for flight i.",
    "examples": [
        "Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5",
        "Output: [10,55,45,25,25]",
        "Explanation:",
        "Flight labels:        1   2   3   4   5",
        "Booking 1 reserved:  10  10",
        "Booking 2 reserved:      20  20",
        "Booking 3 reserved:      25  25  25  25",
        "Total seats:         10  55  45  25  25",
        "Hence, answer = [10,55,45,25,25]",
        "Input: bookings = [[1,2,10],[2,2,15]], n = 2",
        "Output: [10,25]",
        "Explanation:",
        "Flight labels:        1   2",
        "Booking 1 reserved:  10  10",
        "Booking 2 reserved:      15",
        "Total seats:         10  25",
        "Hence, answer = [10,25]",
        "",
        ""
    ],
    "constraints": [
        "1 <= n <= 2 * 1041 <= bookings. length <= 2 * 104bookings[i]. length == 31 <= firsti <= lasti <= n1 <= seatsi <= 104"
    ]
},
{
    "id": "1110",
    "title": "Delete Nodes And Return Forest",
    "question": "Given the root of a binary tree, each node in the tree has a distinct value.\nAfter deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).\nReturn the roots of the trees in the remaining forest.\n You may return the result in any order.",
    "examples": [
        "Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]",
        "Output: [[1,2,null,4],[6],[7]]",
        "Input: root = [1,2,4,null,3], to_delete = [3]",
        "Output: [[1,2,4]]",
        ""
    ],
    "constraints": [
        "The number of nodes in the given tree is at most 1000. Each node has a distinct value between 1 and 1000. to_delete. length <= 1000to_delete contains distinct values between 1 and 1000."
    ]
},
{
    "id": "1111",
    "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
    "question": "A string is a valid parentheses string (denoted VPS) if and only if it consists of \"(\" and \")\" characters only, and:We can similarly define the nesting depth depth(S) of any VPS S as follows:For example,  \"\", \"()()\", and \"()(()())\" are VPS's (with nesting depths 0, 1, and 2), and \")(\" and \"(()\" are not VPS's.\n Given a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.\nlength + B.\nlength = seq.\nlength).\nNow choose any such A and B such that max(depth(A), depth(B)) is the minimum possible value.\nReturn an answer array (of length seq.\nlength) that encodes such a choice of A and B:  answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.\n  Note that even though multiple answers may exist, you may return any of them.",
    "examples": [
        "Input: seq = \"(()())\"",
        "Output: [0,1,1,1,1,0]",
        "Input: seq = \"()(())()\"",
        "Output: [0,0,0,1,1,0,1,1]",
        ""
    ],
    "constraints": [
        "It is the empty string",
        " orIt can be written as AB (A concatenated with B)",
        " where A and B are VPS's",
        " orIt can be written as (A)",
        " where A is a VPS. depth(\"\") = 0depth(A + B) = max(depth(A)",
        " depth(B))",
        " where A and B are VPS'sdepth(\"(\" + A + \")\") = 1 + depth(A)",
        " where A is a VPS. 1 <= seq. size <= 10000"
    ]
},
{
    "id": "1123",
    "title": "Lowest Common Ancestor of Deepest Leaves",
    "question": "Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.\nRecall that:Note: This question is the same as 865: https://leetcode.\ncom/problems/smallest-subtree-with-all-the-deepest-nodes/",
    "examples": [
        "Input: root = [3,5,1,6,2,0,8,null,null,7,4]",
        "Output: [2,7,4]",
        "Explanation: We return the node with value 2, colored in yellow in the diagram.",
        "The nodes coloured in blue are the deepest leaf-nodes of the tree.",
        "Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3. Input: root = [1]",
        "Output: [1]",
        "Explanation: The root is the deepest node in the tree, and it's the lca of itself.",
        "Input: root = [0,1,3,null,2]",
        "Output: [2]",
        "Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself.",
        ""
    ],
    "constraints": [
        "The node of a binary tree is a leaf if and only if it has no childrenThe depth of the root of the tree is 0. if the depth of a node is d",
        " the depth of each of its children is d + 1. The lowest common ancestor of a set S of nodes",
        " is the node A with the largest depth such that every node in S is in the subtree with root A. The number of nodes in the tree will be in the range [1",
        " 1000]. 0 <= Node. val <= 1000The values of the nodes in the tree are unique."
    ]
},
{
    "id": "1124",
    "title": "Longest Well-Performing Interval",
    "question": "We are given hours, a list of the number of hours worked per day for a given employee.\nA day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.\nA well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\nReturn the length of the longest well-performing interval.",
    "examples": [
        "Input: hours = [9,9,6,0,6,6,9]",
        "Output: 3",
        "Explanation: The longest well-performing interval is [9,9,6].",
        "Input: hours = [6,6,6]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= hours. length <= 1040 <= hours[i] <= 16"
    ]
},
{
    "id": "1129",
    "title": "Shortest Path with Alternating Colors",
    "question": "Consider a directed graph, with nodes labelled 0, 1, .\n.\n.\n, n-1.\n  In this graph, each edge is either red or blue, and there could be self-edges or parallel edges.\nEach [i, j] in red_edges denotes a red directed edge from node i to node j.\n  Similarly, each [i, j] in blue_edges denotes a blue directed edge from node i to node j.\nReturn an array answer of length n, where each answer[X] is the length of the shortest path from node 0 to node X such that the edge colors alternate along the path (or -1 if such a path doesn't exist).",
    "examples": [
        "Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []",
        "Output: [0,1,-1]",
        "Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]",
        "Output: [0,1,-1]",
        "Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]",
        "Output: [0,-1,-1]",
        "Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]",
        "Output: [0,1,2]",
        "Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]",
        "Output: [0,1,1]",
        ""
    ],
    "constraints": [
        "1 <= n <= 100red_edges. length <= 400blue_edges. length <= 400red_edges[i]. length == blue_edges[i]. length == 20 <= red_edges[i][j]",
        " blue_edges[i][j] < n"
    ]
},
{
    "id": "1130",
    "title": "Minimum Cost Tree From Leaf Values",
    "question": "Given an array arr of positive integers, consider all binary trees such that:Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.\n It is guaranteed this sum fits into a 32-bit integer.\nA node is a leaf if and only if it has zero children.",
    "examples": [
        "Input: arr = [6,2,4]",
        "Output: 32",
        "Explanation: There are two possible trees shown.",
        "The first has a non-leaf node sum 36, and the second has non-leaf node sum 32.",
        "Input: arr = [4,11]",
        "Output: 44",
        ""
    ],
    "constraints": [
        "Each node has either 0 or 2 children;The values of arr correspond to the values of each leaf in an in-order traversal of the tree. The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree",
        " respectively. 2 <= arr. length <= 401 <= arr[i] <= 15It is guaranteed that the answer fits into a 32-bit signed integer (i. e.",
        " it is less than 231)."
    ]
},
{
    "id": "1131",
    "title": "Maximum of Absolute Value Expression",
    "question": "Given two arrays of integers with equal lengths, return the maximum value of:|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|where the maximum is taken over all 0 <= i, j < arr1.\nlength.",
    "examples": [
        "Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]",
        "Output: 13",
        "Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]",
        "Output: 20",
        ""
    ],
    "constraints": [
        "2 <= arr1. length == arr2. length <= 40000-10^6 <= arr1[i]",
        " arr2[i] <= 10^6"
    ]
},
{
    "id": "1138",
    "title": "Alphabet Board Path",
    "question": "On an alphabet board, we start at position (0, 0), corresponding to character board[0][0].\nHere, board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"], as shown in the diagram below.\nWe may make the following moves:(Here, the only positions that exist on the board are positions with letters on them.\n)Return a sequence of moves that makes our answer equal to target in the minimum number of moves.\n  You may return any path that does so.",
    "examples": [
        "Input: target = \"leet\"",
        "Output: \"DDR!UURRR!!DDD!\"",
        "Input: target = \"code\"",
        "Output: \"RR!DDRR!UUL!R!\"",
        ""
    ],
    "constraints": [
        "'U' moves our position up one row",
        " if the position exists on the board;'D' moves our position down one row",
        " if the position exists on the board;'L' moves our position left one column",
        " if the position exists on the board;'R' moves our position right one column",
        " if the position exists on the board;'!' adds the character board[r][c] at our current position (r",
        " c) to the answer. 1 <= target. length <= 100target consists only of English lowercase letters."
    ]
},
{
    "id": "1139",
    "title": "Largest 1-Bordered Square",
    "question": "Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.",
    "examples": [
        "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "Output: 9",
        "Input: grid = [[1,1,0,0]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= grid. length <= 1001 <= grid[0]. length <= 100grid[i][j] is 0 or 1"
    ]
},
{
    "id": "412",
    "title": "Fizz Buzz",
    "question": "Given an integer n, return a string array answer (1-indexed) where:",
    "examples": [
        "Input: n = 3",
        "Output: [\"1\",\"2\",\"Fizz\"]",
        "Input: n = 5",
        "Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]",
        "Input: n = 15",
        "Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]",
        ""
    ],
    "constraints": [
        "answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5. answer[i] == \"Fizz\" if i is divisible by 3. answer[i] == \"Buzz\" if i is divisible by 5. answer[i] == i if non of the above conditions are true. 1 <= n <= 104"
    ]
},
{
    "id": "1140",
    "title": "Stone Game II",
    "question": "Alice and Bob continue their games with piles of stones.\n  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].\n  The objective of the game is to end with the most stones.\n Alice and Bob take turns, with Alice starting first.\n  Initially, M = 1.\nOn each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.\n  Then, we set M = max(M, X).\nThe game continues until all the stones have been taken.\nAssuming Alice and Bob play optimally, return the maximum number of stones Alice can get.",
    "examples": [
        "Input: piles = [2,7,9,4,4]",
        "Output: 10",
        "Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. ",
        "Input: piles = [1,2,3,4,5,100]",
        "Output: 104",
        ""
    ],
    "constraints": [
        "1 <= piles. length <= 1001 <= piles[i] <= 104"
    ]
},
{
    "id": "1143",
    "title": "Longest Common Subsequence",
    "question": "Given two strings text1 and text2, return the length of their longest common subsequence.\n If there is no common subsequence, return 0.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nA common subsequence of two strings is a subsequence that is common to both strings.",
    "examples": [
        "Input: text1 = \"abcde\", text2 = \"ace\" ",
        "Output: 3  ",
        "Explanation: The longest common subsequence is \"ace\" and its length is 3.",
        "Input: text1 = \"abc\", text2 = \"abc\"",
        "Output: 3",
        "Explanation: The longest common subsequence is \"abc\" and its length is 3.",
        "Input: text1 = \"abc\", text2 = \"def\"",
        "Output: 0",
        "Explanation: There is no such common subsequence, so the result is 0.",
        ""
    ],
    "constraints": [
        "For example",
        " \"ace\" is a subsequence of \"abcde\". 1 <= text1. length",
        " text2. length <= 1000text1 and text2 consist of only lowercase English characters."
    ]
},
{
    "id": "1144",
    "title": "Decrease Elements To Make Array Zigzag",
    "question": "Given an array nums of integers, a move consists of choosing any element and decreasing it by 1.\nAn array A is a zigzag array if either:Return the minimum number of moves to transform the given array nums into a zigzag array.",
    "examples": [
        "Input: nums = [1,2,3]",
        "Output: 2",
        "Explanation: We can decrease 2 to 0 or 3 to 1.",
        "Input: nums = [9,6,1,6,2]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "Every even-indexed element is greater than adjacent elements",
        " ie. A[0] > A[1] < A[2] > A[3] < A[4] > ... OR",
        " every odd-indexed element is greater than adjacent elements",
        " ie. A[0] < A[1] > A[2] < A[3] > A[4] < ... 1 <= nums. length <= 10001 <= nums[i] <= 1000"
    ]
},
{
    "id": "1145",
    "title": "Binary Tree Coloring Game",
    "question": "Two players play a turn based game on a binary tree.\n We are given the root of this binary tree, and the number of nodes n in the tree.\n n is odd, and each node has a distinct value from 1 to n.\nInitially, the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x.\n The first player colors the node with value x red, and the second player colors the node with value y blue.\nThen, the players take turns starting with the first player.\n In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.\n)If (and only if) a player cannot choose such a node in this way, they must pass their turn.\n If both players pass their turn, the game ends, and the winner is the player that colored more nodes.\nYou are the second player.\n If it is possible to choose such a y to ensure you win the game, return true.\n If it is not possible, return false.",
    "examples": [
        "Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3",
        "Output: true",
        "Explanation: The second player can choose the node with value 2.",
        "Input: root = [1,2,3], n = 3, x = 1",
        "Output: false",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is n. 1 <= x <= n <= 100n is odd. 1 <= Node. val <= nAll the values of the tree are unique."
    ]
},
{
    "id": "1146",
    "title": "Snapshot Array",
    "question": "Implement a SnapshotArray that supports the following interface:",
    "examples": [
        "Input: [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]",
        "[[3],[0,5],[],[0,6],[0,0]]",
        "Output: [null,null,0,null,5]",
        "Explanation: ",
        "SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3",
        "snapshotArr. set(0,5);  // Set array[0] = 5",
        "snapshotArr. snap();  // Take a snapshot, return snap_id = 0",
        "snapshotArr. set(0,6);",
        "snapshotArr. get(0,0);  // Get the value of array[0] with snap_id = 0, return 5"
    ],
    "constraints": [
        "SnapshotArray(int length) initializes an array-like data structure with the given length.  Initially",
        " each element equals 0. void set(index",
        " val) sets the element at the given index to be equal to val. int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1. int get(index",
        " snap_id) returns the value at the given index",
        " at the time we took the snapshot with the given snap_id1 <= length <= 50000At most 50000 calls will be made to set",
        " snap",
        " and get. 0 <= index < length0 <= snap_id < (the total number of times we call snap())0 <= val <= 10^9"
    ]
},
{
    "id": "1155",
    "title": "Number of Dice Rolls With Target Sum",
    "question": "You have d dice and each die has f faces numbered 1, 2, .\n.\n.\n, f.\nReturn the number of possible ways (out of fd total ways) modulo 109 + 7 to roll the dice so the sum of the face-up numbers equals target.",
    "examples": [
        "Input: d = 1, f = 6, target = 3",
        "Output: 1",
        "Explanation: ",
        "You throw one die with 6 faces.  There is only one way to get a sum of 3.",
        "Input: d = 2, f = 6, target = 7",
        "Output: 6",
        "Explanation: ",
        "You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:",
        "1+6, 2+5, 3+4, 4+3, 5+2, 6+1.",
        "Input: d = 2, f = 5, target = 10",
        "Output: 1",
        "Explanation: ",
        "You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.",
        "Input: d = 1, f = 2, target = 3",
        "Output: 0",
        "Explanation: ",
        "You throw one die with 2 faces.  There is no way to get a sum of 3.",
        "Input: d = 30, f = 30, target = 500",
        "Output: 222616187",
        "Explanation: ",
        "The answer must be returned modulo 10^9 + 7.",
        ""
    ],
    "constraints": [
        "1 <= d",
        " f <= 301 <= target <= 1000"
    ]
},
{
    "id": "1156",
    "title": "Swap For Longest Repeated Character Substring",
    "question": "Given a string text, we are allowed to swap two of the characters in the string.\n Find the length of the longest substring with repeated characters.",
    "examples": [
        "Input: text = \"ababa\"",
        "Output: 3",
        "Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\", which its length is 3.",
        "Input: text = \"aaabaaa\"",
        "Output: 6",
        "Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\", which its length is 6.",
        "Input: text = \"aaabbaaa\"",
        "Output: 4",
        "Input: text = \"aaaaa\"",
        "Output: 5",
        "Explanation: No need to swap, longest repeated character substring is \"aaaaa\", length is 5.",
        "Input: text = \"abcdef\"",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= text. length <= 20000text consist of lowercase English characters only."
    ]
},
{
    "id": "1161",
    "title": "Maximum Level Sum of a Binary Tree",
    "question": "Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.\nReturn the smallest level x such that the sum of all the values of nodes at level x is maximal.",
    "examples": [
        "Input: root = [1,7,0,7,-8,null,null]",
        "Output: 2",
        "Explanation: ",
        "Level 1 sum = 1.",
        "Level 2 sum = 7 + 0 = 7.",
        "Level 3 sum = 7 + -8 = -1.",
        "So we return the level with the maximum sum which is level 2.",
        "Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104].-105 <= Node. val <= 105"
    ]
},
{
    "id": "1162",
    "title": "As Far from Land as Possible",
    "question": "Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance.\n If no land or water exists in the grid, return -1.\nThe distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.",
    "examples": [
        "Input: grid = [[1,0,1],[0,0,0],[1,0,1]]",
        "Output: 2",
        "Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.",
        "Input: grid = [[1,0,0],[0,0,0],[0,0,0]]",
        "Output: 4",
        "Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.",
        ""
    ],
    "constraints": [
        "n == grid. lengthn == grid[i]. length1 <= n <= 100grid[i][j] is 0 or 1"
    ]
},
{
    "id": "1169",
    "title": "Invalid Transactions",
    "question": "A transaction is possibly invalid if:You are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.\nReturn a list of transactions that are possibly invalid.\n You may return the answer in any order.",
    "examples": [
        "Input: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
        "Output: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]",
        "Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too. Input: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]",
        "Output: [\"alice,50,1200,mtv\"]",
        "Input: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]",
        "Output: [\"bob,50,1200,mtv\"]",
        ""
    ],
    "constraints": [
        "the amount exceeds $1000",
        " or;if it occurs within (and including) 60 minutes of another transaction with the same name in a different city. transactions. length <= 1000Each transactions[i] takes the form \"{name}",
        "{time}",
        "{amount}",
        "{city}\"Each {name} and {city} consist of lowercase English letters",
        " and have lengths between 1 and 10. Each {time} consist of digits",
        " and represent an integer between 0 and 1000. Each {amount} consist of digits",
        " and represent an integer between 0 and 2000."
    ]
},
{
    "id": "414",
    "title": "Third Maximum Number",
    "question": "Given an integer array nums, return the third distinct maximum number in this array.\n If the third maximum does not exist, return the maximum number.",
    "examples": [
        "Input: nums = [3,2,1]",
        "Output: 1",
        "Explanation:",
        "The first distinct maximum is 3.",
        "The second distinct maximum is 2.",
        "The third distinct maximum is 1.",
        "Input: nums = [1,2]",
        "Output: 2",
        "Explanation:",
        "The first distinct maximum is 2.",
        "The second distinct maximum is 1.",
        "The third distinct maximum does not exist, so the maximum (2) is returned instead.",
        "Input: nums = [2,2,3,1]",
        "Output: 1",
        "Explanation:",
        "The first distinct maximum is 3.",
        "The second distinct maximum is 2 (both 2's are counted together since they have the same value).",
        "The third distinct maximum is 1.",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 104-231 <= nums[i] <= 231 - 1"
    ]
},
{
    "id": "1170",
    "title": "Compare Strings by Frequency of the Smallest Character",
    "question": "Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s.\n For example, if s = \"dcce\" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.\nYou are given an array of strings words and another array of query strings queries.\n For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words.\nReturn an integer array answer, where each answer[i] is the answer to the ith query.",
    "examples": [
        "Input: queries = [\"cbd\"], words = [\"zaaaz\"]",
        "Output: [1]",
        "Explanation: On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\").",
        "Input: queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]",
        "Output: [1,2]",
        "Explanation: On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\").",
        ""
    ],
    "constraints": [
        "1 <= queries. length <= 20001 <= words. length <= 20001 <= queries[i]. length",
        " words[i]. length <= 10queries[i][j]",
        " words[i][j] consist of lowercase English letters."
    ]
},
{
    "id": "1171",
    "title": "Remove Zero Sum Consecutive Nodes from Linked List",
    "question": "Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.\nAfter doing so, return the head of the final linked list.\n  You may return any such answer.\n (Note that in the examples below, all sequences are serializations of ListNode objects.\n)",
    "examples": [
        "Input: head = [1,2,-3,3,1]",
        "Output: [3,1]",
        "Note: The answer [1,2,1] would also be accepted.",
        "Input: head = [1,2,3,-3,4]",
        "Output: [1,2,4]",
        "Input: head = [1,2,3,-3,-2]",
        "Output: [1]",
        ""
    ],
    "constraints": [
        "The given linked list will contain between 1 and 1000 nodes. Each node in the linked list has -1000 <= node. val <= 1000."
    ]
},
{
    "id": "1177",
    "title": "Can Make Palindrome from Substring",
    "question": "You are given a string s and array queries where queries[i] = [lefti, righti, ki].\n We may rearrange the substring s[lefti.\n.\n.\nrighti] for each query and then choose up to ki of them to replace with any lowercase English letter.\nIf the substring is possible to be a palindrome string after the operations above, the result of the query is true.\n Otherwise, the result is false.\nReturn a boolean array answer where answer[i] is the result of the ith query queries[i].\nNote that each letter is counted individually for replacement, so if, for example s[lefti.\n.\n.\nrighti] = \"aaa\", and ki = 2, we can only replace two of the letters.\n Also, note that no query modifies the initial string s.\n Example :",
    "examples": [
        "Input: s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]",
        "Output: [true,false,false,true,true]",
        "Explanation:",
        "queries[0]: substring = \"d\", is palidrome.",
        "queries[1]: substring = \"bc\", is not palidrome.",
        "queries[2]: substring = \"abcd\", is not palidrome after replacing only 1 character.",
        "queries[3]: substring = \"abcd\", could be changed to \"abba\" which is palidrome. Also this can be changed to \"baab\" first rearrange it \"bacd\" then replace \"cd\" with \"ab\".",
        "queries[4]: substring = \"abcda\", could be changed to \"abcba\" which is palidrome.",
        "Input: s = \"lyb\", queries = [[0,1,0],[2,2,1]]",
        "Output: [false,true]",
        ""
    ],
    "constraints": [
        "1 <= s. length",
        " queries. length <= 1050 <= lefti <= righti < s. length0 <= ki <= s. lengths consists of lowercase English letters."
    ]
},
{
    "id": "1186",
    "title": "Maximum Subarray Sum with One Deletion",
    "question": "Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion.\n In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.\nNote that the subarray needs to be non-empty after deleting one element.",
    "examples": [
        "Input: arr = [1,-2,0,3]",
        "Output: 4",
        "Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value. Input: arr = [1,-2,-2,3]",
        "Output: 3",
        "Explanation: We just choose [3] and it's the maximum sum.",
        "Input: arr = [-1,-1,-1,-1]",
        "Output: -1",
        "Explanation: The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 105-104 <= arr[i] <= 104"
    ]
},
{
    "id": "1190",
    "title": "Reverse Substrings Between Each Pair of Parentheses",
    "question": "You are given a string s that consists of lower case English letters and brackets.\n Reverse the strings in each pair of matching parentheses, starting from the innermost one.\nYour result should not contain any brackets.",
    "examples": [
        "Input: s = \"(abcd)\"",
        "Output: \"dcba\"",
        "Input: s = \"(u(love)i)\"",
        "Output: \"iloveu\"",
        "Explanation: The substring \"love\" is reversed first, then the whole string is reversed.",
        "Input: s = \"(ed(et(oc))el)\"",
        "Output: \"leetcode\"",
        "Explanation: First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.",
        "Input: s = \"a(bcdefghijkl(mno)p)q\"",
        "Output: \"apmnolkjihgfedcbq\"",
        ""
    ],
    "constraints": [
        "0 <= s. length <= 2000s only contains lower case English characters and parentheses. It's guaranteed that all parentheses are balanced."
    ]
},
{
    "id": "1191",
    "title": "K-Concatenation Maximum Sum",
    "question": "Given an integer array arr and an integer k, modify the array by repeating it k times.\nFor example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].\nReturn the maximum sub-array sum in the modified array.\n Note that the length of the sub-array can be 0 and its sum in that case is 0.\nAs the answer can be very large, return the answer modulo 109 + 7.",
    "examples": [
        "Input: arr = [1,2], k = 3",
        "Output: 9",
        "Input: arr = [1,-2,1], k = 5",
        "Output: 2",
        "Input: arr = [-1,-2], k = 7",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1051 <= k <= 105-104 <= arr[i] <= 104"
    ]
},
{
    "id": "1201",
    "title": "Ugly Number III",
    "question": "An ugly number is a positive integer that is divisible by a, b, or c.\nGiven four integers n, a, b, and c, return the nth ugly number.",
    "examples": [
        "Input: n = 3, a = 2, b = 3, c = 5",
        "Output: 4",
        "Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.",
        "Input: n = 4, a = 2, b = 3, c = 4",
        "Output: 6",
        "Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.",
        "Input: n = 5, a = 2, b = 11, c = 13",
        "Output: 10",
        "Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.",
        "Input: n = 1000000000, a = 2, b = 217983653, c = 336916467",
        "Output: 1999999984",
        ""
    ],
    "constraints": [
        "1 <= n",
        " a",
        " b",
        " c <= 1091 <= a * b * c <= 1018It is guaranteed that the result will be in range [1",
        " 2 * 109]."
    ]
},
{
    "id": "1202",
    "title": "Smallest String With Swaps",
    "question": "You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.\nYou can swap the characters at any pair of indices in the given pairs any number of times.\nReturn the lexicographically smallest string that s can be changed to after using the swaps.",
    "examples": [
        "Input: s = \"dcab\", pairs = [[0,3],[1,2]]",
        "Output: \"bacd\"",
        "Explaination: ",
        "Swap s[0] and s[3], s = \"bcad\"",
        "Swap s[1] and s[2], s = \"bacd\"",
        "Input: s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]",
        "Output: \"abcd\"",
        "Explaination: ",
        "Swap s[0] and s[3], s = \"bcad\"",
        "Swap s[0] and s[2], s = \"acbd\"",
        "Swap s[1] and s[2], s = \"abcd\"Input: s = \"cba\", pairs = [[0,1],[1,2]]",
        "Output: \"abc\"",
        "Explaination: ",
        "Swap s[0] and s[1], s = \"bca\"",
        "Swap s[1] and s[2], s = \"bac\"",
        "Swap s[0] and s[1], s = \"abc\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 10^50 <= pairs. length <= 10^50 <= pairs[i][0]",
        " pairs[i][1] < s. lengths only contains lower case English letters."
    ]
},
{
    "id": "1208",
    "title": "Get Equal Substrings Within Budget",
    "question": "You are given two strings s and t of the same length.\n You want to change s to t.\n Changing the i-th character of s to i-th character of t costs |s[i] - t[i]| that is, the absolute difference between the ASCII values of the characters.\nYou are also given an integer maxCost.\nReturn the maximum length of a substring of s that can be changed to be the same as the corresponding substring of twith a cost less than or equal to maxCost.\nIf there is no substring from s that can be changed to its corresponding substring from t, return 0.",
    "examples": [
        "Input: s = \"abcd\", t = \"bcdf\", maxCost = 3",
        "Output: 3",
        "Explanation: \"abc\" of s can change to \"bcd\". That costs 3, so the maximum length is 3. Input: s = \"abcd\", t = \"cdef\", maxCost = 3",
        "Output: 1",
        "Explanation: Each character in s costs 2 to change to charactor in t, so the maximum length is 1.",
        "Input: s = \"abcd\", t = \"acde\", maxCost = 0",
        "Output: 1",
        "Explanation: You can't make any change, so the maximum length is 1.",
        ""
    ],
    "constraints": [
        "1 <= s. length",
        " t. length <= 10^50 <= maxCost <= 10^6s and t only contain lower case English letters."
    ]
},
{
    "id": "1209",
    "title": "Remove All Adjacent Duplicates in String II",
    "question": "You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.\nWe repeatedly make k duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made.\n It is guaranteed that the answer is unique.",
    "examples": [
        "Input: s = \"abcd\", k = 2",
        "Output: \"abcd\"",
        "Explanation: There's nothing to delete. Input: s = \"deeedbbcccbdaa\", k = 3",
        "Output: \"aa\"",
        "Explanation: ",
        "First delete \"eee\" and \"ccc\", get \"ddbbbdaa\"",
        "Then delete \"bbb\", get \"dddaa\"",
        "Finally delete \"ddd\", get \"aa\"Input: s = \"pbbcggttciiippooaais\", k = 2",
        "Output: \"ps\"",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 1052 <= k <= 104s only contains lower case English letters."
    ]
},
{
    "id": "415",
    "title": "Add Strings",
    "question": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger).\n You must also not convert the inputs to integers directly.",
    "examples": [
        "Input: num1 = \"11\", num2 = \"123\"",
        "Output: \"134\"",
        "Input: num1 = \"456\", num2 = \"77\"",
        "Output: \"533\"",
        "Input: num1 = \"0\", num2 = \"0\"",
        "Output: \"0\"",
        ""
    ],
    "constraints": [
        "1 <= num1. length",
        " num2. length <= 104num1 and num2 consist of only digits. num1 and num2 don't have any leading zeros except for the zero itself."
    ]
},
{
    "id": "1218",
    "title": "Longest Arithmetic Subsequence of Given Difference",
    "question": "Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.\nA subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.",
    "examples": [
        "Input: arr = [1,2,3,4], difference = 1",
        "Output: 4",
        "Explanation: The longest arithmetic subsequence is [1,2,3,4]. Input: arr = [1,3,5,7], difference = 1",
        "Output: 1",
        "Explanation: The longest arithmetic subsequence is any single element.",
        "Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2",
        "Output: 4",
        "Explanation: The longest arithmetic subsequence is [7,5,3,1].",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 105-104 <= arr[i]",
        " difference <= 104"
    ]
},
{
    "id": "1219",
    "title": "Path with Maximum Gold",
    "question": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:",
    "examples": [
        "Input: grid = [[0,6,0],[5,8,7],[0,9,0]]",
        "Output: 24",
        "Explanation:",
        "[[0,6,0],",
        " [5,8,7],",
        " [0,9,0]]",
        "Path to get the maximum gold, 9 -> 8 -> 7.",
        "Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]",
        "Output: 28",
        "Explanation:",
        "[[1,0,7],",
        " [2,0,6],",
        " [3,4,5],",
        " [0,3,0],",
        " [9,0,20]]",
        "Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.",
        ""
    ],
    "constraints": [
        "Every time you are located in a cell you will collect all the gold in that cell. From your position",
        " you can walk one step to the left",
        " right",
        " up",
        " or down. You can't visit the same cell more than once. Never visit a cell with 0 gold. You can start and stop collecting gold from any position in the grid that has some gold. m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 150 <= grid[i][j] <= 100There are at most 25 cells containing gold."
    ]
},
{
    "id": "1222",
    "title": "Queens That Can Attack the King",
    "question": "On an 8x8 chessboard, there can be multiple Black Queens and one White King.\nGiven an array of integer coordinates queens that represents the positions of the Black Queens, and a pair of coordinates king that represent the position of the White King, return the coordinates of all the queens (in any order) that can attack the King.",
    "examples": [
        "Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]",
        "Output: [[0,1],[1,0],[3,3]]",
        "Explanation:  ",
        "The queen at [0,1] can attack the king cause they're in the same row. ",
        "The queen at [1,0] can attack the king cause they're in the same column. ",
        "The queen at [3,3] can attack the king cause they're in the same diagnal. ",
        "The queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1]. ",
        "The queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0]. ",
        "The queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king.",
        "Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]",
        "Output: [[2,2],[3,4],[4,4]]",
        "Input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]",
        "Output: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]",
        ""
    ],
    "constraints": [
        "1 <= queens. length <= 63queens[i]. length == 20 <= queens[i][j] < 8king. length == 20 <= king[0]",
        " king[1] < 8At most one piece is allowed in a cell."
    ]
},
{
    "id": "1227",
    "title": "Airplane Seat Assignment Probability",
    "question": "n passengers board an airplane with exactly n seats.\n The first passenger has lost the ticket and picks a seat randomly.\n But after that, the rest of passengers will:What is the probability that the n-th person can get his own seat?",
    "examples": [
        "Input: n = 1",
        "Output: 1. 00000",
        "Explanation: The first person can only get the first seat. Input: n = 2",
        "Output: 0. 50000",
        "Explanation: The second person has a probability of 0. 5 to get the second seat (when first person gets the first seat).",
        ""
    ],
    "constraints": [
        "Take their own seat if it is still available",
        " Pick other seats randomly when they find their seat occupied 1 <= n <= 10^5"
    ]
},
{
    "id": "1233",
    "title": "Remove Sub-Folders from the Filesystem",
    "question": "Given a list of folders, remove all sub-folders in those folders and return in any order the folders after removing.\nIf a folder[i] is located within another folder[j], it is called a sub-folder of it.\nThe format of a path is one or more concatenated strings of the form: / followed by one or more lowercase English letters.\n For example, /leetcode and /leetcode/problems are valid paths while an empty string and / are not.",
    "examples": [
        "Input: folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]",
        "Output: [\"/a\",\"/c/d\",\"/c/f\"]",
        "Explanation: Folders \"/a/b/\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem.",
        "Input: folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]",
        "Output: [\"/a\"]",
        "Explanation: Folders \"/a/b/c\" and \"/a/b/d/\" will be removed because they are subfolders of \"/a\".",
        "Input: folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]",
        "Output: [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]",
        ""
    ],
    "constraints": [
        "1 <= folder. length <= 4 * 10^42 <= folder[i]. length <= 100folder[i] contains only lowercase letters and '/'folder[i] always starts with character '/'Each folder name is unique."
    ]
},
{
    "id": "1234",
    "title": "Replace the Substring for Balanced String",
    "question": "You are given a string containing only 4 kinds of characters 'Q', 'W', 'E' and 'R'.\nA string is said to be balanced if each of its characters appears n/4 times where n is the length of the string.\nReturn the minimum length of the substring that can be replaced with any other string of the same length to make the original string s balanced.\nReturn 0 if the string is already balanced.",
    "examples": [
        "Input: s = \"QWER\"",
        "Output: 0",
        "Explanation: s is already balanced. Input: s = \"QQWE\"",
        "Output: 1",
        "Explanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.",
        "Input: s = \"QQQW\"",
        "Output: 2",
        "Explanation: We can replace the first \"QQ\" to \"ER\". ",
        "Input: s = \"QQQQ\"",
        "Output: 3",
        "Explanation: We can replace the last 3 'Q' to make s = \"QWER\".",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 10^5s. length is a multiple of 4s contains only 'Q'",
        " 'W'",
        " 'E' and 'R'."
    ]
},
{
    "id": "1237",
    "title": "Find Positive Integer Solution for a Given Equation",
    "question": "Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z.\n You may return the pairs in any order.\nWhile the exact formula is hidden, the function is monotonically increasing, i.\ne.\n:The function interface is defined like this:We will judge your solution as follows:",
    "examples": [
        "interface CustomFunction {",
        "public:",
        "  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.",
        "  int f(int x, int y);",
        "};",
        "Input: function_id = 1, z = 5",
        "Output: [[1,4],[2,3],[3,2],[4,1]]",
        "Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y.",
        "The following positive integer values of x and y make f(x, y) equal to 5:",
        "x=1, y=4 -> f(1, 4) = 1 + 4 = 5.",
        "x=2, y=3 -> f(2, 3) = 2 + 3 = 5.",
        "x=3, y=2 -> f(3, 2) = 3 + 2 = 5.",
        "x=4, y=1 -> f(4, 1) = 4 + 1 = 5.",
        "Input: function_id = 2, z = 5",
        "Output: [[1,5],[5,1]]",
        "Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y.",
        "The following positive integer values of x and y make f(x, y) equal to 5:",
        "x=1, y=5 -> f(1, 5) = 1 * 5 = 5.",
        "x=5, y=1 -> f(5, 1) = 5 * 1 = 5.",
        ""
    ],
    "constraints": [
        "f(x",
        " y) < f(x + 1",
        " y)f(x",
        " y) < f(x",
        " y + 1)The judge has a list of 9 hidden implementations of CustomFunction",
        " along with a way to generate an answer key of all valid pairs for a specific z. The judge will receive two inputs: a function_id (to determine which implementation to test your code with)",
        " and the target z. The judge will call your findSolution and compare your results with the answer key. If your results match the answer key",
        " your solution will be Accepted. 1 <= function_id <= 91 <= z <= 100It is guaranteed that the solutions of f(x",
        " y) == z will be in the range 1 <= x",
        " y <= 1000. It is also guaranteed that f(x",
        " y) will fit in 32 bit signed integer if 1 <= x",
        " y <= 1000."
    ]
},
{
    "id": "1238",
    "title": "Circular Permutation in Binary Representation",
    "question": "Given 2 integers n and start.\n Your task is return any permutation p of (0,1,2.\n.\n.\n.\n.\n,2^n -1) such that :",
    "examples": [
        "Input: n = 2, start = 3",
        "Output: [3,2,0,1]",
        "Explanation: The binary representation of the permutation is (11,10,00,01). ",
        "All the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]",
        "Input: n = 3, start = 2",
        "Output: [2,6,7,5,4,0,1,3]",
        "Explanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).",
        ""
    ],
    "constraints": [
        "p[0] = startp[i] and p[i+1] differ by only one bit in their binary representation. p[0] and p[2^n -1] must also differ by only one bit in their binary representation. 1 <= n <= 160 <= start < 2 ^ n"
    ]
},
{
    "id": "1239",
    "title": "Maximum Length of a Concatenated String with Unique Characters",
    "question": "Given an array of strings arr.\n String s is a concatenation of a sub-sequence of arr which have unique characters.\nReturn the maximum possible length of s.",
    "examples": [
        "Input: arr = [\"un\",\"iq\",\"ue\"]",
        "Output: 4",
        "Explanation: All possible concatenations are \"\",\"un\",\"iq\",\"ue\",\"uniq\" and \"ique\".",
        "Maximum length is 4.",
        "Input: arr = [\"cha\",\"r\",\"act\",\"ers\"]",
        "Output: 6",
        "Explanation: Possible solutions are \"chaers\" and \"acters\".",
        "Input: arr = [\"abcdefghijklmnopqrstuvwxyz\"]",
        "Output: 26",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 161 <= arr[i]. length <= 26arr[i] contains only lower case English letters."
    ]
},
{
    "id": "1247",
    "title": "Minimum Swaps to Make Strings Equal",
    "question": "You are given two strings s1 and s2 of equal length consisting of letters \"x\" and \"y\" only.\n Your task is to make these two strings equal to each other.\n You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].\nReturn the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.",
    "examples": [
        "Input: s1 = \"xx\", s2 = \"yy\"",
        "Output: 1",
        "Explanation: ",
        "Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\". Input: s1 = \"xy\", s2 = \"yx\"",
        "Output: 2",
        "Explanation: ",
        "Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".",
        "Swap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".",
        "Note that you can't swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings. Input: s1 = \"xx\", s2 = \"xy\"",
        "Output: -1",
        "Input: s1 = \"xxyyxyxyxx\", s2 = \"xyyxyxxxyx\"",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= s1. length",
        " s2. length <= 1000s1",
        " s2 only contain 'x' or 'y'."
    ]
},
{
    "id": "28",
    "title": "Implement strStr()",
    "question": "Implement strStr().\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nClarification:What should we return when needle is an empty string? This is a great question to ask during an interview.\nFor the purpose of this problem, we will return 0 when needle is an empty string.\n This is consistent to C's strstr() and Java's indexOf().",
    "examples": [
        "Input: haystack = \"hello\", needle = \"ll\"",
        "Output: 2",
        "Input: haystack = \"aaaaa\", needle = \"bba\"",
        "Output: -1",
        "Input: haystack = \"\", needle = \"\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 <= haystack. length",
        " needle. length <= 5 * 104haystack and needle consist of only lower-case English characters."
    ]
},
{
    "id": "434",
    "title": "Number of Segments in a String",
    "question": "You are given a string s, return the number of segments in the string.\n A segment is defined to be a contiguous sequence of non-space characters.",
    "examples": [
        "Input: s = \"Hello, my name is John\"",
        "Output: 5",
        "Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]",
        "Input: s = \"Hello\"",
        "Output: 1",
        "Input: s = \"love live! mu'sic forever\"",
        "Output: 4",
        "Input: s = \"\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "0 <= s. length <= 300s consists of lower-case and upper-case English letters",
        " digits or one of the following characters \"!@#$%^&*()_+-='",
        ".:\". The only space character in s is ' '."
    ]
},
{
    "id": "1248",
    "title": "Count Number of Nice Subarrays",
    "question": "Given an array of integers nums and an integer k.\n A continuous subarray is called nice if there are k odd numbers on it.\nReturn the number of nice sub-arrays.",
    "examples": [
        "Input: nums = [1,1,2,1,1], k = 3",
        "Output: 2",
        "Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].",
        "Input: nums = [2,4,6], k = 1",
        "Output: 0",
        "Explanation: There is no odd numbers in the array.",
        "Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2",
        "Output: 16",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 500001 <= nums[i] <= 10^51 <= k <= nums. length"
    ]
},
{
    "id": "1249",
    "title": "Minimum Remove to Make Valid Parentheses",
    "question": "Given a string s of '(' , ')' and lowercase English characters.\n Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.\nFormally, a parentheses string is valid if and only if:",
    "examples": [
        "Input: s = \"lee(t(c)o)de)\"",
        "Output: \"lee(t(c)o)de\"",
        "Explanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted.",
        "Input: s = \"a)b(c)d\"",
        "Output: \"ab(c)d\"",
        "Input: s = \"))((\"",
        "Output: \"\"",
        "Explanation: An empty string is also valid.",
        "Input: s = \"(a(b(c)d)\"",
        "Output: \"a(b(c)d)\"",
        ""
    ],
    "constraints": [
        "It is the empty string",
        " contains only lowercase characters",
        " orIt can be written as AB (A concatenated with B)",
        " where A and B are valid strings",
        " orIt can be written as (A)",
        " where A is a valid string. 1 <= s. length <= 10^5s[i] is one of  '(' ",
        " ')' and lowercase English letters."
    ]
},
{
    "id": "1253",
    "title": "Reconstruct a 2-Row Binary Matrix",
    "question": "Given the following details of a matrix with n columns and 2 rows :Your task is to reconstruct the matrix with upper, lower and colsum.\nReturn it as a 2-D integer array.\nIf there are more than one valid solution, any of them will be accepted.\nIf no valid solution exists, return an empty 2-D array.",
    "examples": [
        "Input: upper = 2, lower = 1, colsum = [1,1,1]",
        "Output: [[1,1,0],[0,0,1]]",
        "Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.",
        "Input: upper = 2, lower = 3, colsum = [2,2,1,1]",
        "Output: []",
        "Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]",
        "Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]",
        ""
    ],
    "constraints": [
        "The matrix is a binary matrix",
        " which means each element in the matrix can be 0 or 1. The sum of elements of the 0-th(upper) row is given as upper. The sum of elements of the 1-st(lower) row is given as lower. The sum of elements in the i-th column(0-indexed) is colsum[i]",
        " where colsum is given as an integer array with length n. 1 <= colsum. length <= 10^50 <= upper",
        " lower <= colsum. length0 <= colsum[i] <= 2"
    ]
},
{
    "id": "1254",
    "title": "Number of Closed Islands",
    "question": "Given a 2D grid consists of 0s (land) and 1s (water).\n  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.\nReturn the number of closed islands.",
    "examples": [
        "Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]",
        "Output: 2",
        "Explanation: ",
        "Islands in gray are closed because they are completely surrounded by water (group of 1s). Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]",
        "Output: 1",
        "Input: grid = [[1,1,1,1,1,1,1],",
        "               [1,0,0,0,0,0,1],",
        "               [1,0,1,1,1,0,1],",
        "               [1,0,1,0,1,0,1],",
        "               [1,0,1,1,1,0,1],",
        "               [1,0,0,0,0,0,1],",
        "               [1,1,1,1,1,1,1]]",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= grid. length",
        " grid[0]. length <= 1000 <= grid[i][j] <=1"
    ]
},
{
    "id": "1261",
    "title": "Find Elements in a Contaminated Binary Tree",
    "question": "Given a binary tree with the following rules:Now the binary tree is contaminated, which means all treeNode.\nval have been changed to -1.\nImplement the FindElements class:",
    "examples": [
        "Input",
        "[\"FindElements\",\"find\",\"find\"]",
        "[[[-1,null,-1]],[1],[2]]",
        "Output",
        "[null,false,true]",
        "Explanation",
        "FindElements findElements = new FindElements([-1,null,-1]); ",
        "findElements. find(1); // return False ",
        "findElements. find(2); // return True Input",
        "[\"FindElements\",\"find\",\"find\",\"find\"]",
        "[[[-1,-1,-1,-1,-1]],[1],[3],[5]]",
        "Output",
        "[null,true,true,false]",
        "Explanation",
        "FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);",
        "findElements. find(1); // return True",
        "findElements. find(3); // return True",
        "findElements. find(5); // return FalseInput",
        "[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]",
        "[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]",
        "Output",
        "[null,true,false,false,true]",
        "Explanation",
        "FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);",
        "findElements. find(2); // return True",
        "findElements. find(3); // return False",
        "findElements. find(4); // return False",
        "findElements. find(5); // return True",
        ""
    ],
    "constraints": [
        "FindElements(TreeNode* root) Initializes the object with a contaminated binary tree and recovers it. bool find(int target) Returns true if the target value exists in the recovered binary tree. TreeNode. val == -1The height of the binary tree is less than or equal to 20The total number of nodes is between [1",
        " 104]Total calls of find() is between [1",
        " 104]0 <= target <= 106"
    ]
},
{
    "id": "1262",
    "title": "Greatest Sum Divisible by Three",
    "question": "Given an array nums of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.",
    "examples": [
        "Input: nums = [3,6,5,1,8]",
        "Output: 18",
        "Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3). Input: nums = [4]",
        "Output: 0",
        "Explanation: Since 4 is not divisible by 3, do not pick any number.",
        "Input: nums = [1,2,3,4,4]",
        "Output: 12",
        "Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 4 * 10^41 <= nums[i] <= 10^4"
    ]
},
{
    "id": "1267",
    "title": "Count Servers that Communicate",
    "question": "You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server.\n Two servers are said to communicate if they are on the same row or on the same column.\n\n\nReturn the number of servers that communicate with any other server.",
    "examples": [
        "Input: grid = [[1,0],[0,1]]",
        "Output: 0",
        "Explanation: No servers can communicate with others. Input: grid = [[1,0],[1,1]]",
        "Output: 3",
        "Explanation: All three servers can communicate with at least one other server.",
        "Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]",
        "Output: 4",
        "Explanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.",
        ""
    ],
    "constraints": [
        "m == grid. lengthn == grid[i]. length1 <= m <= 2501 <= n <= 250grid[i][j] == 0 or 1"
    ]
},
{
    "id": "1268",
    "title": "Search Suggestions System",
    "question": "Given an array of strings products and a string searchWord.\n We want to design a system that suggests at most three product names from products after each character of searchWord is typed.\n Suggested products should have common prefix with the searchWord.\n If there are more than three products with a common prefix return the three lexicographically minimums products.\nReturn list of lists of the suggested products after each character of searchWord is typed.",
    "examples": [
        "Input: products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"",
        "Output: [",
        "[\"mobile\",\"moneypot\",\"monitor\"],",
        "[\"mobile\",\"moneypot\",\"monitor\"],",
        "[\"mouse\",\"mousepad\"],",
        "[\"mouse\",\"mousepad\"],",
        "[\"mouse\",\"mousepad\"]",
        "]",
        "Explanation: products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"]",
        "After typing m and mo all products match and we show user [\"mobile\",\"moneypot\",\"monitor\"]",
        "After typing mou, mous and mouse the system suggests [\"mouse\",\"mousepad\"]",
        "Input: products = [\"havana\"], searchWord = \"havana\"",
        "Output: [[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]",
        "Input: products = [\"bags\",\"baggage\",\"banner\",\"box\",\"cloths\"], searchWord = \"bags\"",
        "Output: [[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\"],[\"bags\"]]",
        "Input: products = [\"havana\"], searchWord = \"tatiana\"",
        "Output: [[],[],[],[],[],[],[]]",
        ""
    ],
    "constraints": [
        "1 <= products. length <= 1000There are no repeated elements in products. 1 <= Σ products[i]. length <= 2 * 10^4All characters of products[i] are lower-case English letters. 1 <= searchWord. length <= 1000All characters of searchWord are lower-case English letters."
    ]
},
{
    "id": "1276",
    "title": "Number of Burgers with No Waste of Ingredients",
    "question": "Given two integers tomatoSlices and cheeseSlices.\n The ingredients of different burgers are as follows:Return [total_jumbo, total_small] so that the number of remaining tomatoSlices equal to 0 and the number of remaining cheeseSlices equal to 0.\n If it is not possible to make the remaining tomatoSlices and cheeseSlices equal to 0 return [].",
    "examples": [
        "Input: tomatoSlices = 16, cheeseSlices = 7",
        "Output: [1,6]",
        "Explantion: To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese. There will be no remaining ingredients.",
        "Input: tomatoSlices = 17, cheeseSlices = 4",
        "Output: []",
        "Explantion: There will be no way to use all ingredients to make small and jumbo burgers.",
        "Input: tomatoSlices = 4, cheeseSlices = 17",
        "Output: []",
        "Explantion: Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.",
        "Input: tomatoSlices = 0, cheeseSlices = 0",
        "Output: [0,0]",
        "Input: tomatoSlices = 2, cheeseSlices = 1",
        "Output: [0,1]",
        ""
    ],
    "constraints": [
        "Jumbo Burger: 4 tomato slices and 1 cheese slice. Small Burger: 2 Tomato slices and 1 cheese slice. 0 <= tomatoSlices <= 10^70 <= cheeseSlices <= 10^7"
    ]
},
{
    "id": "1277",
    "title": "Count Square Submatrices with All Ones",
    "question": "Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.",
    "examples": [
        "Input: matrix =",
        "[",
        "  [0,1,1,1],",
        "  [1,1,1,1],",
        "  [0,1,1,1]",
        "]",
        "Output: 15",
        "Explanation: ",
        "There are 10 squares of side 1.",
        "There are 4 squares of side 2.",
        "There is  1 square of side 3.",
        "Total number of squares = 10 + 4 + 1 = 15.",
        "Input: matrix = ",
        "[",
        "  [1,0,1],",
        "  [1,1,0],",
        "  [1,1,0]",
        "]",
        "Output: 7",
        "Explanation: ",
        "There are 6 squares of side 1.  ",
        "There is 1 square of side 2. ",
        "Total number of squares = 6 + 1 = 7.",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 3001 <= arr[0]. length <= 3000 <= arr[i][j] <= 1"
    ]
},
{
    "id": "441",
    "title": "Arranging Coins",
    "question": "You have n coins and you want to build a staircase with these coins.\n The staircase consists of k rows where the ith row has exactly i coins.\n The last row of the staircase may be incomplete.\nGiven the integer n, return the number of complete rows of the staircase you will build.",
    "examples": [
        "Input: n = 5",
        "Output: 2",
        "Explanation: Because the 3rd row is incomplete, we return 2.",
        "Input: n = 8",
        "Output: 3",
        "Explanation: Because the 4th row is incomplete, we return 3.",
        ""
    ],
    "constraints": [
        "1 <= n <= 231 - 1"
    ]
},
{
    "id": "1282",
    "title": "Group the People Given the Group Size They Belong To",
    "question": "There are n people that are split into some unknown number of groups.\n Each person is labeled with a unique ID from 0 to n - 1.\nYou are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in.\n For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.\nReturn a list of groups such that each person i is in a group of size groupSizes[i].\nEach person should appear in exactly one group, and every person must be in a group.\n If there are multiple answers, return any of them.\n It is guaranteed that there will be at least one valid solution for the given input.",
    "examples": [
        "Input: groupSizes = [3,3,3,3,3,1,3]",
        "Output: [[5],[0,1,2],[3,4,6]]",
        "Explanation: ",
        "The first group is [5]. The size is 1, and groupSizes[5] = 1.",
        "The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.",
        "The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.",
        "Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].",
        "Input: groupSizes = [2,1,3,3,3,2]",
        "Output: [[1],[0,5],[2,3,4]]",
        ""
    ],
    "constraints": [
        "groupSizes. length == n1 <= n <= 5001 <= groupSizes[i] <= n"
    ]
},
{
    "id": "1283",
    "title": "Find the Smallest Divisor Given a Threshold",
    "question": "Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result.\n Find the smallest divisor such that the result mentioned above is less than or equal to threshold.\nEach result of the division is rounded to the nearest integer greater than or equal to that element.\n (For example: 7/3 = 3 and 10/2 = 5).\nIt is guaranteed that there will be an answer.",
    "examples": [
        "Input: nums = [1,2,5,9], threshold = 6",
        "Output: 5",
        "Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. ",
        "If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). ",
        "Input: nums = [44,22,33,11,1], threshold = 5",
        "Output: 44",
        "Input: nums = [21212,10101,12121], threshold = 1000000",
        "Output: 1",
        "Input: nums = [2,3,5,7,11], threshold = 11",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 5 * 1041 <= nums[i] <= 106nums. length <= threshold <= 106"
    ]
},
{
    "id": "1286",
    "title": "Iterator for Combination",
    "question": "Design the CombinationIterator class:",
    "examples": [
        "Input",
        "[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]",
        "[[\"abc\", 2], [], [], [], [], [], []]",
        "Output",
        "[null, \"ab\", true, \"ac\", true, \"bc\", false]",
        "",
        "Explanation",
        "CombinationIterator itr = new CombinationIterator(\"abc\", 2);",
        "itr. next();    // return \"ab\"",
        "itr. hasNext(); // return True",
        "itr. next();    // return \"ac\"",
        "itr. hasNext(); // return True",
        "itr. next();    // return \"bc\"",
        "itr. hasNext(); // return False",
        ""
    ],
    "constraints": [
        "CombinationIterator(string characters",
        " int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments. next() Returns the next combination of length combinationLength in lexicographical order. hasNext() Returns true if and only if there exists a next combination. 1 <= combinationLength <= characters. length <= 15All the characters of characters are unique. At most 104 calls will be made to next and hasNext. It's guaranteed that all calls of the function next are valid."
    ]
},
{
    "id": "1288",
    "title": "Remove Covered Intervals",
    "question": "Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.\nThe interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.\nReturn the number of remaining intervals.",
    "examples": [
        "Input: intervals = [[1,4],[3,6],[2,8]]",
        "Output: 2",
        "Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.",
        "Input: intervals = [[1,4],[2,3]]",
        "Output: 1",
        "Input: intervals = [[0,10],[5,12]]",
        "Output: 2",
        "Input: intervals = [[3,10],[4,10],[5,11]]",
        "Output: 2",
        "Input: intervals = [[1,2],[1,4],[3,4]]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= intervals. length <= 1000intervals[i]. length == 20 <= li <= ri <= 105All the given intervals are unique."
    ]
},
{
    "id": "1291",
    "title": "Sequential Digits",
    "question": "An integer has sequential digits if and only if each digit in the number is one more than the previous digit.\nReturn a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.",
    "examples": [
        "Input: low = 100, high = 300",
        "Output: [123,234]",
        "Input: low = 1000, high = 13000",
        "Output: [1234,2345,3456,4567,5678,6789,12345]",
        ""
    ],
    "constraints": [
        "10 <= low <= high <= 10^9"
    ]
},
{
    "id": "1292",
    "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "question": "Given a m x n matrix mat and an integer threshold.\n Return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.",
    "examples": [
        "Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4",
        "Output: 2",
        "Explanation: The maximum side length of square with sum less than 4 is 2 as shown.",
        "Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1",
        "Output: 0",
        "Input: mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6",
        "Output: 3",
        "Input: mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184",
        "Output: 2",
        ""
    ],
    "constraints": [
        "1 <= m",
        " n <= 300m == mat. lengthn == mat[i]. length0 <= mat[i][j] <= 100000 <= threshold <= 10^5"
    ]
},
{
    "id": "1296",
    "title": "Divide Array in Sets of K Consecutive Numbers",
    "question": "Given an array of integers nums and a positive integer k, find whether it is possible to divide this array into sets of k consecutive numbers.\nReturn true if it is possible.\n Otherwise, return false.",
    "examples": [
        "Input: nums = [1,2,3,3,4,4,5,6], k = 4",
        "Output: true",
        "Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].",
        "Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3",
        "Output: true",
        "Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].",
        "Input: nums = [3,3,2,2,1,1], k = 3",
        "Output: true",
        "Input: nums = [1,2,3,4], k = 3",
        "Output: false",
        "Explanation: Each array should be divided in subarrays of size 3.",
        ""
    ],
    "constraints": [
        "1 <= k <= nums. length <= 1051 <= nums[i] <= 109"
    ]
},
{
    "id": "1297",
    "title": "Maximum Number of Occurrences of a Substring",
    "question": "Given a string s, return the maximum number of ocurrences of any substring under the following rules:",
    "examples": [
        "Input: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4",
        "Output: 2",
        "Explanation: Substring \"aab\" has 2 ocurrences in the original string.",
        "It satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).",
        "Input: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3",
        "Output: 2",
        "Explanation: Substring \"aaa\" occur 2 times in the string. It can overlap.",
        "Input: s = \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3",
        "Output: 3",
        "Input: s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3",
        "Output: 0",
        ""
    ],
    "constraints": [
        "The number of unique characters in the substring must be less than or equal to maxLetters. The substring size must be between minSize and maxSize inclusive. 1 <= s. length <= 10^51 <= maxLetters <= 261 <= minSize <= maxSize <= min(26",
        " s. length)s only contains lowercase English letters."
    ]
},
{
    "id": "1300",
    "title": "Sum of Mutated Array Closest to Target",
    "question": "Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.\nIn case of a tie, return the minimum such integer.\nNotice that the answer is not neccesarilly a number from arr.",
    "examples": [
        "Input: arr = [4,9,3], target = 10",
        "Output: 3",
        "Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.",
        "Input: arr = [2,3,5], target = 10",
        "Output: 5",
        "Input: arr = [60864,25176,27249,21296,20204], target = 56803",
        "Output: 11361",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1041 <= arr[i]",
        " target <= 105"
    ]
},
{
    "id": "1302",
    "title": "Deepest Leaves Sum",
    "question": "",
    "examples": [
        "Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]",
        "Output: 15",
        "Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        "Output: 19",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104]. 1 <= Node. val <= 100"
    ]
},
{
    "id": "448",
    "title": "Find All Numbers Disappeared in an Array",
    "question": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\n   Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.",
    "examples": [
        "Input: nums = [4,3,2,7,8,2,3,1]",
        "Output: [5,6]",
        "Input: nums = [1,1]",
        "Output: [2]",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= n <= 1051 <= nums[i] <= n"
    ]
},
{
    "id": "1305",
    "title": "All Elements in Two Binary Search Trees",
    "question": "Given two binary search trees root1 and root2.\nReturn a list containing all the integers from both trees sorted in ascending order.",
    "examples": [
        "Input: root1 = [2,1,4], root2 = [1,0,3]",
        "Output: [0,1,1,2,3,4]",
        "Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]",
        "Output: [-10,0,0,1,2,5,7,10]",
        "Input: root1 = [], root2 = [5,1,7,0,2]",
        "Output: [0,1,2,5,7]",
        "Input: root1 = [0,-10,10], root2 = []",
        "Output: [-10,0,10]",
        "Input: root1 = [1,null,8], root2 = [8,1]",
        "Output: [1,1,8,8]",
        ""
    ],
    "constraints": [
        "Each tree has at most 5000 nodes. Each node's value is between [-10^5",
        " 10^5]."
    ]
},
{
    "id": "1306",
    "title": "Jump Game III",
    "question": "Given an array of non-negative integers arr, you are initially positioned at start index of the array.\n When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.\nNotice that you can not jump outside of the array at any time.",
    "examples": [
        "Input: arr = [4,2,3,0,3,1,2], start = 5",
        "Output: true",
        "Explanation: ",
        "All possible ways to reach at index 3 with value 0 are: ",
        "index 5 -> index 4 -> index 1 -> index 3 ",
        "index 5 -> index 6 -> index 4 -> index 1 -> index 3 ",
        "Input: arr = [4,2,3,0,3,1,2], start = 0",
        "Output: true ",
        "Explanation: ",
        "One possible way to reach at index 3 with value 0 is: ",
        "index 0 -> index 4 -> index 1 -> index 3",
        "Input: arr = [3,0,2,1,2], start = 2",
        "Output: false",
        "Explanation: There is no way to reach at index 1 with value 0.",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 5 * 1040 <= arr[i] < arr. length0 <= start < arr. length"
    ]
},
{
    "id": "1310",
    "title": "XOR Queries of a Subarray",
    "question": "",
    "examples": [
        "Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]",
        "Output: [2,7,14,8] ",
        "Explanation: ",
        "The binary representation of the elements in the array are:",
        "1 = 0001 ",
        "3 = 0011 ",
        "4 = 0100 ",
        "8 = 1000 ",
        "The XOR values for queries are:",
        "[0,1] = 1 xor 3 = 2 ",
        "[1,2] = 3 xor 4 = 7 ",
        "[0,3] = 1 xor 3 xor 4 xor 8 = 14 ",
        "[3,3] = 8",
        "Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]",
        "Output: [8,0,4,4]",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 3 * 10^41 <= arr[i] <= 10^91 <= queries. length <= 3 * 10^4queries[i]. length == 20 <= queries[i][0] <= queries[i][1] < arr. length"
    ]
},
{
    "id": "1311",
    "title": "Get Watched Videos by Your Friends",
    "question": "There are n people, each person has a unique id between 0 and n-1.\n Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.\nLevel 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on.\n In general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you.\n Given your id and the level of videos, return the list of videos ordered by their frequencies (increasing).\n For videos with the same frequency order them alphabetically from least to greatest.",
    "examples": [
        "Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1",
        "Output: [\"B\",\"C\"] ",
        "Explanation: ",
        "You have id = 0 (green color in the figure) and your friends are (yellow color in the figure):",
        "Person with id = 1 -> watchedVideos = [\"C\"] ",
        "Person with id = 2 -> watchedVideos = [\"B\",\"C\"] ",
        "The frequencies of watchedVideos by your friends are: ",
        "B -> 1 ",
        "C -> 2",
        "Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2",
        "Output: [\"D\"]",
        "Explanation: ",
        "You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).",
        ""
    ],
    "constraints": [
        "n == watchedVideos. length == friends. length2 <= n <= 1001 <= watchedVideos[i]. length <= 1001 <= watchedVideos[i][j]. length <= 80 <= friends[i]. length < n0 <= friends[i][j] < n0 <= id < n1 <= level < nif friends[i] contains j",
        " then friends[j] contains i"
    ]
},
{
    "id": "1314",
    "title": "Matrix Block Sum",
    "question": "Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:",
    "examples": [
        "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
        "Output: [[12,21,16],[27,45,33],[24,39,28]]",
        "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2",
        "Output: [[45,45,45],[45,45,45],[45,45,45]]",
        ""
    ],
    "constraints": [
        "i - k <= r <= i + k",
        "j - k <= c <= j + k",
        " and(r",
        " c) is a valid position in the matrix. m == mat. lengthn == mat[i]. length1 <= m",
        " n",
        " k <= 1001 <= mat[i][j] <= 100"
    ]
},
{
    "id": "1315",
    "title": "Sum of Nodes with Even-Valued Grandparent",
    "question": "Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent.\n If there are no nodes with an even-valued grandparent, return 0.\nA grandparent of a node is the parent of its parent if it exists.",
    "examples": [
        "Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        "Output: 18",
        "Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.",
        "Input: root = [1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104]. 1 <= Node. val <= 100"
    ]
},
{
    "id": "1318",
    "title": "Minimum Flips to Make a OR b Equal to c",
    "question": "Given 3 positives numbers a, b and c.\n Return the minimum flips required in some bits of a and b to make ( a OR b == c ).\n (bitwise OR operation).\n\nFlip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.",
    "examples": [
        "Input: a = 2, b = 6, c = 5",
        "Output: 3",
        "Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)Input: a = 4, b = 2, c = 7",
        "Output: 1",
        "Input: a = 1, b = 2, c = 3",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= a <= 10^91 <= b <= 10^91 <= c <= 10^9"
    ]
},
{
    "id": "1319",
    "title": "Number of Operations to Make Network Connected",
    "question": "",
    "examples": [
        ""
    ],
    "constraints": [
        ""
    ]
},
{
    "id": "1324",
    "title": "Print Words Vertically",
    "question": "Given a string s.\n Return all the words vertically in the same order in which they appear in s.\n\nWords are returned as a list of strings, complete with spaces when is necessary.\n (Trailing spaces are not allowed).\n\nEach word would be put on only one column and that in one column there will be only one word.",
    "examples": [
        "Input: s = \"HOW ARE YOU\"",
        "Output: [\"HAY\",\"ORO\",\"WEU\"]",
        "Explanation: Each word is printed vertically. ",
        " \"HAY\"",
        " \"ORO\"",
        " \"WEU\"",
        "Input: s = \"TO BE OR NOT TO BE\"",
        "Output: [\"TBONTB\",\"OEROOE\",\"   T\"]",
        "Explanation: Trailing spaces is not allowed. ",
        "\"TBONTB\"",
        "\"OEROOE\"",
        "\"   T\"",
        "Input: s = \"CONTEST IS COMING\"",
        "Output: [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 200s contains only upper case English letters. It's guaranteed that there is only one space between 2 words."
    ]
},
{
    "id": "1325",
    "title": "Delete Leaves With a Given Value",
    "question": "Given a binary tree root and an integer target, delete all the leaf nodes with value target.\nNote that once you delete a leaf node with value target, if it's parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you can't).",
    "examples": [
        "Input: root = [1,2,3,2,null,2,4], target = 2",
        "Output: [1,null,3,null,4]",
        "Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). ",
        "After removing, new nodes become leaf nodes with value (target = 2) (Picture in center).",
        "Input: root = [1,3,3,3,2], target = 3",
        "Output: [1,3,null,null,2]",
        "Input: root = [1,2,null,2,null,2], target = 2",
        "Output: [1]",
        "Explanation: Leaf nodes in green with value (target = 2) are removed at each step.",
        "Input: root = [1,1,1], target = 1",
        "Output: []",
        "Input: root = [1,2,3], target = 1",
        "Output: [1,2,3]",
        ""
    ],
    "constraints": [
        "1 <= target <= 1000The given binary tree will have between 1 and 3000 nodes. Each node's value is between [1",
        " 1000]."
    ]
},
{
    "id": "453",
    "title": "Minimum Moves to Equal Array Elements",
    "question": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\nIn one move, you can increment n - 1 elements of the array by 1.",
    "examples": [
        "Input: nums = [1,2,3]",
        "Output: 3",
        "Explanation: Only three moves are needed (remember each move increments two elements):",
        "[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]",
        "Input: nums = [1,1,1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "n == nums. length1 <= nums. length <= 105-109 <= nums[i] <= 109The answer is guaranteed to fit in a 32-bit integer."
    ]
},
{
    "id": "1328",
    "title": "Break a Palindrome",
    "question": "Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.\nReturn the resulting string.\n If there is no way to replace a character to make it not a palindrome, return an empty string.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b.\n For example, \"abcc\" is lexicographically smaller than \"abcd\" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.",
    "examples": [
        "Input: palindrome = \"abccba\"",
        "Output: \"aaccba\"",
        "Explanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\".",
        "Of all the ways, \"aaccba\" is the lexicographically smallest.",
        "Input: palindrome = \"a\"",
        "Output: \"\"",
        "Explanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string.",
        "Input: palindrome = \"aa\"",
        "Output: \"ab\"Input: palindrome = \"aba\"",
        "Output: \"abb\"",
        ""
    ],
    "constraints": [
        "1 <= palindrome. length <= 1000palindrome consists of only lowercase English letters."
    ]
},
{
    "id": "1329",
    "title": "Sort the Matrix Diagonally",
    "question": "A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end.\n For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].\nGiven an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.",
    "examples": [
        "Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
        "Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]",
        "Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]",
        "Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]",
        ""
    ],
    "constraints": [
        "m == mat. lengthn == mat[i]. length1 <= m",
        " n <= 1001 <= mat[i][j] <= 100"
    ]
},
{
    "id": "1333",
    "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
    "question": "Given the array restaurants where  restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei].\n You have to filter the restaurants using three filters.\nThe veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendlyi set to true) or false (meaning you can include any restaurant).\n In addition, you have the filters maxPrice and maxDistance which are the maximum value for price and distance of restaurants you should consider respectively.\nReturn the array of restaurant IDs after filtering, ordered by rating from highest to lowest.\n For restaurants with the same rating, order them by id from highest to lowest.\n For simplicity veganFriendlyi and veganFriendly take value 1 when it is true, and 0 when it is false.",
    "examples": [
        "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10",
        "Output: [3,1,5] ",
        "Explanation: ",
        "The restaurants are:",
        "Restaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]",
        "Restaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]",
        "Restaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]",
        "Restaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]",
        "Restaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] ",
        "After filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). ",
        "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10",
        "Output: [4,3,2,1,5]",
        "Explanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.",
        "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3",
        "Output: [4,5]",
        ""
    ],
    "constraints": [
        "1 <= restaurants. length <= 10^4restaurants[i]. length == 51 <= idi",
        " ratingi",
        " pricei",
        " distancei <= 10^51 <= maxPrice",
        " maxDistance <= 10^5veganFriendlyi and veganFriendly are 0 or 1. All idi are distinct."
    ]
},
{
    "id": "1334",
    "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "question": "There are n cities numbered from 0 to n-1.\n Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.\nReturn the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.\nNotice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.",
    "examples": [
        "Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4",
        "Output: 3",
        "Explanation: The figure above describes the graph. ",
        "The neighboring cities at a distanceThreshold = 4 for each city are:",
        "City 0 -> [City 1, City 2] ",
        "City 1 -> [City 0, City 2, City 3] ",
        "City 2 -> [City 0, City 1, City 3] ",
        "City 3 -> [City 1, City 2] ",
        "Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.",
        "Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2",
        "Output: 0",
        "Explanation: The figure above describes the graph. ",
        "The neighboring cities at a distanceThreshold = 2 for each city are:",
        "City 0 -> [City 1] ",
        "City 1 -> [City 0, City 4] ",
        "City 2 -> [City 3, City 4] ",
        "City 3 -> [City 2, City 4]",
        "City 4 -> [City 1, City 2, City 3] ",
        "The city 0 has 1 neighboring city at a distanceThreshold = 2.",
        ""
    ],
    "constraints": [
        "2 <= n <= 1001 <= edges. length <= n * (n - 1) / 2edges[i]. length == 30 <= fromi < toi < n1 <= weighti",
        " distanceThreshold <= 10^4All pairs (fromi",
        " toi) are distinct."
    ]
},
{
    "id": "1338",
    "title": "Reduce Array Size to The Half",
    "question": "You are given an integer array arr.\n You can choose a set of integers and remove all the occurrences of these integers in the array.\nReturn the minimum size of the set so that at least half of the integers of the array are removed.",
    "examples": [
        "Input: arr = [3,3,3,3,5,5,5,2,2,7]",
        "Output: 2",
        "Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i. e equal to half of the size of the old array).",
        "Possible sets of size 2 are {3,5},{3,2},{5,2}.",
        "Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has size greater than half of the size of the old array.",
        "Input: arr = [7,7,7,7,7,7]",
        "Output: 1",
        "Explanation: The only possible set you can choose is {7}. This will make the new array empty.",
        "Input: arr = [1,9]",
        "Output: 1",
        "Input: arr = [1000,1000,3,7]",
        "Output: 1",
        "Input: arr = [1,2,3,4,5,6,7,8,9,10]",
        "Output: 5",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 105arr. length is even. 1 <= arr[i] <= 105"
    ]
},
{
    "id": "1339",
    "title": "Maximum Product of Splitted Binary Tree",
    "question": "Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.\nReturn the maximum product of the sums of the two subtrees.\n Since the answer may be too large, return it modulo 109 + 7.\nNote that you need to maximize the answer before taking the mod and not after taking it.",
    "examples": [
        "Input: root = [1,2,3,4,5,6]",
        "Output: 110",
        "Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)",
        "Input: root = [1,null,2,3,4,null,null,5,6]",
        "Output: 90",
        "Explanation: Remove the red edge and get 2 binary trees with sum 15 and 6. Their product is 90 (15*6)",
        "Input: root = [2,3,9,10,7,8,6,5,4,11,1]",
        "Output: 1025",
        "Input: root = [1,1]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [2",
        " 5 * 104]. 1 <= Node. val <= 104"
    ]
},
{
    "id": "1343",
    "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "question": "Given an array of integers arr and two integers k and threshold.\nReturn the number of sub-arrays of size k and average greater than or equal to threshold.",
    "examples": [
        "Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4",
        "Output: 3",
        "Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).",
        "Input: arr = [1,1,1,1,1], k = 1, threshold = 0",
        "Output: 5",
        "Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5",
        "Output: 6",
        "Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.",
        "Input: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7",
        "Output: 1",
        "Input: arr = [4,4,4,4], k = 4, threshold = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 10^51 <= arr[i] <= 10^41 <= k <= arr. length0 <= threshold <= 10^4"
    ]
},
{
    "id": "1344",
    "title": "Angle Between Hands of a Clock",
    "question": "Given two numbers, hour and minutes.\n Return the smaller angle (in degrees) formed between the hour and the minute hand.",
    "examples": [
        "Input: hour = 12, minutes = 30",
        "Output: 165",
        "Input: hour = 3, minutes = 30",
        "Output: 75",
        "Input: hour = 3, minutes = 15",
        "Output: 7. 5",
        "Input: hour = 4, minutes = 50",
        "Output: 155",
        "Input: hour = 12, minutes = 0",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= hour <= 120 <= minutes <= 59Answers within 10^-5 of the actual value will be accepted as correct."
    ]
},
{
    "id": "1347",
    "title": "Minimum Number of Steps to Make Two Strings Anagram",
    "question": "Given two equal-size strings s and t.\n In one step you can choose any character of t and replace it with another character.\nReturn the minimum number of steps to make t an anagram of s.\nAn Anagram of a string is a string that contains the same characters with a different (or the same) ordering.",
    "examples": [
        "Input: s = \"bab\", t = \"aba\"",
        "Output: 1",
        "Explanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s.",
        "Input: s = \"leetcode\", t = \"practice\"",
        "Output: 5",
        "Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.",
        "Input: s = \"anagram\", t = \"mangaar\"",
        "Output: 0",
        "Explanation: \"anagram\" and \"mangaar\" are anagrams. ",
        "Input: s = \"xxyyzz\", t = \"xxyyzz\"",
        "Output: 0",
        "Input: s = \"friend\", t = \"family\"",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 50000s. length == t. lengths and t contain lower-case English letters only."
    ]
},
{
    "id": "1348",
    "title": "Tweet Counts Per Frequency",
    "question": "A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time.\n These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).\nFor example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example).\nDesign and implement an API to help the company with their analysis.\nImplement the TweetCounts class: Example:",
    "examples": [
        "Input",
        "[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]",
        "[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]",
        "",
        "Output",
        "[null,null,null,null,[2],[2,1],null,[4]]",
        "",
        "Explanation",
        "TweetCounts tweetCounts = new TweetCounts();",
        "tweetCounts. recordTweet(\"tweet3\", 0);                              // New tweet \"tweet3\" at time 0",
        "tweetCounts. recordTweet(\"tweet3\", 60);                             // New tweet \"tweet3\" at time 60",
        "tweetCounts. recordTweet(\"tweet3\", 10);                             // New tweet \"tweet3\" at time 10",
        "tweetCounts. getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // return [2]; chunk [0,59] had 2 tweets",
        "tweetCounts. getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet",
        "tweetCounts. recordTweet(\"tweet3\", 120);                            // New tweet \"tweet3\" at time 120",
        "tweetCounts. getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210);  // return [4]; chunk [0,210] had 4 tweets",
        ""
    ],
    "constraints": [
        "Every minute (60-second chunks): [10",
        "69]",
        " [70",
        "129]",
        " [130",
        "189]",
        " ...",
        " [9970",
        "10000]Every hour (3600-second chunks): [10",
        "3609]",
        " [3610",
        "7209]",
        " [7210",
        "10000]Every day (86400-second chunks): [10",
        "10000]TweetCounts() Initializes the TweetCounts object. void recordTweet(String tweetName",
        " int time) Stores the tweetName at the recorded time (in seconds). List<Integer> getTweetCountsPerFrequency(String freq",
        " String tweetName",
        " int startTime",
        " int endTime) Returns a list of integers representing the number of tweets with tweetName in each time chunk for the given period of time [startTime",
        " endTime] (in seconds) and frequency freq.\n\t\nfreq is one of \"minute\"",
        " \"hour\"",
        " or \"day\" representing a frequency of every minute",
        " hour",
        " or day respectively.\n\nfreq is one of \"minute\"",
        " \"hour\"",
        " or \"day\" representing a frequency of every minute",
        " hour",
        " or day respectively. 0 <= time",
        " startTime",
        " endTime <= 1090 <= endTime - startTime <= 104There will be at most 104 calls in total to recordTweet and getTweetCountsPerFrequency."
    ]
},
{
    "id": "455",
    "title": "Assign Cookies",
    "question": "Assume you are an awesome parent and want to give your children some cookies.\n But, you should give each child at most one cookie.\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j].\n If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content.\n Your goal is to maximize the number of your content children and output the maximum number.",
    "examples": [
        "Input: g = [1,2,3], s = [1,1]",
        "Output: 1",
        "Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. ",
        "And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.",
        "You need to output 1.",
        "Input: g = [1,2], s = [1,2,3]",
        "Output: 2",
        "Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. ",
        "You have 3 cookies and their sizes are big enough to gratify all of the children, ",
        "You need to output 2.",
        ""
    ],
    "constraints": [
        "1 <= g. length <= 3 * 1040 <= s. length <= 3 * 1041 <= g[i]",
        " s[j] <= 231 - 1"
    ]
},
{
    "id": "1352",
    "title": "Product of the Last K Numbers",
    "question": "Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.\nImplement the ProductOfNumbers class:The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.\n Example:",
    "examples": [
        "Input",
        "[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]",
        "[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]",
        "",
        "Output",
        "[null,null,null,null,null,null,20,40,0,null,32]",
        "",
        "Explanation",
        "ProductOfNumbers productOfNumbers = new ProductOfNumbers();",
        "productOfNumbers. add(3);        // [3]",
        "productOfNumbers. add(0);        // [3,0]",
        "productOfNumbers. add(2);        // [3,0,2]",
        "productOfNumbers. add(5);        // [3,0,2,5]",
        "productOfNumbers. add(4);        // [3,0,2,5,4]",
        "productOfNumbers. getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20",
        "productOfNumbers. getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40",
        "productOfNumbers. getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0",
        "productOfNumbers. add(8);        // [3,0,2,5,4,8]",
        "productOfNumbers. getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 ",
        ""
    ],
    "constraints": [
        "ProductOfNumbers() Initializes the object with an empty stream. void add(int num) Appends the integer num to the stream. int getProduct(int k) Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers. 0 <= num <= 1001 <= k <= 4 * 104At most 4 * 104 calls will be made to add and getProduct. The product of the stream at any point in time will fit in a 32-bit integer."
    ]
},
{
    "id": "1353",
    "title": "Maximum Number of Events That Can Be Attended",
    "question": "Given an array of events where events[i] = [startDayi, endDayi].\n Every event i starts at startDayi and ends at endDayi.\nYou can attend an event i at any day d where startTimei <= d <= endTimei.\n Notice that you can only attend one event at any time d.\nReturn the maximum number of events you can attend.",
    "examples": [
        "Input: events = [[1,2],[2,3],[3,4]]",
        "Output: 3",
        "Explanation: You can attend all the three events.",
        "One way to attend them all is as shown.",
        "Attend the first event on day 1.",
        "Attend the second event on day 2.",
        "Attend the third event on day 3.",
        "Input: events= [[1,2],[2,3],[3,4],[1,2]]",
        "Output: 4",
        "Input: events = [[1,4],[4,4],[2,2],[3,4],[1,1]]",
        "Output: 4",
        "Input: events = [[1,100000]]",
        "Output: 1",
        "Input: events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]",
        "Output: 7",
        ""
    ],
    "constraints": [
        "1 <= events. length <= 105events[i]. length == 21 <= startDayi <= endDayi <= 105"
    ]
},
{
    "id": "1357",
    "title": "Apply Discount Every n Orders",
    "question": "There is a supermarket that is frequented by many customers.\n The products sold at the supermarket are represented as two parallel integer arrays products and prices, where the ith product has an ID of products[i] and a price of prices[i].\nWhen a customer is paying, their bill is represented as two parallel integer arrays product and amount, where the jth product they purchased has an ID of product[j], and amount[j] is how much of the product they bought.\n Their subtotal is calculated as the sum of each amount[j] * (price of the jth product).\nThe supermarket decided to have a sale.\n Every nth customer paying for their groceries will be given a percentage discount.\n The discount amount is given by discount, where they will be given discount percent off their subtotal.\n More formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100).\nImplement the Cashier class:",
    "examples": [
        "Input",
        "[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]",
        "[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]",
        "Output",
        "[null,500. 0,4000. 0,800. 0,4000. 0,4000. 0,7350. 0,2500. 0]",
        "Explanation",
        "Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);",
        "cashier. getBill([1,2],[1,2]);                        // return 500. 0. 1st customer, no discount.",
        "                                                     // bill = 1 * 100 + 2 * 200 = 500.",
        "cashier. getBill([3,7],[10,10]);                      // return 4000. 0. 2nd customer, no discount.",
        "                                                     // bill = 10 * 300 + 10 * 100 = 4000.",
        "cashier. getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800. 0. 3rd customer, 50% discount.",
        "                                                     // Original bill = 1600",
        "                                                     // Actual bill = 1600 * ((100 - 50) / 100) = 800.",
        "cashier. getBill([4],[10]);                           // return 4000. 0. 4th customer, no discount.",
        "cashier. getBill([7,3],[10,10]);                      // return 4000. 0. 5th customer, no discount.",
        "cashier. getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350. 0. 6th customer, 50% discount.",
        "                                                     // Original bill = 14700, but with",
        "                                                     // Actual bill = 14700 * ((100 - 50) / 100) = 7350.",
        "cashier. getBill([2,3,5],[5,3,2]);                    // return 2500. 0.  6th customer, no discount.",
        ""
    ],
    "constraints": [
        "Cashier(int n",
        " int discount",
        " int[] products",
        " int[] prices) Initializes the object with n",
        " the discount",
        " and the products and their prices. double getBill(int[] product",
        " int[] amount) Returns the final total of the bill with the discount applied (if any). Answers within 10-5 of the actual value will be accepted. 1 <= n <= 1040 <= discount <= 1001 <= products. length <= 200prices. length == products. length1 <= products[i] <= 2001 <= prices[i] <= 1000The elements in products are unique. 1 <= product. length <= products. lengthamount. length == product. lengthproduct[j] exists in products. 1 <= amount[j] <= 1000The elements of product are unique. At most 1000 calls will be made to getBill. Answers within 10-5 of the actual value will be accepted."
    ]
},
{
    "id": "1358",
    "title": "Number of Substrings Containing All Three Characters",
    "question": "Given a string s consisting only of characters a, b and c.\nReturn the number of substrings containing at least one occurrence of all these characters a, b and c.",
    "examples": [
        "Input: s = \"abcabc\"",
        "Output: 10",
        "Explanation: The substrings containing at least one occurrence of the characters a, b and c are \"abc\", \"abca\", \"abcab\", \"abcabc\", \"bca\", \"bcab\", \"bcabc\", \"cab\", \"cabc\" and \"abc\" (again). ",
        "Input: s = \"aaacb\"",
        "Output: 3",
        "Explanation: The substrings containing at least one occurrence of the characters a, b and c are \"aaacb\", \"aacb\" and \"acb\". ",
        "Input: s = \"abc\"",
        "Output: 1",
        ""
    ],
    "constraints": [
        "3 <= s. length <= 5 x 10^4s only consists of a",
        " b or c characters."
    ]
},
{
    "id": "1361",
    "title": "Validate Binary Tree Nodes",
    "question": "You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.\nIf node i has no left child then leftChild[i] will equal -1, similarly for the right child.\nNote that the nodes have no values and that we only use the node numbers in this problem.",
    "examples": [
        "Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]",
        "Output: true",
        "Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]",
        "Output: false",
        "Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]",
        "Output: false",
        "Input: n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= n <= 104leftChild. length == rightChild. length == n-1 <= leftChild[i]",
        " rightChild[i] <= n - 1"
    ]
},
{
    "id": "1362",
    "title": "Closest Divisors",
    "question": "Given an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2.\nReturn the two integers in any order.",
    "examples": [
        "Input: num = 8",
        "Output: [3,3]",
        "Explanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.",
        "Input: num = 123",
        "Output: [5,25]",
        "Input: num = 999",
        "Output: [40,25]",
        ""
    ],
    "constraints": [
        "1 <= num <= 10^9"
    ]
},
{
    "id": "1366",
    "title": "Rank Teams by Votes",
    "question": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition.\nThe ordering of teams is decided by who received the most position-one votes.\n If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved.\n If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.\nGiven an array of strings votes which is the votes of all voters in the ranking systems.\n Sort all teams according to the ranking system described above.\nReturn a string of all teams sorted by the ranking system.",
    "examples": [
        "Input: votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]",
        "Output: \"ACB\"",
        "Explanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.",
        "Team B was ranked second by 2 voters and was ranked third by 3 voters.",
        "Team C was ranked second by 3 voters and was ranked third by 2 voters.",
        "As most of the voters ranked C second, team C is the second team and team B is the third.",
        "Input: votes = [\"WXYZ\",\"XYZW\"]",
        "Output: \"XWYZ\"",
        "Explanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position. ",
        "Input: votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]",
        "Output: \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"",
        "Explanation: Only one voter so his votes are used for the ranking.",
        "Input: votes = [\"BCA\",\"CAB\",\"CBA\",\"ABC\",\"ACB\",\"BAC\"]",
        "Output: \"ABC\"",
        "Explanation: ",
        "Team A was ranked first by 2 voters, second by 2 voters and third by 2 voters.",
        "Team B was ranked first by 2 voters, second by 2 voters and third by 2 voters.",
        "Team C was ranked first by 2 voters, second by 2 voters and third by 2 voters.",
        "There is a tie and we rank teams ascending by their IDs.",
        "Input: votes = [\"M\",\"M\",\"M\",\"M\"]",
        "Output: \"M\"",
        "Explanation: Only team M in the competition so it has the first rank.",
        ""
    ],
    "constraints": [
        "1 <= votes. length <= 10001 <= votes[i]. length <= 26votes[i]. length == votes[j]. length for 0 <= i",
        " j < votes. length. votes[i][j] is an English upper-case letter. All characters of votes[i] are unique. All the characters that occur in votes[0] also occur in votes[j] where 1 <= j < votes. length."
    ]
},
{
    "id": "1367",
    "title": "Linked List in Binary Tree",
    "question": "Given a binary tree root and a linked list with head as the first node.\n Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.\nIn this context downward path means a path that starts at some node and goes downwards.",
    "examples": [
        "Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
        "Output: true",
        "Explanation: Nodes in blue form a subpath in the binary Tree.  ",
        "Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
        "Output: true",
        "Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]",
        "Output: false",
        "Explanation: There is no path in the binary tree that contains all the elements of the linked list from head.",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree will be in the range [1",
        " 2500]. The number of nodes in the list will be in the range [1",
        " 100]. 1 <= Node. val <= 100 for each node in the linked list and binary tree."
    ]
},
{
    "id": "1371",
    "title": "Find the Longest Substring Containing Vowels in Even Counts",
    "question": "Given the string s, return the size of the longest substring containing each vowel an even number of times.\n That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.",
    "examples": [
        "Input: s = \"eleetminicoworoep\"",
        "Output: 13",
        "Explanation: The longest substring is \"leetminicowor\" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.",
        "Input: s = \"leetcodeisgreat\"",
        "Output: 5",
        "Explanation: The longest substring is \"leetc\" which contains two e's.",
        "Input: s = \"bcbcbc\"",
        "Output: 6",
        "Explanation: In this case, the given string \"bcbcbc\" is the longest because all vowels: a, e, i, o and u appear zero times.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 5 x 10^5s contains only lowercase English letters."
    ]
},
{
    "id": "1372",
    "title": "Longest ZigZag Path in a Binary Tree",
    "question": "You are given the root of a binary tree.\nA ZigZag path for a binary tree is defined as follow:Zigzag length is defined as the number of nodes visited - 1.\n (A single node has a length of 0).\nReturn the longest ZigZag path contained in that tree.",
    "examples": [
        "Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]",
        "Output: 3",
        "Explanation: Longest ZigZag path in blue nodes (right -> left -> right).",
        "Input: root = [1,1,1,null,1,null,null,1,1,null,1]",
        "Output: 4",
        "Explanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).",
        "Input: root = [1]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "Choose any node in the binary tree and a direction (right or left). If the current direction is right",
        " move to the right child of the current node; otherwise",
        " move to the left child. Change the direction from right to left or from left to right. Repeat the second and third steps until you can't move in the tree. The number of nodes in the tree is in the range [1",
        " 5 * 104]. 1 <= Node. val <= 100"
    ]
},
{
    "id": "459",
    "title": "Repeated Substring Pattern",
    "question": "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.",
    "examples": [
        "Input: s = \"abab\"",
        "Output: true",
        "Explanation: It is the substring \"ab\" twice.",
        "Input: s = \"aba\"",
        "Output: false",
        "Input: s = \"abcabcabcabc\"",
        "Output: true",
        "Explanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 104s consists of lowercase English letters."
    ]
},
{
    "id": "1375",
    "title": "Bulb Switcher III",
    "question": "There is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right.\n Initially, all the bulbs are turned off.\nAt moment k (for k from 0 to n - 1), we turn on the light[k] bulb.\n A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.\nReturn the number of moments in which all turned on bulbs are blue.",
    "examples": [
        "Input: light = [2,1,3,5,4]",
        "Output: 3",
        "Explanation: All bulbs turned on, are blue at the moment 1, 2 and 4.",
        "Input: light = [3,2,4,1,5]",
        "Output: 2",
        "Explanation: All bulbs turned on, are blue at the moment 3, and 4 (index-0).",
        "Input: light = [4,1,2,3]",
        "Output: 1",
        "Explanation: All bulbs turned on, are blue at the moment 3 (index-0).",
        "Bulb 4th changes to blue at the moment 3.",
        "Input: light = [2,1,4,3,6,5]",
        "Output: 3",
        "Input: light = [1,2,3,4,5,6]",
        "Output: 6",
        ""
    ],
    "constraints": [
        "n == light. length1 <= n <= 5 * 10^4light is a permutation of  [1",
        " 2",
        " ...",
        " n]"
    ]
},
{
    "id": "1376",
    "title": "Time Needed to Inform All Employees",
    "question": "A company has n employees with a unique ID for each employee from 0 to n - 1.\n The head of the company is the one with headID.\nEach employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1.\n Also, it is guaranteed that the subordination relationships have a tree structure.\nThe head of the company wants to inform all the company employees of an urgent piece of news.\n He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\nThe i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.\ne.\n, After informTime[i] minutes, all his direct subordinates can start spreading the news).\nReturn the number of minutes needed to inform all the employees about the urgent news.",
    "examples": [
        "Input: n = 1, headID = 0, manager = [-1], informTime = [0]",
        "Output: 0",
        "Explanation: The head of the company is the only employee in the company.",
        "Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]",
        "Output: 1",
        "Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.",
        "The tree structure of the employees in the company is shown.",
        "Input: n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]",
        "Output: 21",
        "Explanation: The head has id = 6. He will inform employee with id = 5 in 1 minute.",
        "The employee with id = 5 will inform the employee with id = 4 in 2 minutes.",
        "The employee with id = 4 will inform the employee with id = 3 in 3 minutes.",
        "The employee with id = 3 will inform the employee with id = 2 in 4 minutes.",
        "The employee with id = 2 will inform the employee with id = 1 in 5 minutes.",
        "The employee with id = 1 will inform the employee with id = 0 in 6 minutes.",
        "Needed time = 1 + 2 + 3 + 4 + 5 + 6 = 21.",
        "Input: n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]",
        "Output: 3",
        "Explanation: The first minute the head will inform employees 1 and 2.",
        "The second minute they will inform employees 3, 4, 5 and 6.",
        "The third minute they will inform the rest of employees.",
        "Input: n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]",
        "Output: 1076",
        ""
    ],
    "constraints": [
        "1 <= n <= 1050 <= headID < nmanager. length == n0 <= manager[i] < nmanager[headID] == -1informTime. length == n0 <= informTime[i] <= 1000informTime[i] == 0 if employee i has no subordinates. It is guaranteed that all the employees can be informed."
    ]
},
{
    "id": "1379",
    "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    "question": "Given two binary trees original and cloned and given a reference to a node target in the original tree.\nThe cloned tree is a copy of the original tree.\nReturn a reference to the same node in the cloned tree.\nNote that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.\nFollow up: Solve the problem if repeated values on the tree are allowed.",
    "examples": [
        "Input: tree = [7,4,3,null,null,6,19], target = 3",
        "Output: 3",
        "Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.",
        "Input: tree = [7], target =  7",
        "Output: 7",
        "Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4",
        "Output: 4",
        "Input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5",
        "Output: 5",
        "Input: tree = [1,2,null,3], target = 2",
        "Output: 2",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 10^4]. The values of the nodes of the tree are unique. target node is a node from the original tree and is not null."
    ]
},
{
    "id": "1381",
    "title": "Design a Stack With Increment Operation",
    "question": "Design a stack which supports the following operations.\nImplement the CustomStack class:",
    "examples": [
        "Input",
        "[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]",
        "[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]",
        "Output",
        "[null,null,null,2,null,null,null,null,null,103,202,201,-1]",
        "Explanation",
        "CustomStack customStack = new CustomStack(3); // Stack is Empty []",
        "customStack. push(1);                          // stack becomes [1]",
        "customStack. push(2);                          // stack becomes [1, 2]",
        "customStack. pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]",
        "customStack. push(2);                          // stack becomes [1, 2]",
        "customStack. push(3);                          // stack becomes [1, 2, 3]",
        "customStack. push(4);                          // stack still [1, 2, 3], Don't add another elements as size is 4",
        "customStack. increment(5, 100);                // stack becomes [101, 102, 103]",
        "customStack. increment(2, 100);                // stack becomes [201, 202, 103]",
        "customStack. pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]",
        "customStack. pop();                            // return 202 --> Return top of the stack 102, stack becomes [201]",
        "customStack. pop();                            // return 201 --> Return top of the stack 101, stack becomes []",
        "customStack. pop();                            // return -1 --> Stack is empty return -1.",
        ""
    ],
    "constraints": [
        "CustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack or do nothing if the stack reached the maxSize. void push(int x) Adds x to the top of the stack if the stack hasn't reached the maxSize. int pop() Pops and returns the top of stack or -1 if the stack is empty. void inc(int k",
        " int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack",
        " just increment all the elements in the stack. 1 <= maxSize <= 10001 <= x <= 10001 <= k <= 10000 <= val <= 100At most 1000 calls will be made to each method of increment",
        " push and pop each separately."
    ]
},
{
    "id": "1382",
    "title": "Balance a Binary Search Tree",
    "question": "Given the root of a binary search tree, return a balanced binary search tree with the same node values.\n If there is more than one answer, return any of them.\nA binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.",
    "examples": [
        "Input: root = [1,null,2,null,3,null,4,null,null]",
        "Output: [2,1,3,null,null,null,4]",
        "Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct.",
        "Input: root = [2,1,3]",
        "Output: [2,1,3]",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 104]. 1 <= Node. val <= 105"
    ]
},
{
    "id": "1386",
    "title": "Cinema Seat Allocation",
    "question": "A cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.\nGiven the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved.\nReturn the maximum number of four-person groups you can assign on the cinema seats.\n A four-person group occupies four adjacent seats in one single row.\n Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.",
    "examples": [
        "Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]",
        "Output: 4",
        "Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.",
        "Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]",
        "Output: 2",
        "Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^91 <= reservedSeats. length <= min(10*n",
        " 10^4)reservedSeats[i]. length == 21 <= reservedSeats[i][0] <= n1 <= reservedSeats[i][1] <= 10All reservedSeats[i] are distinct."
    ]
},
{
    "id": "1387",
    "title": "Sort Integers by The Power Value",
    "question": "The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).\nGiven three integers lo, hi and k.\n The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.\nReturn the k-th integer in the range [lo, hi] sorted by the power value.\nNotice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in 32 bit signed integer.",
    "examples": [
        "Input: lo = 12, hi = 15, k = 2",
        "Output: 13",
        "Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)",
        "The power of 13 is 9",
        "The power of 14 is 17",
        "The power of 15 is 17",
        "The interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.",
        "Notice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.",
        "Input: lo = 1, hi = 1, k = 1",
        "Output: 1",
        "Input: lo = 7, hi = 11, k = 4",
        "Output: 7",
        "Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].",
        "The interval sorted by power is [8, 10, 11, 7, 9].",
        "The fourth number in the sorted array is 7.",
        "Input: lo = 10, hi = 20, k = 5",
        "Output: 13",
        "Input: lo = 1, hi = 1000, k = 777",
        "Output: 570",
        ""
    ],
    "constraints": [
        "if x is even then x = x / 2if x is odd then x = 3 * x + 11 <= lo <= hi <= 10001 <= k <= hi - lo + 1"
    ]
},
{
    "id": "1390",
    "title": "Four Divisors",
    "question": "Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors.\n If there is no such integer in the array, return 0.",
    "examples": [
        "Input: nums = [21,4,7]",
        "Output: 32",
        "Explanation: ",
        "21 has 4 divisors: 1, 3, 7, 21",
        "4 has 3 divisors: 1, 2, 4",
        "7 has 2 divisors: 1, 7",
        "The answer is the sum of divisors of 21 only.",
        "Input: nums = [21,21]",
        "Output: 64",
        "Input: nums = [1,2,3,4,5]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1041 <= nums[i] <= 105"
    ]
},
{
    "id": "1391",
    "title": "Check if There is a Valid Path in a Grid",
    "question": "You will initially start at the street of the upper-left cell (0,0).\n A valid path in the grid is a path which starts from the upper left cell (0,0) and ends at the bottom-right cell (m - 1, n - 1).\n The path should only follow the streets.\nNotice that you are not allowed to change any street.\nReturn true if there is a valid path in the grid or false otherwise.",
    "examples": [
        "Input: grid = [[2,4,3],[6,5,2]]",
        "Output: true",
        "Explanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).",
        "Input: grid = [[1,2,1],[1,2,1]]",
        "Output: false",
        "Explanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)",
        "Input: grid = [[1,1,2]]",
        "Output: false",
        "Explanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).",
        "Input: grid = [[1,1,1,1,1,1,3]]",
        "Output: true",
        "Input: grid = [[2],[2],[2],[2],[2],[2],[6]]",
        "Output: true",
        ""
    ],
    "constraints": [
        "1 which means a street connecting the left cell and the right cell. 2 which means a street connecting the upper cell and the lower cell. 3 which means a street connecting the left cell and the lower cell. 4 which means a street connecting the right cell and the lower cell. 5 which means a street connecting the left cell and the upper cell. 6 which means a street connecting the right cell and the upper cell. m == grid. lengthn == grid[i]. length1 <= m",
        " n <= 3001 <= grid[i][j] <= 6"
    ]
},
{
    "id": "1395",
    "title": "Count Number of Teams",
    "question": "There are n soldiers standing in a line.\n Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers amongst them under the following rules:Return the number of teams you can form given the conditions.\n (soldiers can be part of multiple teams).",
    "examples": [
        "Input: rating = [2,5,3,4,1]",
        "Output: 3",
        "Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). ",
        "Input: rating = [2,1,3]",
        "Output: 0",
        "Explanation: We can't form any team given the conditions.",
        "Input: rating = [1,2,3,4]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "Choose 3 soldiers with index (i",
        " j",
        " k) with rating (rating[i]",
        " rating[j]",
        " rating[k]). A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n). n == rating. length3 <= n <= 10001 <= rating[i] <= 105All the integers in rating are unique."
    ]
},
{
    "id": "461",
    "title": "Hamming Distance",
    "question": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers x and y, return the Hamming distance between them.",
    "examples": [
        "Input: x = 1, y = 4",
        "Output: 2",
        "Explanation:",
        "1   (0 0 0 1)",
        "4   (0 1 0 0)",
        "       ↑   ↑",
        "The above arrows point to positions where the corresponding bits are different.",
        "Input: x = 3, y = 1",
        "Output: 1",
        ""
    ],
    "constraints": [
        "0 <= x",
        " y <= 231 - 1"
    ]
},
{
    "id": "1396",
    "title": "Design Underground System",
    "question": "An underground railway system is keeping track of customer travel times between different stations.\n They are using this data to calculate the average time it takes to travel from one station to another.\nImplement the UndergroundSystem class:You may assume all calls to the checkIn and checkOut methods are consistent.\n If a customer checks in at time t1 then checks out at time t2, then t1 < t2.\n All events happen in chronological order.",
    "examples": [
        "Input",
        "[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]",
        "[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]",
        "",
        "Output",
        "[null,null,null,null,null,null,null,14. 00000,11. 00000,null,11. 00000,null,12. 00000]",
        "",
        "Explanation",
        "UndergroundSystem undergroundSystem = new UndergroundSystem();",
        "undergroundSystem. checkIn(45, \"Leyton\", 3);",
        "undergroundSystem. checkIn(32, \"Paradise\", 8);",
        "undergroundSystem. checkIn(27, \"Leyton\", 10);",
        "undergroundSystem. checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12",
        "undergroundSystem. checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10",
        "undergroundSystem. checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14",
        "undergroundSystem. getAverageTime(\"Paradise\", \"Cambridge\"); // return 14. 00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14",
        "undergroundSystem. getAverageTime(\"Leyton\", \"Waterloo\");    // return 11. 00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11",
        "undergroundSystem. checkIn(10, \"Leyton\", 24);",
        "undergroundSystem. getAverageTime(\"Leyton\", \"Waterloo\");    // return 11. 00000",
        "undergroundSystem. checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14",
        "undergroundSystem. getAverageTime(\"Leyton\", \"Waterloo\");    // return 12. 00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12",
        "Input",
        "[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]",
        "[[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]",
        "",
        "Output",
        "[null,null,null,5. 00000,null,null,5. 50000,null,null,6. 66667]",
        "",
        "Explanation",
        "UndergroundSystem undergroundSystem = new UndergroundSystem();",
        "undergroundSystem. checkIn(10, \"Leyton\", 3);",
        "undergroundSystem. checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5",
        "undergroundSystem. getAverageTime(\"Leyton\", \"Paradise\"); // return 5. 00000, (5) / 1 = 5",
        "undergroundSystem. checkIn(5, \"Leyton\", 10);",
        "undergroundSystem. checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6",
        "undergroundSystem. getAverageTime(\"Leyton\", \"Paradise\"); // return 5. 50000, (5 + 6) / 2 = 5. 5",
        "undergroundSystem. checkIn(2, \"Leyton\", 21);",
        "undergroundSystem. checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9",
        "undergroundSystem. getAverageTime(\"Leyton\", \"Paradise\"); // return 6. 66667, (5 + 6 + 9) / 3 = 6. 66667",
        ""
    ],
    "constraints": [
        "void checkIn(int id",
        " string stationName",
        " int t)\n\nA customer with a card ID equal to id",
        " checks in at the station stationName at time t.\nA customer can only be checked into one place at a time.\n\nA customer with a card ID equal to id",
        " checks in at the station stationName at time t. A customer can only be checked into one place at a time. void checkOut(int id",
        " string stationName",
        " int t)\n\nA customer with a card ID equal to id",
        " checks out from the station stationName at time t.\n\nA customer with a card ID equal to id",
        " checks out from the station stationName at time t. double getAverageTime(string startStation",
        " string endStation)\n\nReturns the average time it takes to travel from startStation to endStation.\nThe average time is computed from all the previous traveling times from startStation to endStation that happened directly",
        " meaning a check in at startStation followed by a check out from endStation.\nThe time it takes to travel from startStation to endStation may be different from the time it takes to travel from endStation to startStation.\nThere will be at least one customer that has traveled from startStation to endStation before getAverageTime is called.\n\nReturns the average time it takes to travel from startStation to endStation. The average time is computed from all the previous traveling times from startStation to endStation that happened directly",
        " meaning a check in at startStation followed by a check out from endStation. The time it takes to travel from startStation to endStation may be different from the time it takes to travel from endStation to startStation. There will be at least one customer that has traveled from startStation to endStation before getAverageTime is called. 1 <= id",
        " t <= 1061 <= stationName. length",
        " startStation. length",
        " endStation. length <= 10All strings consist of uppercase and lowercase English letters and digits. There will be at most 2 * 104 calls in total to checkIn",
        " checkOut",
        " and getAverageTime. Answers within 10-5 of the actual value will be accepted."
    ]
},
{
    "id": "1400",
    "title": "Construct K Palindrome Strings",
    "question": "Given a string s and an integer k.\n You should construct k non-empty palindrome strings using all the characters in s.\nReturn True if you can use all the characters in s to construct k palindrome strings or False otherwise.",
    "examples": [
        "Input: s = \"annabelle\", k = 2",
        "Output: true",
        "Explanation: You can construct two palindromes using all characters in s.",
        "Some possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"",
        "Input: s = \"leetcode\", k = 3",
        "Output: false",
        "Explanation: It is impossible to construct 3 palindromes using all the characters of s.",
        "Input: s = \"true\", k = 4",
        "Output: true",
        "Explanation: The only possible solution is to put each character in a separate string.",
        "Input: s = \"yzyzyzyzyzyzyzy\", k = 2",
        "Output: true",
        "Explanation: Simply you can put all z's in one string and all y's in the other string. Both strings will be palindrome.",
        "Input: s = \"cr\", k = 7",
        "Output: false",
        "Explanation: We don't have enough characters in s to construct 7 palindromes.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 10^5All characters in s are lower-case English letters. 1 <= k <= 10^5"
    ]
},
{
    "id": "1401",
    "title": "Circle and Rectangle Overlapping",
    "question": "Given a circle represented as (radius, x_center, y_center) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.\nReturn True if the circle and rectangle are overlapped otherwise return False.\nIn other words, check if there are any point (xi, yi) such that belongs to the circle and the rectangle at the same time.",
    "examples": [
        "Input: radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1",
        "Output: true",
        "Explanation: Circle and rectangle share the point (1,0) ",
        "Input: radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1",
        "Output: true",
        "Input: radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3",
        "Output: true",
        "Input: radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= radius <= 2000-10^4 <= x_center",
        " y_center",
        " x1",
        " y1",
        " x2",
        " y2 <= 10^4x1 < x2y1 < y2"
    ]
},
{
    "id": "1404",
    "title": "Number of Steps to Reduce a Number in Binary Representation to One",
    "question": "Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:It is guaranteed that you can always reach one for all test cases.",
    "examples": [
        "Input: s = \"1101\"",
        "Output: 6",
        "Explanation: \"1101\" corressponds to number 13 in their decimal representation.",
        "Step 1) 13 is odd, add 1 and obtain 14. ",
        "Step 2) 14 is even, divide by 2 and obtain 7.",
        "Step 3) 7 is odd, add 1 and obtain 8.",
        "Step 4) 8 is even, divide by 2 and obtain 4.  ",
        "Step 5) 4 is even, divide by 2 and obtain 2. ",
        "Step 6) 2 is even, divide by 2 and obtain 1.  ",
        "Input: s = \"10\"",
        "Output: 1",
        "Explanation: \"10\" corressponds to number 2 in their decimal representation.",
        "Step 1) 2 is even, divide by 2 and obtain 1.  ",
        "Input: s = \"1\"",
        "Output: 0",
        ""
    ],
    "constraints": [
        "\nIf the current number is even",
        " you have to divide it by 2.\n\nIf the current number is odd",
        " you have to add 1 to it.\n1 <= s. length <= 500s consists of characters '0' or '1's[0] == '1'"
    ]
},
{
    "id": "1405",
    "title": "Longest Happy String",
    "question": "A string is called happy if it does not have any of the strings 'aaa', 'bbb' or 'ccc' as a substring.\nGiven three integers a, b and c, return any string s, which satisfies following conditions:If there is no such string s return the empty string \"\".",
    "examples": [
        "Input: a = 1, b = 1, c = 7",
        "Output: \"ccaccbcc\"",
        "Explanation: \"ccbccacc\" would also be a correct answer.",
        "Input: a = 2, b = 2, c = 1",
        "Output: \"aabbc\"",
        "Input: a = 7, b = 1, c = 0",
        "Output: \"aabaa\"",
        "Explanation: It's the only correct answer in this case.",
        ""
    ],
    "constraints": [
        "s is happy and longest possible. s contains at most a occurrences of the letter 'a'",
        " at most b occurrences of the letter 'b' and at most c occurrences of the letter 'c'. s will only contain 'a'",
        " 'b' and 'c' letters. 0 <= a",
        " b",
        " c <= 100a + b + c > 0"
    ]
},
{
    "id": "1409",
    "title": "Queries on a Permutation With Key",
    "question": "Given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.\nlength-1) according to the following rules:Return an array containing the result for the given queries.",
    "examples": [
        "Input: queries = [3,1,2,1], m = 5",
        "Output: [2,1,2,1] ",
        "Explanation: The queries are processed as follow: ",
        "For i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. ",
        "For i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. ",
        "For i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. ",
        "For i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. ",
        "Therefore, the array containing the result is [2,1,2,1].  ",
        "Input: queries = [4,1,2,2], m = 4",
        "Output: [3,1,2,0]",
        "Input: queries = [7,5,5,8,3], m = 8",
        "Output: [6,5,0,7,5]",
        ""
    ],
    "constraints": [
        "In the beginning",
        " you have the permutation P=[1",
        "2",
        "3",
        "...",
        "m]. For the current i",
        " find the position of queries[i] in the permutation P (indexing from 0) and then move this at the beginning of the permutation P. Notice that the position of queries[i] in P is the result for queries[i]. 1 <= m <= 10^31 <= queries. length <= m1 <= queries[i] <= m"
    ]
},
{
    "id": "1410",
    "title": "HTML Entity Parser",
    "question": "HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.\nThe special characters and their entities for HTML are:Given the input text string to the HTML parser, you have to implement the entity parser.\nReturn the text after replacing the entities by the special characters.",
    "examples": [
        "Input: text = \"&amp; is an HTML entity but &ambassador; is not.\"",
        "Output: \"& is an HTML entity but &ambassador; is not.\"",
        "Explanation: The parser will replace the &amp; entity by &",
        "Input: text = \"and I quote: &quot;...&quot;\"",
        "Output: \"and I quote: \\\"...\\\"\"",
        "Input: text = \"Stay home! Practice on Leetcode :)\"",
        "Output: \"Stay home! Practice on Leetcode :)\"",
        "Input: text = \"x &gt; y &amp;&amp; x &lt; y is always false\"",
        "Output: \"x > y && x < y is always false\"",
        "Input: text = \"leetcode. com&frasl;problemset&frasl;all\"",
        "Output: \"leetcode. com/problemset/all\"",
        ""
    ],
    "constraints": [
        "Quotation Mark: the entity is &quot; and symbol character is \". Single Quote Mark: the entity is &apos; and symbol character is '. Ampersand: the entity is &amp; and symbol character is &. Greater Than Sign: the entity is &gt; and symbol character is >. Less Than Sign: the entity is &lt; and symbol character is <. Slash: the entity is &frasl; and symbol character is /. 1 <= text. length <= 10^5The string may contain any possible characters out of all the 256 ASCII characters."
    ]
},
{
    "id": "1414",
    "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
    "question": "Given an integer k, return the minimum number of Fibonacci numbers whose sum is equal to k.\n The same Fibonacci number can be used multiple times.\nThe Fibonacci numbers are defined as:",
    "examples": [
        "Input: k = 7",
        "Output: 2 ",
        "Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... ",
        "For k = 7 we can use 2 + 5 = 7. Input: k = 10",
        "Output: 2 ",
        "Explanation: For k = 10 we can use 2 + 8 = 10.",
        "Input: k = 19",
        "Output: 3 ",
        "Explanation: For k = 19 we can use 1 + 5 + 13 = 19.",
        ""
    ],
    "constraints": [
        "F1 = 1F2 = 1Fn = Fn-1 + Fn-2 for n > 2. 1 <= k <= 10^9"
    ]
},
{
    "id": "1415",
    "title": "The k-th Lexicographical String of All Happy Strings of Length n",
    "question": "A happy string is a string that:For example, strings \"abc\", \"ac\", \"b\" and \"abcbabcbcb\" are all happy strings and strings \"aa\", \"baa\" and \"ababbc\" are not happy strings.\nGiven two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.\nReturn the kth string of this list or return an empty string if there are less than k happy strings of length n.",
    "examples": [
        "Input: n = 1, k = 3",
        "Output: \"c\"",
        "Explanation: The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\".",
        "Input: n = 1, k = 4",
        "Output: \"\"",
        "Explanation: There are only 3 happy strings of length 1.",
        "Input: n = 3, k = 9",
        "Output: \"cab\"",
        "Explanation: There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\"",
        "Input: n = 2, k = 7",
        "Output: \"\"",
        "Input: n = 10, k = 100",
        "Output: \"abacbabacb\"",
        ""
    ],
    "constraints": [
        "consists only of letters of the set ['a'",
        " 'b'",
        " 'c']. s[i] != s[i + 1] for all values of i from 1 to s. length - 1 (string is 1-indexed). 1 <= n <= 101 <= k <= 100"
    ]
},
{
    "id": "1418",
    "title": "Display Table of Food Orders in a Restaurant",
    "question": "Given the array orders, which represents the orders that customers have done in a restaurant.\n More specifically orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi is the table customer sit at, and foodItemi is the item customer orders.\nReturn the restaurant's “display table”.\n The “display table” is a table whose row entries denote how many of each food item each table ordered.\n The first column is the table number and the remaining columns correspond to each food item in alphabetical order.\n The first row should be a header whose first column is “Table”, followed by the names of the food items.\n Note that the customer names are not part of the table.\n Additionally, the rows should be sorted in numerically increasing order.",
    "examples": [
        "Input: orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]",
        "Output: [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] ",
        "Explanation:",
        "The displaying table looks like:",
        "Table,Beef Burrito,Ceviche,Fried Chicken,Water",
        "3    ,0           ,2      ,1            ,0",
        "5    ,0           ,1      ,0            ,1",
        "10   ,1           ,0      ,0            ,0",
        "For the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".",
        "For the table 5: Carla orders \"Water\" and \"Ceviche\".",
        "For the table 10: Corina orders \"Beef Burrito\". ",
        "Input: orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]",
        "Output: [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] ",
        "Explanation: ",
        "For the table 1: Adam and Brianna order \"Canadian Waffles\".",
        "For the table 12: James, Ratesh and Amadeus order \"Fried Chicken\".",
        "Input: orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]",
        "Output: [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]",
        ""
    ],
    "constraints": [
        "1 <= orders. length <= 5 * 10^4orders[i]. length == 31 <= customerNamei. length",
        " foodItemi. length <= 20customerNamei and foodItemi consist of lowercase and uppercase English letters and the space character. tableNumberi is a valid integer between 1 and 500."
    ]
},
{
    "id": "463",
    "title": "Island Perimeter",
    "question": "You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.\nGrid cells are connected horizontally/vertically (not diagonally).\n The grid is completely surrounded by water, and there is exactly one island (i.\ne.\n, one or more connected land cells).\nThe island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island.\n One cell is a square with side length 1.\n The grid is rectangular, width and height don't exceed 100.\n Determine the perimeter of the island.",
    "examples": [
        "Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]",
        "Output: 16",
        "Explanation: The perimeter is the 16 yellow stripes in the image above.",
        "Input: grid = [[1]]",
        "Output: 4",
        "Input: grid = [[1,0]]",
        "Output: 4",
        ""
    ],
    "constraints": [
        "row == grid. lengthcol == grid[i]. length1 <= row",
        " col <= 100grid[i][j] is 0 or 1."
    ]
},
{
    "id": "1419",
    "title": "Minimum Number of Frogs Croaking",
    "question": "Given the string croakOfFrogs, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple “croak” are mixed.\n Return the minimum number of different frogs to finish all the croak in the given string.\nA valid \"croak\" means a frog is printing 5 letters ‘c’, ’r’, ’o’, ’a’, ’k’ sequentially.\n The frogs have to print all five letters to finish a croak.\n If the given string is not a combination of valid \"croak\" return -1.",
    "examples": [
        "Input: croakOfFrogs = \"croakcroak\"",
        "Output: 1 ",
        "Explanation: One frog yelling \"croak\" twice.",
        "Input: croakOfFrogs = \"crcoakroak\"",
        "Output: 2 ",
        "Explanation: The minimum number of frogs is two. ",
        "The first frog could yell \"crcoakroak\".",
        "The second frog could yell later \"crcoakroak\".",
        "Input: croakOfFrogs = \"croakcrook\"",
        "Output: -1",
        "Explanation: The given string is an invalid combination of \"croak\" from different frogs.",
        "Input: croakOfFrogs = \"croakcroa\"",
        "Output: -1",
        ""
    ],
    "constraints": [
        "1 <= croakOfFrogs. length <= 10^5All characters in the string are: 'c'",
        " 'r'",
        " 'o'",
        " 'a' or 'k'."
    ]
},
{
    "id": "1423",
    "title": "Maximum Points You Can Obtain from Cards",
    "question": "There are several cards arranged in a row, and each card has an associated number of points.\n The points are given in the integer array cardPoints.\nIn one step, you can take one card from the beginning or from the end of the row.\n You have to take exactly k cards.\nYour score is the sum of the points of the cards you have taken.\nGiven the integer array cardPoints and the integer k, return the maximum score you can obtain.",
    "examples": [
        "Input: cardPoints = [1,2,3,4,5,6,1], k = 3",
        "Output: 12",
        "Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.",
        "Input: cardPoints = [2,2,2], k = 2",
        "Output: 4",
        "Explanation: Regardless of which two cards you take, your score will always be 4.",
        "Input: cardPoints = [9,7,7,9,7,7,9], k = 7",
        "Output: 55",
        "Explanation: You have to take all the cards. Your score is the sum of points of all cards.",
        "Input: cardPoints = [1,1000,1], k = 1",
        "Output: 1",
        "Explanation: You cannot take the card in the middle. Your best score is 1. ",
        "Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3",
        "Output: 202",
        ""
    ],
    "constraints": [
        "1 <= cardPoints. length <= 1051 <= cardPoints[i] <= 1041 <= k <= cardPoints. length"
    ]
},
{
    "id": "1424",
    "title": "Diagonal Traverse II",
    "question": "",
    "examples": [
        "Input: nums = [[1,2,3],[4,5,6],[7,8,9]]",
        "Output: [1,4,2,7,5,3,8,6,9]",
        "Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]",
        "Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]",
        "Input: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]",
        "Output: [1,4,2,5,3,8,6,9,7,10,11]",
        "Input: nums = [[1,2,3,4,5,6]]",
        "Output: [1,2,3,4,5,6]",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10^51 <= nums[i]. length <= 10^51 <= nums[i][j] <= 10^9There at most 10^5 elements in nums."
    ]
},
{
    "id": "1432",
    "title": "Max Difference You Can Get From Changing an Integer",
    "question": "You are given an integer num.\n You will apply the following steps exactly two times:Let a and b be the results of applying the operations to num the first and second times, respectively.\nReturn the max difference between a and b.",
    "examples": [
        "Input: num = 555",
        "Output: 888",
        "Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.",
        "The second time pick x = 5 and y = 1 and store the new integer in b.",
        "We have now a = 999 and b = 111 and max difference = 888",
        "Input: num = 9",
        "Output: 8",
        "Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.",
        "The second time pick x = 9 and y = 1 and store the new integer in b.",
        "We have now a = 9 and b = 1 and max difference = 8",
        "Input: num = 123456",
        "Output: 820000",
        "Input: num = 10000",
        "Output: 80000",
        "Input: num = 9288",
        "Output: 8700",
        ""
    ],
    "constraints": [
        "Pick a digit x (0 <= x <= 9). Pick another digit y (0 <= y <= 9). The digit y can be equal to x. Replace all the occurrences of x in the decimal representation of num by y. The new integer cannot have any leading zeros",
        " also the new integer cannot be 0. 1 <= num <= 10^8"
    ]
},
{
    "id": "1433",
    "title": "Check If a String Can Break Another String",
    "question": "Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa.\n In other words s2 can break s1 or vice-versa.\nA string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.",
    "examples": [
        "Input: s1 = \"abc\", s2 = \"xya\"",
        "Output: true",
        "Explanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\".",
        "Input: s1 = \"abe\", s2 = \"acd\"",
        "Output: false ",
        "Explanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.",
        "Input: s1 = \"leetcodee\", s2 = \"interview\"",
        "Output: true",
        ""
    ],
    "constraints": [
        "s1. length == ns2. length == n1 <= n <= 10^5All strings consist of lowercase English letters."
    ]
},
{
    "id": "1438",
    "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "question": "Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.",
    "examples": [
        "Input: nums = [8,2,4,7], limit = 4",
        "Output: 2 ",
        "Explanation: All subarrays are: ",
        "[8] with maximum absolute diff |8-8| = 0 <= 4.",
        "[8,2] with maximum absolute diff |8-2| = 6 > 4. ",
        "[8,2,4] with maximum absolute diff |8-2| = 6 > 4.",
        "[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.",
        "[2] with maximum absolute diff |2-2| = 0 <= 4.",
        "[2,4] with maximum absolute diff |2-4| = 2 <= 4.",
        "[2,4,7] with maximum absolute diff |2-7| = 5 > 4.",
        "[4] with maximum absolute diff |4-4| = 0 <= 4.",
        "[4,7] with maximum absolute diff |4-7| = 3 <= 4.",
        "[7] with maximum absolute diff |7-7| = 0 <= 4. ",
        "Therefore, the size of the longest subarray is 2.",
        "Input: nums = [10,1,2,4,7,2], limit = 5",
        "Output: 4 ",
        "Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.",
        "Input: nums = [4,2,2,2,4,4,2,2], limit = 0",
        "Output: 3",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 1051 <= nums[i] <= 1090 <= limit <= 109"
    ]
},
{
    "id": "1442",
    "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
    "question": "Given an array of integers arr.\nWe want to select three indices i, j and k where (0 <= i < j <= k < arr.\nlength).\nLet's define a and b as follows:Note that ^ denotes the bitwise-xor operation.\nReturn the number of triplets (i, j and k) Where a == b.",
    "examples": [
        "Input: arr = [2,3,1,6,7]",
        "Output: 4",
        "Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)",
        "Input: arr = [1,1,1,1,1]",
        "Output: 10",
        "Input: arr = [2,3]",
        "Output: 0",
        "Input: arr = [1,3,5,7,9]",
        "Output: 3",
        "Input: arr = [7,11,12,9,5,2,7,17,22]",
        "Output: 8",
        ""
    ],
    "constraints": [
        "a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]1 <= arr. length <= 3001 <= arr[i] <= 10^8"
    ]
},
{
    "id": "1443",
    "title": "Minimum Time to Collect All Apples in a Tree",
    "question": "Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices.\n You spend 1 second to walk over one edge of the tree.\n Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.\n Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.",
    "examples": [
        "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]",
        "Output: 8 ",
        "Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  ",
        "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]",
        "Output: 6",
        "Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  ",
        "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= n <= 10^5edges. length == n - 1edges[i]. length == 20 <= ai < bi <= n - 1fromi < toihasApple. length == n"
    ]
},
{
    "id": "1447",
    "title": "Simplified Fractions",
    "question": "Given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n.\n The fractions can be in any order.",
    "examples": [
        "Input: n = 2",
        "Output: [\"1/2\"]",
        "Explanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2. Input: n = 3",
        "Output: [\"1/2\",\"1/3\",\"2/3\"]",
        "Input: n = 4",
        "Output: [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]",
        "Explanation: \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\". Input: n = 1",
        "Output: []",
        ""
    ],
    "constraints": [
        "1 <= n <= 100"
    ]
},
{
    "id": "1448",
    "title": "Count Good Nodes in Binary Tree",
    "question": "Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.\nReturn the number of good nodes in the binary tree.",
    "examples": [
        "Input: root = [3,1,4,3,null,1,5]",
        "Output: 4",
        "Explanation: Nodes in blue are good.",
        "Root Node (3) is always a good node.",
        "Node 4 -> (3,4) is the maximum value in the path starting from the root.",
        "Node 5 -> (3,4,5) is the maximum value in the path",
        "Node 3 -> (3,1,3) is the maximum value in the path. Input: root = [3,3,null,4,2]",
        "Output: 3",
        "Explanation: Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it. Input: root = [1]",
        "Output: 1",
        "Explanation: Root is considered as good."
    ],
    "constraints": [
        "The number of nodes in the binary tree is in the range [1",
        " 10^5]. Each node's value is between [-10^4",
        " 10^4]."
    ]
},
{
    "id": "476",
    "title": "Number Complement",
    "question": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\nGiven an integer num, return its complement.\n   Note: This question is the same as 1009: https://leetcode.\ncom/problems/complement-of-base-10-integer/",
    "examples": [
        "Input: num = 5",
        "Output: 2",
        "Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.",
        "Input: num = 1",
        "Output: 0",
        "Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.",
        ""
    ],
    "constraints": [
        "For example",
        " The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2. 1 <= num < 231"
    ]
},
{
    "id": "1448",
    "title": "Count Good Nodes in Binary Tree",
    "question": "Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.\nReturn the number of good nodes in the binary tree.",
    "examples": [
        "Input: root = [3,1,4,3,null,1,5]",
        "Output: 4",
        "Explanation: Nodes in blue are good.",
        "Root Node (3) is always a good node.",
        "Node 4 -> (3,4) is the maximum value in the path starting from the root.",
        "Node 5 -> (3,4,5) is the maximum value in the path",
        "Node 3 -> (3,1,3) is the maximum value in the path. Input: root = [3,3,null,4,2]",
        "Output: 3",
        "Explanation: Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it. Input: root = [1]",
        "Output: 1",
        "Explanation: Root is considered as good."
    ],
    "constraints": [
        "The number of nodes in the binary tree is in the range [1",
        " 10^5]. Each node's value is between [-10^4",
        " 10^4]."
    ]
},
{
    "id": "1451",
    "title": "Rearrange Words in a Sentence",
    "question": "Given a sentence text (A sentence is a string of space-separated words) in the following format:Your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths.\n If two words have the same length, arrange them in their original order.\nReturn the new text following the format shown above.",
    "examples": [
        "Input: text = \"Leetcode is cool\"",
        "Output: \"Is cool leetcode\"",
        "Explanation: There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.",
        "Output is ordered by length and the new first word starts with capital letter.",
        "Input: text = \"Keep calm and code on\"",
        "Output: \"On and keep calm code\"",
        "Explanation: Output is ordered as follows:",
        "\"On\" 2 letters.",
        "\"and\" 3 letters.",
        "\"keep\" 4 letters in case of tie order by position in original text.",
        "\"calm\" 4 letters.",
        "\"code\" 4 letters.",
        "Input: text = \"To be or not to be\"",
        "Output: \"To be or to be not\"",
        ""
    ],
    "constraints": [
        "First letter is in upper case. Each word in text are separated by a single space. text begins with a capital letter and then contains lowercase letters and single space between words. 1 <= text. length <= 10^5"
    ]
},
{
    "id": "1452",
    "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
    "question": "Given the array favoriteCompanies where favoriteCompanies[i] is the list of favorites companies for the ith person (indexed from 0).\nReturn the indices of people whose list of favorite companies is not a subset of any other list of favorites companies.\n You must return the indices in increasing order.",
    "examples": [
        "Input: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]",
        "Output: [0,1,4] ",
        "Explanation: ",
        "Person with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0. ",
        "Person with index=3 has favoriteCompanies[3]=[\"google\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] and favoriteCompanies[1]=[\"google\",\"microsoft\"]. ",
        "Other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].",
        "Input: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]",
        "Output: [0,1] ",
        "Explanation: In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1].",
        "Input: favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]",
        "Output: [0,1,2,3]",
        ""
    ],
    "constraints": [
        "1 <= favoriteCompanies. length <= 1001 <= favoriteCompanies[i]. length <= 5001 <= favoriteCompanies[i][j]. length <= 20All strings in favoriteCompanies[i] are distinct. All lists of favorite companies are distinct",
        " that is",
        " If we sort alphabetically each list then favoriteCompanies[i] != favoriteCompanies[j]. All strings consist of lowercase English letters only."
    ]
},
{
    "id": "1456",
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "question": "Given a string s and an integer k.\nReturn the maximum number of vowel letters in any substring of s with length k.\nVowel letters in English are (a, e, i, o, u).",
    "examples": [
        "Input: s = \"abciiidef\", k = 3",
        "Output: 3",
        "Explanation: The substring \"iii\" contains 3 vowel letters.",
        "Input: s = \"aeiou\", k = 2",
        "Output: 2",
        "Explanation: Any substring of length 2 contains 2 vowels.",
        "Input: s = \"leetcode\", k = 3",
        "Output: 2",
        "Explanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.",
        "Input: s = \"rhythms\", k = 4",
        "Output: 0",
        "Explanation: We can see that s doesn't have any vowel letters.",
        "Input: s = \"tryhard\", k = 4",
        "Output: 1",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 10^5s consists of lowercase English letters. 1 <= k <= s. length"
    ]
},
{
    "id": "1457",
    "title": "Pseudo-Palindromic Paths in a Binary Tree",
    "question": "Given a binary tree where node values are digits from 1 to 9.\n A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.\nReturn the number of pseudo-palindromic paths going from the root node to leaf nodes.",
    "examples": [
        "Input: root = [2,3,1,3,1,null,1]",
        "Output: 2 ",
        "Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).",
        "Input: root = [2,1,1,1,3,null,null,null,null,null,1]",
        "Output: 1 ",
        "Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).",
        "Input: root = [9]",
        "Output: 1",
        ""
    ],
    "constraints": [
        "The number of nodes in the tree is in the range [1",
        " 105]. 1 <= Node. val <= 9"
    ]
},
{
    "id": "1461",
    "title": "Check If a String Contains All Binary Codes of Size K",
    "question": "Given a binary string s and an integer k.\nReturn true if every binary code of length k is a substring of s.\n Otherwise, return false.",
    "examples": [
        "Input: s = \"00110110\", k = 2",
        "Output: true",
        "Explanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.",
        "Input: s = \"00110\", k = 2",
        "Output: true",
        "Input: s = \"0110\", k = 1",
        "Output: true",
        "Explanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring. ",
        "Input: s = \"0110\", k = 2",
        "Output: false",
        "Explanation: The binary code \"00\" is of length 2 and doesn't exist in the array.",
        "Input: s = \"0000000001011100\", k = 4",
        "Output: false",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 5 * 105s[i] is either '0' or '1'. 1 <= k <= 20"
    ]
},
{
    "id": "1462",
    "title": "Course Schedule IV",
    "question": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1.\n You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi.\nPrerequisites can also be indirect.\n If course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c.\nYou are also given an array queries where queries[j] = [uj, vj].\n For the jth query, you should answer whether course uj is a prerequisite of course vj or not.\nReturn a boolean array answer, where answer[j] is the answer to the jth query.",
    "examples": [
        "Input: numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]",
        "Output: [false,true]",
        "Explanation: The pair [1, 0] indicates that you have to take course 1 before you can take course 0.",
        "Course 0 is not a prerequisite of course 1, but the opposite is true.",
        "Input: numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]",
        "Output: [false,false]",
        "Explanation: There are no prerequisites, and each course is independent.",
        "Input: numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]",
        "Output: [true,true]",
        ""
    ],
    "constraints": [
        "For example",
        " the pair [0",
        " 1] indicates that you have to take course 0 before you can take course 1. 2 <= numCourses <= 1000 <= prerequisites. length <= (numCourses * (numCourses - 1) / 2)prerequisites[i]. length == 20 <= ai",
        " bi <= n - 1ai != biAll the pairs [ai",
        " bi] are unique. The prerequisites graph has no cycles. 1 <= queries. length <= 1040 <= ui",
        " vi <= n - 1ui != vi"
    ]
},
{
    "id": "1465",
    "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
    "question": "You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts.\n Since the answer can be a large number, return this modulo 109 + 7.",
    "examples": [
        "Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]",
        "Output: 4 ",
        "Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.",
        "Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]",
        "Output: 6",
        "Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.",
        "Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]",
        "Output: 9",
        ""
    ],
    "constraints": [
        "horizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly",
        " andverticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut. 2 <= h",
        " w <= 1091 <= horizontalCuts. length <= min(h - 1",
        " 105)1 <= verticalCuts. length <= min(w - 1",
        " 105)1 <= horizontalCuts[i] < h1 <= verticalCuts[i] < wAll the elements in horizontalCuts are distinct. All the elements in verticalCuts are distinct."
    ]
},
{
    "id": "1466",
    "title": "Reorder Routes to Make All Paths Lead to the City Zero",
    "question": "There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree).\n Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.\nRoads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.\nThis year, there will be a big event in the capital (city 0), and many people want to travel to this city.\nYour task consists of reorienting some roads such that each city can visit the city 0.\n Return the minimum number of edges changed.\nIt's guaranteed that each city can reach city 0 after reorder.",
    "examples": [
        "Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]",
        "Output: 3",
        "Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).",
        "Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]",
        "Output: 2",
        "Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).",
        "Input: n = 3, connections = [[1,0],[2,0]]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "2 <= n <= 5 * 104connections. length == n - 1connections[i]. length == 20 <= ai",
        " bi <= n - 1ai != bi"
    ]
},
{
    "id": "1471",
    "title": "The k Strongest Values in an Array",
    "question": "Given an array of integers arr and an integer k.\nA value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array.\n\nIf |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].\nReturn a list of the strongest k values in the array.\n return the answer in any arbitrary order.\nMedian is the middle value in an ordered integer list.\n More formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed).",
    "examples": [
        "Input: arr = [1,2,3,4,5], k = 2",
        "Output: [5,1]",
        "Explanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.",
        "Please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.",
        "Input: arr = [1,1,3,5,5], k = 2",
        "Output: [5,5]",
        "Explanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].",
        "Input: arr = [6,7,11,7,6,8], k = 5",
        "Output: [11,8,6,6,7]",
        "Explanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].",
        "Any permutation of [11,8,6,6,7] is accepted.",
        "Input: arr = [6,-3,7,2,11], k = 3",
        "Output: [-3,11,2]",
        "Input: arr = [-7,22,17,3], k = 2",
        "Output: [22,17]",
        ""
    ],
    "constraints": [
        "For arr = [6",
        " -3",
        " 7",
        " 2",
        " 11]",
        " n = 5 and the median is obtained by sorting the array arr = [-3",
        " 2",
        " 6",
        " 7",
        " 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. The median is 6. For arr = [-7",
        " 22",
        " 17",
        " 3]",
        " n = 4 and the median is obtained by sorting the array arr = [-7",
        " 3",
        " 17",
        " 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. The median is 3. 1 <= arr. length <= 10^5-10^5 <= arr[i] <= 10^51 <= k <= arr. length"
    ]
},
{
    "id": "482",
    "title": "License Key Formatting",
    "question": "You are given a license key represented as a string s that consists of only alphanumeric characters and dashes.\n The string is separated into n + 1 groups by n dashes.\n You are also given an integer k.\nWe want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character.\n Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\nReturn the reformatted license key.",
    "examples": [
        "Input: s = \"5F3Z-2e-9-w\", k = 4",
        "Output: \"5F3Z-2E9W\"",
        "Explanation: The string s has been split into two parts, each part has 4 characters.",
        "Note that the two extra dashes are not needed and can be removed.",
        "Input: s = \"2-5g-3-J\", k = 2",
        "Output: \"2-5G-3J\"",
        "Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.",
        ""
    ],
    "constraints": [
        "1 <= s. length <= 105s consists of English letters",
        " digits",
        " and dashes '-'. 1 <= k <= 104"
    ]
},
{
    "id": "1472",
    "title": "Design Browser History",
    "question": "You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.\nImplement the BrowserHistory class: Example:",
    "examples": [
        "Input:",
        "[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]",
        "[[\"leetcode. com\"],[\"google. com\"],[\"facebook. com\"],[\"youtube. com\"],[1],[1],[1],[\"linkedin. com\"],[2],[2],[7]]",
        "Output:",
        "[null,null,null,null,\"facebook. com\",\"google. com\",\"facebook. com\",null,\"linkedin. com\",\"google. com\",\"leetcode. com\"]",
        "",
        "Explanation:",
        "BrowserHistory browserHistory = new BrowserHistory(\"leetcode. com\");",
        "browserHistory. visit(\"google. com\");       // You are in \"leetcode. com\". Visit \"google. com\"",
        "browserHistory. visit(\"facebook. com\");     // You are in \"google. com\". Visit \"facebook. com\"",
        "browserHistory. visit(\"youtube. com\");      // You are in \"facebook. com\". Visit \"youtube. com\"",
        "browserHistory. back(1);                   // You are in \"youtube. com\", move back to \"facebook. com\" return \"facebook. com\"",
        "browserHistory. back(1);                   // You are in \"facebook. com\", move back to \"google. com\" return \"google. com\"",
        "browserHistory. forward(1);                // You are in \"google. com\", move forward to \"facebook. com\" return \"facebook. com\"",
        "browserHistory. visit(\"linkedin. com\");     // You are in \"facebook. com\". Visit \"linkedin. com\"",
        "browserHistory. forward(2);                // You are in \"linkedin. com\", you cannot move forward any steps.",
        "browserHistory. back(2);                   // You are in \"linkedin. com\", move back two steps to \"facebook. com\" then to \"google. com\". return \"google. com\"",
        "browserHistory. back(7);                   // You are in \"google. com\", you can move back only one step to \"leetcode. com\". return \"leetcode. com\"",
        ""
    ],
    "constraints": [
        "BrowserHistory(string homepage) Initializes the object with the homepage of the browser. void visit(string url) Visits url from the current page. It clears up all the forward history. string back(int steps) Move steps back in history. If you can only return x steps in the history and steps > x",
        " you will return only x steps. Return the current url after moving back in history at most steps. string forward(int steps) Move steps forward in history. If you can only forward x steps in the history and steps > x",
        " you will forward only x steps. Return the current url after forwarding in history at most steps. 1 <= homepage. length <= 201 <= url. length <= 201 <= steps <= 100homepage and url consist of  '.' or lower case English letters. At most 5000 calls will be made to visit",
        " back",
        " and forward."
    ]
},
{
    "id": "1476",
    "title": "Subrectangle Queries",
    "question": "Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:1.\n updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)2.\n getValue(int row, int col)",
    "examples": [
        "Input",
        "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]",
        "[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]",
        "Output",
        "[null,1,null,5,5,null,10,5]",
        "Explanation",
        "SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  ",
        "// The initial rectangle (4x3) looks like:",
        "// 1 2 1",
        "// 4 3 4",
        "// 3 2 1",
        "// 1 1 1",
        "subrectangleQueries. getValue(0, 2); // return 1",
        "subrectangleQueries. updateSubrectangle(0, 0, 3, 2, 5);",
        "// After this update the rectangle looks like:",
        "// 5 5 5",
        "// 5 5 5",
        "// 5 5 5",
        "// 5 5 5 ",
        "subrectangleQueries. getValue(0, 2); // return 5",
        "subrectangleQueries. getValue(3, 1); // return 5",
        "subrectangleQueries. updateSubrectangle(3, 0, 3, 2, 10);",
        "// After this update the rectangle looks like:",
        "// 5   5   5",
        "// 5   5   5",
        "// 5   5   5",
        "// 10  10  10 ",
        "subrectangleQueries. getValue(3, 1); // return 10",
        "subrectangleQueries. getValue(0, 2); // return 5",
        "Input",
        "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]",
        "[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]",
        "Output",
        "[null,1,null,100,100,null,20]",
        "Explanation",
        "SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);",
        "subrectangleQueries. getValue(0, 0); // return 1",
        "subrectangleQueries. updateSubrectangle(0, 0, 2, 2, 100);",
        "subrectangleQueries. getValue(0, 0); // return 100",
        "subrectangleQueries. getValue(2, 2); // return 100",
        "subrectangleQueries. updateSubrectangle(1, 1, 2, 2, 20);",
        "subrectangleQueries. getValue(2, 2); // return 20",
        ""
    ],
    "constraints": [
        "Updates all values with newValue in the subrectangle whose upper left coordinate is (row1",
        "col1) and bottom right coordinate is (row2",
        "col2). Returns the current value of the coordinate (row",
        "col) from the rectangle. There will be at most 500 operations considering both methods: updateSubrectangle and getValue. 1 <= rows",
        " cols <= 100rows == rectangle. lengthcols == rectangle[i]. length0 <= row1 <= row2 < rows0 <= col1 <= col2 < cols1 <= newValue",
        " rectangle[i][j] <= 10^90 <= row < rows0 <= col < cols"
    ]
},
{
    "id": "1477",
    "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "question": "Given an array of integers arr and an integer target.\nYou have to find two non-overlapping sub-arrays of arr each with a sum equal target.\n There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.\nReturn the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.",
    "examples": [
        "Input: arr = [3,2,2,4,3], target = 3",
        "Output: 2",
        "Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.",
        "Input: arr = [7,3,4,7], target = 7",
        "Output: 2",
        "Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.",
        "Input: arr = [4,3,2,6,2,3,4], target = 6",
        "Output: -1",
        "Explanation: We have only one sub-array of sum = 6.",
        "Input: arr = [5,5,4,4,5], target = 3",
        "Output: -1",
        "Explanation: We cannot find a sub-array of sum = 3.",
        "Input: arr = [3,1,1,1,5,1,2,1], target = 3",
        "Output: 3",
        "Explanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.",
        ""
    ],
    "constraints": [
        "1 <= arr. length <= 1051 <= arr[i] <= 10001 <= target <= 108"
    ]
},
{
    "id": "1481",
    "title": "Least Number of Unique Integers after K Removals",
    "question": "Given an array of integers arr and an integer k.\n Find the least number of unique integers after removing exactly k elements.",
    "examples": [
        "Input: arr = [5,5,4], k = 1",
        "Output: 1",
        "Explanation: Remove the single 4, only 5 is left.",
        "Input: arr = [4,3,1,1,3,3,2], k = 3",
        "Output: 2",
        "Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left."
    ],
    "constraints": [
        "1 <= arr. length <= 10^51 <= arr[i] <= 10^90 <= k <= arr. length"
    ]
},
{
    "id": "1482",
    "title": "Minimum Number of Days to Make m Bouquets",
    "question": "Given an integer array bloomDay, an integer m and an integer k.\nWe need to make m bouquets.\n To make a bouquet, you need to use k adjacent flowers from the garden.\nThe garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.\nReturn the minimum number of days you need to wait to be able to make m bouquets from the garden.\n If it is impossible to make m bouquets return -1.",
    "examples": [
        "Input: bloomDay = [1,10,3,10,2], m = 3, k = 1",
        "Output: 3",
        "Explanation: Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden.",
        "We need 3 bouquets each should contain 1 flower.",
        "After day 1: [x, _, _, _, _]   // we can only make one bouquet.",
        "After day 2: [x, _, _, _, x]   // we can only make two bouquets.",
        "After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.",
        "Input: bloomDay = [1,10,3,10,2], m = 3, k = 2",
        "Output: -1",
        "Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.",
        "Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3",
        "Output: 12",
        "Explanation: We need 2 bouquets each should have 3 flowers.",
        "Here's the garden after the 7 and 12 days:",
        "After day 7: [x, x, x, x, _, x, x]",
        "We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.",
        "After day 12: [x, x, x, x, x, x, x]",
        "It is obvious that we can make two bouquets in different ways.",
        "Input: bloomDay = [1000000000,1000000000], m = 1, k = 1",
        "Output: 1000000000",
        "Explanation: You need to wait 1000000000 days to have a flower ready for a bouquet.",
        "Input: bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2",
        "Output: 9",
        ""
    ],
    "constraints": [
        "bloomDay. length == n1 <= n <= 10^51 <= bloomDay[i] <= 10^91 <= m <= 10^61 <= k <= n"
    ]
},
{
    "id": "1487",
    "title": "Making File Names Unique",
    "question": "Given an array of strings names of size n.\n You will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i].\nSince two files cannot have the same name, if you enter a folder name which is previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\nReturn an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.",
    "examples": [
        "Input: names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
        "Output: [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
        "Explanation: Let's see how the file system creates folder names:",
        "\"pes\" --> not assigned before, remains \"pes\"",
        "\"fifa\" --> not assigned before, remains \"fifa\"",
        "\"gta\" --> not assigned before, remains \"gta\"",
        "\"pes(2019)\" --> not assigned before, remains \"pes(2019)\"",
        "Input: names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]",
        "Output: [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]",
        "Explanation: Let's see how the file system creates folder names:",
        "\"gta\" --> not assigned before, remains \"gta\"",
        "\"gta(1)\" --> not assigned before, remains \"gta(1)\"",
        "\"gta\" --> the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\"",
        "\"avalon\" --> not assigned before, remains \"avalon\"",
        "Input: names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]",
        "Output: [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]",
        "Explanation: When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\".",
        "Input: names = [\"wano\",\"wano\",\"wano\",\"wano\"]",
        "Output: [\"wano\",\"wano(1)\",\"wano(2)\",\"wano(3)\"]",
        "Explanation: Just increase the value of k each time you create folder \"wano\".",
        "Input: names = [\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\"]",
        "Output: [\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\"]",
        "Explanation: Please note that system adds the suffix (k) to current name even it contained the same suffix before.",
        ""
    ],
    "constraints": [
        "1 <= names. length <= 5 * 10^41 <= names[i]. length <= 20names[i] consists of lower case English letters",
        " digits and/or round brackets."
    ]
},
{
    "id": "1488",
    "title": "Avoid Flood in The City",
    "question": "Your country has an infinite number of lakes.\n Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water.\n If it rains over a lake which is full of water, there will be a flood.\n Your goal is to avoid the flood in any lake.\nGiven an integer array rains where:Return an array ans where:If there are multiple valid answers return any of them.\n If it is impossible to avoid flood return an empty array.\nNotice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.\n (see example 4)",
    "examples": [
        "Input: rains = [1,2,3,4]",
        "Output: [-1,-1,-1,-1]",
        "Explanation: After the first day full lakes are [1]",
        "After the second day full lakes are [1,2]",
        "After the third day full lakes are [1,2,3]",
        "After the fourth day full lakes are [1,2,3,4]",
        "There's no day to dry any lake and there is no flood in any lake.",
        "Input: rains = [1,2,0,0,2,1]",
        "Output: [-1,-1,2,1,-1,-1]",
        "Explanation: After the first day full lakes are [1]",
        "After the second day full lakes are [1,2]",
        "After the third day, we dry lake 2. Full lakes are [1]",
        "After the fourth day, we dry lake 1. There is no full lakes.",
        "After the fifth day, full lakes are [2].",
        "After the sixth day, full lakes are [1,2].",
        "It is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.",
        "Input: rains = [1,2,0,1,2]",
        "Output: []",
        "Explanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.",
        "After that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.",
        "Input: rains = [69,0,0,0,69]",
        "Output: [-1,69,1,1,-1]",
        "Explanation: Any solution on one of the forms [-1,69,x,y,-1], [-1,x,69,y,-1] or [-1,x,y,69,-1] is acceptable where 1 <= x,y <= 10^9",
        "Input: rains = [10,20,20]",
        "Output: []",
        "Explanation: It will rain over lake 20 two consecutive days. There is no chance to dry any lake.",
        ""
    ],
    "constraints": [
        "rains[i] > 0 means there will be rains over the rains[i] lake. rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it. ans. length == rains. lengthans[i] == -1 if rains[i] > 0. ans[i] is the lake you choose to dry in the ith day if rains[i] == 0. 1 <= rains. length <= 1050 <= rains[i] <= 109"
    ]
},
{
    "id": "1492",
    "title": "The kth Factor of n",
    "question": "Given two positive integers n and k.\nA factor of an integer n is defined as an integer i where n % i == 0.\nConsider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.",
    "examples": [
        "Input: n = 12, k = 3",
        "Output: 3",
        "Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.",
        "Input: n = 7, k = 2",
        "Output: 7",
        "Explanation: Factors list is [1, 7], the 2nd factor is 7.",
        "Input: n = 4, k = 4",
        "Output: -1",
        "Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.",
        "Input: n = 1, k = 1",
        "Output: 1",
        "Explanation: Factors list is [1], the 1st factor is 1.",
        "Input: n = 1000, k = 3",
        "Output: 4",
        "Explanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].",
        ""
    ],
    "constraints": [
        "1 <= k <= n <= 1000"
    ]
},
{
    "id": "1493",
    "title": "Longest Subarray of 1's After Deleting One Element",
    "question": "Given a binary array nums, you should delete one element from it.\nReturn the size of the longest non-empty subarray containing only 1's in the resulting array.\nReturn 0 if there is no such subarray.",
    "examples": [
        "Input: nums = [1,1,0,1]",
        "Output: 3",
        "Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's. Input: nums = [0,1,1,1,0,1,1,0,1]",
        "Output: 5",
        "Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1]. Input: nums = [1,1,1]",
        "Output: 2",
        "Explanation: You must delete one element. Input: nums = [1,1,0,0,1,1,1,0,1]",
        "Output: 4",
        "Input: nums = [0,0,0]",
        "Output: 0",
        ""
    ],
    "constraints": [
        "1 <= nums. length <= 10^5nums[i] is either 0 or 1."
    ]
},
{
    "id": "1497",
    "title": "Check If Array Pairs Are Divisible by k",
    "question": "Given an array of integers arr of even length n and an integer k.\nWe want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.\nReturn True If you can find a way to do that or False otherwise.",
    "examples": [
        "Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5",
        "Output: true",
        "Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).",
        "Input: arr = [1,2,3,4,5,6], k = 7",
        "Output: true",
        "Explanation: Pairs are (1,6),(2,5) and(3,4).",
        "Input: arr = [1,2,3,4,5,6], k = 10",
        "Output: false",
        "Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.",
        "Input: arr = [-10,10], k = 2",
        "Output: true",
        "Input: arr = [-1,1,-2,2,-3,3,-4,4], k = 3",
        "Output: true",
        ""
    ],
    "constraints": [
        "arr. length == n1 <= n <= 105n is even.-109 <= arr[i] <= 1091 <= k <= 105"
    ]
}
]